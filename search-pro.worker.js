const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;$(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,u)}},$=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":314,\"nextId\":314,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-515b615c\",\"2\":\"v-515b615c#xml映射\",\"3\":\"v-515b615c#sql\",\"4\":\"v-515b615c#resultmap\",\"5\":\"v-515b615c#属性\",\"6\":\"v-515b615c#传参\",\"7\":\"v-515b615c#匿名参数-顺序传递参数\",\"8\":\"v-515b615c#使用-param注解\",\"9\":\"v-515b615c#使用map传递参数\",\"10\":\"v-515b615c#用过java-bean传递多个参数\",\"11\":\"v-515b615c#直接使用json传递参数\",\"12\":\"v-515b615c#传递集合类型参数list、set、array\",\"13\":\"v-515b615c#其他\",\"14\":\"v-515b615c#添加-主键返回\",\"15\":\"v-515b615c#动态条件查询\",\"16\":\"v-14596a62\",\"17\":\"v-14596a62#mybatis-plus\",\"18\":\"v-14596a62#basemapper\",\"19\":\"v-14596a62#curd\",\"20\":\"v-14596a62#wapper条件构造器\",\"21\":\"v-14596a62#注解说明\",\"22\":\"v-14596a62#mybatisx\",\"23\":\"v-14596a62#分页\",\"24\":\"v-14596a62#mybatis-字段-1\",\"25\":\"v-14596a62#事务\",\"26\":\"v-0b42c94d\",\"27\":\"v-0b42c94d#insert\",\"28\":\"v-0b42c94d#update\",\"29\":\"v-0b42c94d#delete\",\"30\":\"v-0b42c94d#select\",\"31\":\"v-0b42c94d#基本查询\",\"32\":\"v-0b42c94d#条件查询\",\"33\":\"v-0b42c94d#聚合函数\",\"34\":\"v-0b42c94d#分组查询\",\"35\":\"v-0b42c94d#排序查询\",\"36\":\"v-0b42c94d#分页查询\",\"37\":\"v-0b42c94d#函数\",\"38\":\"v-0b42c94d#字符串函数\",\"39\":\"v-0b42c94d#数值函数\",\"40\":\"v-0b42c94d#日期函数\",\"41\":\"v-0b42c94d#约束\",\"42\":\"v-0b42c94d#外键约束\",\"43\":\"v-0b42c94d#多表查询\",\"44\":\"v-0b42c94d#内连接\",\"45\":\"v-0b42c94d#左外连接\",\"46\":\"v-0b42c94d#右外连接\",\"47\":\"v-0b42c94d#自连接\",\"48\":\"v-0b42c94d#联合查询\",\"49\":\"v-0b42c94d#子查询\",\"50\":\"v-0b42c94d#索引\",\"51\":\"v-0b42c94d#锁\",\"52\":\"v-0b42c94d#全局锁\",\"53\":\"v-0b42c94d#表级锁\",\"54\":\"v-0b42c94d#表锁\",\"55\":\"v-0b42c94d#元数据锁\",\"56\":\"v-0b42c94d#意向锁\",\"57\":\"v-0b42c94d#行级锁\",\"58\":\"v-0b42c94d#其他\",\"59\":\"v-0b42c94d#查看curd执行频率\",\"60\":\"v-0b42c94d#慢查询日志\",\"61\":\"v-0b42c94d#show-profiles\",\"62\":\"v-00404208\",\"63\":\"v-00404208#依赖\",\"64\":\"v-00404208#步骤\",\"65\":\"v-00404208#任务传参\",\"66\":\"v-00404208#整合spring-boot\",\"67\":\"v-3325177c\",\"68\":\"v-3325177c#spring\",\"69\":\"v-3325177c#ioc\",\"70\":\"v-3325177c#bean\",\"71\":\"v-3325177c#依赖注入\",\"72\":\"v-3325177c#setter\",\"73\":\"v-3325177c#构造器\",\"74\":\"v-3325177c#集合注入\",\"75\":\"v-3325177c#注解开发\",\"76\":\"v-3325177c#aop\",\"77\":\"v-3325177c#举例\",\"78\":\"v-3325177c#切入点表达式\",\"79\":\"v-3325177c#通知类型\",\"80\":\"v-3325177c#获取通知数据\",\"81\":\"v-3325177c#springmvc\",\"82\":\"v-3325177c#创建使用\",\"83\":\"v-3325177c#请求\",\"84\":\"v-3325177c#get\",\"85\":\"v-3325177c#post\",\"86\":\"v-3325177c#post乱码处理\",\"87\":\"v-3325177c#参数类型\",\"88\":\"v-3325177c#响应\",\"89\":\"v-3325177c#rest风格\",\"90\":\"v-3325177c#注解说明\",\"91\":\"v-3325177c#其他\",\"92\":\"v-3325177c#自定义注解为属性赋值\",\"93\":\"v-3325177c#_1-创建自定义注解\",\"94\":\"v-3325177c#_2-创建拦截器-获得token-存入作用域中\",\"95\":\"v-3325177c#_3-配置拦截器\",\"96\":\"v-3325177c#_4-实现自定义注解\",\"97\":\"v-3325177c#_5-使用\",\"98\":\"v-3325177c#拦截器\",\"99\":\"v-3325177c#_1-先实现一个拦截对象\",\"100\":\"v-3325177c#_2-配置\",\"101\":\"v-3325177c#过滤器\",\"102\":\"v-3325177c#枚举\",\"103\":\"v-400e65a8\",\"104\":\"v-400e65a8#jwt-filter-interceptor\",\"105\":\"v-62533046\",\"106\":\"v-62533046#基础操作\",\"107\":\"v-62533046#cat\",\"108\":\"v-62533046#索引\",\"109\":\"v-62533046#文档\",\"110\":\"v-62533046#高级查询\",\"111\":\"v-62533046#springboot\",\"112\":\"v-62533046#索引-1\",\"113\":\"v-62533046#文档-1\",\"114\":\"v-62533046#高级查询-1\",\"115\":\"v-07e0409c\",\"116\":\"v-07e0409c#服务注册和发现\",\"117\":\"v-07e0409c#nacos注册中心\",\"118\":\"v-07e0409c#nacos安装\",\"119\":\"v-07e0409c#服务注册\",\"120\":\"v-07e0409c#服务发现\",\"121\":\"v-07e0409c#openfeign\",\"122\":\"v-07e0409c#基础使用\",\"123\":\"v-07e0409c#连接池\",\"124\":\"v-07e0409c#最佳实践-优化\",\"125\":\"v-07e0409c#日志\",\"126\":\"v-07e0409c#网关\",\"127\":\"v-07e0409c#启动\",\"128\":\"v-07e0409c#路由属性\",\"129\":\"v-07e0409c#路由断言\",\"130\":\"v-07e0409c#路由过滤器\",\"131\":\"v-07e0409c#网关登录校验\",\"132\":\"v-07e0409c#globalfilter\",\"133\":\"v-07e0409c#登录样例\",\"134\":\"v-07e0409c#网关传递信息\",\"135\":\"v-07e0409c#使用线程存储数据\",\"136\":\"v-07e0409c#openfeign传递\",\"137\":\"v-07e0409c#共享配置\",\"138\":\"v-07e0409c#共享配置-1\",\"139\":\"v-07e0409c#配置热跟新\",\"140\":\"v-07e0409c#服务保护\",\"141\":\"v-07e0409c#sentinel\",\"142\":\"v-07e0409c#请求限流\",\"143\":\"v-07e0409c#线程隔断\",\"144\":\"v-07e0409c#服务熔断\",\"145\":\"v-07e0409c#分布式事务\",\"146\":\"v-4d91c61a\",\"147\":\"v-4d91c61a#simple简单模式\",\"148\":\"v-4d91c61a#生产消息\",\"149\":\"v-4d91c61a#消费消息\",\"150\":\"v-4d91c61a#实现工具类\",\"151\":\"v-4d91c61a#任务模型\",\"152\":\"v-4d91c61a#consumer\",\"153\":\"v-4d91c61a#广播\",\"154\":\"v-4d91c61a#生产者\",\"155\":\"v-4d91c61a#消费者\",\"156\":\"v-4d91c61a#路由模型\",\"157\":\"v-4d91c61a#直连\",\"158\":\"v-4d91c61a#生产者-1\",\"159\":\"v-4d91c61a#消费者-1\",\"160\":\"v-4d91c61a#动态\",\"161\":\"v-4d91c61a#代码\",\"162\":\"v-4d91c61a#spring-boot-整合\",\"163\":\"v-4d91c61a#test\",\"164\":\"v-4d91c61a#简单\",\"165\":\"v-4d91c61a#任务\",\"166\":\"v-4d91c61a#广播-1\",\"167\":\"v-4d91c61a#静态路由\",\"168\":\"v-4d91c61a#动态路由\",\"169\":\"v-4d91c61a#延迟队列\",\"170\":\"v-4d91c61a#生产者-2\",\"171\":\"v-4d91c61a#消费者-2\",\"172\":\"v-72d40a42\",\"173\":\"v-72d40a42#安装\",\"174\":\"v-72d40a42#基本命令\",\"175\":\"v-72d40a42#五大数据类型\",\"176\":\"v-72d40a42#序列化\",\"177\":\"v-72d40a42#实现\",\"178\":\"v-72d40a42#测试\",\"179\":\"v-72d40a42#持久化\",\"180\":\"v-72d40a42#rdb\",\"181\":\"v-72d40a42#触发\",\"182\":\"v-72d40a42#aof\",\"183\":\"v-72d40a42#主从\",\"184\":\"v-72d40a42#开启\",\"185\":\"v-72d40a42#哨兵\",\"186\":\"v-2bcb26fa\",\"187\":\"v-2bcb26fa#一、git安装后-指定名称和邮箱\",\"188\":\"v-2bcb26fa#二、分支管理\",\"189\":\"v-2bcb26fa#二、创建版本库\",\"190\":\"v-2bcb26fa#三、把文件添加add和提交commit到版本库\",\"191\":\"v-2bcb26fa#四、版本控制\",\"192\":\"v-2bcb26fa#五、删除文件-缓存\",\"193\":\"v-2bcb26fa#六、远程仓库\",\"194\":\"v-9e67bfbe\",\"195\":\"v-9e67bfbe#安装\",\"196\":\"v-9e67bfbe#阿里镜像\",\"197\":\"v-9e67bfbe#简单命令\",\"198\":\"v-9e67bfbe#依赖管理\",\"199\":\"v-9e67bfbe#依赖传递\",\"200\":\"v-9e67bfbe#可选依赖\",\"201\":\"v-9e67bfbe#排除依赖\",\"202\":\"v-9e67bfbe#依赖范围\",\"203\":\"v-9e67bfbe#分模块\",\"204\":\"v-9e67bfbe#pom\",\"205\":\"v-9e67bfbe#说明\",\"206\":\"v-9e67bfbe#多模块打包\",\"207\":\"v-9e67bfbe#正确流程\",\"208\":\"v-e7d29956\",\"209\":\"v-e7d29956#java-上传-aliyun-oss\",\"210\":\"v-e7d29956#使用ram访问-更安全\",\"211\":\"v-e7d29956#上传图片\",\"212\":\"v-e7d29956#目录列表\",\"213\":\"v-e7d29956#删除图片\",\"214\":\"v-e7d29956#自定义-starter\",\"215\":\"v-e7d29956#介绍\",\"216\":\"v-e7d29956#准备\",\"217\":\"v-e7d29956#取名\",\"218\":\"v-e7d29956#配置类\",\"219\":\"v-e7d29956#导入方式\",\"220\":\"v-e7d29956#注解导入\",\"221\":\"v-e7d29956#注解参数\",\"222\":\"v-e7d29956#spring-factories导入\",\"223\":\"v-e7d29956#配置文件\",\"224\":\"v-e7d29956#自动提示\",\"225\":\"v-e7d29956#配置代理\",\"226\":\"v-e7d29956#配置依赖\",\"227\":\"v-e7d29956#条件装配\",\"228\":\"v-e7d29956#其他常用的条件注解\",\"229\":\"v-e7d29956#配置顺序\",\"230\":\"v-870b7946\",\"231\":\"v-870b7946#静态资源访问\",\"232\":\"v-870b7946#文件上传\",\"233\":\"v-870b7946#热加载-hot-swap\",\"234\":\"v-870b7946#websocket-和-sockjs\",\"235\":\"v-870b7946#websocket的优势\",\"236\":\"v-870b7946#websocket的缺点\",\"237\":\"v-870b7946#sockjs的优势\",\"238\":\"v-870b7946#sockjs的缺点\",\"239\":\"v-870b7946#发送邮件\",\"240\":\"v-870b7946#定时任务\",\"241\":\"v-870b7946#scheduled-cron-0-0-12-使用cron表达式指定执行时间。\",\"242\":\"v-870b7946#数据校验\",\"243\":\"v-870b7946#分布式锁\",\"244\":\"v-870b7946#redis分布式锁和redisson分布式锁都是用于实现分布式系统中的分布式锁-但它们之间有以下区别\",\"245\":\"v-870b7946#redis分布式锁\",\"246\":\"v-870b7946#redisson\",\"247\":\"v-870b7946#swagger\",\"248\":\"v-870b7946#搭建\",\"249\":\"v-083f0e38\",\"250\":\"v-083f0e38#查找命令\",\"251\":\"v-083f0e38#find\",\"252\":\"v-083f0e38#grep\",\"253\":\"v-083f0e38#docker\",\"254\":\"v-083f0e38#数据卷\",\"255\":\"v-083f0e38#基本命令\",\"256\":\"v-083f0e38#示例\",\"257\":\"v-083f0e38#自定义镜像\",\"258\":\"v-083f0e38#dockercompose\",\"259\":\"v-083f0e38#基操\",\"260\":\"v-083f0e38#镜像-images\",\"261\":\"v-083f0e38#容器-container\",\"262\":\"v-083f0e38#例子\",\"263\":\"v-083f0e38#mysql\",\"264\":\"v-083f0e38#导出完整数据库\",\"265\":\"v-083f0e38#导入数据库\",\"266\":\"v-083f0e38#vim\",\"267\":\"v-083f0e38#ssh-免密登录\",\"268\":\"v-6ef3d3aa\",\"269\":\"v-4f662cc3\",\"270\":\"v-4f662cc3#api-faq-contributing-troubleshooting\",\"271\":\"v-4f662cc3#能做什么\",\"272\":\"v-4f662cc3#开始使用\",\"273\":\"v-4f662cc3#安装\",\"274\":\"v-4f662cc3#puppeteer-core\",\"275\":\"v-4f662cc3#使用\",\"276\":\"v-4f662cc3#默认设置\",\"277\":\"v-4f662cc3#模板\",\"278\":\"v-4f662cc3#定时\",\"279\":\"v-4f662cc3#github-action\",\"280\":\"v-4f662cc3#问题\",\"281\":\"v-4f662cc3#puppeteer没有自动安装chromium的解决办法\",\"282\":\"v-75d4898a\",\"283\":\"v-35ca4be3\",\"284\":\"v-35ca4be3#取值范围\",\"285\":\"v-35ca4be3#连接符\",\"286\":\"v-35ca4be3#示例\",\"287\":\"v-417ecfb0\",\"288\":\"v-a77cb9cc\",\"289\":\"v-a77cb9cc#插件\",\"290\":\"v-a77cb9cc#java\",\"291\":\"v-a77cb9cc#元字符\",\"292\":\"v-a77cb9cc#简写字符集\",\"293\":\"v-a77cb9cc#标志\",\"294\":\"v-a77cb9cc#忽略大小写\",\"295\":\"v-a77cb9cc#全局搜索\",\"296\":\"v-ce8b95bc\",\"297\":\"v-ce8b95bc#依赖\",\"298\":\"v-ce8b95bc#配置中文字体\",\"299\":\"v-ce8b95bc#初始化\",\"300\":\"v-ce8b95bc#paragraph\",\"301\":\"v-ce8b95bc#chunk\",\"302\":\"v-ce8b95bc#table\",\"303\":\"v-ce8b95bc#image\",\"304\":\"v-ce8b95bc#rectangle\",\"305\":\"v-83ce75c6\",\"306\":\"v-83ce75c6#使用jaxp\",\"307\":\"v-35f9e756\",\"308\":\"v-145ac574\",\"309\":\"v-0183f014\",\"310\":\"v-2b65e03e\",\"311\":\"v-5e797cda\",\"312\":\"v-4def5fb0\",\"313\":\"v-b021ee0a\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,22],\"2\":[1,14],\"3\":[1,60],\"4\":[1,27],\"5\":[1],\"6\":[1],\"7\":[2,49],\"8\":[2,39],\"9\":[1,43],\"10\":[2,41],\"11\":[1,38],\"12\":[3,43],\"13\":[1],\"14\":[2,23],\"15\":[1,37],\"16\":[2],\"17\":[2,30],\"18\":[1,53],\"19\":[1,80],\"20\":[1,1],\"21\":[1,24],\"22\":[1,2],\"23\":[1,43],\"24\":[1,26],\"25\":[1,75],\"26\":[1,4],\"27\":[1,12],\"28\":[1,9],\"29\":[1,6],\"30\":[1,26],\"31\":[1,11],\"32\":[1,30],\"33\":[1,13],\"34\":[1,15],\"35\":[1,18],\"36\":[1,15],\"37\":[1],\"38\":[1,20],\"39\":[1,22],\"40\":[1,21],\"41\":[1,12],\"42\":[1,33],\"43\":[1,10],\"44\":[1,16],\"45\":[1,16],\"46\":[1,2],\"47\":[1,13],\"48\":[1,22],\"49\":[1,6],\"50\":[1,42],\"51\":[1],\"52\":[1,40],\"53\":[1],\"54\":[1,12],\"55\":[1,1],\"56\":[1],\"57\":[1,6],\"58\":[1],\"59\":[1,6],\"60\":[1,36],\"61\":[2,49],\"62\":[1,22],\"63\":[1,13],\"64\":[1,57],\"65\":[1,62],\"66\":[2,1],\"67\":[2],\"68\":[1,5],\"69\":[1,66],\"70\":[1,23],\"71\":[1],\"72\":[1,25],\"73\":[1,39],\"74\":[1,32],\"75\":[1,48],\"76\":[1,2],\"77\":[1,25],\"78\":[1,8],\"79\":[1,34],\"80\":[1,38],\"81\":[1,5],\"82\":[1,78],\"83\":[1],\"84\":[1,14],\"85\":[1,15],\"86\":[1,1],\"87\":[1,37],\"88\":[1,15],\"89\":[1,29],\"90\":[1,25],\"91\":[1],\"92\":[1,5],\"93\":[2,11],\"94\":[4,32],\"95\":[2,26],\"96\":[2,32],\"97\":[2,20],\"98\":[1,6],\"99\":[2,36],\"100\":[2,26],\"101\":[1],\"102\":[1],\"103\":[1],\"104\":[3],\"105\":[1,65],\"106\":[1],\"107\":[2,13],\"108\":[1,8],\"109\":[1,25],\"110\":[1,78],\"111\":[1,52],\"112\":[1,12],\"113\":[1,25],\"114\":[1,34],\"115\":[2,1],\"116\":[1],\"117\":[1],\"118\":[1,41],\"119\":[1,30],\"120\":[1,72],\"121\":[1],\"122\":[1,55],\"123\":[1,25],\"124\":[3,2],\"125\":[1],\"126\":[1,3],\"127\":[1,48],\"128\":[1],\"129\":[1,42],\"130\":[1,1],\"131\":[1],\"132\":[1,60],\"133\":[1,110],\"134\":[1,37],\"135\":[1,27],\"136\":[1,48],\"137\":[1,6],\"138\":[1,101],\"139\":[1,47],\"140\":[1],\"141\":[1,37],\"142\":[1,1],\"143\":[1,8],\"144\":[1,4],\"145\":[1],\"146\":[1,10],\"147\":[1,21],\"148\":[1,65],\"149\":[1,78],\"150\":[1,50],\"151\":[1,9],\"152\":[1,55],\"153\":[1,10],\"154\":[1,33],\"155\":[1,49],\"156\":[1],\"157\":[1,18],\"158\":[1,30],\"159\":[1,54],\"160\":[1,20],\"161\":[1,69],\"162\":[3,25],\"163\":[1,34],\"164\":[1,24],\"165\":[1,22],\"166\":[1,26],\"167\":[1,29],\"168\":[1,28],\"169\":[1,46],\"170\":[1,30],\"171\":[1,19],\"172\":[1,1],\"173\":[1,9],\"174\":[1,12],\"175\":[1,163],\"176\":[1,15],\"177\":[1,61],\"178\":[1,20],\"179\":[1],\"180\":[1,12],\"181\":[1,33],\"182\":[1,52],\"183\":[1,7],\"184\":[1,19],\"185\":[1,81],\"186\":[1],\"187\":[3,13],\"188\":[2,25],\"189\":[2,17],\"190\":[2,16],\"191\":[2,32],\"192\":[3,19],\"193\":[2,39],\"194\":[1],\"195\":[1,1],\"196\":[1,20],\"197\":[1,12],\"198\":[1],\"199\":[1,7],\"200\":[1,18],\"201\":[1,38],\"202\":[1,10],\"203\":[1],\"204\":[1],\"205\":[1,10],\"206\":[1],\"207\":[1,56],\"208\":[2],\"209\":[4,1],\"210\":[2,21],\"211\":[1,45],\"212\":[1,75],\"213\":[1,63],\"214\":[4],\"215\":[1,4],\"216\":[1,13],\"217\":[1,29],\"218\":[1,25],\"219\":[1,22],\"220\":[1,28],\"221\":[1,82],\"222\":[2,31],\"223\":[1,59],\"224\":[1,25],\"225\":[1,29],\"226\":[1,24],\"227\":[1,41],\"228\":[1,11],\"229\":[1,22],\"230\":[1],\"231\":[1,23],\"232\":[1,135],\"233\":[4,14],\"234\":[3,23],\"235\":[2,12],\"236\":[2,10],\"237\":[2,10],\"238\":[2,9],\"239\":[1,138],\"240\":[1,28],\"241\":[7,50],\"242\":[1,144],\"243\":[1],\"244\":[3,18],\"245\":[1,85],\"246\":[1,64],\"247\":[1],\"248\":[1,47],\"249\":[1],\"250\":[1],\"251\":[1,16],\"252\":[1,15],\"253\":[1],\"254\":[1,21],\"255\":[1,24],\"256\":[1,1],\"257\":[1,17],\"258\":[1,56],\"259\":[1],\"260\":[3,31],\"261\":[3,76],\"262\":[1,15],\"263\":[1],\"264\":[1,24],\"265\":[1,29],\"266\":[1,150],\"267\":[2,20],\"268\":[1,1],\"269\":[1],\"270\":[5,19],\"271\":[2,34],\"272\":[1],\"273\":[1,23],\"274\":[2,23],\"275\":[1,96],\"276\":[1,54],\"277\":[1,64],\"278\":[1,9],\"279\":[2,77],\"280\":[1],\"281\":[1,28],\"282\":[1,87],\"283\":[1,21],\"284\":[1,37],\"285\":[1,39],\"286\":[1,31],\"287\":[1,70],\"288\":[1],\"289\":[1],\"290\":[1],\"291\":[1],\"292\":[1,41],\"293\":[1],\"294\":[1,22],\"295\":[1,11],\"296\":[1,13],\"297\":[1,24],\"298\":[1,53],\"299\":[1,47],\"300\":[1,16],\"301\":[1,58],\"302\":[1,61],\"303\":[1,19],\"304\":[1,23],\"305\":[1],\"306\":[1,104],\"307\":[2],\"308\":[1],\"309\":[1],\"310\":[1],\"311\":[1],\"312\":[1],\"313\":[1]},\"averageFieldLength\":[1.2420382165605097,31.506361427245473],\"storedFields\":{\"0\":{\"h\":\"\"},\"1\":{\"h\":\"Mybatis\",\"t\":[\"官网学习地址\",\"依赖\",\"<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.5</version> </dependency> \"]},\"2\":{\"h\":\"XML映射\",\"t\":[\"resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。\",\"sql – 可被其它语句引用的可重用语句块。\",\"insert – 映射插入语句。\",\"update – 映射更新语句。\",\"delete – 映射删除语句。\",\"select – 映射查询语句。\"]},\"3\":{\"h\":\"sql\",\"t\":[\"这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。 参数可以静态地（在加载的时候）确定下来，并且可以在不同的 include 元素中定义不同的参数值。比如：\",\"<sql id=\\\"userColumns\\\"> ${alias}.id,${alias}.username,${alias}.password </sql> \",\"这个 SQL 片段可以在其它语句中使用，例如：\",\"<select id=\\\"selectUsers\\\" resultType=\\\"map\\\"> select <include refid=\\\"userColumns\\\"><property name=\\\"alias\\\" value=\\\"t1\\\"/></include>, <include refid=\\\"userColumns\\\"><property name=\\\"alias\\\" value=\\\"t2\\\"/></include> from some_table t1 cross join some_table t2 </select> \",\"也可以在 include 元素的 refid 属性或内部语句中使用属性值，例如：\",\"<sql id=\\\"sometable\\\"> ${prefix}Table </sql> <sql id=\\\"someinclude\\\"> from <include refid=\\\"${include_target}\\\"/> </sql> <select id=\\\"select\\\" resultType=\\\"map\\\"> select field1, field2, field3 <include refid=\\\"someinclude\\\"> <property name=\\\"prefix\\\" value=\\\"Some\\\"/> <property name=\\\"include_target\\\" value=\\\"sometable\\\"/> </include> </select> \"]},\"4\":{\"h\":\"resultMap\",\"t\":[\" <resultMap id=\\\"BaseResultMap\\\" type=\\\"com.example.mybatis.pojo.Article\\\"> <id property=\\\"id\\\" column=\\\"id\\\" jdbcType=\\\"INTEGER\\\"/> <result property=\\\"title\\\" column=\\\"title\\\" jdbcType=\\\"VARCHAR\\\"/> <result property=\\\"content\\\" column=\\\"content\\\" jdbcType=\\\"VARCHAR\\\"/> <result property=\\\"auther\\\" column=\\\"auther\\\" jdbcType=\\\"VARCHAR\\\"/> <result property=\\\"time\\\" column=\\\"time\\\" jdbcType=\\\"TIMESTAMP\\\"/> </resultMap> \",\"xml配置详解\"]},\"5\":{\"h\":\"属性\"},\"6\":{\"h\":\"传参\"},\"7\":{\"h\":\"匿名参数 顺序传递参数\",\"t\":[\"@ApiOperation(value = \\\"多个参数查询_匿名顺序传参\\\") @GetMapping(\\\"findByParams\\\") public ResultMsg findByParams(Short gender,String age) { List result= employeeMapper.selectByGenderAndAge(gender,age); return ResultMsg.getMsg(result); } \",\"mapper\",\"List<Employee> selectByGenderAndAge(Short gender,String age ); \",\"xml\",\"select id=\\\"selectByGenderAndAge\\\" resultMap=\\\"BaseResultMap\\\" > select * from employee where gender = #{gender} and age = #{age} </select> \",\"警告\",\"注意这里按参数名去引用的话会报如下错误，mybatis错误提示很细致，这里明确给我们提示，匿名参数只能使用\",\"arg1, arg0, param1, param2 类似的形式\",\"这种传参方式的缺点是不够灵活，必须严格按照参数顺序来引用\",\"所以正确的引用方式如下：\",\" <select id=\\\"selectByGenderAndAge\\\" resultMap=\\\"BaseResultMap\\\" > select * from employee where gender = #{param1} and age = #{param2} </select> \"]},\"8\":{\"h\":\"使用@Param注解\",\"t\":[\"controller\",\"@ApiOperation(value = \\\"多个参数查询_注解方式传参\\\") @GetMapping(\\\"findByParams2\\\") public ResultMsg findByParams2(Short gender,String age) { List result= employeeMapper.selectByGenderAndAge2(gender,age); return ResultMsg.getMsg(result); } \",\"mapper\",\"List<Employee> selectByGenderAndAge( @Param(\\\"gender\\\") Short gender,@Param(\\\"age\\\") String age ); \",\"xml\",\"<select id=\\\"selectByGenderAndAge\\\" resultMap=\\\"BaseResultMap\\\" > select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"9\":{\"h\":\"使用Map传递参数\",\"t\":[\"controller\",\"@ApiOperation(value = \\\"多个参数查询\\\") @GetMapping(\\\"findByMapParams\\\") public ResultMsg findByMapParams(Short gender,String age) { Map params = new HashMap<>(); params.put(\\\"gender\\\",gender); params.put(\\\"age\\\",age); List result= employeeMapper.selectByMapParams(params); return ResultMsg.getMsg(result); } \",\"mapper\",\"List<Employee> selectByMapParams(Map params); \",\"xml\",\"<select id=\\\"selectByMapParams\\\" resultMap=\\\"BaseResultMap\\\" parameterType=\\\"map\\\"> select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"10\":{\"h\":\"用过java bean传递多个参数\",\"t\":[\"controller\",\"@ApiOperation(value = \\\"多个参数查询_通过Java Bean传递多个参数\\\") @PostMapping(\\\"findByBeans\\\") public ResultMsg findByBeans(@RequestBody Employee employee) { List result= employeeMapper.selectByBeans(employee); return ResultMsg.getMsg(result); } \",\"List <Employee> selectByBeans(Employee employee); \",\"<select id=\\\"selectByBeans\\\" resultMap=\\\"BaseResultMap\\\" parameterType=\\\"com.wg.demo.po.Employee\\\"> select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"11\":{\"h\":\"直接使用JSON传递参数\",\"t\":[\"@ApiOperation(value = \\\"多个参数查询_通过JSON传递多个参数\\\") @PostMapping(\\\"findByJSONObject\\\") public ResultMsg findByJSONObject(@RequestBody JSONObject params) { List result= employeeMapper.findByJSONObject(params); return ResultMsg.getMsg(result); } \",\"List <Employee> findByJSONObject(JSONObject params); \",\"<select id=\\\"findByJSONObject\\\" resultMap=\\\"BaseResultMap\\\" parameterType=\\\"com.alibaba.fastjson.JSONObject\\\"> select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"12\":{\"h\":\"传递集合类型参数List、Set、Array\",\"t\":[\"@ApiOperation(value = \\\"多个参数查询_通过List、Set、Array传递多个参数\\\") @PostMapping(\\\"findByList\\\") public ResultMsg findByList(@RequestBody List<String> list) { List result= employeeMapper.findByList (list); return ResultMsg.getMsg(result); } \",\"List <Employee> findByList(List list); \",\" <select id=\\\"findByList\\\" resultMap=\\\"BaseResultMap\\\" > SELECT * from employee where age in <foreach collection=\\\"list\\\" open=\\\"(\\\" separator=\\\",\\\" close=\\\")\\\" item=\\\"age\\\"> #{age} </foreach> </select> \",\"来源\"]},\"13\":{\"h\":\"其他\"},\"14\":{\"h\":\"添加-主键返回\",\"t\":[\" mapper.insert(test1); System.out.println(test1.getId()); 可以把id拿出来 \",\" <insert id=\\\"insert\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"> insert into test1 (id, name, views, up) values ( #{id}, #{name}, #{views}, #{up} ); </insert> \"]},\"15\":{\"h\":\"动态条件查询\",\"t\":[\"if\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <if test=\\\"title != null\\\"> AND title like #{title} </if> <if test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </if> </select> \",\"choose\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <choose> <when test=\\\"title != null\\\"> AND title like #{title} </when> <when test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </when> <otherwise> AND featured = 1 </otherwise> </choose> </select> \",\"trim\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE <if test=\\\"state != null\\\"> state = #{state} </if> <if test=\\\"title != null\\\"> AND title like #{title} </if> <if test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </if> </select> \"]},\"16\":{\"h\":\"Mybatis Plus\"},\"17\":{\"h\":\"Mybatis Plus\",\"t\":[\"MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。\",\"【尚硅谷】2022版MyBatisPlus教程（一套玩转mybatis-plus）_哔哩哔哩_bilibili\",\"无侵入、损耗小、强大的CRUD操作\",\"支持Lambda形式调用，支持多种数据库\",\"支持主键自动生成，支持ActiveRecord模式\",\"支持自定义全局通用操作，支持关键词自动转义\",\"内置代码生成器、内置分页插件、内置性能分析插件\",\"内置全局拦截插件、内置SQL注入剥离器\"]},\"18\":{\"h\":\"BaseMapper\",\"t\":[\"public interface BaseMapper<T> extends Mapper<T> { int insert(T entity); int deleteById(Serializable id); int deleteByMap(@Param(\\\"cm\\\") Map<String, Object> columnMap); int delete(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); int deleteBatchIds(@Param(\\\"coll\\\") Collection<? extends Serializable> idList); int updateById(@Param(\\\"et\\\") T entity); int update(@Param(\\\"et\\\") T entity, @Param(\\\"ew\\\") Wrapper<T> updateWrapper); T selectById(Serializable id); List<T> selectBatchIds(@Param(\\\"coll\\\") Collection<? extends Serializable> idList); List<T> selectByMap(@Param(\\\"cm\\\") Map<String, Object> columnMap); T selectOne(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); Integer selectCount(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); List<T> selectList(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); List<Map<String, Object>> selectMaps(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); List<Object> selectObjs(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); <E extends IPage<T>> E selectPage(E page, @Param(\\\"ew\\\") Wrapper<T> queryWrapper); <E extends IPage<Map<String, Object>>> E selectMapsPage(E page, @Param(\\\"ew\\\") Wrapper<T> queryWrapper); } \"]},\"19\":{\"h\":\"CURD\",\"t\":[\"使用mapper继承BaseMapper<T>即可开箱即用\",\" @Test void TestInsert(){ user user = new user(); user.setId(880); user.setAccount(\\\"天天学习\\\"); user.setPassword(\\\"hhh\\\"); int res = UserMapper.insert(user); System.out.println(res); } @Test void TestDelete(){ // 一： // int res = UserMapper.deleteById(1); // System.out.println(res); // 二: // delete from user where account = ? and password = ? // HashMap<String, Object> map = new HashMap<>(); // map.put(\\\"account\\\",\\\"jkl\\\"); // map.put(\\\"password\\\",\\\"123root\\\"); // UserMapper.deleteByMap(map); // 三: // 删除多个 // DELETE FROM user WHERE id IN ( ? , ? ) List<Integer> list = Arrays.asList(80,880); UserMapper.deleteBatchIds(list); } @Test void TestUpdata(){ user user = new user(); user.setAccount(\\\"改了\\\"); UpdateWrapper<user> q = new UpdateWrapper<>(); q.eq(\\\"password\\\",\\\"666\\\"); // 不屑password 不被修改 UserMapper.update(user,q); } @Test void TestSelect(){ // 通过id查询信息 // user user = UserMapper.selectById(2); // System.out.println(user.toString().isEmpty()); // 通过多个id进行查询 // List<Integer> list = Arrays.asList(3,2); // List<user> users = UserMapper.selectBatchIds(list); // users.forEach(System.out::println); // 通过map查询 // HashMap<String, Object> map = new HashMap<>(); // map.put(\\\"account\\\",666); // List<user> users = UserMapper.selectByMap(map); // users.forEach(System.out::println); // 所有的数据 // List<user> users = UserMapper.selectList(null); // users.forEach(System.out::println); } \"]},\"20\":{\"h\":\"wapper条件构造器\",\"t\":[\"Description\"]},\"21\":{\"h\":\"注解说明\",\"t\":[\"@TableName 表名\",\"@TableId 主键\",\"---@TableId(type= IdType.AUTO) 自增\",\"---@TableId(type= IdType.NONE) 雪花算法 赋值\",\"@TableField 把表中字段和实体类对应\",\"---@TableField(value=\\\"name\\\") 映射\",\"---@TableField(exist=false) 不是数据库中字段\",\"---@TableField(select = false) 不会参与查询 返回值为null\"]},\"22\":{\"h\":\"MybatisX\",\"t\":[\"MybatisX\",\"Description\"]},\"23\":{\"h\":\"分页\",\"t\":[\"config\",\"@Configuration public class MybatisConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor(){ MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } \",\"使用\",\" @Override public JSONObject userList(Integer page) { IPage<Record> recordIPage = new Page<>(page,10); QueryWrapper<Record> queryWrapper = new QueryWrapper<>(); queryWrapper.orderByAsc(\\\"id\\\"); List<Record> list = recordMapper.selectPage(recordIPage,queryWrapper).getRecords(); JSONObject resp = new JSONObject(); resp.put(\\\"records\\\",list); resp.put(\\\"count\\\",recordMapper.selectCount(null)); return resp; } \"]},\"24\":{\"h\":\"Mybatis+字段+1\",\"t\":[\" UpdateWrapper<article> updateWrapper = new UpdateWrapper<>(); updateWrapper.setSql(\\\"up = up + 1\\\").eq(\\\"id\\\",21); System.out.println(articleMapper.update(null, updateWrapper)); \",\" LambdaUpdateWrapper<article> q = new LambdaUpdateWrapper<>(); q.setSql(\\\"up = up + 1\\\"); q.setSql(\\\"views = views + 1\\\"); q.eq(article::getId,22); System.out.println(articleMapper.update(null, q)); \"]},\"25\":{\"h\":\"事务\",\"t\":[\"测试时加入@Transactional 不会改变数据，不会污染数据，不管如何都会回滚\",\"事务主要的作用体现在以下几个方面：\",\"数据一致性：事务可以确保多个操作在一个逻辑单元中执行，要么全部执行成功，要么全部失败回滚。在多个操作之间存在依赖关系的情况下，事务可以确保数据的一致性，防止数据冲突和数据丢失等问题。\",\"错误回滚：事务可以在发生错误或异常时回滚到之前的状态，保证数据的完整性。如果在多个操作中发生了错误，事务会自动将所有操作撤消，将数据回滚至操作之前的状态。\",\"并发控制：事务可以解决数据库并发访问的问题。当多个用户同时对同一数据进行操作时，事务可以通过锁机制来控制这些操作的执行顺序，以避免并发访问引起的数据冲突和错误。\",\"提高性能：事务可以优化数据库操作的性能。如果在多个操作中涉及到较多的I/O操作或网络传输，将所有操作合并到一个事务中可以减少I/O操作和网络传输，提高数据库操作的性能。\",\"因此，事务对于确保数据的正确性、完整性和一致性非常重要，是保证数据库安全和稳定运行的基本手段。\",\"默认形况下、只有出现RuntimeException才回滚异常。rollbackFor属性用于控制出现何种异常类型，回滚事务。\",\"@Transactional(rollbackFor = Exception.class)任何异常都回滚\",\"@Service public class UserServiceImpl implements UserService { @Autowired private UserMapper userMapper; @Override @Transactional(rollbackFor = Exception.class) public boolean addUser(User user) { try { // 添加用户 userMapper.insert(user); // 手动抛出异常，模拟事务回滚 throw new RuntimeException(\\\"添加用户时出现异常\\\"); } catch (Exception e) { // 捕获异常，并打印异常信息 e.printStackTrace(); // 抛出运行时异常，使事务回滚 throw new RuntimeException(\\\"添加用户时出现异常\\\"); } } } \"]},\"26\":{\"h\":\"Mysql\",\"t\":[\"哔哩哔哩_bilibili\",\"utf8mb4: 编码格式\"]},\"27\":{\"h\":\"insert\",\"t\":[\"给指定字段添加值\",\"insert into 表名 (字段1，字段2..) values(值1，值2..); \",\"给指定字段批量添加值\",\"insert into 表名 (字段1，字段2..) values(值1，值2..),(值1，值2..),(值1，值2..); insert into 表名 values(值1，值2..),(值1，值2..),(值1，值2..); \",\"给全部字段添加值\",\"insert into 表名 values(值1，值2..); \"]},\"28\":{\"h\":\"update\",\"t\":[\"update 表名 set 字段1=值1，字段2=值2... [where 条件]; \",\"不写条件 更新所有\"]},\"29\":{\"h\":\"delete\",\"t\":[\"delete from 表名 [where 条件]; \",\"delete from 表名 删除所有数据\"]},\"30\":{\"h\":\"select\",\"t\":[\"select [字段列表] from [表名列表] where [条件列表] group by [分组字段列表] having [分组后条件列表] order by [排序字段列表] limit [分页] \",\"条件查询(where)、聚合查询(count,max,min,avg,sum)、分组查询(group by)、排序查询(order by)、分页查询(limit)\"]},\"31\":{\"h\":\"基本查询\",\"t\":[\"起别名\",\"select name as '姓名' from 表名; 或者 select name '姓名' from 表名; \",\"不重复\",\"select distinct name from 表名; \"]},\"32\":{\"h\":\"条件查询\",\"t\":[\"比较运算符\",\"功能\",\">\",\">=\",\"<\",\"<=\",\"=\",\"<>或!=\",\"不等于\",\"between...and...\",\"某个范围之内 []\",\"in(..)\",\"列表中的值，多选一\",\"like 占位符\",\"模糊匹配（_单个字符、%任意个字符）\",\"is null\",\"为空\",\"and 或 &&\",\"并且\",\"or或 ||\",\"或者\",\"not 或 ！\",\"非\"]},\"33\":{\"h\":\"聚合函数\",\"t\":[\"null 不参与计算\",\"sum\",\"select sum(*) from 表名; \",\"avg\",\"select agv(age) from 表名; \",\"max | min\",\"select max(age) from 表名; select min(age) from 表名; \"]},\"34\":{\"h\":\"分组查询\",\"t\":[\"分组后的列只有待分组的字段和聚合函数\",\"study\",\"select sex,count(sex) from s group by sex having avg(age) > 50; \"]},\"35\":{\"h\":\"排序查询\",\"t\":[\"ASC 升序（默认）\",\"DESC 降序\",\"多字段排序，先按第一个排序，然后相同的按照第二个方式排序\",\"select * from s order by age asc , id desc; \"]},\"36\":{\"h\":\"分页查询\",\"t\":[\"select * from 表名 limit 起始索引，查询记录数 \",\"起始索引从0开始， 起始索引 = （查询页码-1）* 每页记录数\",\"select * from s limit 0,10; select * from s limit 10,10; \"]},\"37\":{\"h\":\"函数\"},\"38\":{\"h\":\"字符串函数\",\"t\":[\"-- concat select concat(\\\"hello\\\",\\\"world\\\"); -- lower select lower(\\\"HELLO\\\"); -- upper select upper(\\\"hello\\\"); -- trim 去除首尾空格 -- substring 截取 update 表名 set name = upper(name) where id = 51; \"]},\"39\":{\"h\":\"数值函数\",\"t\":[\"-- ceil 向上取整 -- floor 向下取整 -- mod(x,y) 返回x/y的模 -- rand() 返回0-1的随机小数 -- round(x,y) 求参数x的四舍五入的值 保留y位小数 select round(5.456871865468,3); --> 5.457 \"]},\"40\":{\"h\":\"日期函数\",\"t\":[\"-- curdate() 返回当前日期 -- curtime() 返回当前时间 -- now() 返回当前日期和时间 -- year(date) 获得指定year的年 -- month(date) -- day(date) -- date_add() 返回一个日期加上某个时间后的日期 select date_add(now(),interval 110 day); select date_add(now(),interval 110 year); -- datediff(date1,date2) 时间间隔 \"]},\"41\":{\"h\":\"约束\",\"t\":[\"default: 默认约束\",\"not null: 非空约束\",\"unique: 唯一约束\",\"primary key: 主键约束\",\"foreign key: 外键约束\"]},\"42\":{\"h\":\"外键约束\",\"t\":[\"命令\",\"b为父表 s为子表 s表的字段(b_id)外键到b表的（id） alter table s add constraint fk_s_b_id foreign key (b_id) references b(id); \",\"删除/更新行为 \",\"RESTRICT：父表数据被删除/更新，会阻止删除/更新。默认就是这一项。\",\"NO ACTION：在MySQL中，同RESTRICT。\",\"CASCADE：级联删除/更新。\",\"SET NULL：父表数据被删除/更新，子表数据会设置为NULL。\"]},\"43\":{\"h\":\"多表查询\",\"t\":[\"笛卡尔积：两个表的所有组合 s(5个字段)，b(3个字段) s X b = 15\",\"可以使用两个表之间的联系去除无用数据\"]},\"44\":{\"h\":\"内连接\",\"t\":[\"相当与查询A,B交集部分数据\",\"select s.name,b.name from s,b where s.b_id = b.id; 隐式内连接 select s.name,b.name from s inner join b on s.b_id = b.id; 显式内连接 \"]},\"45\":{\"h\":\"左外连接\",\"t\":[\"查询左表全部数据，以及两张表交集部分\",\"select s.*,b.name from s left outer join b on s.b_id = b.id; select s.*,b.name from s left join b on s.b_id = b.id; s表的全部 以及b表的name \"]},\"46\":{\"h\":\"右外连接\",\"t\":[\"查询右表。。。。\"]},\"47\":{\"h\":\"自连接\",\"t\":[\"当前表与自身的连接查询，子链接必须使用表别名\",\"select 字段列表 from 表A 别名a join 表B 别名b on 条件 ...\"]},\"48\":{\"h\":\"联合查询\",\"t\":[\"比如要求：将年龄低于50和性别为’男‘的人 全部查出来 就要用到联合查询了\",\"列数必须保持一致，字段类型也一致。\",\"select * from s where age < 50 union all select * from s where sex = '男' ; 不去重 select * from s where age < 50 union select * from s where sex = '男' ; 去重 \"]},\"49\":{\"h\":\"子查询\",\"t\":[\"43. 基础-多表查询-子查询介绍_哔哩哔哩_bilibili\"]},\"50\":{\"h\":\"索引\",\"t\":[\"MySQL的索引类型包括FULLTEXT、NORMAL（或称为BTREE）、SPATIAL和UNIQUE。它们具有不同的特点和适用场景：\",\"FULLTEXT索引：用于全文搜索。它适用于对文本内容进行关键词搜索的场景，比如文章标题或描述的搜索。FULLTEXT索引使用特定的搜索算法来提高搜索性能，并支持关键词匹配和排名。它只能应用于MyISAM和InnoDB存储引擎。\",\"NORMAL索引（BTREE索引）：是最常见的索引类型，也是默认的索引类型。它使用B树数据结构来加速对数据的查找。NORMAL索引适用于一般的数据查询，可以加速等值查询、范围查询和排序操作。它可以应用于大多数的数据类型和存储引擎。\",\"SPATIAL索引：用于地理数据的空间索引。它支持对空间数据进行高效的地理位置查询，如点、线、多边形等。SPATIAL索引适用于处理地理信息系统（GIS）相关的数据。它只能应用于支持空间数据类型的存储引擎，如MyISAM和InnoDB。\",\"UNIQUE索引：用于强制保证某列或某组列的唯一性。它确保索引列的值在表中是唯一的，不允许重复值。UNIQUE索引适用于需要唯一性约束的列，比如用户名或身份证号。它可以应用于大多数的数据类型和存储引擎。\",\"当对某一字段增加索引后,会减少查询耗时，空间换时间。\"]},\"51\":{\"h\":\"锁\"},\"52\":{\"h\":\"全局锁\",\"t\":[\"只可读 不可写。\",\"mysql> flush tables with read lock; # 加全局锁 Query OK, 0 rows affected (0.00 sec) mysql> delete from chat where id = 10; 1223 - Can't execute the query because you have a conflicting read lock mysql> unlock tables; # 释放锁 Query OK, 0 rows affected (0.00 sec) mysql> delete from chat where id = 10; Query OK, 1 row affected (0.01 sec) \"]},\"53\":{\"h\":\"表级锁\"},\"54\":{\"h\":\"表锁\",\"t\":[\"加锁 lock tables 表名 read/write\",\"解锁 unlock tables\",\"表共享读锁 read lock # 都能读只有自己能写\",\"表独占写锁 write lock #只有自己能读写\"]},\"55\":{\"h\":\"元数据锁\",\"t\":[\"锁定表结构\"]},\"56\":{\"h\":\"意向锁\"},\"57\":{\"h\":\"行级锁\",\"t\":[\"行锁\",\"锁定单个行记录的锁 防止对其进行update,delete\",\"间隙锁\",\"防止进行insert\"]},\"58\":{\"h\":\"其他\"},\"59\":{\"h\":\"查看curd执行频率\",\"t\":[\"show global status like 'Com_______';\"]},\"60\":{\"h\":\"慢查询日志\",\"t\":[\"MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为 10，意思是运行10秒以上的SQL语句。\",\"由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能 收集超过5秒的sql，结合之前explain进行全面分析。\",\"SHOW VARIABLES LIKE 'long_query_time%'; #查询目前慢日志时间 \",\"修改配置文件my.cnf 永久生效\",\"[mysqld] slow_query_log=1 slow_query_log_file=/var/lib/mysql/atguigu-slow.log long_query_time=3 log_output=FILE \"]},\"61\":{\"h\":\"show profiles\",\"t\":[\"用来查看sql语句性能，等其他\",\"mysql> select @@have_profiling; # 是否支持 +------------------+ | @@have_profiling | +------------------+ | YES | +------------------+ 1 row in set (0.04 sec) mysql> select @@profiling; #是否开启 +-------------+ | @@profiling | +-------------+ | 0 | +-------------+ 1 row in set (0.04 sec) mysql> set profiling=1; ## 开启 Query OK, 0 rows affected (0.00 sec) mysql> select @@profiling; +-------------+ | @@profiling | +-------------+ | 1 | +-------------+ mysql> show profiles; ##查看所有的sql情况 +----------+------------+--------------------+ | Query_ID | Duration | Query | +----------+------------+--------------------+ | 1 | 0.00033425 | select @@profiling | | 2 | 0.00012275 | show profiling | | 3 | 0.00013375 | select * from s | | 4 | 0.00026325 | use text | | 5 | 0.00077300 | select * from s | +----------+------------+--------------------+ show profile for query query_id; #查看某个具体sql \"]},\"62\":{\"h\":\"Quartz\",\"t\":[\"官方文档\",\"Job 表示一个工作，要执行的具体内容\",\"JobDetail 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案略。\",\"Trigger 代表一个调度参数的配置，什么时候去调。\",\"Scheduler 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。\"]},\"63\":{\"h\":\"依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-quartz</artifactId> </dependency> \"]},\"64\":{\"h\":\"步骤\",\"t\":[\"public class FirstJob implements Job { @Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException { System.out.println(\\\"hhhhh\\\"); } } \",\"// 定义作业 绑定到FirstJob.class JobDetail job = JobBuilder.newJob(FirstJob.class) .withIdentity(\\\"first\\\", \\\"fristgroup\\\") .build(); \",\"// 触发器 触发作业立即运行，然后每3秒重复一次 SimpleTrigger trigger = TriggerBuilder.newTrigger() .withIdentity(\\\"first\\\", \\\"first\\\")// name group .startNow()// 立马开始 .withSchedule(SimpleScheduleBuilder.simpleSchedule() .withIntervalInSeconds(3) //每3秒 .repeatForever())// 循环 .build(); \",\"// 创建调度器 Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); scheduler.scheduleJob(job,trigger); //开始 scheduler.start(); //结束 scheduler.shutdown(); \"]},\"65\":{\"h\":\"任务传参\",\"t\":[\"public class FirstJob implements Job { @Override public void execute(JobExecutionContext context) throws JobExecutionException { JobDataMap jobDataMap = context.getJobDetail().getJobDataMap();//Detail JobDataMap jobDataMap1 = context.getTrigger().getJobDataMap();//tTrigger System.out.println(jobDataMap.get(\\\"hello world\\\")); System.out.println(jobDataMap1.get(\\\"key\\\")); } } // 定义作业 绑定到FirstJob.class JobDataMap jobDataMap = new JobDataMap(); jobDataMap.put(\\\"hello\\\",\\\"world\\\"); JobDetail job = JobBuilder.newJob(FirstJob.class) .setJobData(jobDataMap) .withIdentity(\\\"first\\\", \\\"fristgroup\\\") .build(); // 触发器 触发作业立即运行，然后每3秒重复一次 SimpleTrigger trigger = TriggerBuilder.newTrigger() .withIdentity(\\\"first\\\", \\\"first\\\")// name group .startNow()// 立马开始 .withSchedule(SimpleScheduleBuilder.simpleSchedule() .withIntervalInSeconds(10) //每3秒 .repeatForever())// 循环 .build(); trigger.getJobDataMap().put(\\\"key\\\",\\\"触发器的参数\\\"); \"]},\"66\":{\"h\":\"整合spring boot\",\"t\":[\"github\"]},\"67\":{\"h\":\"Spring SpringMVC\"},\"68\":{\"h\":\"Spring\",\"t\":[\"Spring-01-初识Spring_哔哩哔哩_bilibili\"]},\"69\":{\"h\":\"IoC\",\"t\":[\"Ioc—Inversion of Control\",\"一种思想。 创建对象、管理对象\",\"一般对象都是直接通过new出来 ，交由IoC管理后，IoC容器来控制对象的创建\",\"配置实在是多\",\"pom.xml\",\"<dependency> <!-- 1.导入--> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.23</version> </dependency> \",\"applicationContext.xml\",\"<!-- 2.配置Bean--> <bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"/> <bean id=\\\"bookService\\\" class=\\\"com.beink.service.Impl.bookServiceImpl\\\"/> \",\"Main.java\",\"public class Main { public static void main(String[] args) { // 3.获取容器 ApplicationContext atx = new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); // 4. 获取bean bookDao bookDao = (bookDao) atx.getBean(\\\"bookDao\\\"); bookDao.save(); // 等同于 bookDao bookDao1 = new bookDaoImpl(); bookDao1.save(); } } \"]},\"70\":{\"h\":\"Bean\",\"t\":[\"被构造 调用的是无参构造 生命周期： ``` public void init(){ System.out.println(\\\"init\\\"); } public void destory(){ System.out.println(\\\"destory\\\"); } 配置 <bean init-method=\\\"init\\\" destroy-method=\\\"destory\\\"/> 或者 直接 implements InitializingBean, DisposableBean 同样效果 ``` \"]},\"71\":{\"h\":\"依赖注入\"},\"72\":{\"h\":\"setter\",\"t\":[\".xml <bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"> <property name=\\\"a\\\" value=\\\"123\\\"/> <property name=\\\"s\\\" value=\\\"true\\\"/> </bean> Impl.java private String s; private int a; \"]},\"73\":{\"h\":\"构造器\",\"t\":[\"<bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"> <constructor-arg name=\\\"a\\\" value=\\\"6\\\"/> <constructor-arg name=\\\"s\\\" value=\\\"true\\\"/> </bean> <bean id=\\\"bookService\\\" class=\\\"com.beink.service.Impl.bookServiceImpl\\\"> <!--red对应ID--> <constructor-arg name=\\\"bookdao\\\" ref=\\\"bookDao\\\"/> </bean> \",\"依赖注入\",\"private bookDao book_dao; public void setBookdao(bookDao bookdao){ this.book_dao = bookdao; } \",\"一般 注入\",\"private String s; private int a; public bookDaoImpl(String s, int a) { this.s = s; this.a = a; } \"]},\"74\":{\"h\":\"集合注入\",\"t\":[\" <bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"> <property name=\\\"list\\\"> <array> <value>hello </value> <value>world</value> </array> </property> <property name=\\\"map\\\"> <map> <entry key=\\\"hello\\\" value=\\\"world\\\"></entry> </map> </property> </bean> \"]},\"75\":{\"h\":\"注解开发\",\"t\":[\"@Component(\\\"名字\\\") 定义Bean\",\"---@Service\",\"---@Controller(同样效果 只是便于理解)\",\"---@Repository\",\"@Configuration 设置位配置类 类似于applicationContext.xml @ComponentScan(\\\"com.beink\\\") 扫描路径 自动装配到spring的bean @Scope(\\\"singleton\\\") 单例 @PostConstruct 生命周期-初始化 @PreDestroy 生命周期-销毁 @Autowired 自动装配 === private bookDao bookdao = new bookDaoImpl(); @Value(\\\"${name}\\\") 简单类型注入 private String s; @PropertySource(\\\"xxx.yml\\\") 数据源 内容--（name=hello world） \"]},\"76\":{\"h\":\"AOP\",\"t\":[\"不改变原始设计 将功能增强\"]},\"77\":{\"h\":\"举例\",\"t\":[\"@Component @Aspect //这是个aop public class MyAop { // 在哪里执行 @Pointcut(\\\"execution(void com.beink.dao.bookDao.save())\\\") private void ss(){} // 绑定 @AfterReturning(\\\"ss()\\\") public void set(){ System.out.println(\\\"AOP\\\"); } } \"]},\"78\":{\"h\":\"切入点表达式\",\"t\":[\"使用*通配符即可 @Pointcut(\\\"execution( * * com.beink.dao.*)\\\") \"]},\"79\":{\"h\":\"通知类型\",\"t\":[\"public class MyAop { @Pointcut(\\\"execution(void com.beink.dao.bookDao.save())\\\") private void ss(){} @AfterReturning(\\\"ss()\\\") public void set(){ System.out.println(\\\"AOP\\\"); } // 环绕 @Around(\\\"ss()\\\") public void round(ProceedingJoinPoint e) throws Throwable { System.out.println(\\\"qian\\\"); e.proceed();/*调用原始操作*/ System.out.println(\\\"hou\\\"); // 如果有返回值 返回对象必须是Object } // @AfterReturning // @AfterThrowing } \"]},\"80\":{\"h\":\"获取通知数据\",\"t\":[\"public class MyAop { @Pointcut(\\\"execution(void com.beink.dao.bookDao.save(..))\\\") private void ss(){} // 环绕 @Around(\\\"ss()\\\") public Object round(ProceedingJoinPoint e) throws Throwable { Object[] args = e.getArgs(); e.proceed();/*调用原始操作*/ System.out.println(Arrays.toString(args));/*获取参数*/ // 修改参数 args[0] = 666; Object ret = e.proceed(args); return ret; } } \"]},\"81\":{\"h\":\"SpringMVC\",\"t\":[\"SpringMVC-02-SpringMVC入门案例_哔哩哔哩_bilibili\"]},\"82\":{\"h\":\"创建使用\",\"t\":[\"pom.xml\",\" <dependencies> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.23</version> </dependency> </dependencies> \",\"userControler类\",\"@Controller //定义Bean public class userController { // 访问路径 @RequestMapping(\\\"/save\\\") // 返回值类型 @ResponseBody public String save(){ System.out.println(\\\"hhh\\\"); return \\\"hello world\\\"; } } \",\"config类\",\"servletinitConfig.java //定义一个servlet启动配置，在里面加载spring配置 public class servletinitConfig extends AbstractDispatcherServletInitializer { // 加载springMVC配置 @Override protected WebApplicationContext createServletApplicationContext() { AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext(); ctx.register(springMVCConfig.class); return ctx; } //设置那些请求归springMVC处理 @Override protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } //加载spring配置 @Override protected WebApplicationContext createRootApplicationContext() { return null; } } springMVCConfig.java //加载对应的Bean @ComponentScan(\\\"com.beink.controller\\\") //加载配置 @Configuration public class springMVCConfig { } \",\"配置Tomcat启动即可。。\"]},\"83\":{\"h\":\"请求\"},\"84\":{\"h\":\"get\",\"t\":[\"/save?name=name\",\" @RequestMapping(\\\"/save\\\") @ResponseBody public String save(String name){ System.out.println(name); return \\\"hello world\\\"; } \"]},\"85\":{\"h\":\"post\",\"t\":[\" @RequestMapping(\\\"/save\\\") @ResponseBody public String save(String name,String id){ System.out.println(name + id); return \\\"hello world\\\"; } \"]},\"86\":{\"h\":\"post乱码处理\",\"t\":[\"img\"]},\"87\":{\"h\":\"参数类型\",\"t\":[\"SpringMVC-09-json数据传递参数_哔哩哔哩_bilibili\",\" @ResponseBody public String save(@RequestParam(\\\"name\\\") String userName, String id){ // 一： 会把地址中的name映射给userName // 二： save(User user) 当名字一样使 会自动把属性放进去 // 三：Map List.....@RequestParam List<String> // 四：JSON // 五：时间 // 六：。。。 System.out.println(userName + id); return \\\"hello world\\\"; } \"]},\"88\":{\"h\":\"响应\",\"t\":[\" @RequestMapping(\\\"topage\\\") public String toapage(){ // 跳转到index.jsp页面 return \\\"index.jsp\\\"; } @RequestMapping(\\\"ttt\\\") @ResponseBody public String toattpage(){ // 返回一个串“index.jsp” return \\\"index.jsp\\\"; } \"]},\"89\":{\"h\":\"Rest风格\",\"t\":[\"访问形式： /put/5 /get/6\",\"SpringMVC-14-RESTful快速开发_哔哩哔哩_bilibili\",\" @RequestMapping(value = \\\"/put/{id}\\\",method = RequestMethod.PUT) @ResponseBody public void put(@PathVariable String id){ System.out.println(id); } @RequestMapping(value = \\\"/get/{id}\\\",method = RequestMethod.GET) @ResponseBody public void get(@PathVariable String id){ System.out.println(id); } POST DELETE .... \"]},\"90\":{\"h\":\"注解说明\",\"t\":[\"@Controller //定义Bean @RequestMapping(\\\"/save\\\") // 访问路径 @ResponseBody //返回值 @RequestParam //用于接收url地址参数 /get?id=5 @ResponseBody //用于接收JSON数据 @PathVariable //接受url地址参数 /get/ @RestController //= @Controller + @ResponseBody @GetMapping(\\\"/get/{id}\\\") // == @RequestMapping(value = \\\"/get/{id}\\\",method = RequestMethod.GET) \"]},\"91\":{\"h\":\"其他\"},\"92\":{\"h\":\"自定义注解为属性赋值\",\"t\":[\"使用场景： 把用户传过来的token，解析出来用户信息， 为属性赋值。\"]},\"93\":{\"h\":\"1.创建自定义注解\",\"t\":[\"@Target({ElementType.PARAMETER}) @Documented @Retention(RetentionPolicy.RUNTIME) public @interface UserInfo { } \"]},\"94\":{\"h\":\"2.创建拦截器 ,获得token,存入作用域中\",\"t\":[\"public class GlobalInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { String token = request.getHeader(\\\"Authorization\\\").substring(7); request.getSession().setAttribute(\\\"account\\\", JwtUtil.parseJWT(token).getSubject()); return true; } } \"]},\"95\":{\"h\":\"3.配置拦截器\",\"t\":[\"@Configuration public class interceptor extends WebMvcConfigurationSupport { @Override protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) { argumentResolvers.add(new UserInfoImpl()); } @Override protected void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new GlobalInterceptor()).addPathPatterns(\\\"/user/account/color/\\\"); super.addInterceptors(registry); } } \"]},\"96\":{\"h\":\"4.实现自定义注解\",\"t\":[\"public class UserInfoImpl implements HandlerMethodArgumentResolver { @Override public boolean supportsParameter(MethodParameter methodParameter) { return methodParameter.getParameterAnnotation(UserInfo.class)!=null; } @Override public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception { HttpServletRequest nativeRequest = (HttpServletRequest) nativeWebRequest.getNativeRequest(); return nativeRequest.getSession().getAttribute(\\\"account\\\"); } } \"]},\"97\":{\"h\":\"5.使用\",\"t\":[\" @PostMapping(\\\"/user/account/color/\\\") public Result setColor(@UserInfo String account, @RequestParam Map<String,String>map){ String color = map.get(\\\"backImg\\\"); String list = map.get(\\\"list\\\"); return colorService.setColor(account,color,list); } \"]},\"98\":{\"h\":\"拦截器\",\"t\":[\"HttpServletRequest request 发送过来的信息 HttpServletResponse response 发送走的信息\"]},\"99\":{\"h\":\"1.先实现一个拦截对象\",\"t\":[\"@Component public class MyInterceptor implements HandlerInterceptor { // 被拦截的操作之前运行 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"preHandle...\\\"); // true 通行 // false 拦截 return true; } // 被拦截的操作之后运行 @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"postHandle...\\\"); } // 也是后面 也在posthandle之后 @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"afterCompletion...\\\"); } } \"]},\"100\":{\"h\":\"2.配置\",\"t\":[\"@Configuration public class Support extends WebMvcConfigurationSupport { //implements WebMvcConfigurer 也行 // 拦截器对象 @Autowired private MyInterceptor myInterceptor; /** * * @param registry */ @Override protected void addInterceptors(InterceptorRegistry registry) { // 拦截路径 registry.addInterceptor(myInterceptor).addPathPatterns(\\\"/user\\\",\\\"/user*\\\"); } } \"]},\"101\":{\"h\":\"过滤器\"},\"102\":{\"h\":\"枚举\"},\"103\":{\"h\":\"xmind\"},\"104\":{\"h\":\"jwt Filter Interceptor\"},\"105\":{\"h\":\"ElasticSearch\",\"t\":[\"old-ElasticSearchbilibilinew-ElasticSearchbilibili\",\"安装报错官方文档基本查询，结果过滤，高级查询，过滤，排序\",\"创建索引 - ElasticSearch (apifox.com)\",\"介绍\",\"Elasticsearch 是一个分布式的、开源的搜索分析引擎，支持各种数据类型，包括文本、数字、地理、结构化、非结构化。\",\"可以很好地存储和查询文档，用于应用程序搜索、企业搜索和网站搜索。\",\"安装\",\"限制内存大小 ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\"\",\"docker pull elasticsearch:7.6.2 docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e \\\"discovery.type=single-node\\\" -e ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\" elasticsearch:7.6.2 \",\"对比数据库\",\"索引（indices）\",\"Databases 数据库\",\"类型（type）\",\"Table 数据表\",\"文档（Document）\",\"Row 行\",\"字段（Field）\",\"Columns 列\"]},\"106\":{\"h\":\"基础操作\"},\"107\":{\"h\":\"_cat\",\"t\":[\"method: GET\",\"/_cat/nodes 查看所有的节点\",\"/_cat/health 健康状态\",\"/_cat/master\",\"/_cat/indices 查看索引 show databases;\"]},\"108\":{\"h\":\"索引\",\"t\":[\"创建索引\",\"PUT /shopping \",\"查看索引\",\"GET /shopping \",\"删除索引\",\"DELETE /shopping \"]},\"109\":{\"h\":\"文档\",\"t\":[\"创建文档(会覆盖原有的数据）\",\"PUT/POST /myindex/_doc/1 { \\\"name\\\": \\\"Tom\\\" } ## 不加id 则会自动生成id POST /myindex/_doc { \\\"name\\\": \\\"Tom\\\" } \",\"修改文档（在原来的数据上修改）\",\"POST /shopping/_update/23 { \\\"doc\\\":{ \\\"school\\\":\\\"666\\\" } } \",\"查询\",\"GET /myindex/_doc/1 \",\"查询索引下所有文档\",\"GET /shopping/_search \",\"删除\",\"DELETE /myindex/_doc/1 \"]},\"110\":{\"h\":\"高级查询\",\"t\":[\"匹配\",\"match_phrase不拆分、 match拆分后模糊查询、match_all查询所有\",\"GET /shopping/_search { \\\"query\\\":{ \\\"match\\\":{ ## 匹配 \\\"name\\\":\\\"Tom\\\" } }, } \",\"分页+排序\",\"GET /shopping/_search { \\\"query\\\":{ \\\"match_all\\\":{ ## 匹配 } }, \\\"from\\\":0, ## 第几条开始 \\\"size\\\":2, ## 一页几条数据 \\\"_source\\\":[\\\"name\\\"], ## 只要的字段 \\\"sort\\\": { ##排序 \\\"name.keyword\\\":{ ##排序的字段 \\\"order\\\":\\\"desc\\\" ## 升降序 } } } \",\"多条件查询\",\"bool把各种其它查询通过must（与）、must_not（非）、should（或）的方式进行组合\",\"GET /shopping/_search { \\\"query\\\":{ \\\"bool\\\":{ ## 多添加查询 \\\"should\\\":[ { \\\"match\\\":{ ##匹配 \\\"name\\\":\\\"Tom\\\" ##name字段 } }, { \\\"match\\\":{ \\\"school\\\":\\\"汤姆\\\" ## school字段 } } ] } } } \",\"范围查询\",\"gt-大于 gte-大于等于 lt-小于 lte`-小于等于\",\"GET /shopping/_search { \\\"query\\\":{ \\\"range\\\": { \\\"amount\\\": { \\\"gt\\\": 12 } } } } \",\"高亮\",\"GET /shopping/_search { \\\"query\\\":{ \\\"match\\\":{ \\\"name\\\":\\\"Tom\\\" } }, \\\"highlight\\\":{ \\\"fields\\\":{ \\\"name\\\":{} } } } \",\"聚合\",\"映射\",\"Mapping（映射）： 是用来定义文档和它所包含的字段是如何被存储和索引的。\",\"PUT /shopping/_mapping { \\\"properties\\\":{ \\\"name\\\" : { ## 字段 \\\"type\\\" : \\\"text\\\", ## 可以被分词查询 \\\"index\\\" : true ## 可以被索引 }, \\\"sex\\\" : { \\\"type\\\" : \\\"text\\\", \\\"index\\\": true }, \\\"tell\\\" : { \\\"type\\\" : \\\"keyword\\\", ## 必须是个完整的词 \\\"index\\\" : false ## 不能被索引 } } } \"]},\"111\":{\"h\":\"springboot\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-elasticsearch</artifactId> <version>2.7.9</version> </dependency> \",\"spring: elasticsearch: uris: 127.0.0.1:9200 \",\"实体类\",\"@Data @AllArgsConstructor @NoArgsConstructor @Document(indexName = \\\"mytest\\\") public class mytest { @Id private Long id; @Field private String name; //不可被索引 不可被分开的词查询 @Field(index = false,type = FieldType.Keyword) private String address; @Field private Integer age; } \"]},\"112\":{\"h\":\"索引\",\"t\":[\" @Test void indexops(){ // 创建索引 es.indexOps(mytest.class).create(); // 删除索引 es.indexOps(mytest.class).delete(); } \"]},\"113\":{\"h\":\"文档\",\"t\":[\" @Test void contextLoads() { mytest mytest = new mytest(102L,\\\"ggg\\\",\\\"gasd\\\",12); // 删除文档 String delete = es.delete(\\\"102\\\", mytest.class); // 添加文档 es.save(mytest); //添加多个 // es.save(List<mytest>) //查询文档 es.get(\\\"101\\\",mytest.getClass()); } \"]},\"114\":{\"h\":\"高级查询\",\"t\":[\"大杂烩\",\"在上述例子中，\\n我们结合使用查询、过滤、分页、高亮、排序和should操作。\\n我们使用QueryBuilders.boolQuery来创建一个布尔查询，使用should操作指定至少满足一个条件的情况：name字段包含搜索词\\\"手机\\\"，或category字段包含搜索词\\\"手机\\\"。\\n然后，我们使用FilterBuilders.boolFilter来创建一个布尔过滤器，使用must操作添加category字段必须等于\\\"电子产品\\\"，price字段必须在1000到5000之间的过滤条件。\\n接着，我们按照前述分页方式和排序方式添加分页和排序信息到查询。通过elasticsearchRestTemplate.search()执行查询，并获取查询结果的SearchHits对象。接着，我们从SearchHits中获取查询结果列表，并遍历每个结果，从高亮结果中获取需要高亮的字段内容，并设置到对应的实体对象中。\\n最后，我们使用PageImpl将结果封装成Page<Product>对象，其中包含了分页信息、查询结果列表和总记录数。\"]},\"115\":{\"h\":\"Spring Cloud\",\"t\":[\"飞书bilibili\"]},\"116\":{\"h\":\"服务注册和发现\"},\"117\":{\"h\":\"nacos注册中心\"},\"118\":{\"h\":\"nacos安装\",\"t\":[\"nacos.mysql\",\"... \",\"custom.env\",\"PREFER_HOST_MODE=hostname MODE=standalone MYSQL_SERVICE_HOST=127.0.0.1 MYSQL_SERVICE_DB_NAME=nacos MYSQL_SERVICE_PORT=3306 MYSQL_SERVICE_USER=root MYSQL_SERVICE_PASSWORD=123456 MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai \",\"运行\",\"docker run -d \\\\ --name nacos \\\\ --env-file ./nacos/custom.env \\\\ -p 8848:8848 \\\\ -p 9848:9848 \\\\ -p 9849:9849 \\\\ --restart=always \\\\ nacos/nacos-server:v2.1.0-slim \"]},\"119\":{\"h\":\"服务注册\",\"t\":[\"引入依赖\",\"<!-- nacos 注册与发现--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"配置\",\"spring: application: name: item-service cloud: nacos: discovery: server-addr: 127.0.0.1:8848 \"]},\"120\":{\"h\":\"服务发现\",\"t\":[\"引入依赖\",\"<!-- nacos 注册与发现--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"配置\",\"spring: application: name: item-service cloud: nacos: discovery: server-addr: 127.0.0.1:8848 \",\"使用\",\" private final DiscoveryClient discoveryClient; // 根据服务名称拉取所有的服务 List<ServiceInstance> instances = discoveryClient.getInstances(\\\"item-service\\\"); // 负载均衡，随机给一个 ServiceInstance instancs = instances.get(RandomUtil.randomInt(instances.size())); // 拿到uri (域名 + 端口) URI uri = instancs.getUri(); ResponseEntity<List<ItemDTO>> response = restTemplate.exchange( uri + \\\"/items?ids={ids}\\\", HttpMethod.GET, null, new ParameterizedTypeReference<List<ItemDTO>>() { }, Map.of(\\\"ids\\\", CollUtils.join(itemIds, \\\",\\\")) ); \"]},\"121\":{\"h\":\"OpenFeign\"},\"122\":{\"h\":\"基础使用\",\"t\":[\"上面的代码 太多了，想简单点。。。\",\"帮助我们优雅的发送请求\",\"依赖\",\" <!--openFeign--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <!--负载均衡器--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-loadbalancer</artifactId> </dependency> \",\"开启注解\",\"@EnableFeignClients @SpringBootApplication public class ItemApplication { public static void main(String[] args) { SpringApplication.run(ItemApplication.class, args); } } \",\"编写FeignClient\",\"@FeignClient(\\\"Item-service\\\") public interface ItemClient { @GetMapping(\\\"/items\\\") List<ItemDTO> query(@RequestParam(\\\"ids\\\") Collection<Long> ids); } \",\"使用\",\" private final ItemClient itemClient; // 查询商品 List<ItemDTO> items = itemClient.query(itemIds); \"]},\"123\":{\"h\":\"连接池\",\"t\":[\"默认每次发送，会重新创建请求，加一个连接池，减少创建次数\",\"依赖\",\"<!--OK http 的依赖 --> <dependency> <groupId>io.github.openfeign</groupId> <artifactId>feign-okhttp</artifactId> </dependency> \",\"配置\",\"feign: okhttp: enabled: true \"]},\"124\":{\"h\":\"最佳实践（优化）\",\"t\":[\"额外创建模块 用来写公用的OpenFeign\"]},\"125\":{\"h\":\"日志\"},\"126\":{\"h\":\"网关\",\"t\":[\"请求转发，身份校验。\"]},\"127\":{\"h\":\"启动\",\"t\":[\"依赖\",\" <!--网关--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-gateway</artifactId> </dependency> <!--nacos discovery--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <!--负载均衡--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-loadbalancer</artifactId> </dependency> \",\"配置\",\"server: port: 9090 spring: application: name: gateway cloud: nacos: discovery: server-addr: 127.0.0.1:8848 gateway: routes: - id: item-service uri: lb://item-service predicates: - Path=/items/**,/search/** - id: user-service uri: lb://user-service predicates: - Path=/address/**,/user/** \"]},\"128\":{\"h\":\"路由属性\"},\"129\":{\"h\":\"路由断言\",\"t\":[\"Path - Path=/*/producterone/**\",\"Host - Host=**.ityouknow.com\",\"请求方式 - Method=GET\",\"请求参数 - Query=smile\",\"IP - RemoteAddr=192.168.1.1/24\",\"时间 - After=2018-01-20T06:06:06+08:00[Asia/Shanghai] ,- Before=2017-01-20T17:42:47.789-07:00[America/Denver]\",\"Cookie - Cookie=ityouknow, kee.e\",\"Header - Header=X-Request-Id, \\\\d+\"]},\"130\":{\"h\":\"路由过滤器\",\"t\":[\"filter\"]},\"131\":{\"h\":\"网关登录校验\"},\"132\":{\"h\":\"GlobalFilter\",\"t\":[\"@Component public class MyGlobalFilter implements GlobalFilter , Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { //针对请求的过滤，拿到请求的header、url、参数等 // HttpServletRequest 是web里面的 // ServerHttpRequest 是webFlux里面（响应式） ServerHttpRequest request = exchange.getRequest(); String path = request.getURI().getPath(); System.out.println(\\\"path====\\\" + path); HttpHeaders headers = request.getHeaders(); System.out.println(\\\"headers====\\\" + headers); String methodName = request.getMethod().name(); System.out.println(\\\"methodName====\\\" + methodName); //IPV4、IPV6地址 String hostName = request.getRemoteAddress().getHostName(); System.out.println(\\\"hostName====\\\" + hostName); String ip = request.getHeaders().getHost().getHostString(); System.out.println(\\\"ip====\\\" + ip); return chain.filter(exchange); } /** * 设置权重，优先执行 * @return */ @Override public int getOrder(){ return 0; } } \"]},\"133\":{\"h\":\"登录样例\",\"t\":[\"package com.hmll.gateway.filters; import com.hmll.gateway.config.AuthProperties; import com.hmll.gateway.util.JwtTool; import lombok.RequiredArgsConstructor; import org.apache.http.HttpStatus; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.http.HttpHeaders; import org.springframework.http.server.reactive.ServerHttpRequest; import org.springframework.http.server.reactive.ServerHttpResponse; import org.springframework.stereotype.Component; import org.springframework.util.AntPathMatcher; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; import java.util.List; /** * @author ToTryEveryThing * @date 2023/12/4 16:41 * @Description */ @Component @RequiredArgsConstructor public class AuthGlobalFilter implements GlobalFilter, Ordered { private final AuthProperties authProperties; private final JwtTool jwtTool; private final AntPathMatcher antPathMatcher = new AntPathMatcher(); @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { ServerHttpRequest request = exchange.getRequest(); if(isExclude(request.getPath().toString())){ // 放行 return chain.filter(exchange); } HttpHeaders headers = request.getHeaders(); String token = null; List<String> authorization = headers.get(\\\"authorization\\\"); if(authorization != null && !authorization.isEmpty()){ token = authorization.get(0); } Long userId = null; try { userId = jwtTool.parseToken(token); } catch (Exception e) { ServerHttpResponse response = exchange.getResponse(); response.setStatusCode(org.springframework.http.HttpStatus.valueOf(HttpStatus.SC_UNAUTHORIZED)); return response.setComplete(); } System.out.println(\\\"userId = \\\" + userId); System.out.println(\\\"headers====\\\" + headers); return chain.filter(exchange); } private boolean isExclude(String path) { for (String pathPattern : authProperties.getExcludePaths()) { if(antPathMatcher.match(pathPattern,path)) return true; } return false; } @Override public int getOrder() { return 0; } } \"]},\"134\":{\"h\":\"网关传递信息\",\"t\":[\"网关中拿到啊用户信息，网关可以把信息重新放入请求头中。\",\" String userInfo = userId.toString(); //设置信息 ServerWebExchange build = exchange.mutate() .request(builder -> builder.header(\\\"user-info\\\", userInfo)) .build(); //往后传递 return chain.filter(build); \",\" @GetMapping public List<CartVO> queryMyCarts(@RequestHeader(value = \\\"user-info\\\", required = false) String userinfo){ System.out.println(\\\"userinfo = \\\" + userinfo); return cartService.queryMyCarts(); } \"]},\"135\":{\"h\":\"使用线程存储数据\",\"t\":[\"public class UserContext { private static final ThreadLocal<Long> tl = new ThreadLocal<>(); /** * 保存当前登录用户信息到ThreadLocal * @param userId 用户id */ public static void setUser(Long userId) { tl.set(userId); } /** * 获取当前登录用户信息 * @return 用户id */ public static Long getUser() { return tl.get(); } /** * 移除当前登录用户信息 */ public static void removeUser(){ tl.remove(); } } \"]},\"136\":{\"h\":\"OpenFeign传递\",\"t\":[\"由于 oepnfeign 之间发送请求，不携带请求头，所有后续的微服务中，就没有用户信息\",\"openfiegn 提供了一个拦截器接口，所有的op发起的请求都会先调用拦截器处理请求\",\"public class config { @Bean public RequestInterceptor UserInfo (){ return new RequestInterceptor() { @Override public void apply(RequestTemplate requestTemplate) { requestTemplate.header(\\\"user-info\\\", String.valueOf(UserContext.getUser())); } }; } } \",\"@MapperScan(\\\"com.hmall.trade.mapper\\\") @EnableFeignClients(basePackages = \\\"com.hmall.api.client\\\",defaultConfiguration = config.class) @SpringBootApplication public class TradeApplication { public static void main(String[] args) { SpringApplication.run(TradeApplication.class, args); } } \"]},\"137\":{\"h\":\"共享配置\",\"t\":[\"网关路由在配置文件中写死了，如果变更必须重启微服务\",\"某些业务配置在配置文件中写死了，每次修改都要重启服务\",\"每个微服务都有很多重复的配置，维护成本高\"]},\"138\":{\"h\":\"共享配置\",\"t\":[\"把每个服务中的公共配置抽取出来\",\"在nacos配置管理-配置列表中添加公共配置\",\"spring: datasource: url: jdbc:mysql://${hm.db.host:192.168.150.101}:${hm.db.port:3306}/${hm.db.database} driver-class-name: com.mysql.cj.jdbc.Driver username: ${hm.db.un:root} #没有配置则使用 root password: ${hm.db.pw:123} #没有配置则使用 123 mybatis-plus: configuration: default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler global-config: db-config: update-strategy: not_null id-type: auto \",\"不同的地方还是读取原来服务的application.yaml\",\"引入依赖\",\" <!--nacos配置管理--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <!--读取bootstrap文件--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bootstrap</artifactId> </dependency> \",\"在相应服务中新建bootstrap.yaml\",\"spring: application: name: cart-service # 服务名称 profiles: active: dev cloud: nacos: server-addr: 127.0.0.1:8848 # nacos地址 config: file-extension: yaml # 文件后缀名 shared-configs: # 共享配置 - dataId: shared-jdbc.yaml # 共享mybatis配置 - dataId: shared-log.yaml # 共享日志配置 - dataId: shared-swagger.yaml # 共享日志配置 \",\"重启\"]},\"139\":{\"h\":\"配置热跟新\",\"t\":[\"具体的业务可能需要 随时调整，即不写死\",\"在nacos中添加配置文件\",\"hm: cart: maxItems: 4 \",\"[服务名]-[spring.active.profile].[后缀名] \",\"服务名：我们是购物车服务，所以是cart-service\",\"spring.active.profile：就是spring boot中的spring.active.profile，可以省略，则所有profile共享该配置\",\"后缀名：例如yaml\",\"在服务中添加配置 读取即可\",\"package com.hmall.cart.config; import lombok.Data; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; @Data @Component @ConfigurationProperties(prefix = \\\"hm.cart\\\") public class CartProperties { private Integer maxAmount; } \",\"使用\"]},\"140\":{\"h\":\"服务保护\"},\"141\":{\"h\":\"Sentinel\",\"t\":[\"Github\",\"java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar \",\"java '-Dserver.port=8090' '-Dcsp.sentinel.dashboard.server=localhost:8090' '-Dproject.name=sentinel-dashboard' '-jar' sentinel-dashboard-X.X.X.jar \",\"依赖\",\"<!--sentinel--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId> </dependency> \",\"配置\",\"spring: cloud: sentinel: transport: dashboard: localhost:8090 http-method-specify: true # 开启请求方式前缀 \"]},\"142\":{\"h\":\"请求限流\",\"t\":[\"限制访问次数\"]},\"143\":{\"h\":\"线程隔断\",\"t\":[\"当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。\"]},\"144\":{\"h\":\"服务熔断\",\"t\":[\"当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。\"]},\"145\":{\"h\":\"分布式事务\"},\"146\":{\"h\":\"RabbitMQ\",\"t\":[\"安装地址 Docker安装RabbitMQ详细步骤 - 逊老头 - 博客园 (cnblogs.com) 学习地址 MQ的引言和不同MQ的特点_哔哩哔哩_bilibili\"]},\"147\":{\"h\":\"simple简单模式\",\"t\":[\"study\",\"消息产生者将消息放入队列\",\"消息的消费者(consumer) 监听(while) 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除(隐患 消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失)应用场景:聊天(中间有一个过度的服务器;p端,c端)\"]},\"148\":{\"h\":\"生产消息\",\"t\":[\"//生产者 @Test void send() throws IOException, TimeoutException { // 创建MQ的连接工厂对象 ConnectionFactory connectionFactory = new ConnectionFactory(); // 设置连接mq主机 connectionFactory.setHost(\\\"127.0.0.1\\\"); // 端口号 connectionFactory.setPort(5672); // 设置连接哪一个虚拟主机 connectionFactory.setVirtualHost(\\\"/ems\\\"); // 设置用户名和密码 connectionFactory.setUsername(\\\"ems\\\"); connectionFactory.setPassword(\\\"ems\\\"); // 获取连接对象 Connection connection = connectionFactory.newConnection(); // 获取连接中的通道 Channel channel = connection.createChannel(); // 通道绑定对应的消息队列 // s：队列名称 b:队列是否持久化 b1:是否独占队列(其他的连接不可用) // b2: 是否消费结束后自动删除 map: channel.queueDeclare(\\\"hello\\\",false,false,false,null); // 发布消息 // s： 交换机名称 s1:通道名称 b: MessageProperties.MINIMAL_PERSISTENT_BASIC（ 重启消息也在 ) // 最后：内容 channel.basicPublish(\\\"\\\",\\\"hello\\\",null,\\\"hello rabbit\\\".getBytes()); channel.close(); connection.close(); } \"]},\"149\":{\"h\":\"消费消息\",\"t\":[\" // 消费者 @Test void getMessage() throws IOException, TimeoutException { // 创建MQ的连接工厂对象 ConnectionFactory connectionFactory = new ConnectionFactory(); // 设置连接mq主机 connectionFactory.setHost(\\\"127.0.0.1\\\"); // 端口号 connectionFactory.setPort(5672); // 设置连接哪一个虚拟主机 connectionFactory.setVirtualHost(\\\"/ems\\\"); // 设置用户名和密码 connectionFactory.setUsername(\\\"ems\\\"); connectionFactory.setPassword(\\\"ems\\\"); // 获取连接对象 Connection connection = connectionFactory.newConnection(); // 获取连接中的通道 Channel channel = connection.createChannel(); // 通道绑定对应的消息队列 // s：队列名称 b:队列是否持久化 b1:是否独占队列(其他的连接不可用) // b2: 是否消费结束后自动删除 map: channel.queueDeclare(\\\"hello\\\",false,false,false,null); // 消费消息 // s： 交换机名称 s1:开始消息的自动确认机制 最后：消费时的回调接口 channel.basicConsume(\\\"hello\\\",true, new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"new String (body) = \\\" + new String (body)); } }); //不关闭 为了一直消费信息 // channel.close(); // connection.close(); } \"]},\"150\":{\"h\":\"实现工具类\",\"t\":[\"public class RabbitMQConnection { private static ConnectionFactory connectionFactory; //静态代码块 只执行一次 static { connectionFactory = new ConnectionFactory(); connectionFactory.setHost(\\\"127.0.0.1\\\"); // 设置连接mq主机 connectionFactory.setPort(5672);// 端口号 connectionFactory.setVirtualHost(\\\"/ems\\\");// 设置连接哪一个虚拟主机 connectionFactory.setUsername(\\\"ems\\\");// 设置用户名和密码 connectionFactory.setPassword(\\\"ems\\\"); } // 获取 连接对象方法 public static Connection getConnection() throws IOException, TimeoutException { // 获取连接对象 return connectionFactory.newConnection(); } // 关闭通道和连接 public void closeChannelAndConnection(Connection con, Channel channel){ try { if(con!=null)con.close(); if(channel!=null)channel.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } } \"]},\"151\":{\"h\":\"任务模型\",\"t\":[\"study\",\"两个消费者 消费同一个队列 默认会平均分配内容 叫做循环\",\"目前要求能者多劳！！！\",\"设置通道一次只能消费一个消息\",\"关闭消息的自动确认，开始手动确认消息\"]},\"152\":{\"h\":\"Consumer\",\"t\":[\"public class consumer2 { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); channel.queueDeclare(\\\"word\\\",false,false,false,null); channel.basicQos(1);// 每次消费一个 // false 关闭自动确定 channel.basicConsume(\\\"word\\\",false, new DefaultConsumer(channel){ @SneakyThrows @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { Thread.sleep(1000);//模拟执行的漫 System.out.println(\\\"new String (body) = \\\" + new String (body)); /** * 参数 * - 手动确认的表示 * - false 是否开启多个消息同时确认 */ channel.basicAck(envelope.getDeliveryTag(),false); } }); } } \"]},\"153\":{\"h\":\"广播\",\"t\":[\" 流程如下：\",\"有多个消费者\",\"每个消费者有自己的队列\",\"每个队列都绑定了交换机\",\"生产者只能向交换机发送消息，再有交换机发给队列，生产者无权决定\",\"交换机吧消息发给和自己绑定的队列\",\"队列中的消费者都可以拿到消息\"]},\"154\":{\"h\":\"生产者\",\"t\":[\"public class producer { public static void main(String[] args) throws IOException, TimeoutException { // 创建连接对象 Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 将通道声明到交换机 (交换机名称，类型) channel.exchangeDeclare(\\\"one\\\",\\\"fanout\\\"); channel.basicPublish(\\\"one\\\",\\\"\\\",null,\\\"hello world\\\".getBytes()); channel.close(); connection.close(); } } \"]},\"155\":{\"h\":\"消费者\",\"t\":[\"public class consumerOne { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"one\\\",\\\"fanout\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定 channel.queueBind(queue,\\\"one\\\",\\\"\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"new String(body) = \\\" + new String(body)); } }); } } \"]},\"156\":{\"h\":\"路由模型\"},\"157\":{\"h\":\"直连\",\"t\":[\"Description\",\"在fanout的模式下，一条消息，会被订阅的队列消费。但有时我们希望不同的消息被不同的队列消费，\",\"此时就用到了 Direct类型的Exchange\",\"队列与交换机绑定，不再是任意绑定了，而是要指定一个RoutingKey(路由key)\",\"消息 的发送方在向exchang发送消息时，也必须要指定一个RoutingKey\",\"Exchange在发送消息时，会根据指定的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会收到消息\"]},\"158\":{\"h\":\"生产者\",\"t\":[\"public class producer { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); channel.exchangeDeclare(\\\"name_direct\\\",\\\"direct\\\"); String RoutingKey = \\\"warn\\\"; channel.basicPublish(\\\"name_direct\\\", RoutingKey,null, \\\"这是direct发布于的\\\".getBytes()); channel.close(); connection.close(); } } \"]},\"159\":{\"h\":\"消费者\",\"t\":[\"public class consumerOne { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"name_direct\\\",\\\"direct\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定和 RoutingKey channel.queueBind(queue,\\\"name_direct\\\",\\\"error\\\"); channel.queueBind(queue,\\\"name_direct\\\",\\\"info\\\"); channel.queueBind(queue,\\\"name_direct\\\",\\\"warn\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"error \\\" + new String(body)); } }); } } \",\"public class consumerTwo { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"name_direct\\\",\\\"direct\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定和 RoutingKey channel.queueBind(queue,\\\"name_direct\\\",\\\"warn\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"info \\\" + new String(body)); } }); } } \"]},\"160\":{\"h\":\"动态\",\"t\":[\"Description\",\"Topic类型的Exchange与Direct 相比，都是可以根据Routinghey把消息路由到不同的队列。只不过Topic 类型Exchange可以让队列在绑定Routing key的时候使用通配符!这种模型Routingkey一般都是由一个或多个单词组成，多个单词之间以\\\". \\\"分割，例如:item.insert\",\"* 匹配不多不少恰好一个单词\",\"admin.* --> admin.hh.abc | admin.hh\",\"# 匹配一个或多个单词\",\"admin.# --> admin.hh\"]},\"161\":{\"h\":\"代码\",\"t\":[\"public class producer { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); channel.exchangeDeclare(\\\"name_topic\\\",\\\"topic\\\"); String RoutingKey = \\\"warn.js\\\"; channel.basicPublish(\\\"name_direct\\\", RoutingKey,null, \\\"这是direct发布于的\\\".getBytes()); channel.close(); connection.close(); } } \",\"public class consumerOne { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"name_topic\\\",\\\"topic\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定和 RoutingKey channel.queueBind(queue,\\\"name_topic\\\",\\\"error.*\\\"); //error.xxx | error.aaa channel.queueBind(queue,\\\"name_topic\\\",\\\"info.#\\\");//info.gag.agsdga | info.gas.gas.g.asg. channel.queueBind(queue,\\\"name_topic\\\",\\\"warn\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"error \\\" + new String(body)); } }); } } \"]},\"162\":{\"h\":\"spring boot 整合\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \",\"spring: rabbitmq: host: 127.0.0.1 port: 5672 username: ems password: ems virtual-host: /ems \"]},\"163\":{\"h\":\"Test\",\"t\":[\"@SpringBootTest public class rabbitMQTest { @Autowired private RabbitTemplate rabbitTemplate; // hello @Test void test(){ rabbitTemplate.convertAndSend(\\\"hello\\\",\\\"hello world\\\"); } // work @Test void work(){ for (int i = 0; i < 10; i++) { rabbitTemplate.convertAndSend(\\\"work\\\",\\\"hello work\\\"); } } //fanout @Test void fanout(){ rabbitTemplate.convertAndSend(\\\"fanout\\\",\\\"\\\",\\\"hello fanout\\\"); } // route @Test void direct(){ rabbitTemplate.convertAndSend(\\\"direct\\\",\\\"warn\\\",\\\"hello direct\\\"); } // 动态路由 @Test void Topic(){ rabbitTemplate.convertAndSend(\\\"topic\\\",\\\"user.hh.gash\\\",\\\"hello topic\\\"); } } \"]},\"164\":{\"h\":\"简单\",\"t\":[\"@Component //默认队列持久化 非独占 不是autodelete @RabbitListener(queuesToDeclare = @Queue(value = \\\"hello\\\")) public class RabbitMQ { // 第一种模式 @RabbitHandler public void recrive(String message){ System.out.println(\\\"message = \\\" + message); } } \"]},\"165\":{\"h\":\"任务\",\"t\":[\"@Component public class workConsumer { //公平消费 @RabbitListener(queuesToDeclare = @Queue(\\\"work\\\")) public void work1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(queuesToDeclare = @Queue(\\\"work\\\")) public void work2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"166\":{\"h\":\"广播\",\"t\":[\"@Component public class fanoutConsumer { @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"fanout\\\",type = \\\"fanout\\\") ) }) public void fanout1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"fanout\\\",type = \\\"fanout\\\") ) }) public void fanout2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"167\":{\"h\":\"静态路由\",\"t\":[\"@Component public class routeConsumer { @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"direct\\\",type = \\\"direct\\\"), key = {\\\"info\\\",\\\"warn\\\"} ) }) public void route1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"direct\\\",type = \\\"direct\\\"), key = {\\\"warn\\\",\\\"message\\\"} ) }) public void route2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"168\":{\"h\":\"动态路由\",\"t\":[\"@Component public class topicConsumer { @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"topic\\\",type = \\\"topic\\\"), key = {\\\"user.*\\\",\\\"user.#\\\"} ) }) public void topic1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"topic\\\",type = \\\"topic\\\"), key = {\\\"user.*\\\",\\\"message\\\"} ) }) public void topic2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"169\":{\"h\":\"延迟队列\",\"t\":[\"安装插件以及使用 config\",\"@Configuration public class TestDelayQueueConfig { public static final String DEAD_EXCHANGE = \\\"delay_exchange\\\"; public static final String DEAD_QUEUE = \\\"delay_queue\\\"; public static final String DEAD_ROUTING = \\\"delay_key\\\"; @Bean public CustomExchange delayExchange() { Map<String, Object> args = new HashMap<String, Object>(); args.put(\\\"x-delayed-type\\\", \\\"direct\\\"); return new CustomExchange(DEAD_EXCHANGE, \\\"x-delayed-message\\\", true, false, args); } /** * 延迟消息队列 * @return */ @Bean public Queue delayQueue() { return new Queue(DEAD_QUEUE, true); } @Bean public Binding deplyBinding() { return BindingBuilder .bind(delayQueue()) .to(delayExchange()) .with(DEAD_ROUTING) .noargs(); } } \"]},\"170\":{\"h\":\"生产者\",\"t\":[\"@Component public class DeplyProducer { @Resource RabbitTemplate rabbitTemplate; public void send(String msg, Integer delayTime){ // MessageProperties messageProperties = new MessageProperties(); // messageProperties.setDelay(delayTime); // Message message = new Message(msg.getBytes(), messageProperties); // rabbitTemplate.convertAndSend(DEAD_EXCHANGE, DEAD_ROUTING, message); rabbitTemplate.convertAndSend(DEAD_EXCHANGE, DEAD_ROUTING, msg, message1 -> { message1.getMessageProperties().setDelay(delayTime); return message1;} ); } } \"]},\"171\":{\"h\":\"消费者\",\"t\":[\"@Component public class DeplyConsumer { @RabbitListener(queues = DEAD_QUEUE) public void onMessage(String msg) { System.out.println(\\\"收到信息了 msg = \\\" + msg); } } \"]},\"172\":{\"h\":\"Redis\",\"t\":[\"Redis详细解释\"]},\"173\":{\"h\":\"安装\",\"t\":[\"sudo apt update sudo apt install redis-server redis-cli 启动命令 \"]},\"174\":{\"h\":\"基本命令\",\"t\":[\"bdsize 当前数据库大小 select 数据库切换 flushdb 清空当前数据库 flushall 清空所有数据库 type name 查看key的类型 \"]},\"175\":{\"h\":\"五大数据类型\",\"t\":[\"Redsi-Key\",\"keys * 打印所有的key set name hhh 设置k-v(\\\"name\\\",\\\"hh\\\") get name 打印name的value exists name 判断key是否存在 move name 1 将name移入到数据库1中 expire name 5 设置name 5s 过期 ttl name 查看name剩余过期时间 \",\"String\",\"append name \\\"world\\\" #value后面增加world strlen name #value的长度 incr age #实现自增 incrby age 20 #增加20 decr age #实现自减 dectby age 20 #减少20 getrange name 0 3 #串的截取 mget mset #批量set或get setnx #如果存在则不创建 getset #找不到就创建 找到就设置 \",\"List\",\"lpush list hello #往list中加入hello lrange list 0 -1 #打印所有 lpop/rpop list #删除左右头部 lindex list 1 # 打印下标1的值 llen list # 长度 lrem list 1 hello # 删除一个hello ltrim list 2 4 # 截取 剩余2-4 lset list 0 hello # 指定下标值替换为hello \",\"set\",\"sadd: 向集合中添加元素。例如：sadd myset \\\"element1\\\" \\\"element2\\\" smembers: 返回集合中所有元素。例如：smembers myset sismember: 判断元素是否在集合中。例如：sismember myset \\\"element1\\\" scard: 返回集合中元素的数量。例如：scard myset srem: 从集合中删除元素。例如：srem myset \\\"element1\\\" spop: 从集合中弹出一个随机元素。例如：spop myset sunion: 返回多个集合的并集。例如：sunion set1 set2 set3 sdiff: 返回多个集合的差集。例如：sdiff set1 set2 set3 sinter: 返回多个集合的交集。例如：sinter set1 set2 set3 srandmember: 随机返回集合中的一个元素。例如：srandmember myset \",\"Hash\",\"hset key field value : 在key对应的hash中设置field对应的value。如果key不存在，则新建一个。 例如:hset user:1 name \\\"tom\\\" hget key field : 获取key对应的hash中field对应的value。 例如: hget user:1 name hgetall key : 获取key对应的hash中所有的键值对。 例如: hgetall user:1 hdel key field [field ...] : 删除key对应的hash中的一个或多个field。 例如: hdel user:1 name hlen key : 获取key对应的hash中field的数量。 例如: hlen user:1 hexists key field : 检查key对应的hash中是否存在field。 例如: hexists user:1 name hkeys key : 获取key对应的hash中所有的field。 例如: hkeys user:1 hvals key : 获取key对应的hash中所有的value。 例如: hvals user:1 这里是一些基本的Redis Hash命令。实际上还有许多其他的命令可供使用，如hincrby、hmset、hmget等。 \",\"Sorted sets\",\"zadd: 向有序集合中添加元素，支持指定分数。例如：zadd mysortedset 1 \\\"element1\\\" 2 \\\"element2\\\" zrange: 返回有序集合中指定范围的元素。例如：zrange mysortedset 0 -1 zrangebyscore: 返回有序集合中指定分数范围的元素。例如：zrangebyscore mysortedset 1 2 zrank: 返回有序集合中指定元素的排名。例如：zrank mysortedset \\\"element1\\\" zrem: 从有序集合中删除元素。例如：zrem mysortedset \\\"element1\\\" zcount: 返回有序集合中指定分数范围的元素数量。例如：zcount mysortedset 1 2 zincrby: 对有序集合中指定元素的分数进行增加/减少操作。例如：zincrby mysortedset 2 \\\"element1\\\" zcard: 返回有序集合中元素的数量。例如：zcard mysortedset zunionstore: 计算多个有序集合的并集，并将结果存储到新的有序集合中。例如：zunionstore new_sortedset 2 sortedset1 sortedset2 zinterstore: 计算多个有序集合的交集，并将结果存储到新的有序集合中。例如：zinterstore new_sortedset 2 sortedset1 sortedset2 \"]},\"176\":{\"h\":\"序列化\",\"t\":[\"Redis是一种内存数据库，为了更有效地使用内存，它需要对存储的数据进行序列化，使数据占用的空间更小。序列化是指将数据结构转换为字节流的过程。\",\"Redis支持多种序列化格式，如二进制协议（Redis默认使用的序列化格式）、JSON、MessagePack等。二进制协议是Redis自定义的序列化格式，它可以最大程度地减少数据占用的空间。JSON和MessagePack是常用的序列化格式，它们可以方便地与其他语言和系统进行交互。\"]},\"177\":{\"h\":\"实现\",\"t\":[\"stu.java\",\"public class stu implements Serializable { private Integer id; private String name; } \",\"RedisConfig.java\",\"@Configuration public class RedisConfig{ @Bean //配置redisTemplate // 默认情况下的模板只能支持 RedisTemplate<String,String>， // 只能存入字符串，很多时候，我们需要自定义 RedisTemplate ，设置序列化器 public RedisTemplate<String,Object> redisTemplate(RedisConnectionFactory factory){ RedisTemplate<String,Object> template = new RedisTemplate <>(); template.setConnectionFactory(factory); Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); // key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer); template.setValueSerializer(stringRedisSerializer); // hash的key也采用String的序列化方式 template.setHashKeySerializer(stringRedisSerializer); // value序列化方式采用jackson template.setValueSerializer(jackson2JsonRedisSerializer); // hash的value序列化方式采用jackson template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; } } \"]},\"178\":{\"h\":\"测试\",\"t\":[\" @Autowired private RedisTemplate redisTemplate; @Test void contextLoads() { stu stu = new stu(1, \\\"liming\\\"); redisTemplate.opsForValue().set(\\\"hh\\\",stu); System.out.println(redisTemplate.opsForValue().get(\\\"hh\\\")); } \"]},\"179\":{\"h\":\"持久化\"},\"180\":{\"h\":\"RDB\",\"t\":[\"RDB 是 Redis Database 文件的缩写，它是 Redis 的默认数据持久化方式。RDB 文件是在指定的时间间隔内（通常是每几秒或几分钟）自动生成的快照文件。这种方式可以在损失一定数据的情况下更快地恢复数据库。\"]},\"181\":{\"h\":\"触发\",\"t\":[\"保存配置：\",\"save：只管保存，其他不管，全部阻塞。\",\"内部触发机制\",\"900s 内有一条数据被修改 则执行bgsave\",\"save 900 1 save 300 10 save 60 10000\",\"save \\\"\\\" # 禁用RDB\",\"bgsave：Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。\",\"lastsave：获取最后一次成功执行快照的时间。\",\"执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义 。\",\"退出的时候也会产生 dump.rdb 文件。\"]},\"182\":{\"h\":\"AOF\",\"t\":[\"AOF 是 Append-Only File 的缩写，它是 Redis 的另一种数据持久化方式。AOF 文件是将 Redis 所有写操作命令追加到文件的过程，因此可以保证数据的完整性。\",\"# 是否以append only模式作为持久化方式，默认使用的是rdb方式持久化，这种方式在许多应用中已经足够用了 appendonly no # appendfilename AOF 文件名称 appendfilename \\\"appendonly.aof\\\" # appendfsync aof持久化策略的配置： # no：不执行fsync，由操作系统保证数据同步到磁盘，速度最快。 # always：每次写入都执行fsync，以保证数据同步到磁盘。 # everysec：每秒执行一次fsync，可能会导致丢失这1s数据。 appendfsync everysec # 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性 No-appendfsync-on-rewrite ## 触发阈值自动重写aof # 设置重写的基准值 Auto-aof-rewrite-min-size 100 # 设置重写的基准值 Auto-aof-rewrite-percentage 64mb \",\"相关信息\",\"由于记录中的很多操作没有意义， 可以执行 bgrewriteaof\",\"可以让aof文件执行重写功能，用最少的命令达到相同的效果\"]},\"183\":{\"h\":\"主从\",\"t\":[\"高级篇-分布式缓存-06-Redis主从-主从集群结构_哔哩哔哩_bilibili\"]},\"184\":{\"h\":\"开启\",\"t\":[\"先配置 三个不同的redis.conf 用来启动不同的端口\",\"默认 从机只读\",\"修改配置文件（永久生效）\",\"下redis.conf 添加一行配置 slaveof ip port\",\"使用redis-cli 客户端连接到redis服务，执行slaveof(重启后失效)\",\"slaveof ip port \"]},\"185\":{\"h\":\"哨兵\",\"t\":[\"用来实现主从集群的自动故障恢复\",\"采用心跳机制 每个1s就会向每个实例发送ping命令\",\"主观下线 如果某实例未在规定时间内 返回相应 ，则主观认为该实例下线。\",\"客观下线 好多个哨兵都认为该实例下线，则该实例客观下线\",\"搭建sentinel集群\",\"需要多个sentinel\",\"# Redis Sentinel configuration file port 27003 # 设置 Sentinel 进程的ID，默认为 sentinel，默认情况下无需修改 #sentinel myid 1 # 配置监控的主节点信息 # 指定主节点的名称、IP地址和端口 sentinel monitor mymaster 127.0.0.1 7001 2 # 设置 Sentinel 进程和主节点失去联系后，判断主节点下线的时间阈值（单位：毫秒） sentinel down-after-milliseconds mymaster 5000 # 设置 Sentinel 进行故障转移的超时时间（单位：毫秒） sentinel failover-timeout mymaster 10000 # 配置日志文件路径和级别 # 默认情况下，日志将输出到控制台 # 可以将日志输出到指定的文件，配置 log-file 参数 # 可以设置日志级别，配置 loglevel 参数，可选值：debug、verbose、notice、warning #sentinel loglevel notice # sentinel logfile \\\"sentinel.log\\\" # 设置 Sentinel 进程的认证密码（如果有密码） # 如果 Redis 主节点设置了密码，则需要配置 sentinel auth-pass 指令来提供密码 # sentinel auth-pass mymaster password # 配置其他 Sentinel 进程信息 # 可以添加更多的 Sentinel 进程信息，用于构建 Sentinel 的多节点部署 # sentinel monitor othermaster 127.0.0.1 6380 2 \",\"启动\",\"redis-sentinel s1/sentinel.conf\"]},\"186\":{\"h\":\"Git\"},\"187\":{\"h\":\"一、git安装后-指定名称和邮箱\",\"t\":[\"# 全局配置 git config --global user.name \\\"Your Name\\\" git config --global user.email \\\"email@example.com\\\" # 某个项目配置 git config user.name \\\"Your Name\\\" git config user.email \\\"email@example.com\\\" \"]},\"188\":{\"h\":\"二、分支管理\",\"t\":[\"git branch #查看分支 git chenkout xxx #切换为分支xxx git checkout -b xxx #新建分支xxx 并且切换过去 git branch -d xxx # 删除本地分支xxx git branch -D xxx #忽略修改 仍然删除分支xxx git fetch origin xxx #拉取远程分支xxx git push origin yyy # 把新建的分支yyy上传 git checkout -b first origin/first ##新建本地分支 和远程分支连接起来 \"]},\"189\":{\"h\":\"二、创建版本库\",\"t\":[\"$ mkdir learngit //创建 $ cd learngit //使用 $ pwd //查看当前目录 $ git init //初始化，生成.git文件(若该文件隐藏，则使用ls -ah) \"]},\"190\":{\"h\":\"三、把文件添加add和提交commit到版本库\",\"t\":[\"$ git add test.txt //添加 $ git commit -m \\\"wrote a test file\\\" //提交 $ git commit -m \\\"add 3 files.\\\" //一次性提交多个文件 \"]},\"191\":{\"h\":\"四、版本控制\",\"t\":[\"$ git log //查看提交历史记录，从最近到最远，可以看到3次 $ git log --pretty=oneline //加参，简洁查看 $ git reflog //查看每一次修改历史 $ cat test.txt //查看文件内容 $ git status //查看工作区中文件当前状态 $ git reset --hard HEAD^（HEAD~100）（commit id） //回退版本 $ git checkout -- test.txt //丢弃工作区的修改，即撤销修改 $ git reset HEAD test.txt //丢弃暂存区的修改（若已提交，则回退） \"]},\"192\":{\"h\":\"五、删除文件/缓存\",\"t\":[\"清空git缓存 git rm -r --cached . git add . git commit -m 'update .gitignore' $ rm test.txt //直接删除 $ git rm test.txt $ git commit -m \\\"remove test.txt\\\" //删错了，恢复 $ git checkout -- test.txt \"]},\"193\":{\"h\":\"六、远程仓库\",\"t\":[\"$ ssh-keygen -t rsa -C \\\"youremail@example.com\\\" //创建SSH Key $ git remote add origin git@github.com:Daisy/AKgit.git //关联 $ git push -u origin master //将本地内容推送到远程仓库（第一次） $ git push origin master //将本地内容推送到远程仓库（之后） $ git remote -v //查看远程仓库信息 $ git remote rm origin //删除远程仓库（解绑） $ git clone git@github.com: Daisy/AKgit.git //克隆远程仓库 //克隆之后使用和查看 $ cd gitskills $ ls $ git remote //查看远程库的信息 $ git remote -v //查看远程库的详细信息 \"]},\"194\":{\"h\":\"Maven\"},\"195\":{\"h\":\"安装\",\"t\":[\"下载地址中央仓库配置本地仓库\"]},\"196\":{\"h\":\"阿里镜像\",\"t\":[\"<mirror> <id>alimaven</id> <mirrorOf>central</mirrorOf> <name>aliyun maven</name> <url>http://maven.aliyun.com/nexus/content/repositories/central/</url> </mirror> \"]},\"197\":{\"h\":\"简单命令\",\"t\":[\"mvn compile ##编译 mvn clean ##清理 mvn test ##测试 mvn package ##打包 mvn install ##安装到本地仓库 \"]},\"198\":{\"h\":\"依赖管理\"},\"199\":{\"h\":\"依赖传递\",\"t\":[\"例如A依赖了B，B依赖了C和D，那么你就可以在A中，像主动依赖了C和D一样使用它们。并且传递的依赖是没有数量和层级的限制的，非常方便。\"]},\"200\":{\"h\":\"可选依赖\",\"t\":[\"当别的项目引用这个jar包，optional为true时不让别人知道自己所用依赖\",\" <dependency> <groupId>joda-time</groupId> <artifactId>joda-time</artifactId> <version>2.9.9</version> // 可选依赖 <optional>true</optional> </dependency> \"]},\"201\":{\"h\":\"排除依赖\",\"t\":[\"加入某个jar包依赖后，不想使用其中的某个依赖，使用坐标主动排除掉\",\"<dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> <version>${struts.version}</version> <exclusions> <exclusion> <!-- we prefer our explicit version, though it should be the same --> <groupId>asm</groupId> <artifactId>asm</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>asm</groupId> <artifactId>asm</artifactId> <version>3.3.1</version> </dependency> \"]},\"202\":{\"h\":\"依赖范围\",\"t\":[\"scope\",\"主代码\",\"测试代码\",\"打包\",\"compile(默认)\",\"Y\",\"Y\",\"Y\",\"test\",\"Y\",\"provided\",\"Y\",\"Y\",\"runtime\",\"Y\"]},\"203\":{\"h\":\"分模块\"},\"204\":{\"h\":\"pom\"},\"205\":{\"h\":\"说明\",\"t\":[\"<dependencies> 是直接依赖,在父工程配置了依赖,子工程会直接继承下来。\",\"<dependencyManagement> 是统一管理依赖版本,不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)\",\"各个模块之间引入坐标即可使用\"]},\"206\":{\"h\":\"多模块打包\"},\"207\":{\"h\":\"正确流程\",\"t\":[\"检查或者是否加了依赖，如有，删除\",\" <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> \",\"找到添加依赖\",\"<build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>17</source> <target>17</target> <encoding>UTF-8</encoding> </configuration> </plugin> </plugins> </build> \",\"找到添加打包依赖\",\"<build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>17</source> <target>17</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> <configuration> <mainClass>com.example.WebControllerApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> \",\"点击父模块的package即可打包\"]},\"208\":{\"h\":\"aliyun OSS\"},\"209\":{\"h\":\"Java 上传 aliyun OSS\",\"t\":[\"阿里官方文档Java上传文件概述和文件下载\"]},\"210\":{\"h\":\"使用RAM访问 更安全\",\"t\":[\"警告\",\"主账号AccessKey泄露会威胁您所有资源的安全。建议使用子账号（RAM用户）AccessKey进行操作，可以有效降低AccessKey泄露的风险。\",\"① 使用RAM用户访问密钥发起请求 ② \\\"Action\\\": [ \\\"oss:PutObject\\\", \\\"oss:ListObjects\\\", \\\"oss:DeleteObject\\\" ],放行权限 上传/目录/删除 权限 ③ 跨域放行\"]},\"211\":{\"h\":\"上传图片\",\"t\":[\"public List uploadObject(MultipartFile file) throws IOException { // Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。 String Endpoint = \\\"https://oss-cn-hangzhou.aliyuncs.com\\\"; // 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。 String AccessKeyId = \\\"yourAccessKeyId\\\"; String AccessKeySecret = \\\"yourAccessKeySecret\\\"; // 填写Bucket名称，例如examplebucket。 String BucketName = \\\"examplebucket\\\"; String originalFilename = file.getOriginalFilename(); OSS os = new OSSClientBuilder().build( Endpoint , AccessKeyId , AccessKeySecret ); os.putObject( BucketName , originalFilename, file.getInputStream() ); os.shutdown(); return getList(); } \"]},\"212\":{\"h\":\"目录列表\",\"t\":[\"public List getList(){ OSS ossClient = new OSSClientBuilder().build( Endpoint ,AccessKeyId ,AccessKeySecert); try { // 列举文件。如果不设置keyPrefix，则列举存储空间下的所有文件。如果设置keyPrefix，则列举包含指定前缀的文件。 ObjectListing objectListing = ossClient.listObjects(Bucket); List<OSSObjectSummary> sums = objectListing.getObjectSummaries(); ArrayList<String> list = new ArrayList<>(); for (OSSObjectSummary s : sums) { // System.out.println(\\\"\\\\t\\\" + s.getKey()); list.add(s.getKey());//返回所有的链接 } return list; } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } finally { if (ossClient != null) { ossClient.shutdown(); } } return null; } \"]},\"213\":{\"h\":\"删除图片\",\"t\":[\"public List deleteObject(String s){ //s为图片的名字 OSS ossClient = new OSSClientBuilder().build( Endpoint() ,AccessKeyId() ,AccessKeySecert()); try { // 删除文件或目录。如果要删除目录，目录必须为空。 ossClient.deleteObject(Bucket(), s); return this.getList(); } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } finally { if (ossClient != null) { ossClient.shutdown(); } } return null; } \"]},\"214\":{\"h\":\"自定义 Starter [1]\"},\"215\":{\"h\":\"介绍\",\"t\":[\"大家在开发的过程中应该经常会看到各种各样的Starter\",\"当我们需要集成某个功能的时候，Spring或是第三方都会提供一个Starter来帮助我们更简单的集成对应的功能到我们的Spring Boot项目中\"]},\"216\":{\"h\":\"准备\",\"t\":[\"现在我们假定，我们实现了一个A类用于提供我们封装好的功能\",\"public class A { ... } \",\"一般情况下我们会使用@Component往Spring容器中注入实例，如下：\",\"@Component public class A { ... } \",\"现在当我们要把A单独抽出来做成一个Starter时@Component就不太合适了，那么我们应该怎么实现呢，让我们先给我们的Starter取个名字吧哈哈哈\"]},\"217\":{\"h\":\"取名\",\"t\":[\"首先我们要先确定我们的Starter的名字\",\"Spring本身就有很多自带的Starter，比如：\",\"spring-boot-starter-web\",\"spring-boot-starter-data-redis\",\"spring-boot-starter-websocket\",\"spring-cloud-starter-netflix-eureka-client\",\"spring-cloud-starter-openfeign\",\"spring-cloud-starter-gateway\",\"可以发现这些自带的Starter的名称格式都是spring-boot-starter-xxx或是spring-cloud-starter-xxx\",\"另外我们也可以看到很多第三方库的Starter，比如：\",\"redisson-spring-boot-starter\",\"mybatis-plus-boot-starter\",\"一般来说，第三方的Starter会把starter放后面，xxx-spring-boot-starter或是xxx-boot-starter或是xxx-starter\",\"不过我个人习惯还是xxx-spring-boot-starter感觉更标准一点\",\"所以现在就把我们要实现的Starter取名为a-spring-boot-starter\"]},\"218\":{\"h\":\"配置类\",\"t\":[\"之前说@Component已经不太合适了，那么要怎么把A注入到Spring的容器中呢\",\"答案是：@Configuration+@Bean，如下\",\"@Configuration public class AConfiguration { @Bean public A a() { return new A(); } } \",\"这个用法大家应该也是比较熟悉，一般在一个项目中也会有一些标记了@Configuration的配置类\",\"只要Spring能够扫描到这个类，A实例就能被注入\",\"如果这个配置类是写在我们自己的包下，那么Spring默认的扫描路径就能扫到\",\"但是现在我们如果做成一个Starter，对应的包名可能就扫不到了\",\"所以我们需要用另外的方式来导入这个配置类\"]},\"219\":{\"h\":\"导入方式\",\"t\":[\"接下来就可以决定我们的Starter的导入方式了\",\"常用的导入方式有两种：使用@EnableXXX或是spring.factories\",\"我们经常能看到有些组件的会需要你添加@EnableXXX的注解来启用某个功能，比如：\",\"@EnableDiscoveryClient\",\"@EnableFeignClients\",\"这种方式光引入包还不够，需要手动添加注解来启用\",\"而使用spring.factories就只要引入包就可以直接生效了\",\"这两种方式其实用哪种都一样，主要是看有没有必要额外配置一个注解\",\"比如@EnableFeignClients这个注解是可以配置扫描路径的，所以额外添加一个注解更加合适（这里使用配置文件是不合适的，因为我们的包结构是确定的，如果配置在配置文件里面反而多余又容易写错）\"]},\"220\":{\"h\":\"注解导入\",\"t\":[\"我们先使用注解的方式来导入，定义一个@EnableA\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AConfiguration.class) public @interface EnableA { } \",\"使用@Import注解导入AConfiguration.class就可以了\",\"当我们需要集成这个功能的时候只要添加这个注解就行了\",\"@EnableA @SpringBootApplication public class SampleApplication { public static void main(String[] args) { SpringApplication.run(SampleApplication.class, args); } } \"]},\"221\":{\"h\":\"注解参数\",\"t\":[\"这个时候可能就有同学要问了，如果我的注解上有参数呢，上面的写法好像没办法拿到参数啊\",\"接下来我们来解决这个问题\",\"现在我们给@EnableA注解添加一个参数enabled，当enabled为true时导入AConfiguration.class，当enabled为false时不导入AConfiguration.class\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AConfiguration.class) public @interface EnableA { boolean enabled() default true; } \",\"接着我们实现一个ImportSelector\",\"public class AImportSelector implements ImportSelector { @Override public String[] selectImports(AnnotationMetadata metadata) { Map<String, Object> attributes = metadata .getAnnotationAttributes(EnableA.class.getName()); boolean enabled = (boolean) attributes.get(\\\"enabled\\\"); if (enabled) { return new String[]{AConfiguration.class.getName()}; } else { return new String[]{}; } } } \",\"我们可以通过ImportSelector中提供给我们的AnnotationMetadata来获得EnableA中的属性enabled\",\"当enabled为true时，我们返回AConfiguration.class的全限定名；当enabled为false时，返回空数组即可\",\"最后我们将@Import(AConfiguration.class)改为@Import(AImportSelector.class)就行了\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AImportSelector.class) public @interface EnableA { boolean enabled() default true; } \",\"当我们将enabled设置为false时，就不会配置AConfiguration.class了\",\"@EnableA(enabled = false) @SpringBootApplication public class SampleApplication { public static void main(String[] args) { SpringApplication.run(SampleApplication.class, args); } } \",\"其实还有另一种方式也可以拿到注解的属性，那就是ImportBeanDefinitionRegistrar\",\"public interface ImportBeanDefinitionRegistrar { default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { } } \",\"和ImportSelector不同的是，ImportBeanDefinitionRegistrar可以直接注册BeanDefinition\",\"如果我们用ImportBeanDefinitionRegistrar来实现上面的功能大概就是这个样子\",\"public class AImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar { @Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { Map<String, Object> attributes = metadata .getAnnotationAttributes(EnableA.class.getName()); boolean enabled = (boolean) attributes.get(\\\"enabled\\\"); if (enabled) { registry.registerBeanDefinition(\\\"a\\\", new RootBeanDefinition(A.class)); } } } \",\"然后同样的把@Import(AConfiguration.class)改为@Import(AImportBeanDefinitionRegistrar.class)就行了\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AImportBeanDefinitionRegistrar.class) public @interface EnableA { boolean enabled() default true; } \"]},\"222\":{\"h\":\"spring.factories导入\",\"t\":[\"接下来我们使用spring.factories来导入配置（注解和spring.factories选择一种就可以啦）\",\"我们需要在resources目录下新建一个META-INF目录，然后在META-INF目录下创建spring.factories文件\",\"接着我们需要在spring.factories中将AConfiguration.class配置上去\",\"properties复制代码org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\ com.xxx.xxx.AConfiguration \",\"一般情况下，如果是配置在spring.factories中的配置类都会取名xxxAutoConfiguration，所以我们在这里修改名称为AAutoConfiguration\",\"最后在spring.factories中的配置\",\"properties复制代码org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\ com.xxx.xxx.AAutoConfiguration \",\"这样当你的项目启动后，Spring就会自动读取spring.factories将AAutoConfiguration(AConfiguration)扫描进去了\"]},\"223\":{\"h\":\"配置文件\",\"t\":[\"正常情况下，我们很有可能需要在application.yml或application.properties中配置一些参数\",\"所以我们现在需要一个属性a.enabled来控制是否注入A\",\"还需要一个属性a.b.type来配置A的某个字段\",\"那么怎么在我们的AAutoConfiguration中获得这两个属性呢\",\"大家可能会想，简单啊，用@Value不就好了？\",\"虽然@Value确实能拿到配置文件中的值，但是有更好的方式\",\"那就是用@ConfigurationProperties+@EnableConfigurationProperties\",\"我们需要先定义一个AProperties\",\"@Data @ConfigurationProperties(prefix = \\\"a\\\") public class AProperties { //映射 a.enabled; private boolean enabled = true; private B b = new B(); @Data public static class B { //映射 a.b.type; private String type; } } \",\"同时给AProperties添加ConfigurationProperties注解并标记前缀为a\",\"接着我们在AAutoConfiguration上添加@EnableConfigurationProperties就行了\",\"@Configuration @EnableConfigurationProperties(AProperties.class) public class AConfiguration { @Bean @ConditionalOnProperty(name = \\\"a.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true) public A a(AProperties properties) { String type = properties.getB().getType(); return new A(); } } \",\"我们可以通过@ConditionalOnProperty来根据a.enabled控制是否注入A\",\"在方法参数中也可以直接注入AProperties对象，并且里面的属性已经根据配置文件绑定好了\"]},\"224\":{\"h\":\"自动提示\",\"t\":[\"不知道大家有没有发现，Spring自带的配置是会有提示的，但是我们自定义的配置就没有\",\"有没有什么办法让我们的AProperties也能自动提示呢\",\"只要引入下面这个包就行啦\",\"gradle 复制代码annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor' xml复制代码<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \",\"如果AProperties有改动需要重新编译才会生效哦\"]},\"225\":{\"h\":\"配置代理\",\"t\":[\"@Configuration的proxyBeanMethods可以指定该配置中的方法是否进行代理，具体有什么作用呢\",\"假设现在我们的A需要依赖B实例，那我们的配置可以这样写\",\"@Configuration public class AConfiguration { @Bean public B b() { return new B(); } @Bean public A a() { return new A(b()); } } \",\"@Configuration的proxyBeanMethods默认是true，所以在a()中调用b()是会从Spring的容器中获得B实例\",\"如果我们不启用方法代理可以这样写\",\"@Configuration(proxyBeanMethods = false) public class AConfiguration { @Bean public B b() { return new B(); } @Bean public A a(B b) { return new A(b); } } \",\"直接在方法参数中注入即可\",\"不启用方法代理的情况下，如果直接调用方法，就是普通的方法调用，每调用一次就会新建一个B实例\"]},\"226\":{\"h\":\"配置依赖\",\"t\":[\"接着之前的假设，A需要依赖B实例，但是现在B允许为null\",\"那么之前的配置方式就不行了\",\"@Configuration public class AConfiguration { @Bean public A a(B b) { return new A(b); } } \",\"如果直接在方法上注入B实例，就会报错找不到对应的Bean\",\"这种情况下，我们可以使用ObjectProvider，如下：\",\"@Configuration public class AConfiguration { @Bean public A a(ObjectProvider<B> bProvider) { return new A(bProvider.getIfUnique()); } } \"]},\"227\":{\"h\":\"条件装配\",\"t\":[\"在我们写Starter的过程中，条件装配也是经常用到的功能\",\"最常用的其实就是@ConditionalOnMissingBean了\",\"我们可以这样用\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean public A a() { return new A(); } } \",\"当Spring发现当前已经存在A对应的实例时，就不会再注入这个配置中的A实例了\",\"一般当我们重写了某个库中的某个组件后，该库中该组件的默认实现就不会生效了，便于我们扩展一些自定义的功能来替换默认实现\",\"但是这个注解如果用不好也可能出现问题\",\"假设现在我们的A有一个扩展类A1\",\"我们来看下面的配置1\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean public A1 a() { return new A1(); } } \",\"@ConditionalOnMissingBean的判断逻辑是：当容器中存在A1类型的对象就不会再注入这个配置中的A1实例\",\"接着我们再看下面的配置2\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean public A a() { return new A1(); } } \",\"@ConditionalOnMissingBean的判断逻辑是：当容器中存在A类型的对象就不会再注入这个配置中的A1实例\",\"如果在这个时候，容器中存在A2(A的另一个扩展类)实例，配置1中的A1还是会被注入，配置2中A1不会被注入\",\"因为@ConditionalOnMissingBean的缺省值是方法的返回类型，所以大家在使用时需要多加注意，保险起见可以指定@ConditionalOnMissingBean中的值，例如：\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean(A.class) public A1 a() { return new A1(); } } \"]},\"228\":{\"h\":\"其他常用的条件注解\",\"t\":[\"@ConditionalOnBean 当对应的Bean存在时生效\",\"@ConditionalOnClass 当对应的Class存在时生效\",\"@ConditionalOnMissingClass 当对应的Class不存在时生效\",\"@ConditionalOnProperty 当对应的配置匹配时生效\",\"@ConditionalOnWebApplication 可以指定在Servlet或Reactive环境中生效\"]},\"229\":{\"h\":\"配置顺序\",\"t\":[\"在某些情况下，我们可能会发现一些条件注解不生效\",\"这个时候我们可以尝试指定配置顺序（并不保证能够解决所有的失效问题）\",\"@AutoConfigureBefore 在某个配置之前进行配置\",\"@AutoConfigureAfter 在某个配置之后进行配置\",\"@AutoConfigureOrder 指定配置顺序\",\"不过这里需要注意这几个注解只能对自动配置生效，也就是需要定义在spring.factories中的配置\",\"添加注解的类的可以是任意的配置类，但是注解中指定的类需要是spring.factories中的配置的类\",\"来自：https://juejin.cn/post/7124603507025379365↩︎\"]},\"230\":{\"h\":\"书本\"},\"231\":{\"h\":\"静态资源访问\",\"t\":[\"spring: mvc: static-path-pattern: /static/** web: resources: static-locations: classpath:/static/ \",\"@Configuration public class staticHandles implements WebMvcConfigurer { @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"/static/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); } } \"]},\"232\":{\"h\":\"文件上传\",\"t\":[\" <dependency> <groupId>javax.servlet</groupId> <artifactId>servlet-api</artifactId> <version>2.5</version> <scope>provided</scope> </dependency> \",\" <form action=\\\"/upload\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"> <input type=\\\"file\\\" name=\\\"uploadFile\\\" value=\\\"选择文件\\\"> <input type=\\\"submit\\\" value=\\\"上传\\\"> </form> \",\"@RestController public class FileUploadController { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy/MM/dd\\\"); @PostMapping(\\\"/upload\\\") public String upload(MultipartFile uploadFile, HttpServletRequest req){ // 运行目录下 没有文件夹 就建一个 String realPath = req.getSession().getServletContext().getRealPath(\\\"/uploadFile/\\\"); System.out.println(realPath); String format = sdf.format(new Date()); File folder = new File(realPath + format); if(!folder.isDirectory()){ folder.mkdirs(); } // 重命名 String oldName = uploadFile.getOriginalFilename(); String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(\\\".\\\")); try{ // 保存 uploadFile.transferTo(new File(folder,newName)); // 返回路径 String filePath = req.getScheme() + \\\"://\\\" + req.getServerName() + \\\":\\\" + req.getServerPort() + \\\"/uploadFile/\\\" + format + newName; return filePath; } catch (IOException e) { throw new RuntimeException(e); } } } \",\"相关信息\",\"打包使用\",\"@PostMapping(\\\"/localhost\\\") public String uploadFile(MultipartFile file) { String directoryPath = \\\"static/images/\\\"; String fileName = file.getOriginalFilename(); try { // 获取当前应用程序的根目录 String rootPath = System.getProperty(\\\"user.dir\\\"); // 拼接完整的目录路径 String filePath = rootPath + \\\"/\\\" + directoryPath; // 创建目录 File directory = new File(filePath); if (!directory.exists()) { directory.mkdirs(); } // 创建文件对象 File destFile = new File(directory, fileName); // 保存文件 file.transferTo(destFile); return \\\"上传成功\\\"; } catch (IOException e) { e.printStackTrace(); } return \\\"上传失败\\\"; } \",\"spring: servlet: multipart: # 是否开启上传 enabled: true file-size-threshold: 0 # 保存临时位置 location: E:\\\\\\\\temp # 最大 max-file-size: 10MB # 总大小 max-request-size: 10MB # 是否延迟解析 resolve-lazily: false \"]},\"233\":{\"h\":\"热加载（Hot Swap）\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> \"]},\"234\":{\"h\":\"WebSocket 和 SockJS\",\"t\":[\"应用场景\",\"WebSocket 和 SockJS 两者都应用广泛，具体应该根据实际情况来选择。WebSocket 是 HTML5 的一种新协议，它实现了浏览器与服务器全双工通信，实现了客户端与服务器端的实时通信。而 SockJS 是 WebSocket 的一个 polyfill 实现，即当浏览器不支持 WebSocket 时，SockJS 可以自动降级为支持长轮询等传输方式的 WebSocket 模拟实现，从而使得浏览器与服务器之间的通信始终保持稳定和高效。\",\"WebSocket和SockJS都是在Web应用程序中使用实时通信的协议，它们都有自己的优势和缺点。\"]},\"235\":{\"h\":\"WebSocket的优势：\",\"t\":[\"简单易用：WebSocket是一个非常简单的协议，只需建立连接，就可以进行双向通信。\",\"高效性：WebSocket的头部信息非常小，数据格式紧凑，因此数据传输的效率非常高。\",\"双向通信：WebSocket提供了双向通信的功能，可以同时在客户端和服务器端发送和接收消息。\"]},\"236\":{\"h\":\"WebSocket的缺点：\",\"t\":[\"支持性：WebSocket是HTML5标准的一部分，因此只有在支持HTML5的浏览器中才能使用。对于老的浏览器，需要使用polyfill或其他技术。\",\"长连接：WebSocket在连接建立后会一直保持连接，如果服务器端不能正常关闭连接，可能会导致资源浪费和性能问题。\"]},\"237\":{\"h\":\"SockJS的优势：\",\"t\":[\"跨浏览器：SockJS可以在所有支持JavaScript的浏览器中运行，甚至包括IE6。\",\"支持性：SockJS可以通过polyfill模拟WebSocket的功能，因此在不支持WebSocket的浏览器中也可以使用。\",\"可靠性：SockJS在不支持WebSocket的浏览器中使用的是长轮询技术，可以保证数据的可靠性。\"]},\"238\":{\"h\":\"SockJS的缺点：\",\"t\":[\"头部信息较大：因为SockJS在不支持WebSocket的浏览器中使用的是长轮询技术，因此需要发送大量的头部信息，导致数据传输效率较低。\",\"连接不稳定：由于SockJS在不支持WebSocket的浏览器中使用的是长轮询技术，因此可能会遇到连接不稳定的情况，例如断开连接或网络故障。\"]},\"239\":{\"h\":\"发送邮件\",\"t\":[\"study\",\"application.yml\",\"spring: # 邮件配置 mail: host: smtp.qq.com port: 465 username: totryeverything@qq.com password:<第一步获得的密钥> default-encoding: utf-8 properties: mail: smtp: socketFactory: class: javax.net.ssl.SSLSocketFactory debug: true \",\"pom.xml\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-mail</artifactId> </dependency> \",\"Service\",\" @Service public class MailService { @Autowired JavaMailSender javaMailSender; // 抄送（CC），用户给收件人发出邮件的同时把该邮件抄送给另外的人，在这种抄送方式中，“收件人”知道发件人把该邮件抄送给了另外哪些人。 // 发送者 收件人 抄送人 主题 内容 public void sendSimpleMail(String from,String to, String subject,String content){ SimpleMailMessage msg = new SimpleMailMessage(); msg.setFrom(from); msg.setTo(to); msg.setSubject(subject); msg.setText(content); javaMailSender.send(msg); } // 发送带附件的邮件 public void sendFailMail(String from,String to, String subject,String content, File file) throws MessagingException { MimeMessage msg = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(msg,true); helper.setFrom(from); helper.setTo(to); helper.setText(content); helper.setSubject(subject); helper.addAttachment(file.getName(),file); javaMailSender.send(msg); } // 附带图片 public void sendMailImg(String from,String to, String subject,String content, String[] srcPath, String[] resIds) throws MessagingException { if(srcPath.length!=resIds.length){ System.out.println(\\\"hello world\\\"); return ; } MimeMessage msg = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(msg, true); helper.setFrom(from); helper.setTo(to); helper.setText(content,true);//表示正文是HTML格式 helper.setSubject(subject); for(int i=0;i<srcPath.length;i++){ FileSystemResource res = new FileSystemResource(new File(srcPath[i])); helper.addInline(resIds[i],res); } javaMailSender.send(msg); } } \",\"Test\",\" @Autowired private MailService mailService; @Test void sendSimpleMail() { mailService.sendSimpleMail(\\\"totryeverything@qq.com\\\",\\\"19138084894@163.com\\\", \\\"Test\\\",\\\"这只不过是一个测试而已\\\"); } @Test void sendFailMail() throws MessagingException { mailService.sendFailMail(\\\"totryeverything@qq.com\\\",\\\"19138084894@163.com\\\", \\\"Test\\\",\\\"这只不过是一个测试而已\\\",new File(\\\"E:\\\\\\\\c\\\\\\\\ToTryEveryThing\\\\\\\\README.md\\\")); } @Test void sendImgMail() throws MessagingException { mailService.sendMailImg(\\\"totryeverything@qq.com\\\",\\\"19138084894@163.com\\\", \\\"Test\\\", \\\"这只不过是一个测试而已\\\" + \\\"<img /><img />\\\", new String []{\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Pictures\\\\\\\\47f4c019880711ebb6edd017c2d2eca2.jpg\\\",\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Pictures\\\\\\\\下载 (2).png\\\"}, new String[]{\\\"p1\\\",\\\"p2\\\"} ); } \"]},\"240\":{\"h\":\"定时任务\",\"t\":[\"提示\",\"在Spring Boot应用程序中使用@Scheduled注解标记的定时任务是在应用程序启动时自动启动的。\",\"配置\",\"@Configuration @EnableScheduling public class ScheduledTasksConfig { } \",\"使用\",\"延迟5s启动 然后每隔5s运行一次\",\" @Scheduled(fixedRate = 5000,initialDelay = 5000) public String schedul (){ System.out.println(i++); return String.valueOf(i); } \"]},\"241\":{\"h\":\"@Scheduled(cron = \\\"0 0 12 * * ?\\\"): 使用CRON表达式指定执行时间。\",\"t\":[\"// 每天中午12点执行任务 @Scheduled(cron = \\\"0 0 12 * * ?\\\") public void doTask() { // your task code here } \",\"自启动 通过get方法停止任务\",\"@RestController public class ScheduleController { @Autowired private TaskScheduler taskScheduler; private ScheduledFuture<?> scheduledFuture; @PostConstruct public void start() { scheduledFuture = taskScheduler.scheduleWithFixedDelay(new MyTask(), 5000L);//5000ms } @GetMapping(\\\"/stop\\\") public String stop() { if (scheduledFuture != null) { scheduledFuture.cancel(true); } return \\\"stop\\\"; } private class MyTask implements Runnable { @Override public void run() { System.out.println(\\\"Task executing...\\\"); } } } \"]},\"242\":{\"h\":\"数据校验\",\"t\":[\"https://www.cnblogs.com/54chensongxia/p/14016179.html\",\"依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> \",\"配置 ValidationMessages.properties\",\"user.name.size = name user.address.notnull = adress user.age.size = age user.email.pattern = email \",\"pojo\",\"public class User { @Size(min = 2,max = 10, message = \\\"{user.name.size}\\\") private String name; @NotNull(message = \\\"{user.address.notnull}\\\") private String address; @DecimalMin(value = \\\"1\\\" ,message = \\\"{user.age.size}\\\") @DecimalMax(value = \\\"100\\\" ,message = \\\"{user.age.size}\\\") private Integer age; @Email(message = \\\"{user.email.pattern}\\\") private String email; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } } \",\"controller\",\"@RestController public class UserController { @PostMapping(\\\"/adduser/\\\") public List<String> addUser(@Validated User user, BindingResult bindingResult){ ArrayList<String> error = new ArrayList<>(); if(bindingResult.hasErrors()){ List<ObjectError> allErrors = bindingResult.getAllErrors(); for(ObjectError e : allErrors){ error.add(e.getDefaultMessage()); System.out.println(\\\"e.getDefaultMessage() = \\\" + e.getDefaultMessage()); } } return error; } } \",\"<template> <div> <!-- input 标签用于选择图片 --> <input type=\\\"file\\\" accept=\\\"image/*\\\" @change=\\\"previewImage\\\"> <!-- 预览图片的 img 标签 --> <img ref=\\\"previewImg\\\" style=\\\"max-width: 100%; max-height: 100%;\\\" /> </div> </template> <script> export default { methods: { previewImage(event) { // 获取选择的文件 const file = event.target.files[0]; // 判断是否是图片类型 if (file.type.startsWith('image/')) { // 创建 FileReader 对象 const reader = new FileReader(); // 读取图片文件 reader.readAsDataURL(file); // 在图片文件读取完毕后设置预览图片的 URL reader.onload = () => { this.$refs.previewImg.src = reader.result; }; } }, }, }; </script> \"]},\"243\":{\"h\":\"分布式锁\"},\"244\":{\"h\":\"Redis分布式锁和Redisson分布式锁都是用于实现分布式系统中的分布式锁，但它们之间有以下区别：\",\"t\":[\"Redis分布式锁是基于Redis的SETNX命令实现的，而Redisson分布式锁是基于Redis的Redisson分布式框架实现的。\",\"Redis分布式锁需要手动编写锁逻辑代码，包括锁定、释放锁等。Redisson分布式锁封装了锁逻辑，并提供了API接口，使得锁的使用变得简单。\",\"Redis分布式锁在进行锁定和解锁操作时，需要自己实现保证操作的原子性。Redisson分布式锁内部封装了Redis的单线程模型，保证了锁的操作原子性。\",\"Redis分布式锁在锁定后需要手动维护锁的超时时间。Redisson分布式锁内部封装了锁的自动续期机制，避免了锁过期的问题。\",\"Redis分布式锁在高并发场景下可能存在死锁的问题。Redisson分布式锁使用Redlock算法避免了死锁的问题。\"]},\"245\":{\"h\":\"redis分布式锁\",\"t\":[\"public Result regasdgsdgister(String account, String password) { final String key = account + \\\"-lock\\\"; final String value = System.nanoTime() + \\\" \\\" + UUID.randomUUID(); ValueOperations v = stringRedisTemplate.opsForValue(); Boolean res = v.setIfAbsent(key,value); if(res){ stringRedisTemplate.expire(key,20L, TimeUnit.SECONDS); if(account == null){ return new Result(0,\\\"用户名不能为空\\\"); } if(password.length() == 0){ return new Result(0,\\\"密码不能为空\\\"); } account = account.trim(); if(account.length()==0){ return new Result(0,\\\"用户名不能为空\\\"); } if(password.length()>50){ return new Result(0,\\\"密码长度不能超过50\\\"); } QueryWrapper<web> queryWrapper = new QueryWrapper<web>(); queryWrapper.eq(\\\"account\\\",account); List<web> webs = webMapper.selectList(queryWrapper); if(!webs.isEmpty()){ return new Result(0,\\\"用户名已存在\\\"); } String pass = passwordEncoder.encode(password); String jwt = JwtUtil.createJWT(account); web web1 = new web(); web1.setBackimg(\\\"5\\\"); web1.setList(\\\"[]\\\"); web1.setPassword(pass); web1.setAccount(account); web1.setDate(new Date()); webMapper.insert(web1); String git = \\\"[{\\\\\\\"title\\\\\\\":\\\\\\\"你好\\\\\\\",\\\\\\\"name\\\\\\\":1,\\\\\\\"content\\\\\\\":\\\\\\\"## new content\\\\\\\",\\\\\\\"show\\\\\\\":true}]\\\\n\\\" + \\\"\\\\n\\\"; String title = \\\"[\\\\\\\"你好\\\\\\\"]\\\"; System.out.println(publicMapper.insert(new Public(account, title,git))+999999); System.out.println(new Date()); if(value.equals(v.get(key).toString())){ stringRedisTemplate.delete(key); } return new Result(1,\\\"success\\\",jwt); } return null; } \"]},\"246\":{\"h\":\"Redisson\",\"t\":[\"Redisson学习地址\",\"引入\",\"<!-- redisson--> <dependency> <groupId>org.redisson</groupId> <artifactId>redisson</artifactId> <version>3.6.5</version> </dependency> \",\"RedissonConfig\",\"@Configuration public class RedissonConfig { @Bean RedissonClient redisson() { Config config = new Config(); config.useSingleServer().setAddress(\\\"redis://localhost:6379\\\").setDatabase(0); return Redisson.create(config); } } \",\"使用\",\" @Autowired RedissonClient redissonClient; @Override public Result showbyid(Integer id) { RLock lock = redissonClient.getLock(String.valueOf(id)); lock.lock(); try{ article article = articleMapper.selectById(id); article.setViews(article.getViews()+1); int i = articleMapper.updateById(article); return new Result(1,\\\"success\\\",article); }finally { lock.unlock(); } } \"]},\"247\":{\"h\":\"Swagger\"},\"248\":{\"h\":\"搭建\",\"t\":[\" <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-swagger2</artifactId> <version>3.0.0</version> </dependency> \",\"@Configuration @EnableSwagger2 public class SwaggerConfig { @Bean public Docket productApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) //添加ApiOperiation注解的被扫描 .paths(PathSelectors.any()) .build(); } private ApiInfo apiInfo() { return new ApiInfoBuilder().title(\\\"都是书本上的呀\\\").description(\\\"根本不需要的描述\\\") .version(\\\"1.0\\\").build(); } } \"]},\"249\":{\"h\":\"Linux\"},\"250\":{\"h\":\"查找命令\"},\"251\":{\"h\":\"find\",\"t\":[\"作用: 在指定目录下查找文件 语法: find dirName -option fileName 举例:\",\"find . –name \\\"*.java\\\" 在当前目录及其子目录下查找.java结尾文件\",\"find /itcast -name \\\"*.java\\\" 在/itcast目录及其子目录下查找.java结尾的文\"]},\"252\":{\"h\":\"grep\",\"t\":[\"作用: 从指定文件中查找指定的文本内容 语法: grep word fileName 举例:\",\"grep Hello HelloWorld.java 查找HelloWorld.java文件中出现的Hello字符串的位置\",\"grep hello *.java 查找当前目录中所有.java结尾的文件中包含hello字符串的位置\"]},\"253\":{\"h\":\"docker\"},\"254\":{\"h\":\"数据卷\",\"t\":[\"数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。 以Nginx为例，我们知道Nginx中有两个关键的目录：\",\"html：放置一些静态资源\",\"conf：放置配置文件\",\"提示\",\"如果我们要让Nginx代理我们的静态资源，最好是放到html目录；如果我们要修改Nginx的配置，最好是找到conf下的nginx.conf文件。 但遗憾的是，容器运行的Nginx所有的文件都在容器内部，读写都非常不方便。所以我们通常会利用数据卷将两个目录与宿主机目录关联，\"]},\"255\":{\"h\":\"基本命令\",\"t\":[\"命令\",\"说明\",\"docker volume create\",\"创建数据卷\",\"docker volume ls\",\"查看所有的数据卷\",\"docker volume rm\",\"删除指定的数据卷\",\"docker volume inspect\",\"查看某个数据卷的详情\",\"docker volume prune\",\"清除数据卷\",\"-v html:/usr/share/nignx/html 挂载目录\",\"-v /home/test/mysql/mysql:/usr/mysql/mysql 映射宿主机上\"]},\"256\":{\"h\":\"示例\",\"t\":[\"之后就可以随意修改了\"]},\"257\":{\"h\":\"自定义镜像\",\"t\":[\"docker build -t docker-demo:1.0 . \",\"命令说明：\",\"docker build : 就是构建一个docker镜像\",\"-t docker-demo:1.0 ：-t参数是指定镜像的名称（repository和tag）\",\". : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是.代表当前目录，也可以直接指定Dockerfile目录：\",\"docker build -t docker-demo:1.0 /root/demo \"]},\"258\":{\"h\":\"DockerCompose\",\"t\":[\"xx.yml\",\"version: \\\"3.8\\\" services: mysql: image: mysql:5.7.25 environment: MYSQL_ROOT_PASSWORD: 123 volumes: - \\\"/tmp/mysql/data:/var/lib/mysql\\\" - \\\"/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf\\\" web: build: . ports: - \\\"8090:8090\\\" \",\"基本语法：\",\"docker compose [OPTIONS] [COMMAND] docker compose up -d # 跑起来 \",\"为了避免每次使用docker命令都需要加上sudo权限，可以将当前用户加入安装中自动创建的docker用户组如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose\",\"sudo usermod -aG docker $USER \",\"执行完此操作后，需要退出服务器，再重新登录回来，才可以省去sudo权限。\"]},\"259\":{\"h\":\"基操\"},\"260\":{\"h\":\"镜像（images）\",\"t\":[\"docker pull ubuntu:20.04：拉取一个镜像 docker images：列出本地所有镜像 docker image rm ubuntu:20.04 或 docker rmi ubuntu:20.04：删除镜像ubuntu:20.04 docker [container] commit CONTAINER IMAGE_NAME:TAG：创建某个container的镜像 docker save -o ubuntu_20_04.tar ubuntu:20.04：将镜像ubuntu:20.04导出到本地文件ubuntu_20_04.tar中 docker load -i ubuntu_20_04.tar：将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来 \"]},\"261\":{\"h\":\"容器(container)\",\"t\":[\"docker [container] create -it ubuntu:20.04：利用镜像ubuntu:20.04创建一个容器。 docker ps -a：查看本地的所有容器 docker [container] start CONTAINER：启动容器 docker [container] stop CONTAINER：停止容器 docker [container] restart CONTAINER：重启容器 docker [contaienr] run -itd ubuntu:20.04：创建并启动一个容器 docker [container] attach CONTAINER：进入容器 先按Ctrl-p，再按Ctrl-q可以挂起容器 docker [container] exec CONTAINER COMMAND：在容器中执行命令 docker [container] rm CONTAINER：删除容器 docker container prune：删除所有已停止的容器 docker export -o xxx.tar CONTAINER：将容器CONTAINER导出到本地文件xxx.tar中 docker import xxx.tar image_name:tag：将本地文件xxx.tar导入成镜像，并将镜像命名为image_name:tag docker export/import与docker save/load的区别： export/import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态 save/load会保存完整记录，体积更大 docker top CONTAINER：查看某个容器内的所有进程 docker stats：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息 docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx：在本地和容器间复制文件 docker rename CONTAINER1 CONTAINER2：重命名容器 docker update CONTAINER --memory 500MB：修改容器限制 \"]},\"262\":{\"h\":\"例子\",\"t\":[\"创建 运行镜像 docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0 \"]},\"263\":{\"h\":\"mysql\"},\"264\":{\"h\":\"导出完整数据库\",\"t\":[\"用mysqldump命令导出数据库（此命令的路径即mysql的安装路径） mysqldump -u用户名 -p 数据库名 > 数据库名.sql \",\"例如\",\"/usr/local/mysql/bin mysqldump -uroot -p aaa > aaa.sql \",\"2、只导出表结构 如果只需要导出表结构\",\"mysqldump -u用户名 -p -d 数据库名 > 数据库名.sql \",\"例如\",\"mysqldump -uroot -p -d aaa >aaa.sql 可以使用以下命令找到导出的数据库 find / -name 数据库名.sql \"]},\"265\":{\"h\":\"导入数据库\",\"t\":[\"1、使用mysql命令导入 mysql -u用户名 -p 数据库名 < 数据库名.sql 例如\",\"mysql -uroot -p aaa < aaa.sql \",\"2、使用sources命令导入 先进入到mysql中\",\"mysql> create databases aaa; #创建新的数据库 mysql> use aaa; #使用已创建的数据库 mysql> set names utf-8; #设置编码 mysql> source /aaa.sql #导入sql文件，注意sql的路径 \"]},\"266\":{\"h\":\"vim\",\"t\":[\"(1) i：进入编辑模式 (2) ESC：进入一般命令模式 (3) h 或 左箭头键：光标向左移动一个字符 (4) j 或 向下箭头：光标向下移动一个字符 (5) k 或 向上箭头：光标向上移动一个字符 (6) l 或 向右箭头：光标向右移动一个字符 (7) n<Space>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符 (8) 0 或 功能键[Home]：光标移动到本行开头 (9) $ 或 功能键[End]：光标移动到本行末尾 (10) G：光标移动到最后一行 (11) :n 或 nG：n为数字，光标移动到第n行 (12) gg：光标移动到第一行，相当于1G (13) n<Enter>：n为数字，光标向下移动n行 (14) /word：向光标之下寻找第一个值为word的字符串。 (15) ?word：向光标之上寻找第一个值为word的字符串。 (16) n：重复前一个查找操作 (17) N：反向重复前一个查找操作 (18) :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2 (19) :1,$s/word1/word2/g：将全文的word1替换为word2 (20) :1,$s/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。 (21) v：选中文本 (22) d：删除选中的文本 (23) dd: 删除当前行 (24) y：复制选中的文本 (25) yy: 复制当前行 (26) p: 将复制的数据在光标的下一行/下一个位置粘贴 (27) u：撤销 (28) Ctrl + r：取消撤销 (29) 大于号 >：将选中的文本整体向右缩进一次 (30) 小于号 <：将选中的文本整体向左缩进一次 (31) :w 保存 (32) :w! 强制保存 (33) :q 退出 (34) :q! 强制退出 (35) :wq 保存并退出 (36) :set paste 设置成粘贴模式，取消代码自动缩进 (37) :set nopaste 取消粘贴模式，开启代码自动缩进 (38) :set nu 显示行号 (39) :set nonu 隐藏行号 (40) gg=G：将全文代码格式化 (41) :noh 关闭查找关键词高亮 (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令 \"]},\"267\":{\"h\":\"ssh 免密登录\",\"t\":[\"ssh-keygen 先生成一对密钥 ssh-keygen -R 127.0.0.1 清除公钥信息 ssh-copy-id 127.0.0.1 发送公钥 /.ssh 下创建config文件 Host 别名 Hostname 127.0.0.1 User 登录名 最后即可使用ssh 别名登录 \"]},\"268\":{\"h\":\"Jenkins\",\"t\":[\"Jenkins\"]},\"269\":{\"h\":\"Puppeteer\"},\"270\":{\"h\":\"API | FAQ | Contributing | Troubleshooting\",\"t\":[\"Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行，但是可以通过修改配置文件运行“有头”模式。\"]},\"271\":{\"h\":\"能做什么?\",\"t\":[\"你可以在浏览器中手动执行的绝大多数操作都可以使用 Puppeteer 来完成！ 下面是一些示例：\",\"生成页面 PDF。\",\"抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。\",\"自动提交表单，进行 UI 测试，键盘输入等。\",\"创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。\",\"捕获网站的 timeline trace，用来帮助分析性能问题。\",\"测试浏览器扩展。\",\"演示地址: https://try-puppeteer.appspot.com/\"]},\"272\":{\"h\":\"开始使用\"},\"273\":{\"h\":\"安装\",\"t\":[\"在项目中使用 Puppeteer：\",\"npm i puppeteer # or \\\"yarn add puppeteer\\\" \",\"Note: 当你安装 Puppeteer 时，它会下载最新版本的Chromium（~170MB Mac，~282MB Linux，~280MB Win），以保证可以使用 API。 如果想要跳过下载，请阅读环境变量。\"]},\"274\":{\"h\":\"puppeteer-core\",\"t\":[\"自 1.7.0 版本以来，我们都会发布一个 puppeteer-core 包，这个包默认不会下载 Chromium。\",\"npm i puppeteer-core # or \\\"yarn add puppeteer-core\\\" \",\"puppeteer-core 是一个的轻量级的 Puppeteer 版本，用于启动现有浏览器安装或连接到远程安装。\",\"具体见 puppeteer vs puppeteer-core.\"]},\"275\":{\"h\":\"使用\",\"t\":[\"Note: Puppeteer 至少需要 Node v6.4.0，下面的示例使用 async / await，它们仅在 Node v7.6.0 或更高版本中被支持。\",\"Puppeteer 使用起来和其他测试框架类似。你需要创建一个 Browser 实例，打开页面，然后使用 Puppeteer 的 API。\",\"Example - 跳转到 https://example.com 并保存截图至 example.png:\",\"文件为 example.js\",\"const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto('https://example.com'); await page.screenshot({path: 'example.png'}); await browser.close(); })(); \",\"在命令行中执行\",\"node example.js \",\"Puppeteer 初始化的屏幕大小默认为 800px x 600px。但是这个尺寸可以通过 Page.setViewport() 设置。\",\"Example - 创建一个 PDF。\",\"文件为 hn.js\",\"const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto('https://news.ycombinator.com', {waitUntil: 'networkidle2'}); await page.pdf({path: 'hn.pdf', format: 'A4'}); await browser.close(); })(); \",\"在命令行中执行\",\"node hn.js \",\"查看 Page.pdf() 了解跟多内容。\",\"Example - 在页面中执行脚本\",\"文件为 get-dimensions.js\",\"const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto('https://example.com'); // Get the \\\"viewport\\\" of the page, as reported by the page. const dimensions = await page.evaluate(() => { return { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, deviceScaleFactor: window.devicePixelRatio }; }); console.log('Dimensions:', dimensions); await browser.close(); })(); \",\"在命令行中执行\",\"node get-dimensions.js \",\"查看 Page.evaluate() 了解更多相关内容，该方法有点类似于 evaluateOnNewDocument and exposeFunction。\"]},\"276\":{\"h\":\"默认设置\",\"t\":[\"1. 使用无头模式\",\"Puppeteer 运行 Chromium 的headless mode。如果想要使用完全版本的 Chromium，设置 'headless' option 即可。\",\"const browser = await puppeteer.launch({headless: false}); // default is true \",\"2. 运行绑定的 Chromium 版本\",\"默认情况下，Puppeteer 下载并使用特定版本的 Chromium 以及其 API 保证开箱即用。 如果要将 Puppeteer 与不同版本的 Chrome 或 Chromium 一起使用，在创建Browser实例时传入 Chromium 可执行文件的路径即可：\",\"const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'}); \",\"具体见：Puppeteer.launch()\",\"看这篇文章了解 Chromium 与 Chrome 的不同。这篇文章 介绍了一些 Linux 用户在使用上的区别。\",\"3. 创建用户配置文件\",\"Puppeteer 会创建自己的 Chromium 用户配置文件，它会在每次运行时清理。\"]},\"277\":{\"h\":\"模板\",\"t\":[\"const puppeteer = require('puppeteer'); const path = require('path'); async function captureScreenshot() { const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] }) const page = await browser.newPage(); await page.setViewport({ width: 1920, height: 1080 }); // 根据需要设置宽度和高度 await page.goto('http://xxxxxxx.com/'); // 替换成你的网站地址 // 获取当前日期 const currentDate = new Date(); const formattedDate = currentDate.toISOString().slice(0, 10); // 格式化日期为 yyyy-MM-dd // 生成截图文件路径和名称 const screenshotPath = path.join(__dirname, `${formattedDate}.png`); // 设置截图选项 const screenshotOptions = { path: screenshotPath, // 保存截图的文件路径和名称 fullPage: false, // 截取整个页面 clip: { x: 0, y: 0, width: 1920, height: 1080 } }; await page.screenshot(screenshotOptions); await browser.close(); } captureScreenshot(); // //可以使用 // const puppeteer = require('puppeteer'); // const path = require('path'); // async function captureScreenshot() { // const browser = await puppeteer.launch(); // const page = await browser.newPage(); // await page.goto('https://beink.cn'); // 替换成你的网站地址 // // 获取当前日期 // const currentDate = new Date(); // const formattedDate = currentDate.toISOString().slice(0, 10); // 格式化日期为 yyyy-MM-dd // // 生成截图文件路径和名称 // const screenshotPath = path.join(__dirname, `${formattedDate}.png`); // await page.screenshot({ path: screenshotPath }); // 保存截图的文件路径和名称 // await browser.close(); // } // captureScreenshot(); \",\"一张图片大概3M\"]},\"278\":{\"h\":\"定时\",\"t\":[\"crontab -e\",\"0 0 12 * * ? cd /www/shot && node shot.js\"]},\"279\":{\"h\":\"Github action\",\"t\":[\"name: main on: push: branches: - main schedule: - cron: '0 */6 * * *' # 每6小时执行一次，可根据需要调整时间 jobs: run-coupons: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '18.16.0' - name: Install Dependencies run: | sudo apt-get install fonts-wqy-zenhei npm install npm install puppeteer - name: Run Script run: node shot.js - name: Create Image Branch run: | git stash git fetch origin git checkout image mkdir -p image mv *.png image/ git pull origin image git config --local user.email \\\"action@github.com\\\" git config --local user.name \\\"GitHub Action\\\" git add . git commit -m \\\"Add downloaded images\\\" git push origin image \"]},\"280\":{\"h\":\"问题\"},\"281\":{\"h\":\"Puppeteer没有自动安装Chromium的解决办法\",\"t\":[\"Puppeteer没有自动安装Chromium的解决办法_亮子AI的博客-CSDN博客安装后再看这\",\"按照官方文档的说法，安装 Puppeteer 时会自动安装 Chromium 浏览器。但是实际安装过程中，会出现不安装 Chromium 的情况，这时需要使用下面的命令来手动安装 Chromium：\",\"node node_modules/puppeteer/install.js\\n这样就能把 Chromium 正确的安装到 node_modules/puppeteer/.local-chromium 目录下。根据操作系统及浏览器版本的不同，浏览器大概占用 200M～400M 的磁盘空间。\"]},\"282\":{\"h\":\"Action\",\"t\":[\"b\",\"将文件推送到新的分支\",\"# 程序名字 name: CI # 触发时机 on: ######### schedule和push只能用一个 # 定时执行 # schedule: # - cron: '0 10 * * *' # main分支变动时 触发 push: branches: - main # 某个文件发生变化 也可以！！ # paths: # - src/* # 里面有多个任务 jobs: # 任务名字 build: # 运行的系统下 runs-on: ubuntu-latest # 步骤 steps: # 拉取代码 # 使用别人现成的action完成需要的操作 - uses: actions/checkout@v3 # 步骤名称 - name: Run a one-line script run: echo Hello, world! # 步骤名称 # Runs a set of commands using the runners shell - name: Run a multi-line script run: | echo Add other actions to build, echo test, and deploy your project. # 步骤名称 - name: metoo run: | echo \\\"\\\\n Hello World\\\" >> ./README.md # 重新提交到githu - name: Push to GitHub uses: EndBug/add-and-commit@v7.2.1 # 携带参数 with: branch: main message: 'Add content' \"]},\"283\":{\"h\":\"cron\",\"t\":[\"在线测试\",\"Cron适用于周期性执行、日常维护、在某时刻需要完成的单次任务等场景。Cron表达式是一个具有时间含义的字符串，字符串以5个空格隔开，分为6个域，格式为X X X X X X。其中X是一个域的占位符。单个域有多个取值时，使用半角逗号,隔开取值。每个域可以是确定的取值，也可以是具有逻辑意义的特殊字符。\",\"秒 分 时 日 月 周\"]},\"284\":{\"h\":\"取值范围\",\"t\":[\"域\",\"是否必需\",\"取值范围\",\"特殊字符\",\"秒\",\"是\",\"[0, 59]\",\"不支持\",\"分钟\",\"是\",\"[0, 59]\",\"对, 和/有限支持（如果使用逗号，数字之间的间隔必须大于等于30分钟；如果使用/ ，/后面的数字必须大于等于30）。\",\"小时\",\"是\",\"[0, 23]\",\"* , - /\",\"日期\",\"是\",\"[1, 31]\",\"* , - / ? L\",\"月份\",\"是\",\"[1, 12]或[JAN, DEC]\",\"* , - /\",\"星期\",\"是\",\"[1, 7]或[SUN, SAT]若您使用[1, 7]表达方式，1代表星期天，2代表星期一。\",\"* , ?\"]},\"285\":{\"h\":\"连接符\",\"t\":[\"【*】：每的意思。在不同的字段上，就代表每秒，每分，每小时等。\",\"【-】：指定值的范围。比如[1-10]，在秒字段里就是每分钟的第1到10秒，在分就是每小时的第1到10分钟，以此类推。\",\"【,】：指定某几个值。比如[2,4,5]，在秒字段里就是每分钟的第2，第4，第5秒，以此类推。\",\"【/】：指定值的起始和增加幅度。比如[3/5]，在秒字段就是每分钟的第3秒开始，每隔5秒生效一次，也就是第3秒、8秒、13秒，以此类推。\",\"【?】：仅用于【日】和【周】字段。因为在指定某日和周几的时候，这两个值实际上是冲突的，所以需要用【?】标识不生效的字段。比如【0 1 * * * ?】就代表每年每月每日每小时的1分0秒触发任务。这里的周就没有效果了。\"]},\"286\":{\"h\":\"示例\",\"t\":[\"示例\",\"说明\",\"0 15 10 ? * *\",\"每天上午10:15执行任务\",\"0 15 10 * * ?\",\"每天上午10:15执行任务\",\"0 0 12 * * ?\",\"每天中午12:00执行任务\",\"0 0 10,14,16 * * ?\",\"每天上午10:00点、下午14:00以及下午16:00执行任务\",\"0 0/40 9-17 * * ?\",\"每天上午09:00到下午17:00时间段内每隔40分钟执行任务\",\"0 0 12 ? * WED\",\"每个星期三中午12:00执行任务\",\"0 15 10 15 * ?\",\"每月15日上午10:15执行任务\",\"0 15 10 L * ?\",\"每月最后一日上午10:15执行任务\",\"0 0,30 14 ? 3 WED\",\"每年3月的每个星期三下午14:00和14:30各执行一次任务\"]},\"287\":{\"h\":\"Jasypt\",\"t\":[\"依赖\",\" <dependency> <groupId>com.github.ulisesbocchio</groupId> <artifactId>jasypt-spring-boot-starter</artifactId> <version>---</version> </dependency> \",\"简单使用\",\" @Autowired BasicTextEncryptor ba; @Test void SimpleTest() { ba.setPassword(\\\"hh\\\");// 设置密钥 System.out.println(ba.encrypt(\\\"root\\\"));//加密 System.out.println(ba.encrypt(\\\"123456\\\"));//加密 System.out.println(ba.decrypt(\\\"837BpgX2vWwq/Ysmzs6Ucg==\\\"));//解密 } \",\"配置\",\"spring: datasource: name: defaultDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/quartz?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true username: ENC(jzMNMTaZzF0uxnFstWttUg==) password: ENC(aRki+PG956fgx9vyP09p9A==) \",\"解密\",\"配置文件中使用不推荐\",\"jasypt: encryptor: password: hh \",\"环境配置\\njava -jar xxxxx.jar -Djasypt.encryptor.password=hh\"]},\"288\":{\"h\":\"regex\"},\"289\":{\"h\":\"插件\"},\"290\":{\"h\":\"java\"},\"291\":{\"h\":\"元字符\"},\"292\":{\"h\":\"简写字符集\",\"t\":[\"简写\",\"描述\",\".\",\"除换行符外的所有字符\",\"\\\\w\",\"匹配所有字母数字，等同于 [a-zA-Z0-9]\",\"\\\\W\",\"匹配所有非字母数字，即符号，等同于： [^\\\\w]\",\"\\\\d\",\"匹配数字： [0-9]\",\"\\\\D\",\"匹配非数字： [^\\\\d]\",\"\\\\s\",\"匹配所有空格字符，等同于： [\\\\t\\\\n\\\\f\\\\r\\\\p{Z}]\",\"\\\\S\",\"匹配所有非空格字符： [^\\\\s]\",\"\\\\f\",\"匹配一个换页符\",\"\\\\n\",\"匹配一个换行符\",\"\\\\r\",\"匹配一个回车符\",\"\\\\t\",\"匹配一个制表符\",\"\\\\v\",\"匹配一个垂直制表符\",\"\\\\p\",\"匹配 CR/LF（等同于 \\\\r\\\\n），用来匹配 DOS 行终止符\"]},\"293\":{\"h\":\"标志\"},\"294\":{\"h\":\"忽略大小写\",\"t\":[\"修饰语 i 用于忽略大小写。\",\"例如，表达式 /The/gi 表示在全局搜索 The，在后面的 i 将其条件修改为忽略大小写，则变成搜索 the 和 The，g 表示全局搜索。\",\"\\\"/The/gi\\\" => The fat cat sat on the mat.\"]},\"295\":{\"h\":\"全局搜索\",\"t\":[\"修饰符 g 常用于执行一个全局搜索匹配\",\"\\\"/.(at)/g\\\" => The fatcatsat on the mat.\"]},\"296\":{\"h\":\"导出pdf\",\"t\":[\"IText7使用（超详解） - 明小子@ - 博客园 (cnblogs.com)\",\"关于HTML页面转pdf的一点经验_使用 htmlworker 解析html为pdf-CSDN博客\",\"itext5 html转pdf-CSDN博客\"]},\"297\":{\"h\":\"依赖\",\"t\":[\" <!-- 生成pdf--> <dependency> <groupId>com.itextpdf</groupId> <artifactId>itextpdf</artifactId> <version>5.5.13</version> </dependency> <!-- 字体--> <dependency> <groupId>com.itextpdf</groupId> <artifactId>itext-asian</artifactId> <version>5.2.0</version> </dependency> <!-- 工具类--> <dependency> <groupId>com.itextpdf.tool</groupId> <artifactId>xmlworker</artifactId> <version>5.5.13</version> </dependency> \"]},\"298\":{\"h\":\"配置中文字体\",\"t\":[\"/** * @author mishu * @since 2024/7/17 * @description 解决pdf文件中文不显示的问题 */ @Slf4j public class AsianFontProvider extends XMLWorkerFontProvider { public Font getFont(final String fontname, final String encoding, final boolean embedded, final float size, final int style, final BaseColor color) { BaseFont bf = null; try { bf = BaseFont.createFont(\\\"STSong-Light\\\", \\\"UniGB-UCS2-H\\\", BaseFont.NOT_EMBEDDED); } catch (Exception e) { log.error(\\\"生成pdf文件，添加字体失败\\\", e); } Font font = new Font(bf, size, style, color); font.setColor(color); return font; } } \"]},\"299\":{\"h\":\"初始化\",\"t\":[\"@GetMapping(\\\"/downloadPdf\\\") public void downloadPdf(HttpServletResponse response) throws IOException, DocumentException { // 设置响应的内容类型和头部，建议使用PDF的MIME类型 response.setContentType(\\\"application/pdf\\\"); response.setHeader(\\\"Content-Disposition\\\", \\\"attachment; filename=hello-pdf.pdf\\\"); Document document = new Document(); PdfWriter writer = PdfWriter.getInstance(document, response.getOutputStream()); document.open(); // 使用itext-asian库中的中文字体 BaseFont bf = BaseFont.createFont(\\\"STSong-Light\\\", \\\"UniGB-UCS2-H\\\", BaseFont.NOT_EMBEDDED); Font font = new Font(bf, 12, Font.NORMAL); //添加要写入的内容 //。。。。。。 document.close(); writer.close(); } \"]},\"300\":{\"h\":\"Paragraph\",\"t\":[\" // 创建一个段落并添加到文档中 Paragraph paragraph = new Paragraph(\\\"段落\\\", font); //居中 paragraph.setAlignment(Paragraph.ALIGN_CENTER); // 添加到doc中 document.add(paragraph); // 其他 // 。。。 \"]},\"301\":{\"h\":\"Chunk\",\"t\":[\"可以用来设置段落的某些文本样式\",\"// 创建段落 Paragraph paragraph = new Paragraph(); // 创建一个普通的Chunk Chunk simpleChunk = new Chunk(\\\"这是普通的文本。\\\", font); paragraph.add(simpleChunk); // 创建一个带超链接的Chunk Chunk linkChunk = new Chunk(\\\"点击这里访问iText官网\\\", new Font(bf, 12, Font.NORMAL, BaseColor.RED)); linkChunk.setAnchor(\\\"http://itextpdf.com/\\\"); paragraph.add(linkChunk); // 创建带颜色的Chunk Chunk coloredChunk = new Chunk(\\\"这是彩色的文本。\\\", new Font(bf, 12, Font.NORMAL, BaseColor.RED)); paragraph.add(coloredChunk); // 创建带下划线的Chunk Chunk underlineChunk = new Chunk(\\\"这是带下划线的文本。\\\", new Font(bf, 12, Font.UNDERLINE, BaseColor.BLACK)); paragraph.add(underlineChunk); // 创建带删除线的Chunk Chunk strikeChunk = new Chunk(\\\"这是带删除线的文本。\\\", new Font(bf, 12, Font.STRIKETHRU, BaseColor.BLACK)); paragraph.add(strikeChunk); // 创建斜体Chunk Chunk italicChunk = new Chunk(\\\"这是斜体文本。\\\", new Font(bf, 12, Font.ITALIC, BaseColor.BLACK)); paragraph.add(italicChunk); // 创建粗体Chunk Chunk boldChunk = new Chunk(\\\"这是粗体文本。\\\", new Font(bf, 12, Font.BOLD, BaseColor.BLACK)); paragraph.add(boldChunk); // 创建上标Chunk Chunk superscriptChunk = new Chunk(\\\"2\\\", new Font(bf, 12, Font.NORMAL, BaseColor.BLACK)); superscriptChunk.setTextRise(5); // 设置文本上移 paragraph.add(superscriptChunk); // 创建下标Chunk Chunk subscriptChunk = new Chunk(\\\"1\\\", new Font(bf, 12, Font.NORMAL, BaseColor.BLACK)); subscriptChunk.setTextRise(-5); // 设置文本下移 paragraph.add(subscriptChunk); // 将段落添加到文档中 document.add(paragraph); \"]},\"302\":{\"h\":\"Table\",\"t\":[\"// 创建PdfPTable对象，这里创建一个3列的表格 PdfPTable table = new PdfPTable(3); // 设置表格宽度百分比 table.setWidthPercentage(100); // 设置表格的列宽比例 float[] columnWidths = {1f, 2f, 1f}; table.setWidths(columnWidths); // 添加单元格到表格 PdfPCell cell; // 添加一行数据 cell = new PdfPCell(new Phrase(\\\"列1\\\",font)); cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setBorder(PdfPCell.NO_BORDER); // 设置单元格内部没有边框 table.addCell(cell); cell = new PdfPCell(new Phrase(\\\"列2\\\",font)); cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setBorder(PdfPCell.NO_BORDER); // 设置单元格内部没有边框 table.addCell(cell); cell = new PdfPCell(new Phrase(\\\"列3\\\",font)); cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setBorder(PdfPCell.NO_BORDER); // 设置单元格内部没有边框 // 行高 cell.setFixedHeight(30); table.addCell(cell); // 继续添加更多行数据 for (int i = 0; i < 5; i++) { table.addCell(new Paragraph(\\\"行 \\\" + (i + 2) + \\\" 列 1\\\",font)); table.addCell(new Paragraph(\\\"行 \\\" + (i + 2) + \\\" 列 2\\\",font)); table.addCell(new Paragraph(\\\"行 \\\" + (i + 2) + \\\" 列 3\\\",font)); } // 设置表格的样式 table.setSpacingBefore(10); // 设置表格前间距 table.setSpacingAfter(5); // 设置表格后间距 // 将表格添加到文档中 document.add(table); \"]},\"303\":{\"h\":\"Image\",\"t\":[\"图片\",\" String url = \\\"\\\"; Image image = Image.getInstance(url); //位置 image.setAbsolutePosition(380f,460f); //设置图片相对大小 image.scaleAbsolute(90f, 120f); //放入图片带文档中 document.add(image); \"]},\"304\":{\"h\":\"Rectangle\",\"t\":[\"绘制图案\",\" Rectangle rect = new Rectangle(100, 100, 200, 200); PdfContentByte canvas = writer.getDirectContent(); canvas.saveState(); canvas.setColorStroke(BaseColor.BLACK); canvas.rectangle(rect.getLeft(), rect.getBottom(), rect.getRight(), rect.getTop()); canvas.stroke(); canvas.restoreState(); \"]},\"305\":{\"h\":\"解析xml\"},\"306\":{\"h\":\"使用JAXP\",\"t\":[\"public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException { String url = \\\"D:\\\\\\\\test\\\\\\\\test\\\\\\\\pom.xml\\\"; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // 忽略注释 factory.setIgnoringComments(true); // 忽略空白 factory.setIgnoringElementContentWhitespace(true); DocumentBuilder builder = factory.newDocumentBuilder(); Document document = builder.parse(url); NodeList dependency = document.getElementsByTagName(\\\"dependencyManagement\\\"); System.out.println(dependency.item(0).getTextContent()); System.out.println(dependency.getLength()); } \",\"NodeList\",\"获取节点数量：getLength() 方法返回NodeList中的节点数量。\",\"访问节点：item(index) 方法允许你通过索引访问NodeList中的特定节点。索引从0开始。\",\"迭代节点：你可以使用for循环结合getLength()和item()方法来遍历NodeList中的所有节点。\",\"节点类型：NodeList中的每个节点都是Node接口的一个实例，这意味着你可以对它们执行如获取节点名称、节点值等操作。\",\"动态更新：在某些情况下，NodeList可以是动态的，这意味着当底层文档结构发生变化时，NodeList也会相应地更新。\",\"使用XPath表达式：在某些实现中，如使用JDOM或DOM4J等库时，NodeList可以作为XPath查询的结果返回，允许你根据特定的XPath表达式来选择文档中的节点。\",\"循环如此\",\"示例\",\"public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException { String url = \\\"D:\\\\\\\\test\\\\\\\\test\\\\\\\\pom.xml\\\"; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // 忽略注释 factory.setIgnoringComments(true); // 忽略空白 factory.setIgnoringElementContentWhitespace(true); DocumentBuilder builder = factory.newDocumentBuilder(); Document document = builder.parse(url); NodeList dependency = document.getElementsByTagName(\\\"dependency\\\"); for (int i = 0; i < dependency.getLength(); i++) { Node node = dependency.item(i); // 是否为节点 if (node.getNodeType() == Node.ELEMENT_NODE) { Element element = (Element) node; String groupId = element.getElementsByTagName(\\\"groupId\\\").item(0).getTextContent(); String artifactId = element.getElementsByTagName(\\\"artifactId\\\").item(0).getTextContent(); String version = element.getElementsByTagName(\\\"version\\\").item(0).getTextContent(); System.out.println(\\\"groupId = \\\" + groupId); System.out.println(\\\"artifactId = \\\" + artifactId); System.out.println(\\\"version = \\\" + version); System.out.println(\\\"-----------\\\"); } } } \",\"修改原数据\",\" // 将修改后的Document写回到新的XML文件中 TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(); DOMSource source = new DOMSource(document); StreamResult result = new StreamResult( Files.newOutputStream(new File(\\\"pom.xml\\\").toPath())); transformer.transform(source, result); \"]},\"307\":{\"h\":\"S S M\"},\"308\":{\"h\":\"Blog\"},\"309\":{\"h\":\"Markmap\"},\"310\":{\"h\":\"Microservices\"},\"311\":{\"h\":\"Other\"},\"312\":{\"h\":\"Tools\"},\"313\":{\"h\":\"Worklogs\"}},\"dirtCount\":0,\"index\":[[\"允许你根据特定的xpath表达式来选择文档中的节点\",{\"1\":{\"306\":1}}],[\"节点值等操作\",{\"1\":{\"306\":1}}],[\"节点类型\",{\"1\":{\"306\":1}}],[\"迭代节点\",{\"1\":{\"306\":1}}],[\"方法来遍历nodelist中的所有节点\",{\"1\":{\"306\":1}}],[\"方法允许你通过索引访问nodelist中的特定节点\",{\"1\":{\"306\":1}}],[\"方法返回nodelist中的节点数量\",{\"1\":{\"306\":1}}],[\"绘制图案\",{\"1\":{\"304\":1}}],[\"位置\",{\"1\":{\"303\":1}}],[\"图片\",{\"1\":{\"303\":1}}],[\"继续添加更多行数据\",{\"1\":{\"302\":1}}],[\"点击这里访问itext官网\",{\"1\":{\"301\":1}}],[\"点击父模块的package即可打包\",{\"1\":{\"207\":1}}],[\"居中\",{\"1\":{\"300\":1}}],[\"段落\",{\"1\":{\"300\":1}}],[\"建议使用pdf的mime类型\",{\"1\":{\"299\":1}}],[\"建议使用子账号\",{\"1\":{\"210\":1}}],[\"工具类\",{\"1\":{\"297\":1}}],[\"明小子\",{\"1\":{\"296\":1}}],[\"超详解\",{\"1\":{\"296\":1}}],[\"常用于执行一个全局搜索匹配\",{\"1\":{\"295\":1}}],[\"常用的导入方式有两种\",{\"1\":{\"219\":1}}],[\"修饰符\",{\"1\":{\"295\":1}}],[\"修饰语\",{\"1\":{\"294\":1}}],[\"修改原数据\",{\"1\":{\"306\":1}}],[\"修改容器限制\",{\"1\":{\"261\":1}}],[\"修改配置文件\",{\"1\":{\"184\":1}}],[\"修改配置文件my\",{\"1\":{\"60\":1}}],[\"修改文档\",{\"1\":{\"109\":1}}],[\"修改参数\",{\"1\":{\"80\":1}}],[\"忽略空白\",{\"1\":{\"306\":2}}],[\"忽略注释\",{\"1\":{\"306\":2}}],[\"忽略大小写\",{\"0\":{\"294\":1}}],[\"忽略修改\",{\"1\":{\"188\":1}}],[\"^\",{\"1\":{\"292\":3}}],[\"除换行符外的所有字符\",{\"1\":{\"292\":1}}],[\"描述\",{\"1\":{\"292\":1}}],[\"描述如何从数据库结果集中加载对象\",{\"1\":{\"2\":1}}],[\"插件\",{\"0\":{\"289\":1}}],[\"环境配置\",{\"1\":{\"287\":1}}],[\"环绕\",{\"1\":{\"79\":1,\"80\":1}}],[\"标志\",{\"0\":{\"293\":1}}],[\"标识不生效的字段\",{\"1\":{\"285\":1}}],[\"标签\",{\"1\":{\"242\":1}}],[\"标签用于选择图片\",{\"1\":{\"242\":1}}],[\"仅用于\",{\"1\":{\"285\":1}}],[\"仅保存容器当时的快照状态\",{\"1\":{\"261\":1}}],[\"星期\",{\"1\":{\"284\":1}}],[\"小时\",{\"1\":{\"284\":1}}],[\"小于号\",{\"1\":{\"266\":1}}],[\"小于等于\",{\"1\":{\"110\":1}}],[\"小于\",{\"1\":{\"110\":1}}],[\"后面的数字必须大于等于30\",{\"1\":{\"284\":1}}],[\"后缀名\",{\"1\":{\"139\":2}}],[\"特殊字符\",{\"1\":{\"284\":1}}],[\"域\",{\"1\":{\"284\":1}}],[\"域名\",{\"1\":{\"120\":1}}],[\"周\",{\"1\":{\"283\":1,\"285\":1}}],[\"月份\",{\"1\":{\"284\":1}}],[\"月\",{\"1\":{\"283\":1}}],[\"秒\",{\"1\":{\"283\":1,\"284\":1}}],[\"隔开取值\",{\"1\":{\"283\":1}}],[\"格式为x\",{\"1\":{\"283\":1}}],[\"格式化日期为\",{\"1\":{\"277\":2}}],[\"携带参数\",{\"1\":{\"282\":1}}],[\"里面有多个任务\",{\"1\":{\"282\":1}}],[\"程序名字\",{\"1\":{\"282\":1}}],[\"浏览器大概占用\",{\"1\":{\"281\":1}}],[\"浏览器\",{\"1\":{\"281\":1}}],[\"按照官方文档的说法\",{\"1\":{\"281\":1}}],[\"按下数字后再按空格\",{\"1\":{\"266\":1}}],[\"亮子ai的博客\",{\"1\":{\"281\":1}}],[\"问题\",{\"0\":{\"280\":1}}],[\"`$\",{\"1\":{\"277\":2}}],[\"```\",{\"1\":{\"70\":2}}],[\"替换成你的网站地址\",{\"1\":{\"277\":2}}],[\"看这篇文章了解\",{\"1\":{\"276\":1}}],[\"该方法有点类似于\",{\"1\":{\"275\":1}}],[\"该库中该组件的默认实现就不会生效了\",{\"1\":{\"227\":1}}],[\"了解更多相关内容\",{\"1\":{\"275\":1}}],[\"了解跟多内容\",{\"1\":{\"275\":1}}],[\"跳转到\",{\"1\":{\"275\":1}}],[\"跳转到index\",{\"1\":{\"88\":1}}],[\"至少需要\",{\"1\":{\"275\":1}}],[\"包\",{\"1\":{\"274\":1}}],[\"包括cpu\",{\"1\":{\"261\":1}}],[\"包括锁定\",{\"1\":{\"244\":1}}],[\"包括文本\",{\"1\":{\"105\":1}}],[\"版本\",{\"1\":{\"274\":1,\"276\":1}}],[\"版本以来\",{\"1\":{\"274\":1}}],[\"版本控制\",{\"0\":{\"191\":1}}],[\"~280mb\",{\"1\":{\"273\":1}}],[\"~282mb\",{\"1\":{\"273\":1}}],[\"~170mb\",{\"1\":{\"273\":1}}],[\"演示地址\",{\"1\":{\"271\":1}}],[\"捕获网站的\",{\"1\":{\"271\":1}}],[\"捕获异常\",{\"1\":{\"25\":1}}],[\"键盘输入等\",{\"1\":{\"271\":1}}],[\"抓取\",{\"1\":{\"271\":1}}],[\"你可以使用for循环结合getlength\",{\"1\":{\"306\":1}}],[\"你可以在浏览器中手动执行的绝大多数操作都可以使用\",{\"1\":{\"271\":1}}],[\"你需要创建一个\",{\"1\":{\"275\":1}}],[\"你好\",{\"1\":{\"245\":2}}],[\"能做什么\",{\"0\":{\"271\":1}}],[\"协议控制\",{\"1\":{\"270\":1}}],[\"库\",{\"1\":{\"270\":1}}],[\"登录名\",{\"1\":{\"267\":1}}],[\"登录样例\",{\"0\":{\"133\":1}}],[\"免密登录\",{\"0\":{\"267\":1}}],[\"显示行号\",{\"1\":{\"266\":1}}],[\"显式内连接\",{\"1\":{\"44\":1}}],[\"退出\",{\"1\":{\"266\":1}}],[\"退出的时候也会产生\",{\"1\":{\"181\":1}}],[\"取值范围\",{\"0\":{\"284\":1},\"1\":{\"284\":1}}],[\"取消粘贴模式\",{\"1\":{\"266\":1}}],[\"取消代码自动缩进\",{\"1\":{\"266\":1}}],[\"取消撤销\",{\"1\":{\"266\":1}}],[\"取名\",{\"0\":{\"217\":1}}],[\"撤销\",{\"1\":{\"266\":1}}],[\"复制当前行\",{\"1\":{\"266\":1}}],[\"复制选中的文本\",{\"1\":{\"266\":1}}],[\"复制代码annotationprocessor\",{\"1\":{\"224\":1}}],[\"选中文本\",{\"1\":{\"266\":1}}],[\"选择文件\",{\"1\":{\"232\":1}}],[\"且在替换前要求用户确认\",{\"1\":{\"266\":1}}],[\"反向重复前一个查找操作\",{\"1\":{\"266\":1}}],[\"光标移动到第一行\",{\"1\":{\"266\":1}}],[\"光标移动到第n行\",{\"1\":{\"266\":1}}],[\"光标移动到最后一行\",{\"1\":{\"266\":1}}],[\"光标移动到本行末尾\",{\"1\":{\"266\":1}}],[\"光标移动到本行开头\",{\"1\":{\"266\":1}}],[\"光标会向右移动这一行的n个字符\",{\"1\":{\"266\":1}}],[\"光标向下移动n行\",{\"1\":{\"266\":1}}],[\"光标向下移动一个字符\",{\"1\":{\"266\":1}}],[\"光标向右移动一个字符\",{\"1\":{\"266\":1}}],[\"光标向上移动一个字符\",{\"1\":{\"266\":1}}],[\"光标向左移动一个字符\",{\"1\":{\"266\":1}}],[\"k\",{\"1\":{\"266\":1}}],[\"kee\",{\"1\":{\"129\":1}}],[\"keygen\",{\"1\":{\"193\":1,\"267\":2}}],[\"key采用string的序列化方式\",{\"1\":{\"177\":1}}],[\"keys\",{\"1\":{\"175\":1}}],[\"key的时候使用通配符\",{\"1\":{\"160\":1}}],[\"keyword\",{\"1\":{\"110\":2,\"111\":1}}],[\"key=\",{\"1\":{\"74\":1}}],[\"key\",{\"1\":{\"41\":2,\"42\":1,\"65\":2,\"167\":2,\"168\":2,\"169\":1,\"175\":9,\"193\":1,\"245\":5}}],[\"keyproperty=\",{\"1\":{\"14\":1}}],[\"左箭头键\",{\"1\":{\"266\":1}}],[\"左外连接\",{\"0\":{\"45\":1}}],[\"此命令的路径即mysql的安装路径\",{\"1\":{\"264\":1}}],[\"此时就用到了\",{\"1\":{\"157\":1}}],[\"例子\",{\"0\":{\"262\":1}}],[\"例如断开连接或网络故障\",{\"1\":{\"238\":1}}],[\"例如examplebucket\",{\"1\":{\"211\":1}}],[\"例如a依赖了b\",{\"1\":{\"199\":1}}],[\"例如yaml\",{\"1\":{\"139\":1}}],[\"例如\",{\"1\":{\"3\":2,\"160\":1,\"175\":28,\"227\":1,\"264\":2,\"265\":1,\"294\":1}}],[\"网络等信息\",{\"1\":{\"261\":1}}],[\"网关路由在配置文件中写死了\",{\"1\":{\"137\":1}}],[\"网关可以把信息重新放入请求头中\",{\"1\":{\"134\":1}}],[\"网关中拿到啊用户信息\",{\"1\":{\"134\":1}}],[\"网关传递信息\",{\"0\":{\"134\":1}}],[\"网关登录校验\",{\"0\":{\"131\":1}}],[\"网关\",{\"0\":{\"126\":1},\"1\":{\"127\":1}}],[\"存储\",{\"1\":{\"261\":1}}],[\"存入作用域中\",{\"0\":{\"94\":1}}],[\"体积更大\",{\"1\":{\"261\":1}}],[\"停止容器\",{\"1\":{\"261\":1}}],[\"利用镜像ubuntu\",{\"1\":{\"261\":1}}],[\"拉取代码\",{\"1\":{\"282\":1}}],[\"拉取一个镜像\",{\"1\":{\"260\":1}}],[\"拉取远程分支xxx\",{\"1\":{\"188\":1}}],[\"镜像\",{\"0\":{\"260\":1}}],[\"才可以省去sudo权限\",{\"1\":{\"258\":1}}],[\"才会收到消息\",{\"1\":{\"157\":1}}],[\"再按ctrl\",{\"1\":{\"261\":1}}],[\"再重新登录回来\",{\"1\":{\"258\":1}}],[\"再有交换机发给队列\",{\"1\":{\"153\":1}}],[\"跑起来\",{\"1\":{\"258\":1}}],[\"示例\",{\"0\":{\"256\":1,\"286\":1},\"1\":{\"286\":1,\"306\":1}}],[\"挂载目录\",{\"1\":{\"255\":1}}],[\"读写都非常不方便\",{\"1\":{\"254\":1}}],[\"读取图片文件\",{\"1\":{\"242\":1}}],[\"读取即可\",{\"1\":{\"139\":1}}],[\"读取bootstrap文件\",{\"1\":{\"138\":1}}],[\"放入图片带文档中\",{\"1\":{\"303\":1}}],[\"放置配置文件\",{\"1\":{\"254\":1}}],[\"放置一些静态资源\",{\"1\":{\"254\":1}}],[\"放行权限\",{\"1\":{\"210\":1}}],[\"放行\",{\"1\":{\"133\":1}}],[\"语法\",{\"1\":{\"251\":1,\"252\":1}}],[\"作用\",{\"1\":{\"251\":1,\"252\":1}}],[\"根据操作系统及浏览器版本的不同\",{\"1\":{\"281\":1}}],[\"根据需要设置宽度和高度\",{\"1\":{\"277\":1}}],[\"根据服务名称拉取所有的服务\",{\"1\":{\"120\":1}}],[\"根本不需要的描述\",{\"1\":{\"248\":1}}],[\"搭建\",{\"0\":{\"248\":1}}],[\"搭建sentinel集群\",{\"1\":{\"185\":1}}],[\"引入\",{\"1\":{\"246\":1}}],[\"引入依赖\",{\"1\":{\"119\":1,\"120\":1,\"138\":1}}],[\"密码长度不能超过50\",{\"1\":{\"245\":1}}],[\"密码不能为空\",{\"1\":{\"245\":1}}],[\"避免了锁过期的问题\",{\"1\":{\"244\":1}}],[\"预览图片的\",{\"1\":{\"242\":1}}],[\"定时执行\",{\"1\":{\"282\":1}}],[\"定时\",{\"0\":{\"278\":1}}],[\"定时任务\",{\"0\":{\"240\":1}}],[\"定义一个\",{\"1\":{\"220\":1}}],[\"定义一个servlet启动配置\",{\"1\":{\"82\":1}}],[\"定义bean\",{\"1\":{\"75\":1,\"82\":1,\"90\":1}}],[\"定义作业\",{\"1\":{\"64\":1,\"65\":1}}],[\"附带图片\",{\"1\":{\"239\":1}}],[\"知道发件人把该邮件抄送给了另外哪些人\",{\"1\":{\"239\":1}}],[\"抄送人\",{\"1\":{\"239\":1}}],[\"抄送\",{\"1\":{\"239\":1}}],[\"邮件配置\",{\"1\":{\"239\":1}}],[\"头部信息较大\",{\"1\":{\"238\":1}}],[\"甚至包括ie6\",{\"1\":{\"237\":1}}],[\"跨浏览器\",{\"1\":{\"237\":1}}],[\"跨域放行\",{\"1\":{\"210\":1}}],[\"长连接\",{\"1\":{\"236\":1}}],[\"长度\",{\"1\":{\"175\":1}}],[\"双向通信\",{\"1\":{\"235\":1}}],[\"时会自动安装\",{\"1\":{\"281\":1}}],[\"时\",{\"1\":{\"234\":1,\"273\":1,\"283\":1}}],[\"时间\",{\"1\":{\"87\":1,\"129\":1}}],[\"时间间隔\",{\"1\":{\"40\":1}}],[\"两者都应用广泛\",{\"1\":{\"234\":1}}],[\"两个消费者\",{\"1\":{\"151\":1}}],[\"两个表的所有组合\",{\"1\":{\"43\":1}}],[\"热加载\",{\"0\":{\"233\":1}}],[\"总大小\",{\"1\":{\"232\":1}}],[\"拼接完整的目录路径\",{\"1\":{\"232\":1}}],[\"没有文件夹\",{\"1\":{\"232\":1}}],[\"没有配置则使用\",{\"1\":{\"138\":2}}],[\"书本\",{\"0\":{\"230\":1}}],[\"来完成\",{\"1\":{\"271\":1}}],[\"来通过\",{\"1\":{\"270\":1}}],[\"来自\",{\"1\":{\"229\":1}}],[\"来源\",{\"1\":{\"12\":1}}],[\"容器\",{\"0\":{\"261\":1}}],[\"容器运行的nginx所有的文件都在容器内部\",{\"1\":{\"254\":1}}],[\"容器中存在a2\",{\"1\":{\"227\":1}}],[\"容器调度了\",{\"1\":{\"62\":1}}],[\"假设现在我们的a有一个扩展类a1\",{\"1\":{\"227\":1}}],[\"假设现在我们的a需要依赖b实例\",{\"1\":{\"225\":1}}],[\"便于我们扩展一些自定义的功能来替换默认实现\",{\"1\":{\"227\":1}}],[\"中安装\",{\"1\":{\"258\":1}}],[\"中调用b\",{\"1\":{\"225\":1}}],[\"中间有一个过度的服务器\",{\"1\":{\"147\":1}}],[\"有限支持\",{\"1\":{\"284\":1}}],[\"有头\",{\"1\":{\"270\":1}}],[\"有没有什么办法让我们的aproperties也能自动提示呢\",{\"1\":{\"224\":1}}],[\"有多个消费者\",{\"1\":{\"153\":1}}],[\"虽然\",{\"1\":{\"223\":1}}],[\"正确的安装到\",{\"1\":{\"281\":1}}],[\"正确流程\",{\"0\":{\"207\":1}}],[\"正常情况下\",{\"1\":{\"223\":1}}],[\"扫描进去了\",{\"1\":{\"222\":1}}],[\"扫描路径\",{\"1\":{\"75\":1}}],[\"那我们的配置可以这样写\",{\"1\":{\"225\":1}}],[\"那就是用\",{\"1\":{\"223\":1}}],[\"那就是importbeandefinitionregistrar\",{\"1\":{\"221\":1}}],[\"那么之前的配置方式就不行了\",{\"1\":{\"226\":1}}],[\"那么怎么在我们的aautoconfiguration中获得这两个属性呢\",{\"1\":{\"223\":1}}],[\"那么spring默认的扫描路径就能扫到\",{\"1\":{\"218\":1}}],[\"那么要怎么把a注入到spring的容器中呢\",{\"1\":{\"218\":1}}],[\"那么我们应该怎么实现呢\",{\"1\":{\"216\":1}}],[\"那么你就可以在a中\",{\"1\":{\"199\":1}}],[\"改为\",{\"1\":{\"221\":2}}],[\"改了\",{\"1\":{\"19\":1}}],[\"因为在指定某日和周几的时候\",{\"1\":{\"285\":1}}],[\"因为sockjs在不支持websocket的浏览器中使用的是长轮询技术\",{\"1\":{\"238\":1}}],[\"因为\",{\"1\":{\"227\":1}}],[\"因为我们的包结构是确定的\",{\"1\":{\"219\":1}}],[\"因此可能会遇到连接不稳定的情况\",{\"1\":{\"238\":1}}],[\"因此可以保证数据的完整性\",{\"1\":{\"182\":1}}],[\"因此需要发送大量的头部信息\",{\"1\":{\"238\":1}}],[\"因此在不支持websocket的浏览器中也可以使用\",{\"1\":{\"237\":1}}],[\"因此只有在支持html5的浏览器中才能使用\",{\"1\":{\"236\":1}}],[\"因此数据传输的效率非常高\",{\"1\":{\"235\":1}}],[\"因此\",{\"1\":{\"25\":1}}],[\"需要退出服务器\",{\"1\":{\"258\":1}}],[\"需要自己实现保证操作的原子性\",{\"1\":{\"244\":1}}],[\"需要使用polyfill或其他技术\",{\"1\":{\"236\":1}}],[\"需要手动添加注解来启用\",{\"1\":{\"219\":1}}],[\"需要多个sentinel\",{\"1\":{\"185\":1}}],[\"答案是\",{\"1\":{\"218\":1}}],[\"首先我们要先确定我们的starter的名字\",{\"1\":{\"217\":1}}],[\"让我们先给我们的starter取个名字吧哈哈哈\",{\"1\":{\"216\":1}}],[\"现在我们给\",{\"1\":{\"221\":1}}],[\"现在我们假定\",{\"1\":{\"216\":1}}],[\"现在当我们要把a单独抽出来做成一个starter时\",{\"1\":{\"216\":1}}],[\"准备\",{\"0\":{\"216\":1}}],[\"填写bucket名称\",{\"1\":{\"211\":1}}],[\"请阅读环境变量\",{\"1\":{\"273\":1}}],[\"请登录ram控制台创建ram用户\",{\"1\":{\"211\":1}}],[\"请求限流\",{\"0\":{\"142\":1}}],[\"请求参数\",{\"1\":{\"129\":1}}],[\"请求方式\",{\"1\":{\"129\":1}}],[\"请求转发\",{\"1\":{\"126\":1}}],[\"请求\",{\"0\":{\"83\":1}}],[\"强制退出\",{\"1\":{\"266\":1}}],[\"强制保存\",{\"1\":{\"266\":1}}],[\"强烈建议您创建并使用ram用户进行api访问或日常运维\",{\"1\":{\"211\":1}}],[\"强大的crud操作\",{\"1\":{\"17\":1}}],[\"风险很高\",{\"1\":{\"211\":1}}],[\"杭州\",{\"1\":{\"211\":1}}],[\"③\",{\"1\":{\"210\":1}}],[\"权限\",{\"1\":{\"210\":1}}],[\"目录下\",{\"1\":{\"281\":1}}],[\"目录必须为空\",{\"1\":{\"213\":1}}],[\"目录列表\",{\"0\":{\"212\":1}}],[\"目录\",{\"1\":{\"210\":1}}],[\"目前要求能者多劳\",{\"1\":{\"151\":1}}],[\"②\",{\"1\":{\"210\":1}}],[\"①\",{\"1\":{\"210\":1}}],[\"更安全\",{\"0\":{\"210\":1}}],[\"更新\",{\"1\":{\"42\":4}}],[\"更新行为\",{\"1\":{\"42\":1}}],[\"更新所有\",{\"1\":{\"28\":1}}],[\"阿里云账号accesskey拥有所有api的访问权限\",{\"1\":{\"211\":1}}],[\"阿里官方文档java上传文件概述和文件下载\",{\"1\":{\"209\":1}}],[\"阿里镜像\",{\"0\":{\"196\":1}}],[\"检查或者是否加了依赖\",{\"1\":{\"207\":1}}],[\"检查key对应的hash中是否存在field\",{\"1\":{\"175\":1}}],[\"各个模块之间引入坐标即可使用\",{\"1\":{\"205\":1}}],[\"还需要一个属性a\",{\"1\":{\"223\":1}}],[\"还需要在子工程中引入所需依赖\",{\"1\":{\"205\":1}}],[\"还包含了这个任务调度的方案略\",{\"1\":{\"62\":1}}],[\"说明\",{\"0\":{\"205\":1},\"1\":{\"255\":1,\"286\":1}}],[\"排除依赖\",{\"0\":{\"201\":1}}],[\"排序和should操作\",{\"1\":{\"114\":1}}],[\"排序的字段\",{\"1\":{\"110\":1}}],[\"排序\",{\"1\":{\"105\":1,\"110\":1}}],[\"排序查询\",{\"0\":{\"35\":1},\"1\":{\"30\":1}}],[\"排序字段列表\",{\"1\":{\"30\":1}}],[\"像主动依赖了c和d一样使用它们\",{\"1\":{\"199\":1}}],[\"打开页面\",{\"1\":{\"275\":1}}],[\"打包使用\",{\"1\":{\"232\":1}}],[\"打包\",{\"1\":{\"197\":1,\"202\":1}}],[\"打印下标1的值\",{\"1\":{\"175\":1}}],[\"打印所有\",{\"1\":{\"175\":1}}],[\"打印所有的key\",{\"1\":{\"175\":1}}],[\"打印name的value\",{\"1\":{\"175\":1}}],[\"清除公钥信息\",{\"1\":{\"267\":1}}],[\"清除数据卷\",{\"1\":{\"255\":1}}],[\"清理\",{\"1\":{\"197\":1}}],[\"清空git缓存\",{\"1\":{\"192\":1}}],[\"清空所有数据库\",{\"1\":{\"174\":1}}],[\"清空当前数据库\",{\"1\":{\"174\":1}}],[\"下午14\",{\"1\":{\"286\":1}}],[\"下面的示例使用\",{\"1\":{\"275\":1}}],[\"下面是一些示例\",{\"1\":{\"271\":1}}],[\"下创建config文件\",{\"1\":{\"267\":1}}],[\"下一个位置粘贴\",{\"1\":{\"266\":1}}],[\"下载并使用特定版本的\",{\"1\":{\"276\":1}}],[\"下载\",{\"1\":{\"239\":1}}],[\"下载地址中央仓库配置本地仓库\",{\"1\":{\"195\":1}}],[\"下redis\",{\"1\":{\"184\":1}}],[\"克隆之后使用和查看\",{\"1\":{\"193\":1}}],[\"克隆远程仓库\",{\"1\":{\"193\":1}}],[\"之前说\",{\"1\":{\"218\":1}}],[\"之后就可以随意修改了\",{\"1\":{\"256\":1}}],[\"之后\",{\"1\":{\"193\":1}}],[\"之间发送请求\",{\"1\":{\"136\":1}}],[\"关于html页面转pdf的一点经验\",{\"1\":{\"296\":1}}],[\"关联\",{\"1\":{\"193\":1}}],[\"关闭查找关键词高亮\",{\"1\":{\"266\":1}}],[\"关闭自动确定\",{\"1\":{\"152\":1}}],[\"关闭消息的自动确认\",{\"1\":{\"151\":1}}],[\"关闭通道和连接\",{\"1\":{\"150\":1}}],[\"远程仓库\",{\"0\":{\"193\":1}}],[\"恢复\",{\"1\":{\"192\":1}}],[\"删错了\",{\"1\":{\"192\":1}}],[\"删除当前行\",{\"1\":{\"266\":1}}],[\"删除选中的文本\",{\"1\":{\"266\":1}}],[\"删除所有已停止的容器\",{\"1\":{\"261\":1}}],[\"删除所有数据\",{\"1\":{\"29\":1}}],[\"删除容器\",{\"1\":{\"261\":1}}],[\"删除镜像ubuntu\",{\"1\":{\"260\":1}}],[\"删除指定的数据卷\",{\"1\":{\"255\":1}}],[\"删除图片\",{\"0\":{\"213\":1}}],[\"删除远程仓库\",{\"1\":{\"193\":1}}],[\"删除文件或目录\",{\"1\":{\"213\":1}}],[\"删除文件\",{\"0\":{\"192\":1}}],[\"删除文档\",{\"1\":{\"113\":1}}],[\"删除本地分支xxx\",{\"1\":{\"188\":1}}],[\"删除key对应的hash中的一个或多个field\",{\"1\":{\"175\":1}}],[\"删除一个hello\",{\"1\":{\"175\":1}}],[\"删除左右头部\",{\"1\":{\"175\":1}}],[\"删除索引\",{\"1\":{\"108\":1,\"112\":1}}],[\"删除\",{\"1\":{\"42\":1,\"109\":1,\"207\":1,\"210\":1}}],[\"删除多个\",{\"1\":{\"19\":1}}],[\"缓存\",{\"0\":{\"192\":1}}],[\"若您使用\",{\"1\":{\"284\":1}}],[\"若已提交\",{\"1\":{\"191\":1}}],[\"若该文件隐藏\",{\"1\":{\"189\":1}}],[\"丢弃暂存区的修改\",{\"1\":{\"191\":1}}],[\"丢弃工作区的修改\",{\"1\":{\"191\":1}}],[\"即符号\",{\"1\":{\"292\":1}}],[\"即可\",{\"1\":{\"276\":1}}],[\"即\",{\"1\":{\"271\":1}}],[\"即当浏览器不支持\",{\"1\":{\"234\":1}}],[\"即撤销修改\",{\"1\":{\"191\":1}}],[\"即不写死\",{\"1\":{\"139\":1}}],[\"回退版本\",{\"1\":{\"191\":1}}],[\"回滚事务\",{\"1\":{\"25\":1}}],[\"新建本地分支\",{\"1\":{\"188\":1}}],[\"新建分支xxx\",{\"1\":{\"188\":1}}],[\"仍然删除分支xxx\",{\"1\":{\"188\":1}}],[\"切换为分支xxx\",{\"1\":{\"188\":1}}],[\"切入点表达式\",{\"0\":{\"78\":1}}],[\"指令来提供密码\",{\"1\":{\"185\":1}}],[\"指定值的起始和增加幅度\",{\"1\":{\"285\":1}}],[\"指定值的范围\",{\"1\":{\"285\":1}}],[\"指定某几个值\",{\"1\":{\"285\":1}}],[\"指定配置顺序\",{\"1\":{\"229\":1}}],[\"指定名称和邮箱\",{\"0\":{\"187\":1}}],[\"指定主节点的名称\",{\"1\":{\"185\":1}}],[\"指定下标值替换为hello\",{\"1\":{\"175\":1}}],[\"进行\",{\"1\":{\"271\":1}}],[\"进行故障转移的超时时间\",{\"1\":{\"185\":1}}],[\"进入一般命令模式\",{\"1\":{\"266\":1}}],[\"进入编辑模式\",{\"1\":{\"266\":1}}],[\"进入容器\",{\"1\":{\"261\":1}}],[\"进程信息\",{\"1\":{\"185\":2}}],[\"进程的认证密码\",{\"1\":{\"185\":1}}],[\"进程的id\",{\"1\":{\"185\":1}}],[\"进程和主节点失去联系后\",{\"1\":{\"185\":1}}],[\"毫秒\",{\"1\":{\"185\":2}}],[\"好多个哨兵都认为该实例下线\",{\"1\":{\"185\":1}}],[\"客观下线\",{\"1\":{\"185\":1}}],[\"客户端连接到redis服务\",{\"1\":{\"184\":1}}],[\"采用心跳机制\",{\"1\":{\"185\":1}}],[\"哨兵\",{\"0\":{\"185\":1}}],[\"主题\",{\"1\":{\"239\":1}}],[\"主要是看有没有必要额外配置一个注解\",{\"1\":{\"219\":1}}],[\"主账号accesskey泄露会威胁您所有资源的安全\",{\"1\":{\"210\":1}}],[\"主代码\",{\"1\":{\"202\":1}}],[\"主节点设置了密码\",{\"1\":{\"185\":1}}],[\"主观下线\",{\"1\":{\"185\":1}}],[\"主从集群结构\",{\"1\":{\"183\":1}}],[\"主从\",{\"0\":{\"183\":1}}],[\"主键约束\",{\"1\":{\"41\":1}}],[\"主键\",{\"1\":{\"21\":1}}],[\"主键返回\",{\"0\":{\"14\":1}}],[\"重新提交到githu\",{\"1\":{\"282\":1}}],[\"重复前一个查找操作\",{\"1\":{\"266\":1}}],[\"重命名容器\",{\"1\":{\"261\":1}}],[\"重命名\",{\"1\":{\"232\":1}}],[\"重写时是否可以运用appendfsync\",{\"1\":{\"182\":1}}],[\"重启容器\",{\"1\":{\"261\":1}}],[\"重启后失效\",{\"1\":{\"184\":1}}],[\"重启消息也在\",{\"1\":{\"148\":1}}],[\"重启\",{\"1\":{\"138\":1}}],[\"速度最快\",{\"1\":{\"182\":1}}],[\"无需指定版本\",{\"1\":{\"205\":1}}],[\"无意义\",{\"1\":{\"181\":1}}],[\"无侵入\",{\"1\":{\"17\":1}}],[\"但遗憾的是\",{\"1\":{\"254\":1}}],[\"但它们之间有以下区别\",{\"0\":{\"244\":1}}],[\"但是实际安装过程中\",{\"1\":{\"281\":1}}],[\"但是这个尺寸可以通过\",{\"1\":{\"275\":1}}],[\"但是这个注解如果用不好也可能出现问题\",{\"1\":{\"227\":1}}],[\"但是可以通过修改配置文件运行\",{\"1\":{\"270\":1}}],[\"但是注解中指定的类需要是spring\",{\"1\":{\"229\":1}}],[\"但是现在b允许为null\",{\"1\":{\"226\":1}}],[\"但是现在我们如果做成一个starter\",{\"1\":{\"218\":1}}],[\"但是我们自定义的配置就没有\",{\"1\":{\"224\":1}}],[\"但是有更好的方式\",{\"1\":{\"223\":1}}],[\"但里面是空的\",{\"1\":{\"181\":1}}],[\"但有时我们希望不同的消息被不同的队列消费\",{\"1\":{\"157\":1}}],[\"执行完此操作后\",{\"1\":{\"258\":1}}],[\"执行slaveof\",{\"1\":{\"184\":1}}],[\"执行\",{\"1\":{\"181\":1}}],[\"执行查询\",{\"1\":{\"114\":1}}],[\"快照同时还可以响应客户端请求\",{\"1\":{\"181\":1}}],[\"禁用rdb\",{\"1\":{\"181\":1}}],[\"持久化\",{\"0\":{\"179\":1}}],[\"测试浏览器扩展\",{\"1\":{\"271\":1}}],[\"测试代码\",{\"1\":{\"202\":1}}],[\"测试\",{\"0\":{\"178\":1},\"1\":{\"197\":1,\"271\":1}}],[\"测试时加入\",{\"1\":{\"25\":1}}],[\"很多时候\",{\"1\":{\"177\":1}}],[\"序列化是指将数据结构转换为字节流的过程\",{\"1\":{\"176\":1}}],[\"序列化\",{\"0\":{\"176\":1}}],[\"计算多个有序集合的交集\",{\"1\":{\"175\":1}}],[\"计算多个有序集合的并集\",{\"1\":{\"175\":1}}],[\"对\",{\"1\":{\"284\":1}}],[\"对象\",{\"1\":{\"242\":1}}],[\"对于老的浏览器\",{\"1\":{\"236\":1}}],[\"对应的包名可能就扫不到了\",{\"1\":{\"218\":1}}],[\"对有序集合中指定元素的分数进行增加\",{\"1\":{\"175\":1}}],[\"对比数据库\",{\"1\":{\"105\":1}}],[\"z\",{\"1\":{\"292\":1}}],[\"z0\",{\"1\":{\"292\":1}}],[\"za\",{\"1\":{\"292\":1}}],[\"zadd\",{\"1\":{\"175\":2}}],[\"zenhei\",{\"1\":{\"279\":1}}],[\"zinterstore\",{\"1\":{\"175\":2}}],[\"zincrby\",{\"1\":{\"175\":2}}],[\"zunionstore\",{\"1\":{\"175\":2}}],[\"zcard\",{\"1\":{\"175\":2}}],[\"zcount\",{\"1\":{\"175\":2}}],[\"zrem\",{\"1\":{\"175\":2}}],[\"zrank\",{\"1\":{\"175\":2}}],[\"zrangebyscore\",{\"1\":{\"175\":2}}],[\"zrange\",{\"1\":{\"175\":2}}],[\"从指定文件中查找指定的文本内容\",{\"1\":{\"252\":1}}],[\"从而使得浏览器与服务器之间的通信始终保持稳定和高效\",{\"1\":{\"234\":1}}],[\"从最近到最远\",{\"1\":{\"191\":1}}],[\"从机只读\",{\"1\":{\"184\":1}}],[\"从有序集合中删除元素\",{\"1\":{\"175\":1}}],[\"从集合中弹出一个随机元素\",{\"1\":{\"175\":1}}],[\"从集合中删除元素\",{\"1\":{\"175\":1}}],[\"从高亮结果中获取需要高亮的字段内容\",{\"1\":{\"114\":1}}],[\"判断是否是图片类型\",{\"1\":{\"242\":1}}],[\"判断主节点下线的时间阈值\",{\"1\":{\"185\":1}}],[\"判断元素是否在集合中\",{\"1\":{\"175\":1}}],[\"判断key是否存在\",{\"1\":{\"175\":1}}],[\"剩余2\",{\"1\":{\"175\":1}}],[\"往list中加入hello\",{\"1\":{\"175\":1}}],[\"往后传递\",{\"1\":{\"134\":1}}],[\"找到添加打包依赖\",{\"1\":{\"207\":1}}],[\"找到添加依赖\",{\"1\":{\"207\":1}}],[\"找到就设置\",{\"1\":{\"175\":1}}],[\"找不到就创建\",{\"1\":{\"175\":1}}],[\"批量set或get\",{\"1\":{\"175\":1}}],[\"串的截取\",{\"1\":{\"175\":1}}],[\"减少操作\",{\"1\":{\"175\":1}}],[\"减少20\",{\"1\":{\"175\":1}}],[\"减少创建次数\",{\"1\":{\"123\":1}}],[\"增加20\",{\"1\":{\"175\":1}}],[\"过期\",{\"1\":{\"175\":1}}],[\"过滤\",{\"1\":{\"105\":1,\"114\":1}}],[\"过滤器\",{\"0\":{\"101\":1}}],[\"收件人\",{\"1\":{\"239\":2}}],[\"收到信息了\",{\"1\":{\"171\":1}}],[\"收集超过5秒的sql\",{\"1\":{\"60\":1}}],[\"延迟5s启动\",{\"1\":{\"240\":1}}],[\"延迟消息队列\",{\"1\":{\"169\":1}}],[\"延迟队列\",{\"0\":{\"169\":1}}],[\"静态资源访问\",{\"0\":{\"231\":1}}],[\"静态路由\",{\"0\":{\"167\":1}}],[\"静态代码块\",{\"1\":{\"150\":1}}],[\"公平消费\",{\"1\":{\"165\":1}}],[\"第5秒\",{\"1\":{\"285\":1}}],[\"第4\",{\"1\":{\"285\":1}}],[\"第三方的starter会把starter放后面\",{\"1\":{\"217\":1}}],[\"第一次\",{\"1\":{\"193\":1}}],[\"第一种模式\",{\"1\":{\"164\":1}}],[\"第几条开始\",{\"1\":{\"110\":1}}],[\"整合\",{\"0\":{\"162\":1}}],[\"整合spring\",{\"0\":{\"66\":1}}],[\"都是书本上的呀\",{\"1\":{\"248\":1}}],[\"都是可以根据routinghey把消息路由到不同的队列\",{\"1\":{\"160\":1}}],[\"都能读只有自己能写\",{\"1\":{\"54\":1}}],[\"动态更新\",{\"1\":{\"306\":1}}],[\"动态路由\",{\"0\":{\"168\":1},\"1\":{\"163\":1}}],[\"动态\",{\"0\":{\"160\":1}}],[\"动态条件查询\",{\"0\":{\"15\":1}}],[\"而redisson分布式锁是基于redis的redisson分布式框架实现的\",{\"1\":{\"244\":1}}],[\"而\",{\"1\":{\"234\":1}}],[\"而使用spring\",{\"1\":{\"219\":1}}],[\"而是要指定一个routingkey\",{\"1\":{\"157\":1}}],[\"而且并发高时\",{\"1\":{\"143\":1}}],[\"直连\",{\"0\":{\"157\":1}}],[\"直接在方法参数中注入即可\",{\"1\":{\"225\":1}}],[\"直接删除\",{\"1\":{\"192\":1}}],[\"直接\",{\"1\":{\"70\":1}}],[\"直接使用json传递参数\",{\"0\":{\"11\":1}}],[\"临时队列\",{\"1\":{\"155\":1,\"159\":2,\"161\":1}}],[\"流程如下\",{\"1\":{\"153\":1}}],[\"广播\",{\"0\":{\"153\":1,\"166\":1}}],[\"叫做循环\",{\"1\":{\"151\":1}}],[\"连接符\",{\"0\":{\"285\":1}}],[\"连接不稳定\",{\"1\":{\"238\":1}}],[\"连接对象方法\",{\"1\":{\"150\":1}}],[\"连接池\",{\"0\":{\"123\":1}}],[\"消费同一个队列\",{\"1\":{\"151\":1}}],[\"消费时的回调接口\",{\"1\":{\"149\":1}}],[\"消费者\",{\"0\":{\"155\":1,\"159\":1,\"171\":1},\"1\":{\"149\":1}}],[\"消费消息\",{\"0\":{\"149\":1},\"1\":{\"149\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"消息\",{\"1\":{\"157\":1}}],[\"消息可能没有被消费者正确处理\",{\"1\":{\"147\":1}}],[\"消息被拿走后\",{\"1\":{\"147\":1}}],[\"消息队列\",{\"1\":{\"147\":1}}],[\"消息的消费者\",{\"1\":{\"147\":1}}],[\"消息产生者将消息放入队列\",{\"1\":{\"147\":1}}],[\"交换机和队列绑定和\",{\"1\":{\"159\":2,\"161\":1}}],[\"交换机和队列绑定\",{\"1\":{\"155\":1}}],[\"交换机吧消息发给和自己绑定的队列\",{\"1\":{\"153\":1}}],[\"交换机名称\",{\"1\":{\"148\":1,\"149\":1,\"154\":1}}],[\"交由ioc管理后\",{\"1\":{\"69\":1}}],[\"发布消息\",{\"1\":{\"148\":1}}],[\"发送公钥\",{\"1\":{\"267\":1}}],[\"发送带附件的邮件\",{\"1\":{\"239\":1}}],[\"发送者\",{\"1\":{\"239\":1}}],[\"发送邮件\",{\"0\":{\"239\":1}}],[\"发送走的信息\",{\"1\":{\"98\":1}}],[\"发送过来的信息\",{\"1\":{\"98\":1}}],[\"队列与交换机绑定\",{\"1\":{\"157\":1}}],[\"队列中的消费者都可以拿到消息\",{\"1\":{\"153\":1}}],[\"队列是否持久化\",{\"1\":{\"148\":1,\"149\":1}}],[\"队列名称\",{\"1\":{\"148\":1,\"149\":1}}],[\"生成pdf文件\",{\"1\":{\"298\":1}}],[\"生成pdf\",{\"1\":{\"297\":1}}],[\"生成截图文件路径和名称\",{\"1\":{\"277\":2}}],[\"生成页面\",{\"1\":{\"271\":1}}],[\"生成\",{\"1\":{\"189\":1}}],[\"生产者无权决定\",{\"1\":{\"153\":1}}],[\"生产者只能向交换机发送消息\",{\"1\":{\"153\":1}}],[\"生产者\",{\"0\":{\"154\":1,\"158\":1,\"170\":1},\"1\":{\"148\":1}}],[\"生产消息\",{\"0\":{\"148\":1}}],[\"生命周期\",{\"1\":{\"70\":1,\"75\":2}}],[\"聊天\",{\"1\":{\"147\":1}}],[\"应用场景\",{\"1\":{\"147\":1,\"234\":1}}],[\"造成消息的丢失\",{\"1\":{\"147\":1}}],[\"已经从队列中消失了\",{\"1\":{\"147\":1}}],[\"隐藏行号\",{\"1\":{\"266\":1}}],[\"隐患\",{\"1\":{\"147\":1}}],[\"隐式内连接\",{\"1\":{\"44\":1}}],[\"监听\",{\"1\":{\"147\":1}}],[\"学习地址\",{\"1\":{\"146\":1}}],[\"博客园\",{\"1\":{\"146\":1,\"296\":1}}],[\"逊老头\",{\"1\":{\"146\":1}}],[\"上面的写法好像没办法拿到参数啊\",{\"1\":{\"221\":1}}],[\"上面的代码\",{\"1\":{\"122\":1}}],[\"上传失败\",{\"1\":{\"232\":1}}],[\"上传成功\",{\"1\":{\"232\":1}}],[\"上传图片\",{\"0\":{\"211\":1}}],[\"上传\",{\"0\":{\"209\":1},\"1\":{\"210\":1,\"232\":1}}],[\"上游服务为了保护系统整体的可用性\",{\"1\":{\"144\":1}}],[\"导出pdf\",{\"0\":{\"296\":1}}],[\"导出完整数据库\",{\"0\":{\"264\":1}}],[\"导致数据传输效率较低\",{\"1\":{\"238\":1}}],[\"导致服务内的其它接口受到影响\",{\"1\":{\"143\":1}}],[\"导入sql文件\",{\"1\":{\"265\":1}}],[\"导入数据库\",{\"0\":{\"265\":1}}],[\"导入方式\",{\"0\":{\"219\":1}}],[\"导入\",{\"1\":{\"69\":1}}],[\"限制访问次数\",{\"1\":{\"142\":1}}],[\"限制内存大小\",{\"1\":{\"105\":1}}],[\"则变成搜索\",{\"1\":{\"294\":1}}],[\"则列举包含指定前缀的文件\",{\"1\":{\"212\":1}}],[\"则列举存储空间下的所有文件\",{\"1\":{\"212\":1}}],[\"则回退\",{\"1\":{\"191\":1}}],[\"则使用ls\",{\"1\":{\"189\":1}}],[\"则需要配置\",{\"1\":{\"185\":1}}],[\"则该实例客观下线\",{\"1\":{\"185\":1}}],[\"则主观认为该实例下线\",{\"1\":{\"185\":1}}],[\"则执行bgsave\",{\"1\":{\"181\":1}}],[\"则新建一个\",{\"1\":{\"175\":1}}],[\"则所有profile共享该配置\",{\"1\":{\"139\":1}}],[\"则会自动生成id\",{\"1\":{\"109\":1}}],[\"则会被记录到慢查询日志中\",{\"1\":{\"60\":1}}],[\"随机返回集合中的一个元素\",{\"1\":{\"175\":1}}],[\"随机给一个\",{\"1\":{\"120\":1}}],[\"随时调整\",{\"1\":{\"139\":1}}],[\"具体见\",{\"1\":{\"274\":1,\"276\":1}}],[\"具体应该根据实际情况来选择\",{\"1\":{\"234\":1}}],[\"具体有什么作用呢\",{\"1\":{\"225\":1}}],[\"具体的业务可能需要\",{\"1\":{\"139\":1}}],[\"具体指运行时间超过long\",{\"1\":{\"60\":1}}],[\"共享日志配置\",{\"1\":{\"138\":2}}],[\"共享mybatis配置\",{\"1\":{\"138\":1}}],[\"共享配置\",{\"0\":{\"137\":1,\"138\":1},\"1\":{\"138\":1}}],[\"文件为\",{\"1\":{\"275\":3}}],[\"文件上传\",{\"0\":{\"232\":1}}],[\"文件名称\",{\"1\":{\"182\":1}}],[\"文件是将\",{\"1\":{\"182\":1}}],[\"文件是在指定的时间间隔内\",{\"1\":{\"180\":1}}],[\"文件\",{\"1\":{\"181\":2}}],[\"文件的缩写\",{\"1\":{\"180\":1}}],[\"文件后缀名\",{\"1\":{\"138\":1}}],[\"文档\",{\"0\":{\"109\":1,\"113\":1},\"1\":{\"105\":1}}],[\"维护成本高\",{\"1\":{\"137\":1}}],[\"某个文件发生变化\",{\"1\":{\"282\":1}}],[\"某个项目配置\",{\"1\":{\"187\":1}}],[\"某个范围之内\",{\"1\":{\"32\":1}}],[\"某些业务配置在配置文件中写死了\",{\"1\":{\"137\":1}}],[\"提示\",{\"1\":{\"240\":1,\"254\":1}}],[\"提交\",{\"1\":{\"190\":1}}],[\"提供了一个拦截器接口\",{\"1\":{\"136\":1}}],[\"提高数据库操作的性能\",{\"1\":{\"25\":1}}],[\"提高性能\",{\"1\":{\"25\":1}}],[\"提高效率而生\",{\"1\":{\"17\":1}}],[\"由操作系统保证数据同步到磁盘\",{\"1\":{\"182\":1}}],[\"由于我们进入了demo目录\",{\"1\":{\"257\":1}}],[\"由于sockjs在不支持websocket的浏览器中使用的是长轮询技术\",{\"1\":{\"238\":1}}],[\"由于记录中的很多操作没有意义\",{\"1\":{\"182\":1}}],[\"由于\",{\"1\":{\"136\":1}}],[\"由他来查看哪些sql超出了我们的最大忍耐时间值\",{\"1\":{\"60\":1}}],[\"移除当前登录用户信息\",{\"1\":{\"135\":1}}],[\"优先执行\",{\"1\":{\"132\":1}}],[\"优化\",{\"0\":{\"124\":1}}],[\"拿到请求的header\",{\"1\":{\"132\":1}}],[\"拿到uri\",{\"1\":{\"120\":1}}],[\"针对请求的过滤\",{\"1\":{\"132\":1}}],[\"路由key\",{\"1\":{\"157\":1}}],[\"路由模型\",{\"0\":{\"156\":1}}],[\"路由过滤器\",{\"0\":{\"130\":1}}],[\"路由断言\",{\"0\":{\"129\":1}}],[\"路由属性\",{\"0\":{\"128\":1}}],[\"启动容器\",{\"1\":{\"261\":1}}],[\"启动命令\",{\"1\":{\"173\":1}}],[\"启动\",{\"0\":{\"127\":1},\"1\":{\"185\":1}}],[\"身份校验\",{\"1\":{\"126\":1}}],[\"日期\",{\"1\":{\"284\":1}}],[\"日期函数\",{\"0\":{\"40\":1}}],[\"日\",{\"1\":{\"283\":1,\"285\":1}}],[\"日常维护\",{\"1\":{\"283\":1}}],[\"日志将输出到控制台\",{\"1\":{\"185\":1}}],[\"日志\",{\"0\":{\"125\":1}}],[\"额外创建模块\",{\"1\":{\"124\":1}}],[\"最好是找到conf下的nginx\",{\"1\":{\"254\":1}}],[\"最好是放到html目录\",{\"1\":{\"254\":1}}],[\"最大\",{\"1\":{\"232\":1}}],[\"最常用的其实就是\",{\"1\":{\"227\":1}}],[\"最佳实践\",{\"0\":{\"124\":1}}],[\"最后即可使用ssh\",{\"1\":{\"267\":1}}],[\"最后的点是指构建时dockerfile所在路径\",{\"1\":{\"257\":1}}],[\"最后在spring\",{\"1\":{\"222\":1}}],[\"最后我们将\",{\"1\":{\"221\":1}}],[\"最后\",{\"1\":{\"114\":1,\"148\":1,\"149\":1}}],[\"编译\",{\"1\":{\"197\":1}}],[\"编写feignclient\",{\"1\":{\"122\":1}}],[\"编码格式\",{\"1\":{\"26\":1}}],[\"帮助我们优雅的发送请求\",{\"1\":{\"122\":1}}],[\"想简单点\",{\"1\":{\"122\":1}}],[\"太多了\",{\"1\":{\"122\":1}}],[\"端口号\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"端口\",{\"1\":{\"120\":1}}],[\"负载均衡器\",{\"1\":{\"122\":1}}],[\"负载均衡\",{\"1\":{\"120\":1,\"127\":1}}],[\"服务器端渲染\",{\"1\":{\"271\":1}}],[\"服务熔断\",{\"0\":{\"144\":1}}],[\"服务保护\",{\"0\":{\"140\":1}}],[\"服务名\",{\"1\":{\"139\":2}}],[\"服务名称\",{\"1\":{\"138\":1}}],[\"服务发现\",{\"0\":{\"120\":1}}],[\"服务注册\",{\"0\":{\"119\":1}}],[\"服务注册和发现\",{\"0\":{\"116\":1}}],[\"运行的系统下\",{\"1\":{\"282\":1}}],[\"运行绑定的\",{\"1\":{\"276\":1}}],[\"运行镜像\",{\"1\":{\"262\":1}}],[\"运行目录下\",{\"1\":{\"232\":1}}],[\"运行\",{\"1\":{\"118\":1,\"276\":1}}],[\"飞书bilibili\",{\"1\":{\"115\":1}}],[\"其中x是一个域的占位符\",{\"1\":{\"283\":1}}],[\"其中包含了分页信息\",{\"1\":{\"114\":1}}],[\"其实还有另一种方式也可以拿到注解的属性\",{\"1\":{\"221\":1}}],[\"其它region请按实际情况填写\",{\"1\":{\"211\":1}}],[\"其他常用的条件注解\",{\"0\":{\"228\":1}}],[\"其他不管\",{\"1\":{\"181\":1}}],[\"其他的连接不可用\",{\"1\":{\"148\":1,\"149\":1}}],[\"其他\",{\"0\":{\"13\":1,\"58\":1,\"91\":1},\"1\":{\"300\":1}}],[\"接下来我们使用spring\",{\"1\":{\"222\":1}}],[\"接下来我们来解决这个问题\",{\"1\":{\"221\":1}}],[\"接下来就可以决定我们的starter的导入方式了\",{\"1\":{\"219\":1}}],[\"接着之前的假设\",{\"1\":{\"226\":1}}],[\"接着我们再看下面的配置2\",{\"1\":{\"227\":1}}],[\"接着我们在aautoconfiguration上添加\",{\"1\":{\"223\":1}}],[\"接着我们需要在spring\",{\"1\":{\"222\":1}}],[\"接着我们实现一个importselector\",{\"1\":{\"221\":1}}],[\"接着\",{\"1\":{\"114\":2}}],[\"接受url地址参数\",{\"1\":{\"90\":1}}],[\"电子产品\",{\"1\":{\"114\":1}}],[\"手动确认的表示\",{\"1\":{\"152\":1}}],[\"手动抛出异常\",{\"1\":{\"25\":1}}],[\"手机\",{\"1\":{\"114\":2}}],[\"我们都会发布一个\",{\"1\":{\"274\":1}}],[\"我们知道nginx中有两个关键的目录\",{\"1\":{\"254\":1}}],[\"我们可能会发现一些条件注解不生效\",{\"1\":{\"229\":1}}],[\"我们可以这样用\",{\"1\":{\"227\":1}}],[\"我们可以使用objectprovider\",{\"1\":{\"226\":1}}],[\"我们可以通过\",{\"1\":{\"223\":1}}],[\"我们可以通过importselector中提供给我们的annotationmetadata来获得enablea中的属性enabled\",{\"1\":{\"221\":1}}],[\"我们来看下面的配置1\",{\"1\":{\"227\":1}}],[\"我们很有可能需要在application\",{\"1\":{\"223\":1}}],[\"我们需要先定义一个aproperties\",{\"1\":{\"223\":1}}],[\"我们需要在resources目录下新建一个meta\",{\"1\":{\"222\":1}}],[\"我们需要自定义\",{\"1\":{\"177\":1}}],[\"我们返回aconfiguration\",{\"1\":{\"221\":1}}],[\"我们先使用注解的方式来导入\",{\"1\":{\"220\":1}}],[\"我们经常能看到有些组件的会需要你添加\",{\"1\":{\"219\":1}}],[\"我们实现了一个a类用于提供我们封装好的功能\",{\"1\":{\"216\":1}}],[\"我们是购物车服务\",{\"1\":{\"139\":1}}],[\"我们从searchhits中获取查询结果列表\",{\"1\":{\"114\":1}}],[\"我们按照前述分页方式和排序方式添加分页和排序信息到查询\",{\"1\":{\"114\":1}}],[\"我们使用pageimpl将结果封装成page<product>对象\",{\"1\":{\"114\":1}}],[\"我们使用filterbuilders\",{\"1\":{\"114\":1}}],[\"我们使用querybuilders\",{\"1\":{\"114\":1}}],[\"我们结合使用查询\",{\"1\":{\"114\":1}}],[\"我们就算慢sql\",{\"1\":{\"60\":1}}],[\"大家可能会想\",{\"1\":{\"223\":1}}],[\"大家在开发的过程中应该经常会看到各种各样的starter\",{\"1\":{\"215\":1}}],[\"大杂烩\",{\"1\":{\"114\":1}}],[\"大于号\",{\"1\":{\"266\":1}}],[\"大于等于\",{\"1\":{\"110\":1}}],[\"大于\",{\"1\":{\"110\":1}}],[\"实例\",{\"1\":{\"227\":1,\"275\":1}}],[\"实际上还有许多其他的命令可供使用\",{\"1\":{\"175\":1}}],[\"实现了客户端与服务器端的实时通信\",{\"1\":{\"234\":1}}],[\"实现\",{\"0\":{\"177\":1},\"1\":{\"234\":1}}],[\"实现自减\",{\"1\":{\"175\":1}}],[\"实现自增\",{\"1\":{\"175\":1}}],[\"实现自定义注解\",{\"0\":{\"96\":1}}],[\"实现工具类\",{\"0\":{\"150\":1}}],[\"实体类\",{\"1\":{\"111\":1}}],[\"必须是个完整的词\",{\"1\":{\"110\":1}}],[\"必须严格按照参数顺序来引用\",{\"1\":{\"7\":1}}],[\"高效性\",{\"1\":{\"235\":1}}],[\"高级篇\",{\"1\":{\"183\":1}}],[\"高级查询\",{\"0\":{\"110\":1,\"114\":1},\"1\":{\"105\":1}}],[\"高亮\",{\"1\":{\"110\":1,\"114\":1}}],[\"范围查询\",{\"1\":{\"110\":1}}],[\"范围查询和排序操作\",{\"1\":{\"50\":1}}],[\"汤姆\",{\"1\":{\"110\":1}}],[\"升降序\",{\"1\":{\"110\":1}}],[\"升序\",{\"1\":{\"35\":1}}],[\"匹配一个垂直制表符\",{\"1\":{\"292\":1}}],[\"匹配一个制表符\",{\"1\":{\"292\":1}}],[\"匹配一个回车符\",{\"1\":{\"292\":1}}],[\"匹配一个换行符\",{\"1\":{\"292\":1}}],[\"匹配一个换页符\",{\"1\":{\"292\":1}}],[\"匹配一个或多个单词\",{\"1\":{\"160\":1}}],[\"匹配非数字\",{\"1\":{\"292\":1}}],[\"匹配数字\",{\"1\":{\"292\":1}}],[\"匹配所有非空格字符\",{\"1\":{\"292\":1}}],[\"匹配所有非字母数字\",{\"1\":{\"292\":1}}],[\"匹配所有空格字符\",{\"1\":{\"292\":1}}],[\"匹配所有字母数字\",{\"1\":{\"292\":1}}],[\"匹配不多不少恰好一个单词\",{\"1\":{\"160\":1}}],[\"匹配\",{\"1\":{\"110\":4,\"292\":1}}],[\"健康状态\",{\"1\":{\"107\":1}}],[\"类型exchange可以让队列在绑定routing\",{\"1\":{\"160\":1}}],[\"类型\",{\"1\":{\"105\":1,\"154\":1}}],[\"类似于applicationcontext\",{\"1\":{\"75\":1}}],[\"类似的形式\",{\"1\":{\"7\":1}}],[\"9\",{\"1\":{\"200\":1,\"266\":1,\"286\":1,\"292\":2}}],[\"90f\",{\"1\":{\"303\":1}}],[\"900\",{\"1\":{\"181\":1}}],[\"900s\",{\"1\":{\"181\":1}}],[\"9090\",{\"1\":{\"127\":1}}],[\"9849\",{\"1\":{\"118\":2}}],[\"9848\",{\"1\":{\"118\":2}}],[\"9<\",{\"1\":{\"111\":1,\"200\":1}}],[\"9300\",{\"1\":{\"105\":2}}],[\"9200\",{\"1\":{\"105\":2,\"111\":1}}],[\"安装到本地仓库\",{\"1\":{\"197\":1}}],[\"安装插件以及使用\",{\"1\":{\"169\":1}}],[\"安装地址\",{\"1\":{\"146\":1}}],[\"安装\",{\"0\":{\"173\":1,\"195\":1,\"273\":1},\"1\":{\"105\":1,\"281\":1}}],[\"安装报错官方文档基本查询\",{\"1\":{\"105\":1}}],[\"企业搜索和网站搜索\",{\"1\":{\"105\":1}}],[\"地理\",{\"1\":{\"105\":1}}],[\"介绍了一些\",{\"1\":{\"276\":1}}],[\"介绍\",{\"0\":{\"215\":1},\"1\":{\"105\":1}}],[\"枚举\",{\"0\":{\"102\":1}}],[\"拦截路径\",{\"1\":{\"100\":1}}],[\"拦截\",{\"1\":{\"99\":1}}],[\"拦截器对象\",{\"1\":{\"100\":1}}],[\"拦截器\",{\"0\":{\"98\":1}}],[\"被拦截的操作之后运行\",{\"1\":{\"99\":1}}],[\"被拦截的操作之前运行\",{\"1\":{\"99\":1}}],[\"被构造\",{\"1\":{\"70\":1}}],[\"先生成一对密钥\",{\"1\":{\"267\":1}}],[\"先进入到mysql中\",{\"1\":{\"265\":1}}],[\"先按ctrl\",{\"1\":{\"261\":1}}],[\"先按第一个排序\",{\"1\":{\"35\":1}}],[\"先配置\",{\"1\":{\"184\":1}}],[\"先实现一个拦截对象\",{\"0\":{\"99\":1}}],[\"7124603507025379365↩︎\",{\"1\":{\"229\":1}}],[\"7001\",{\"1\":{\"185\":1}}],[\"789\",{\"1\":{\"129\":1}}],[\"7\",{\"1\":{\"94\":1,\"105\":2,\"111\":1,\"258\":1,\"266\":1,\"274\":1,\"284\":2,\"298\":1}}],[\"解决pdf文件中文不显示的问题\",{\"1\":{\"298\":1}}],[\"解析xml\",{\"0\":{\"305\":1}}],[\"解析html为pdf\",{\"1\":{\"296\":1}}],[\"解析出来用户信息\",{\"1\":{\"92\":1}}],[\"解密\",{\"1\":{\"287\":2}}],[\"解绑\",{\"1\":{\"193\":1}}],[\"解锁\",{\"1\":{\"54\":1}}],[\"把文件添加add和提交commit到版本库\",{\"0\":{\"190\":1}}],[\"把新建的分支yyy上传\",{\"1\":{\"188\":1}}],[\"把每个服务中的公共配置抽取出来\",{\"1\":{\"138\":1}}],[\"把用户传过来的token\",{\"1\":{\"92\":1}}],[\"把表中字段和实体类对应\",{\"1\":{\"21\":1}}],[\"访问节点\",{\"1\":{\"306\":1}}],[\"访问形式\",{\"1\":{\"89\":1}}],[\"访问路径\",{\"1\":{\"82\":1,\"90\":1}}],[\"响应式\",{\"1\":{\"132\":1}}],[\"响应\",{\"0\":{\"88\":1}}],[\"六\",{\"0\":{\"193\":1},\"1\":{\"87\":1}}],[\"五大数据类型\",{\"0\":{\"175\":1}}],[\"五\",{\"0\":{\"192\":1},\"1\":{\"87\":1}}],[\"四\",{\"0\":{\"191\":1},\"1\":{\"87\":1}}],[\"参数\",{\"1\":{\"152\":1,\"185\":2}}],[\"参数等\",{\"1\":{\"132\":1}}],[\"参数类型\",{\"0\":{\"87\":1}}],[\"参数可以静态地\",{\"1\":{\"3\":1}}],[\"设置图片相对大小\",{\"1\":{\"303\":1}}],[\"设置单元格内部没有边框\",{\"1\":{\"302\":3}}],[\"设置表格后间距\",{\"1\":{\"302\":1}}],[\"设置表格前间距\",{\"1\":{\"302\":1}}],[\"设置表格的样式\",{\"1\":{\"302\":1}}],[\"设置表格的列宽比例\",{\"1\":{\"302\":1}}],[\"设置表格宽度百分比\",{\"1\":{\"302\":1}}],[\"设置文本下移\",{\"1\":{\"301\":1}}],[\"设置文本上移\",{\"1\":{\"301\":1}}],[\"设置响应的内容类型和头部\",{\"1\":{\"299\":1}}],[\"设置密钥\",{\"1\":{\"287\":1}}],[\"设置截图选项\",{\"1\":{\"277\":1}}],[\"设置成粘贴模式\",{\"1\":{\"266\":1}}],[\"设置编码\",{\"1\":{\"265\":1}}],[\"设置\",{\"1\":{\"185\":4,\"275\":1,\"276\":1}}],[\"设置重写的基准值\",{\"1\":{\"182\":2}}],[\"设置序列化器\",{\"1\":{\"177\":1}}],[\"设置name\",{\"1\":{\"175\":1}}],[\"设置k\",{\"1\":{\"175\":1}}],[\"设置通道一次只能消费一个消息\",{\"1\":{\"151\":1}}],[\"设置用户名和密码\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"设置连接哪一个虚拟主机\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"设置连接mq主机\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"设置信息\",{\"1\":{\"134\":1}}],[\"设置权重\",{\"1\":{\"132\":1}}],[\"设置那些请求归springmvc处理\",{\"1\":{\"82\":1}}],[\"设置位配置类\",{\"1\":{\"75\":1}}],[\"调用原始操作\",{\"1\":{\"79\":1,\"80\":1}}],[\"调用的是无参构造\",{\"1\":{\"70\":1}}],[\"通常是每几秒或几分钟\",{\"1\":{\"180\":1}}],[\"通道绑定交换机\",{\"1\":{\"155\":1,\"159\":2,\"161\":1}}],[\"通道绑定对应的消息队列\",{\"1\":{\"148\":1,\"149\":1}}],[\"通道名称\",{\"1\":{\"148\":1}}],[\"通行\",{\"1\":{\"99\":1}}],[\"通知类型\",{\"0\":{\"79\":1}}],[\"通配符即可\",{\"1\":{\"78\":1}}],[\"通过get方法停止任务\",{\"1\":{\"241\":1}}],[\"通过elasticsearchresttemplate\",{\"1\":{\"114\":1}}],[\"通过map查询\",{\"1\":{\"19\":1}}],[\"通过多个id进行查询\",{\"1\":{\"19\":1}}],[\"通过id查询信息\",{\"1\":{\"19\":1}}],[\"通过list\",{\"1\":{\"12\":1}}],[\"通过json传递多个参数\",{\"1\":{\"11\":1}}],[\"通过java\",{\"1\":{\"10\":1}}],[\"绑定\",{\"1\":{\"77\":1}}],[\"绑定到firstjob\",{\"1\":{\"64\":1,\"65\":1}}],[\"举例\",{\"0\":{\"77\":1},\"1\":{\"251\":1,\"252\":1}}],[\"简写\",{\"1\":{\"292\":1}}],[\"简写字符集\",{\"0\":{\"292\":1}}],[\"简洁查看\",{\"1\":{\"191\":1}}],[\"简单使用\",{\"1\":{\"287\":1}}],[\"简单易用\",{\"1\":{\"235\":1}}],[\"简单啊\",{\"1\":{\"223\":1}}],[\"简单命令\",{\"0\":{\"197\":1}}],[\"简单\",{\"0\":{\"164\":1}}],[\"简单类型注入\",{\"1\":{\"75\":1}}],[\"简称\",{\"1\":{\"17\":1}}],[\"销毁\",{\"1\":{\"75\":1}}],[\"初始化的屏幕大小默认为\",{\"1\":{\"275\":1}}],[\"初始化\",{\"0\":{\"299\":1},\"1\":{\"75\":1,\"189\":1}}],[\"初识spring\",{\"1\":{\"68\":1}}],[\"单个域有多个取值时\",{\"1\":{\"283\":1}}],[\"单个字符\",{\"1\":{\"32\":1}}],[\"单页应用\",{\"1\":{\"271\":1}}],[\"单位\",{\"1\":{\"185\":2}}],[\"单例\",{\"1\":{\"75\":1}}],[\"名字\",{\"1\":{\"75\":1}}],[\"集合注入\",{\"0\":{\"74\":1}}],[\"6379\",{\"1\":{\"246\":1}}],[\"6380\",{\"1\":{\"185\":1}}],[\"64mb\",{\"1\":{\"182\":1}}],[\"600px\",{\"1\":{\"275\":1}}],[\"60\",{\"1\":{\"181\":1}}],[\"6\",{\"1\":{\"73\":1,\"89\":1,\"105\":2,\"246\":1,\"266\":1,\"275\":1,\"279\":1}}],[\"666\",{\"1\":{\"19\":2,\"80\":1,\"109\":1}}],[\"构造器\",{\"0\":{\"73\":1}}],[\"同时给aproperties添加configurationproperties注解并标记前缀为a\",{\"1\":{\"223\":1}}],[\"同样效果\",{\"1\":{\"70\":1,\"75\":1}}],[\"同restrict\",{\"1\":{\"42\":1}}],[\"等同于\",{\"1\":{\"69\":1,\"292\":4}}],[\"等其他\",{\"1\":{\"61\":1}}],[\"获得token\",{\"0\":{\"94\":1}}],[\"获得指定year的年\",{\"1\":{\"40\":1}}],[\"获取节点数量\",{\"1\":{\"306\":1}}],[\"获取选择的文件\",{\"1\":{\"242\":1}}],[\"获取当前日期\",{\"1\":{\"277\":2}}],[\"获取当前应用程序的根目录\",{\"1\":{\"232\":1}}],[\"获取当前登录用户信息\",{\"1\":{\"135\":1}}],[\"获取最后一次成功执行快照的时间\",{\"1\":{\"181\":1}}],[\"获取key对应的hash中所有的value\",{\"1\":{\"175\":1}}],[\"获取key对应的hash中所有的field\",{\"1\":{\"175\":1}}],[\"获取key对应的hash中所有的键值对\",{\"1\":{\"175\":1}}],[\"获取key对应的hash中field的数量\",{\"1\":{\"175\":1}}],[\"获取key对应的hash中field对应的value\",{\"1\":{\"175\":1}}],[\"获取\",{\"1\":{\"150\":1}}],[\"获取连接中的通道\",{\"1\":{\"148\":1,\"149\":1}}],[\"获取连接对象\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"获取参数\",{\"1\":{\"80\":1}}],[\"获取通知数据\",{\"0\":{\"80\":1}}],[\"获取bean\",{\"1\":{\"69\":1}}],[\"获取容器\",{\"1\":{\"69\":1}}],[\"配置中文字体\",{\"0\":{\"298\":1}}],[\"配置顺序\",{\"0\":{\"229\":1}}],[\"配置2中a1不会被注入\",{\"1\":{\"227\":1}}],[\"配置1中的a1还是会被注入\",{\"1\":{\"227\":1}}],[\"配置依赖\",{\"0\":{\"226\":1}}],[\"配置代理\",{\"0\":{\"225\":1}}],[\"配置文件中使用不推荐\",{\"1\":{\"287\":1}}],[\"配置文件\",{\"0\":{\"223\":1}}],[\"配置类\",{\"0\":{\"218\":1}}],[\"配置其他\",{\"1\":{\"185\":1}}],[\"配置日志文件路径和级别\",{\"1\":{\"185\":1}}],[\"配置监控的主节点信息\",{\"1\":{\"185\":1}}],[\"配置redistemplate\",{\"1\":{\"177\":1}}],[\"配置热跟新\",{\"0\":{\"139\":1}}],[\"配置列表中添加公共配置\",{\"1\":{\"138\":1}}],[\"配置拦截器\",{\"0\":{\"95\":1}}],[\"配置tomcat启动即可\",{\"1\":{\"82\":1}}],[\"配置\",{\"0\":{\"100\":1},\"1\":{\"70\":1,\"119\":1,\"120\":1,\"123\":1,\"127\":1,\"141\":1,\"185\":2,\"240\":1,\"242\":1,\"287\":1}}],[\"配置bean\",{\"1\":{\"69\":1}}],[\"配置实在是多\",{\"1\":{\"69\":1}}],[\"管理对象\",{\"1\":{\"69\":1}}],[\"创建pdfptable对象\",{\"1\":{\"302\":1}}],[\"创建下标chunk\",{\"1\":{\"301\":1}}],[\"创建上标chunk\",{\"1\":{\"301\":1}}],[\"创建粗体chunk\",{\"1\":{\"301\":1}}],[\"创建斜体chunk\",{\"1\":{\"301\":1}}],[\"创建带删除线的chunk\",{\"1\":{\"301\":1}}],[\"创建带下划线的chunk\",{\"1\":{\"301\":1}}],[\"创建带颜色的chunk\",{\"1\":{\"301\":1}}],[\"创建段落\",{\"1\":{\"301\":1}}],[\"创建用户配置文件\",{\"1\":{\"276\":1}}],[\"创建一个带超链接的chunk\",{\"1\":{\"301\":1}}],[\"创建一个普通的chunk\",{\"1\":{\"301\":1}}],[\"创建一个段落并添加到文档中\",{\"1\":{\"300\":1}}],[\"创建一个\",{\"1\":{\"275\":1}}],[\"创建一个时时更新的自动化测试环境\",{\"1\":{\"271\":1}}],[\"创建新的数据库\",{\"1\":{\"265\":1}}],[\"创建并启动一个容器\",{\"1\":{\"261\":1}}],[\"创建某个container的镜像\",{\"1\":{\"260\":1}}],[\"创建数据卷\",{\"1\":{\"255\":1}}],[\"创建文件对象\",{\"1\":{\"232\":1}}],[\"创建文档\",{\"1\":{\"109\":1}}],[\"创建目录\",{\"1\":{\"232\":1}}],[\"创建ssh\",{\"1\":{\"193\":1}}],[\"创建\",{\"1\":{\"189\":1,\"242\":1,\"262\":1}}],[\"创建版本库\",{\"0\":{\"189\":1}}],[\"创建连接对象\",{\"1\":{\"154\":1}}],[\"创建mq的连接工厂对象\",{\"1\":{\"148\":1,\"149\":1}}],[\"创建索引\",{\"1\":{\"105\":1,\"108\":1,\"112\":1}}],[\"创建拦截器\",{\"0\":{\"94\":1}}],[\"创建自定义注解\",{\"0\":{\"93\":1}}],[\"创建使用\",{\"0\":{\"82\":1}}],[\"创建对象\",{\"1\":{\"69\":1}}],[\"创建调度器\",{\"1\":{\"64\":1}}],[\"结构化\",{\"1\":{\"105\":1}}],[\"结果过滤\",{\"1\":{\"105\":1}}],[\"结束\",{\"1\":{\"64\":1}}],[\"结合之前explain进行全面分析\",{\"1\":{\"60\":1}}],[\"开源的搜索分析引擎\",{\"1\":{\"105\":1}}],[\"开始使用\",{\"0\":{\"272\":1}}],[\"开始手动确认消息\",{\"1\":{\"151\":1}}],[\"开始消息的自动确认机制\",{\"1\":{\"149\":1}}],[\"开始\",{\"1\":{\"64\":1}}],[\"开启代码自动缩进\",{\"1\":{\"266\":1}}],[\"开启请求方式前缀\",{\"1\":{\"141\":1}}],[\"开启注解\",{\"1\":{\"122\":1}}],[\"开启\",{\"0\":{\"184\":1},\"1\":{\"61\":1}}],[\"循环如此\",{\"1\":{\"306\":1}}],[\"循环\",{\"1\":{\"64\":1,\"65\":1}}],[\"每年3月的每个星期三下午14\",{\"1\":{\"286\":1}}],[\"每月最后一日上午10\",{\"1\":{\"286\":1}}],[\"每月15日上午10\",{\"1\":{\"286\":1}}],[\"每天上午09\",{\"1\":{\"286\":1}}],[\"每天上午10\",{\"1\":{\"286\":3}}],[\"每天中午12\",{\"1\":{\"286\":1}}],[\"每天中午12点执行任务\",{\"1\":{\"241\":1}}],[\"每隔5秒生效一次\",{\"1\":{\"285\":1}}],[\"每小时等\",{\"1\":{\"285\":1}}],[\"每分\",{\"1\":{\"285\":1}}],[\"每的意思\",{\"1\":{\"285\":1}}],[\"每6小时执行一次\",{\"1\":{\"279\":1}}],[\"每调用一次就会新建一个b实例\",{\"1\":{\"225\":1}}],[\"每秒执行一次fsync\",{\"1\":{\"182\":1}}],[\"每个星期三中午12\",{\"1\":{\"286\":1}}],[\"每个域可以是确定的取值\",{\"1\":{\"283\":1}}],[\"每个1s就会向每个实例发送ping命令\",{\"1\":{\"185\":1}}],[\"每个队列都绑定了交换机\",{\"1\":{\"153\":1}}],[\"每个消费者有自己的队列\",{\"1\":{\"153\":1}}],[\"每个微服务都有很多重复的配置\",{\"1\":{\"137\":1}}],[\"每次写入都执行fsync\",{\"1\":{\"182\":1}}],[\"每次消费一个\",{\"1\":{\"152\":1}}],[\"每次修改都要重启服务\",{\"1\":{\"137\":1}}],[\"每3秒\",{\"1\":{\"64\":1,\"65\":1}}],[\"每页记录数\",{\"1\":{\"36\":1}}],[\"立马开始\",{\"1\":{\"64\":1,\"65\":1}}],[\"然后使用\",{\"1\":{\"275\":1}}],[\"然后每隔5s运行一次\",{\"1\":{\"240\":1}}],[\"然后每3秒重复一次\",{\"1\":{\"64\":1,\"65\":1}}],[\"然后在meta\",{\"1\":{\"222\":1}}],[\"然后同样的把\",{\"1\":{\"221\":1}}],[\"然后\",{\"1\":{\"114\":1}}],[\"然后相同的按照第二个方式排序\",{\"1\":{\"35\":1}}],[\"触发时机\",{\"1\":{\"282\":1}}],[\"触发阈值自动重写aof\",{\"1\":{\"182\":1}}],[\"触发\",{\"0\":{\"181\":1},\"1\":{\"282\":1}}],[\"触发作业立即运行\",{\"1\":{\"64\":1,\"65\":1}}],[\"触发器的参数\",{\"1\":{\"65\":1}}],[\"触发器\",{\"1\":{\"64\":1,\"65\":1}}],[\"步骤名称\",{\"1\":{\"282\":3}}],[\"步骤\",{\"0\":{\"64\":1},\"1\":{\"282\":1}}],[\"就代表每年每月每日每小时的1分0秒触发任务\",{\"1\":{\"285\":1}}],[\"就代表每秒\",{\"1\":{\"285\":1}}],[\"就建一个\",{\"1\":{\"232\":1}}],[\"就不会再注入这个配置中的a实例了\",{\"1\":{\"227\":1}}],[\"就不会配置aconfiguration\",{\"1\":{\"221\":1}}],[\"就会报错找不到对应的bean\",{\"1\":{\"226\":1}}],[\"就是构建一个docker镜像\",{\"1\":{\"257\":1}}],[\"就是普通的方法调用\",{\"1\":{\"225\":1}}],[\"就是spring\",{\"1\":{\"139\":1}}],[\"就行了\",{\"1\":{\"221\":2}}],[\"就消费掉\",{\"1\":{\"147\":1}}],[\"就可以进行双向通信\",{\"1\":{\"235\":1}}],[\"就可以被\",{\"1\":{\"62\":1}}],[\"就可能耗尽服务器的线程资源\",{\"1\":{\"143\":1}}],[\"就没有用户信息\",{\"1\":{\"136\":1}}],[\"就要用到联合查询了\",{\"1\":{\"48\":1}}],[\"组合\",{\"1\":{\"62\":1}}],[\"与不同版本的\",{\"1\":{\"276\":1}}],[\"与\",{\"1\":{\"62\":1,\"110\":1,\"276\":1}}],[\"和item\",{\"1\":{\"306\":1}}],[\"和importselector不同的是\",{\"1\":{\"221\":1}}],[\"和浏览器功能直接在最新版本的chrome中执行测试\",{\"1\":{\"271\":1}}],[\"和远程分支连接起来\",{\"1\":{\"188\":1}}],[\"和\",{\"0\":{\"234\":1},\"1\":{\"62\":1,\"234\":1,\"258\":1,\"284\":1,\"285\":1,\"294\":1}}],[\"什么时候去调\",{\"1\":{\"62\":1}}],[\"代表当前目录\",{\"1\":{\"257\":1}}],[\"代表一个调度容器\",{\"1\":{\"62\":1}}],[\"代表一个调度参数的配置\",{\"1\":{\"62\":1}}],[\"代码\",{\"0\":{\"161\":1}}],[\"代码片段\",{\"1\":{\"3\":1}}],[\"另外我们也可以看到很多第三方库的starter\",{\"1\":{\"217\":1}}],[\"另外\",{\"1\":{\"62\":1}}],[\"要执行的具体内容\",{\"1\":{\"62\":1}}],[\"要么全部失败回滚\",{\"1\":{\"25\":1}}],[\"要么全部执行成功\",{\"1\":{\"25\":1}}],[\"官方文档\",{\"1\":{\"62\":1}}],[\"官网学习地址\",{\"1\":{\"1\":1}}],[\"永久生效\",{\"1\":{\"60\":1,\"184\":1}}],[\"希望能\",{\"1\":{\"60\":1}}],[\"意思是运行10秒以上的sql语句\",{\"1\":{\"60\":1}}],[\"意向锁\",{\"0\":{\"56\":1}}],[\"慢查询日志\",{\"0\":{\"60\":1}}],[\"查找当前目录中所有\",{\"1\":{\"252\":1}}],[\"查找helloworld\",{\"1\":{\"252\":1}}],[\"查找命令\",{\"0\":{\"250\":1}}],[\"查看\",{\"1\":{\"275\":2}}],[\"查看所有容器的统计信息\",{\"1\":{\"261\":1}}],[\"查看所有的数据卷\",{\"1\":{\"255\":1}}],[\"查看所有的节点\",{\"1\":{\"107\":1}}],[\"查看所有的sql情况\",{\"1\":{\"61\":1}}],[\"查看本地的所有容器\",{\"1\":{\"261\":1}}],[\"查看某个容器内的所有进程\",{\"1\":{\"261\":1}}],[\"查看某个数据卷的详情\",{\"1\":{\"255\":1}}],[\"查看某个具体sql\",{\"1\":{\"61\":1}}],[\"查看远程库的详细信息\",{\"1\":{\"193\":1}}],[\"查看远程库的信息\",{\"1\":{\"193\":1}}],[\"查看远程仓库信息\",{\"1\":{\"193\":1}}],[\"查看工作区中文件当前状态\",{\"1\":{\"191\":1}}],[\"查看文件内容\",{\"1\":{\"191\":1}}],[\"查看每一次修改历史\",{\"1\":{\"191\":1}}],[\"查看提交历史记录\",{\"1\":{\"191\":1}}],[\"查看当前目录\",{\"1\":{\"189\":1}}],[\"查看分支\",{\"1\":{\"188\":1}}],[\"查看name剩余过期时间\",{\"1\":{\"175\":1}}],[\"查看key的类型\",{\"1\":{\"174\":1}}],[\"查看索引\",{\"1\":{\"107\":1,\"108\":1}}],[\"查看curd执行频率\",{\"0\":{\"59\":1}}],[\"查询商品\",{\"1\":{\"122\":1}}],[\"查询结果列表和总记录数\",{\"1\":{\"114\":1}}],[\"查询文档\",{\"1\":{\"113\":1}}],[\"查询索引下所有文档\",{\"1\":{\"109\":1}}],[\"查询\",{\"1\":{\"109\":1}}],[\"查询目前慢日志时间\",{\"1\":{\"60\":1}}],[\"查询右表\",{\"1\":{\"46\":1}}],[\"查询左表全部数据\",{\"1\":{\"45\":1}}],[\"查询页码\",{\"1\":{\"36\":1}}],[\"查询记录数\",{\"1\":{\"36\":1}}],[\"间隙锁\",{\"1\":{\"57\":1}}],[\"防止进行insert\",{\"1\":{\"57\":1}}],[\"防止对其进行update\",{\"1\":{\"57\":1}}],[\"防止数据冲突和数据丢失等问题\",{\"1\":{\"25\":1}}],[\"行高\",{\"1\":{\"302\":1}}],[\"行终止符\",{\"1\":{\"292\":1}}],[\"行\",{\"1\":{\"105\":1,\"302\":3}}],[\"行锁\",{\"1\":{\"57\":1}}],[\"行级锁\",{\"0\":{\"57\":1}}],[\"元字符\",{\"0\":{\"291\":1}}],[\"元数据锁\",{\"0\":{\"55\":1}}],[\"元素的\",{\"1\":{\"3\":1}}],[\"元素中定义不同的参数值\",{\"1\":{\"3\":1}}],[\"加密\",{\"1\":{\"287\":2}}],[\"加入某个jar包依赖后\",{\"1\":{\"201\":1}}],[\"加参\",{\"1\":{\"191\":1}}],[\"加一个连接池\",{\"1\":{\"123\":1}}],[\"加载配置\",{\"1\":{\"82\":1}}],[\"加载对应的bean\",{\"1\":{\"82\":1}}],[\"加载spring配置\",{\"1\":{\"82\":1}}],[\"加载springmvc配置\",{\"1\":{\"82\":1}}],[\"加锁\",{\"1\":{\"54\":1}}],[\"加全局锁\",{\"1\":{\"52\":1}}],[\"释放锁等\",{\"1\":{\"244\":1}}],[\"释放锁\",{\"1\":{\"52\":1}}],[\"只导出表结构\",{\"1\":{\"264\":1}}],[\"只需建立连接\",{\"1\":{\"235\":1}}],[\"只要引入下面这个包就行啦\",{\"1\":{\"224\":1}}],[\"只要spring能够扫描到这个类\",{\"1\":{\"218\":1}}],[\"只要的字段\",{\"1\":{\"110\":1}}],[\"只管保存\",{\"1\":{\"181\":1}}],[\"只能存入字符串\",{\"1\":{\"177\":1}}],[\"只不过topic\",{\"1\":{\"160\":1}}],[\"只执行一次\",{\"1\":{\"150\":1}}],[\"只是便于理解\",{\"1\":{\"75\":1}}],[\"只有队列的routingkey与消息的routingkey完全一致\",{\"1\":{\"157\":1}}],[\"只有自己能读写\",{\"1\":{\"54\":1}}],[\"只有出现runtimeexception才回滚异常\",{\"1\":{\"25\":1}}],[\"只可读\",{\"1\":{\"52\":1}}],[\"全局搜索\",{\"0\":{\"295\":1}}],[\"全局配置\",{\"1\":{\"187\":1}}],[\"全局锁\",{\"0\":{\"52\":1}}],[\"全部阻塞\",{\"1\":{\"181\":1}}],[\"全部查出来\",{\"1\":{\"48\":1}}],[\"锁定单个行记录的锁\",{\"1\":{\"57\":1}}],[\"锁定表结构\",{\"1\":{\"55\":1}}],[\"锁\",{\"0\":{\"51\":1}}],[\"空间换时间\",{\"1\":{\"50\":1}}],[\"会出现不安装\",{\"1\":{\"281\":1}}],[\"会创建自己的\",{\"1\":{\"276\":1}}],[\"会在后台异步进行快照操作\",{\"1\":{\"181\":1}}],[\"会根据指定的routingkey进行判断\",{\"1\":{\"157\":1}}],[\"会被订阅的队列消费\",{\"1\":{\"157\":1}}],[\"会重新创建请求\",{\"1\":{\"123\":1}}],[\"会覆盖原有的数据\",{\"1\":{\"109\":1}}],[\"会自动把属性放进去\",{\"1\":{\"87\":1}}],[\"会把地址中的name映射给username\",{\"1\":{\"87\":1}}],[\"会减少查询耗时\",{\"1\":{\"50\":1}}],[\"会阻止删除\",{\"1\":{\"42\":1}}],[\"相当于1g\",{\"1\":{\"266\":1}}],[\"相当与查询a\",{\"1\":{\"44\":1}}],[\"相关信息\",{\"1\":{\"182\":1,\"232\":1}}],[\"相关的数据\",{\"1\":{\"50\":1}}],[\"相比\",{\"1\":{\"160\":1}}],[\"线程隔离正是解决这个问题的好办法\",{\"1\":{\"143\":1}}],[\"线程隔断\",{\"0\":{\"143\":1}}],[\"线\",{\"1\":{\"50\":1}}],[\"如使用jdom或dom4j等库时\",{\"1\":{\"306\":1}}],[\"如下\",{\"1\":{\"216\":1,\"218\":1,\"226\":1}}],[\"如有\",{\"1\":{\"207\":1}}],[\"如二进制协议\",{\"1\":{\"176\":1}}],[\"如hincrby\",{\"1\":{\"175\":1}}],[\"如果使用\",{\"1\":{\"284\":1}}],[\"如果使用逗号\",{\"1\":{\"284\":1}}],[\"如果要将\",{\"1\":{\"276\":1}}],[\"如果要删除目录\",{\"1\":{\"213\":1}}],[\"如果想要使用完全版本的\",{\"1\":{\"276\":1}}],[\"如果想要跳过下载\",{\"1\":{\"273\":1}}],[\"如果只需要导出表结构\",{\"1\":{\"264\":1}}],[\"如果服务器端不能正常关闭连接\",{\"1\":{\"236\":1}}],[\"如果在这个时候\",{\"1\":{\"227\":1}}],[\"如果在多个操作中涉及到较多的i\",{\"1\":{\"25\":1}}],[\"如果在多个操作中发生了错误\",{\"1\":{\"25\":1}}],[\"如果直接在方法上注入b实例\",{\"1\":{\"226\":1}}],[\"如果直接调用方法\",{\"1\":{\"225\":1}}],[\"如果aproperties有改动需要重新编译才会生效哦\",{\"1\":{\"224\":1}}],[\"如果是配置在spring\",{\"1\":{\"222\":1}}],[\"如果我们要修改nginx的配置\",{\"1\":{\"254\":1}}],[\"如果我们要让nginx代理我们的静态资源\",{\"1\":{\"254\":1}}],[\"如果我们不启用方法代理可以这样写\",{\"1\":{\"225\":1}}],[\"如果我们用importbeandefinitionregistrar来实现上面的功能大概就是这个样子\",{\"1\":{\"221\":1}}],[\"如果我的注解上有参数呢\",{\"1\":{\"221\":1}}],[\"如果配置在配置文件里面反而多余又容易写错\",{\"1\":{\"219\":1}}],[\"如果这个配置类是写在我们自己的包下\",{\"1\":{\"218\":1}}],[\"如果设置keyprefix\",{\"1\":{\"212\":1}}],[\"如果不设置keyprefix\",{\"1\":{\"212\":1}}],[\"如果\",{\"1\":{\"185\":1}}],[\"如果有密码\",{\"1\":{\"185\":1}}],[\"如果有返回值\",{\"1\":{\"79\":1}}],[\"如果某实例未在规定时间内\",{\"1\":{\"185\":1}}],[\"如果key不存在\",{\"1\":{\"175\":1}}],[\"如果存在则不创建\",{\"1\":{\"175\":1}}],[\"如果队列中有消息\",{\"1\":{\"147\":1}}],[\"如果变更必须重启微服务\",{\"1\":{\"137\":1}}],[\"如myisam和innodb\",{\"1\":{\"50\":1}}],[\"如点\",{\"1\":{\"50\":1}}],[\"也就是第3秒\",{\"1\":{\"285\":1}}],[\"也就是需要定义在spring\",{\"1\":{\"229\":1}}],[\"也可以是具有逻辑意义的特殊字符\",{\"1\":{\"283\":1}}],[\"也可以\",{\"1\":{\"282\":1}}],[\"也可以直接指定dockerfile目录\",{\"1\":{\"257\":1}}],[\"也可以在\",{\"1\":{\"3\":1}}],[\"也会产生\",{\"1\":{\"181\":1}}],[\"也必须要指定一个routingkey\",{\"1\":{\"157\":1}}],[\"也行\",{\"1\":{\"100\":1}}],[\"也在posthandle之后\",{\"1\":{\"99\":1}}],[\"也是后面\",{\"1\":{\"99\":1}}],[\"也是默认的索引类型\",{\"1\":{\"50\":1}}],[\"它会在每次运行时清理\",{\"1\":{\"276\":1}}],[\"它会下载最新版本的chromium\",{\"1\":{\"273\":1}}],[\"它提供了一个高级\",{\"1\":{\"270\":1}}],[\"它实现了浏览器与服务器全双工通信\",{\"1\":{\"234\":1}}],[\"它是\",{\"1\":{\"180\":1,\"182\":1}}],[\"它们仅在\",{\"1\":{\"275\":1}}],[\"它们都有自己的优势和缺点\",{\"1\":{\"234\":1}}],[\"它们可以方便地与其他语言和系统进行交互\",{\"1\":{\"176\":1}}],[\"它们具有不同的特点和适用场景\",{\"1\":{\"50\":1}}],[\"它可以最大程度地减少数据占用的空间\",{\"1\":{\"176\":1}}],[\"它可以应用于大多数的数据类型和存储引擎\",{\"1\":{\"50\":2}}],[\"它需要对存储的数据进行序列化\",{\"1\":{\"176\":1}}],[\"它用来记录在mysql中响应时间超过阀值的语句\",{\"1\":{\"60\":1}}],[\"它确保索引列的值在表中是唯一的\",{\"1\":{\"50\":1}}],[\"它只能应用于支持空间数据类型的存储引擎\",{\"1\":{\"50\":1}}],[\"它只能应用于myisam和innodb存储引擎\",{\"1\":{\"50\":1}}],[\"它支持对空间数据进行高效的地理位置查询\",{\"1\":{\"50\":1}}],[\"它使用b树数据结构来加速对数据的查找\",{\"1\":{\"50\":1}}],[\"它适用于对文本内容进行关键词搜索的场景\",{\"1\":{\"50\":1}}],[\"用mysqldump命令导出数据库\",{\"1\":{\"264\":1}}],[\"用户配置文件\",{\"1\":{\"276\":1}}],[\"用户在使用上的区别\",{\"1\":{\"276\":1}}],[\"用户名已存在\",{\"1\":{\"245\":1}}],[\"用户名不能为空\",{\"1\":{\"245\":2}}],[\"用户给收件人发出邮件的同时把该邮件抄送给另外的人\",{\"1\":{\"239\":1}}],[\"用户id\",{\"1\":{\"135\":2}}],[\"用\",{\"1\":{\"223\":1}}],[\"用最少的命令达到相同的效果\",{\"1\":{\"182\":1}}],[\"用默认no即可\",{\"1\":{\"182\":1}}],[\"用来匹配\",{\"1\":{\"292\":1}}],[\"用来帮助分析性能问题\",{\"1\":{\"271\":1}}],[\"用来实现主从集群的自动故障恢复\",{\"1\":{\"185\":1}}],[\"用来启动不同的端口\",{\"1\":{\"184\":1}}],[\"用来写公用的openfeign\",{\"1\":{\"124\":1}}],[\"用来查看sql语句性能\",{\"1\":{\"61\":1}}],[\"用于忽略大小写\",{\"1\":{\"294\":1}}],[\"用于启动现有浏览器安装或连接到远程安装\",{\"1\":{\"274\":1}}],[\"用于构建\",{\"1\":{\"185\":1}}],[\"用于应用程序搜索\",{\"1\":{\"105\":1}}],[\"用于接收json数据\",{\"1\":{\"90\":1}}],[\"用于接收url地址参数\",{\"1\":{\"90\":1}}],[\"用于强制保证某列或某组列的唯一性\",{\"1\":{\"50\":1}}],[\"用于地理数据的空间索引\",{\"1\":{\"50\":1}}],[\"用于全文搜索\",{\"1\":{\"50\":1}}],[\"用过java\",{\"0\":{\"10\":1}}],[\"索引从0开始\",{\"1\":{\"306\":1}}],[\"索引\",{\"0\":{\"50\":1,\"108\":1,\"112\":1},\"1\":{\"105\":1}}],[\"基操\",{\"0\":{\"259\":1}}],[\"基本语法\",{\"1\":{\"258\":1}}],[\"基本命令\",{\"0\":{\"174\":1,\"255\":1}}],[\"基本查询\",{\"0\":{\"31\":1}}],[\"基础使用\",{\"0\":{\"122\":1}}],[\"基础操作\",{\"0\":{\"106\":1}}],[\"基础\",{\"1\":{\"49\":1}}],[\"460f\",{\"1\":{\"303\":1}}],[\"465\",{\"1\":{\"239\":1}}],[\"40\",{\"1\":{\"266\":1,\"286\":1}}],[\"41\",{\"1\":{\"133\":1,\"266\":1}}],[\"47f4c019880711ebb6edd017c2d2eca2\",{\"1\":{\"239\":1}}],[\"47\",{\"1\":{\"129\":1}}],[\"42\",{\"1\":{\"129\":1,\"266\":1}}],[\"4\",{\"0\":{\"96\":1},\"1\":{\"61\":1,\"69\":1,\"133\":1,\"139\":1,\"175\":2,\"266\":1,\"275\":1,\"285\":1}}],[\"43\",{\"1\":{\"49\":1}}],[\"457\",{\"1\":{\"39\":1}}],[\"456871865468\",{\"1\":{\"39\":1}}],[\"去重\",{\"1\":{\"48\":1}}],[\"去除首尾空格\",{\"1\":{\"38\":1}}],[\"列3\",{\"1\":{\"302\":1}}],[\"列2\",{\"1\":{\"302\":1}}],[\"列1\",{\"1\":{\"302\":1}}],[\"列出本地所有镜像\",{\"1\":{\"260\":1}}],[\"列举文件\",{\"1\":{\"212\":1}}],[\"列\",{\"1\":{\"105\":1,\"302\":3}}],[\"列数必须保持一致\",{\"1\":{\"48\":1}}],[\"列表中的值\",{\"1\":{\"32\":1}}],[\"男\",{\"1\":{\"48\":3}}],[\"联合查询\",{\"0\":{\"48\":1}}],[\"别名登录\",{\"1\":{\"267\":1}}],[\"别名\",{\"1\":{\"267\":1}}],[\"别名b\",{\"1\":{\"47\":1}}],[\"别名a\",{\"1\":{\"47\":1}}],[\"表达式\",{\"1\":{\"294\":1}}],[\"表达方式\",{\"1\":{\"284\":1}}],[\"表示全局搜索\",{\"1\":{\"294\":1}}],[\"表示在全局搜索\",{\"1\":{\"294\":1}}],[\"表示正文是html格式\",{\"1\":{\"239\":1}}],[\"表示一个具体的可执行的调度程序\",{\"1\":{\"62\":1}}],[\"表示一个工作\",{\"1\":{\"62\":1}}],[\"表独占写锁\",{\"1\":{\"54\":1}}],[\"表共享读锁\",{\"1\":{\"54\":1}}],[\"表锁\",{\"0\":{\"54\":1}}],[\"表级锁\",{\"0\":{\"53\":1}}],[\"表b\",{\"1\":{\"47\":1}}],[\"表a\",{\"1\":{\"47\":1}}],[\"表名列表\",{\"1\":{\"30\":1}}],[\"表名\",{\"1\":{\"21\":1,\"27\":4,\"28\":1,\"29\":2,\"31\":3,\"33\":4,\"36\":1,\"38\":1,\"54\":1}}],[\"子工程会直接继承下来\",{\"1\":{\"205\":1}}],[\"子查询介绍\",{\"1\":{\"49\":1}}],[\"子查询\",{\"0\":{\"49\":1}}],[\"子链接必须使用表别名\",{\"1\":{\"47\":1}}],[\"子表数据会设置为null\",{\"1\":{\"42\":1}}],[\"当你安装\",{\"1\":{\"273\":1}}],[\"当vim卡死时\",{\"1\":{\"266\":1}}],[\"当对应的配置匹配时生效\",{\"1\":{\"228\":1}}],[\"当对应的class不存在时生效\",{\"1\":{\"228\":1}}],[\"当对应的class存在时生效\",{\"1\":{\"228\":1}}],[\"当对应的bean存在时生效\",{\"1\":{\"228\":1}}],[\"当对某一字段增加索引后\",{\"1\":{\"50\":1}}],[\"当容器中存在a类型的对象就不会再注入这个配置中的a1实例\",{\"1\":{\"227\":1}}],[\"当容器中存在a1类型的对象就不会再注入这个配置中的a1实例\",{\"1\":{\"227\":1}}],[\"当spring发现当前已经存在a对应的实例时\",{\"1\":{\"227\":1}}],[\"当我们将enabled设置为false时\",{\"1\":{\"221\":1}}],[\"当我们需要集成这个功能的时候只要添加这个注解就行了\",{\"1\":{\"220\":1}}],[\"当我们需要集成某个功能的时候\",{\"1\":{\"215\":1}}],[\"当enabled为false时\",{\"1\":{\"221\":1}}],[\"当enabled为false时不导入aconfiguration\",{\"1\":{\"221\":1}}],[\"当enabled为true时\",{\"1\":{\"221\":1}}],[\"当enabled为true时导入aconfiguration\",{\"1\":{\"221\":1}}],[\"当别的项目引用这个jar包\",{\"1\":{\"200\":1}}],[\"当前数据库大小\",{\"1\":{\"174\":1}}],[\"当前表与自身的连接查询\",{\"1\":{\"47\":1}}],[\"当下游服务因访问压力过大而响应变慢或失败\",{\"1\":{\"144\":1}}],[\"当一个业务接口响应时间长\",{\"1\":{\"143\":1}}],[\"当名字一样使\",{\"1\":{\"87\":1}}],[\"当\",{\"1\":{\"62\":1}}],[\"当多个用户同时对同一数据进行操作时\",{\"1\":{\"25\":1}}],[\"自\",{\"1\":{\"274\":1}}],[\"自启动\",{\"1\":{\"241\":1}}],[\"自定义镜像\",{\"0\":{\"257\":1}}],[\"自定义\",{\"0\":{\"214\":1}}],[\"自定义注解为属性赋值\",{\"0\":{\"92\":1}}],[\"自动提交表单\",{\"1\":{\"271\":1}}],[\"自动提示\",{\"0\":{\"224\":1}}],[\"自动生成的快照文件\",{\"1\":{\"180\":1}}],[\"自动从队列中删除\",{\"1\":{\"147\":1}}],[\"自动装配\",{\"1\":{\"75\":1}}],[\"自动装配到spring的bean\",{\"1\":{\"75\":1}}],[\"自连接\",{\"0\":{\"47\":1}}],[\"自增\",{\"1\":{\"21\":1}}],[\"右外连接\",{\"0\":{\"46\":1}}],[\"内存\",{\"1\":{\"261\":1}}],[\"内有一条数据被修改\",{\"1\":{\"181\":1}}],[\"内部触发机制\",{\"1\":{\"181\":1}}],[\"内容\",{\"1\":{\"75\":1,\"148\":1,\"239\":1}}],[\"内连接\",{\"0\":{\"44\":1}}],[\"内置sql注入剥离器\",{\"1\":{\"17\":1}}],[\"内置全局拦截插件\",{\"1\":{\"17\":1}}],[\"内置性能分析插件\",{\"1\":{\"17\":1}}],[\"内置分页插件\",{\"1\":{\"17\":1}}],[\"内置代码生成器\",{\"1\":{\"17\":1}}],[\"笛卡尔积\",{\"1\":{\"43\":1}}],[\"级联删除\",{\"1\":{\"42\":1}}],[\"父表数据被删除\",{\"1\":{\"42\":2}}],[\"外键到b表的\",{\"1\":{\"42\":1}}],[\"外键约束\",{\"0\":{\"42\":1},\"1\":{\"41\":1}}],[\"命令说明\",{\"1\":{\"257\":1}}],[\"命令\",{\"1\":{\"42\":1,\"181\":1,\"255\":1}}],[\"唯一约束\",{\"1\":{\"41\":1}}],[\"约束\",{\"0\":{\"41\":1}}],[\"保证开箱即用\",{\"1\":{\"276\":1}}],[\"保证了锁的操作原子性\",{\"1\":{\"244\":1}}],[\"保证数据安全性\",{\"1\":{\"182\":1}}],[\"保证数据的完整性\",{\"1\":{\"25\":1}}],[\"保险起见可以指定\",{\"1\":{\"227\":1}}],[\"保存截图的文件路径和名称\",{\"1\":{\"277\":2}}],[\"保存并退出\",{\"1\":{\"266\":1}}],[\"保存临时位置\",{\"1\":{\"232\":1}}],[\"保存文件\",{\"1\":{\"232\":1}}],[\"保存\",{\"1\":{\"232\":1,\"266\":1}}],[\"保存配置\",{\"1\":{\"181\":1}}],[\"保存当前登录用户信息到threadlocal\",{\"1\":{\"135\":1}}],[\"保留y位小数\",{\"1\":{\"39\":1}}],[\"求参数x的四舍五入的值\",{\"1\":{\"39\":1}}],[\"返回路径\",{\"1\":{\"232\":1}}],[\"返回空数组即可\",{\"1\":{\"221\":1}}],[\"返回所有的链接\",{\"1\":{\"212\":1}}],[\"返回相应\",{\"1\":{\"185\":1}}],[\"返回有序集合中元素的数量\",{\"1\":{\"175\":1}}],[\"返回有序集合中指定元素的排名\",{\"1\":{\"175\":1}}],[\"返回有序集合中指定分数范围的元素数量\",{\"1\":{\"175\":1}}],[\"返回有序集合中指定分数范围的元素\",{\"1\":{\"175\":1}}],[\"返回有序集合中指定范围的元素\",{\"1\":{\"175\":1}}],[\"返回多个集合的交集\",{\"1\":{\"175\":1}}],[\"返回多个集合的差集\",{\"1\":{\"175\":1}}],[\"返回多个集合的并集\",{\"1\":{\"175\":1}}],[\"返回集合中元素的数量\",{\"1\":{\"175\":1}}],[\"返回集合中所有元素\",{\"1\":{\"175\":1}}],[\"返回一个串\",{\"1\":{\"88\":1}}],[\"返回一个日期加上某个时间后的日期\",{\"1\":{\"40\":1}}],[\"返回值\",{\"1\":{\"90\":1}}],[\"返回值类型\",{\"1\":{\"82\":1}}],[\"返回值为null\",{\"1\":{\"21\":1}}],[\"返回对象必须是object\",{\"1\":{\"79\":1}}],[\"返回当前时间\",{\"1\":{\"40\":1}}],[\"返回当前日期和时间\",{\"1\":{\"40\":1}}],[\"返回当前日期\",{\"1\":{\"40\":1}}],[\"返回0\",{\"1\":{\"39\":1}}],[\"返回x\",{\"1\":{\"39\":1}}],[\"ysmzs6ucg==\",{\"1\":{\"287\":1}}],[\"ycombinator\",{\"1\":{\"275\":1}}],[\"yarn\",{\"1\":{\"273\":1,\"274\":1}}],[\"yaml\",{\"1\":{\"138\":6}}],[\"yy\",{\"1\":{\"266\":1}}],[\"yyyy\",{\"1\":{\"232\":1,\"277\":2}}],[\"yyy\",{\"1\":{\"188\":1}}],[\"yml或application\",{\"1\":{\"223\":1}}],[\"yml\",{\"1\":{\"75\":1,\"239\":1,\"258\":1}}],[\"yes\",{\"1\":{\"61\":1}}],[\"year\",{\"1\":{\"40\":2}}],[\"youraccesskeysecret\",{\"1\":{\"211\":1}}],[\"youraccesskeyid\",{\"1\":{\"211\":1}}],[\"youremail\",{\"1\":{\"193\":1}}],[\"your\",{\"1\":{\"187\":2,\"212\":1,\"213\":1,\"241\":1,\"282\":1}}],[\"you\",{\"1\":{\"52\":1}}],[\"y的模\",{\"1\":{\"39\":1}}],[\"y\",{\"1\":{\"39\":2,\"202\":7,\"266\":1,\"277\":1}}],[\"xx\",{\"1\":{\"258\":1}}],[\"xxxxx\",{\"1\":{\"287\":1}}],[\"xxxxxxx\",{\"1\":{\"277\":1}}],[\"xxx或是spring\",{\"1\":{\"217\":1}}],[\"xxx\",{\"1\":{\"75\":1,\"161\":1,\"188\":5,\"217\":2,\"222\":4,\"261\":6}}],[\"xmx512m\",{\"1\":{\"105\":2}}],[\"xms64m\",{\"1\":{\"105\":2}}],[\"xmind\",{\"0\":{\"103\":1}}],[\"xmlworkerfontprovider\",{\"1\":{\"298\":1}}],[\"xml复制代码<dependency>\",{\"1\":{\"224\":1}}],[\"xml\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"69\":3,\"72\":1,\"75\":1,\"82\":1,\"239\":1,\"306\":3}}],[\"xml配置详解\",{\"1\":{\"4\":1}}],[\"xml映射\",{\"0\":{\"2\":1}}],[\"x\",{\"1\":{\"39\":2,\"43\":1,\"141\":3,\"169\":2,\"275\":1,\"277\":1,\"283\":5}}],[\"向光标之上寻找第一个值为word的字符串\",{\"1\":{\"266\":1}}],[\"向光标之下寻找第一个值为word的字符串\",{\"1\":{\"266\":1}}],[\"向右箭头\",{\"1\":{\"266\":1}}],[\"向上箭头\",{\"1\":{\"266\":1}}],[\"向上取整\",{\"1\":{\"39\":1}}],[\"向下箭头\",{\"1\":{\"266\":1}}],[\"向下取整\",{\"1\":{\"39\":1}}],[\"向有序集合中添加元素\",{\"1\":{\"175\":1}}],[\"向集合中添加元素\",{\"1\":{\"175\":1}}],[\"数字之间的间隔必须大于等于30分钟\",{\"1\":{\"284\":1}}],[\"数字\",{\"1\":{\"105\":1}}],[\"数据卷\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"数据校验\",{\"0\":{\"242\":1}}],[\"数据格式紧凑\",{\"1\":{\"235\":1}}],[\"数据表\",{\"1\":{\"105\":1}}],[\"数据库名\",{\"1\":{\"264\":5,\"265\":2}}],[\"数据库切换\",{\"1\":{\"174\":1}}],[\"数据库\",{\"1\":{\"105\":1}}],[\"数据源\",{\"1\":{\"75\":1}}],[\"数据一致性\",{\"1\":{\"25\":1}}],[\"数值函数\",{\"0\":{\"39\":1}}],[\"截取整个页面\",{\"1\":{\"277\":1}}],[\"截取\",{\"1\":{\"38\":1,\"175\":1}}],[\"字体\",{\"1\":{\"297\":1}}],[\"字符串以5个空格隔开\",{\"1\":{\"283\":1}}],[\"字符串函数\",{\"0\":{\"38\":1}}],[\"字段\",{\"1\":{\"105\":1,\"110\":1,\"285\":1}}],[\"字段类型也一致\",{\"1\":{\"48\":1}}],[\"字段列表\",{\"1\":{\"30\":1,\"47\":1}}],[\"字段2=值2\",{\"1\":{\"28\":1}}],[\"字段2\",{\"1\":{\"27\":2}}],[\"字段1=值1\",{\"1\":{\"28\":1}}],[\"字段1\",{\"1\":{\"27\":2}}],[\"函数\",{\"0\":{\"37\":1}}],[\"0<\",{\"1\":{\"248\":1,\"297\":1}}],[\"07\",{\"1\":{\"129\":1}}],[\"06+08\",{\"1\":{\"129\":1}}],[\"06\",{\"1\":{\"129\":1,\"183\":1}}],[\"09\",{\"1\":{\"87\":1}}],[\"02\",{\"1\":{\"81\":1}}],[\"04创建一个容器\",{\"1\":{\"261\":1}}],[\"04从本地文件ubuntu\",{\"1\":{\"260\":1}}],[\"04导出到本地文件ubuntu\",{\"1\":{\"260\":1}}],[\"04\",{\"1\":{\"61\":2,\"258\":1,\"260\":9,\"261\":2}}],[\"01\",{\"1\":{\"52\":1,\"68\":1,\"129\":2}}],[\"00和14\",{\"1\":{\"286\":1}}],[\"00时间段内每隔40分钟执行任务\",{\"1\":{\"286\":1}}],[\"00到下午17\",{\"1\":{\"286\":1}}],[\"00以及下午16\",{\"1\":{\"286\":1}}],[\"00点\",{\"1\":{\"286\":1}}],[\"00执行任务\",{\"1\":{\"286\":3}}],[\"00077300\",{\"1\":{\"61\":1}}],[\"00026325\",{\"1\":{\"61\":1}}],[\"00013375\",{\"1\":{\"61\":1}}],[\"00012275\",{\"1\":{\"61\":1}}],[\"00033425\",{\"1\":{\"61\":1}}],[\"00\",{\"1\":{\"52\":2,\"61\":1,\"129\":2}}],[\"0\",{\"0\":{\"241\":2},\"1\":{\"36\":1,\"52\":5,\"61\":10,\"80\":1,\"82\":1,\"110\":1,\"111\":2,\"118\":3,\"119\":2,\"120\":2,\"127\":2,\"132\":1,\"133\":2,\"138\":2,\"148\":2,\"149\":2,\"150\":2,\"162\":2,\"163\":1,\"175\":4,\"185\":4,\"232\":1,\"241\":2,\"242\":1,\"245\":6,\"246\":1,\"248\":2,\"257\":3,\"262\":1,\"266\":1,\"267\":6,\"274\":1,\"275\":2,\"277\":4,\"278\":2,\"279\":2,\"282\":1,\"284\":3,\"285\":1,\"286\":14,\"292\":1,\"302\":1,\"306\":5}}],[\"起始索引从0开始\",{\"1\":{\"36\":1}}],[\"起始索引\",{\"1\":{\"36\":2}}],[\"起别名\",{\"1\":{\"31\":1}}],[\"降序\",{\"1\":{\"35\":1}}],[\"默认设置\",{\"0\":{\"276\":1}}],[\"默认以\",{\"1\":{\"270\":1}}],[\"默认情况下\",{\"1\":{\"185\":1,\"276\":1}}],[\"默认情况下无需修改\",{\"1\":{\"185\":1}}],[\"默认情况下的模板只能支持\",{\"1\":{\"177\":1}}],[\"默认为\",{\"1\":{\"185\":1}}],[\"默认使用的是rdb方式持久化\",{\"1\":{\"182\":1}}],[\"默认队列持久化\",{\"1\":{\"164\":1}}],[\"默认会平均分配内容\",{\"1\":{\"151\":1}}],[\"默认每次发送\",{\"1\":{\"123\":1}}],[\"默认就是这一项\",{\"1\":{\"42\":1}}],[\"默认约束\",{\"1\":{\"41\":1}}],[\"默认\",{\"1\":{\"35\":1,\"184\":1,\"202\":1}}],[\"默认形况下\",{\"1\":{\"25\":1}}],[\"|\",{\"0\":{\"270\":3},\"1\":{\"33\":1,\"61\":36,\"150\":1,\"160\":1,\"161\":2,\"279\":2,\"282\":2}}],[\"||\",{\"1\":{\"32\":1}}],[\"聚合\",{\"1\":{\"110\":1}}],[\"聚合函数\",{\"0\":{\"33\":1}}],[\"聚合查询\",{\"1\":{\"30\":1}}],[\"非常方便\",{\"1\":{\"199\":1}}],[\"非独占\",{\"1\":{\"164\":1}}],[\"非结构化\",{\"1\":{\"105\":1}}],[\"非空约束\",{\"1\":{\"41\":1}}],[\"非\",{\"1\":{\"32\":1,\"110\":1}}],[\"或更高版本中被支持\",{\"1\":{\"275\":1}}],[\"或category字段包含搜索词\",{\"1\":{\"114\":1}}],[\"或称为btree\",{\"1\":{\"50\":1}}],[\"或\",{\"1\":{\"32\":2,\"110\":1,\"260\":1,\"261\":1,\"266\":7,\"270\":1,\"276\":1,\"284\":2}}],[\"或者缩减影响的范围\",{\"1\":{\"143\":1}}],[\"或者\",{\"1\":{\"31\":1,\"32\":1,\"70\":1}}],[\"为例\",{\"1\":{\"211\":1}}],[\"为了避免每次使用docker命令都需要加上sudo权限\",{\"1\":{\"258\":1}}],[\"为了更有效地使用内存\",{\"1\":{\"176\":1}}],[\"为了一直消费信息\",{\"1\":{\"149\":1}}],[\"为属性赋值\",{\"1\":{\"92\":1}}],[\"为空\",{\"1\":{\"32\":1}}],[\"为简化开发\",{\"1\":{\"17\":1}}],[\"任务名字\",{\"1\":{\"282\":1}}],[\"任务\",{\"0\":{\"165\":1}}],[\"任务模型\",{\"0\":{\"151\":1}}],[\"任务传参\",{\"0\":{\"65\":1}}],[\"任意个字符\",{\"1\":{\"32\":1}}],[\"任何异常都回滚\",{\"1\":{\"25\":1}}],[\"模板\",{\"0\":{\"277\":1}}],[\"模式\",{\"1\":{\"270\":1}}],[\"模式运行\",{\"1\":{\"270\":1}}],[\"模拟实现\",{\"1\":{\"234\":1}}],[\"模拟执行的漫\",{\"1\":{\"152\":1}}],[\"模拟事务回滚\",{\"1\":{\"25\":1}}],[\"模糊匹配\",{\"1\":{\"32\":1}}],[\"占位符\",{\"1\":{\"32\":1}}],[\"多模块打包\",{\"0\":{\"206\":1}}],[\"多个单词之间以\",{\"1\":{\"160\":1}}],[\"多个参数查询\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"多添加查询\",{\"1\":{\"110\":1}}],[\"多条件查询\",{\"1\":{\"110\":1}}],[\"多边形等\",{\"1\":{\"50\":1}}],[\"多表查询\",{\"0\":{\"43\":1},\"1\":{\"49\":1}}],[\"多字段排序\",{\"1\":{\"35\":1}}],[\"多选一\",{\"1\":{\"32\":1}}],[\"功能键\",{\"1\":{\"266\":2}}],[\"功能\",{\"1\":{\"32\":1}}],[\"比较运算符\",{\"1\":{\"32\":1}}],[\"比如一条sql执行超过5秒钟\",{\"1\":{\"60\":1}}],[\"比如用户名或身份证号\",{\"1\":{\"50\":1}}],[\"比如文章标题或描述的搜索\",{\"1\":{\"50\":1}}],[\"比如要求\",{\"1\":{\"48\":1}}],[\"比如\",{\"1\":{\"3\":1,\"217\":2,\"219\":2,\"285\":4}}],[\"姓名\",{\"1\":{\"31\":2}}],[\"分钟\",{\"1\":{\"284\":1}}],[\"分\",{\"1\":{\"283\":1}}],[\"分为6个域\",{\"1\":{\"283\":1}}],[\"分模块\",{\"0\":{\"203\":1}}],[\"分支管理\",{\"0\":{\"188\":1}}],[\"分布式锁\",{\"0\":{\"243\":1}}],[\"分布式缓存\",{\"1\":{\"183\":1}}],[\"分布式事务\",{\"0\":{\"145\":1}}],[\"分割\",{\"1\":{\"160\":1}}],[\"分组后的列只有待分组的字段和聚合函数\",{\"1\":{\"34\":1}}],[\"分组后条件列表\",{\"1\":{\"30\":1}}],[\"分组查询\",{\"0\":{\"34\":1},\"1\":{\"30\":1}}],[\"分组字段列表\",{\"1\":{\"30\":1}}],[\"分页+排序\",{\"1\":{\"110\":1}}],[\"分页查询\",{\"0\":{\"36\":1},\"1\":{\"30\":1}}],[\"分页\",{\"0\":{\"23\":1},\"1\":{\"30\":1,\"114\":1}}],[\"条件装配也是经常用到的功能\",{\"1\":{\"227\":1}}],[\"条件装配\",{\"0\":{\"227\":1}}],[\"条件查询\",{\"0\":{\"32\":1},\"1\":{\"30\":1}}],[\"条件列表\",{\"1\":{\"30\":1}}],[\"条件\",{\"1\":{\"28\":1,\"29\":1,\"47\":1}}],[\"给全部字段添加值\",{\"1\":{\"27\":1}}],[\"给指定字段批量添加值\",{\"1\":{\"27\":1}}],[\"给指定字段添加值\",{\"1\":{\"27\":1}}],[\"值2\",{\"1\":{\"27\":8}}],[\"值1\",{\"1\":{\"27\":8}}],[\"使得锁的使用变得简单\",{\"1\":{\"244\":1}}],[\"使数据占用的空间更小\",{\"1\":{\"176\":1}}],[\"使事务回滚\",{\"1\":{\"25\":1}}],[\"使用xpath表达式\",{\"1\":{\"306\":1}}],[\"使用jaxp\",{\"0\":{\"306\":1}}],[\"使用itext\",{\"1\":{\"299\":1}}],[\"使用半角逗号\",{\"1\":{\"283\":1}}],[\"使用别人现成的action完成需要的操作\",{\"1\":{\"282\":1}}],[\"使用无头模式\",{\"1\":{\"276\":1}}],[\"使用起来和其他测试框架类似\",{\"1\":{\"275\":1}}],[\"使用最新的\",{\"1\":{\"271\":1}}],[\"使用已创建的数据库\",{\"1\":{\"265\":1}}],[\"使用sources命令导入\",{\"1\":{\"265\":1}}],[\"使用should操作指定至少满足一个条件的情况\",{\"1\":{\"114\":1}}],[\"使用cron表达式指定执行时间\",{\"0\":{\"241\":1}}],[\"使用ram用户访问密钥发起请求\",{\"1\":{\"210\":1}}],[\"使用ram访问\",{\"0\":{\"210\":1}}],[\"使用redis\",{\"1\":{\"184\":1}}],[\"使用坐标主动排除掉\",{\"1\":{\"201\":1}}],[\"使用线程存储数据\",{\"0\":{\"135\":1}}],[\"使用mysql命令导入\",{\"1\":{\"265\":1}}],[\"使用must操作添加category字段必须等于\",{\"1\":{\"114\":1}}],[\"使用mapper继承basemapper<t>即可开箱即用\",{\"1\":{\"19\":1}}],[\"使用map传递参数\",{\"0\":{\"9\":1}}],[\"使用场景\",{\"1\":{\"92\":1}}],[\"使用\",{\"0\":{\"8\":1,\"97\":1,\"275\":1},\"1\":{\"23\":1,\"78\":1,\"120\":1,\"122\":1,\"139\":1,\"189\":1,\"219\":1,\"220\":1,\"240\":1,\"246\":1,\"296\":1}}],[\"抛出运行时异常\",{\"1\":{\"25\":1}}],[\"rlock\",{\"1\":{\"246\":1}}],[\"rsa\",{\"1\":{\"193\":1}}],[\"r\",{\"1\":{\"192\":1,\"266\":1,\"267\":1,\"292\":3}}],[\"rmi\",{\"1\":{\"260\":1}}],[\"rm\",{\"1\":{\"192\":3,\"193\":1,\"255\":1,\"260\":1,\"261\":1}}],[\"rdb\",{\"0\":{\"180\":1},\"1\":{\"180\":2,\"181\":2}}],[\"rpop\",{\"1\":{\"175\":1}}],[\"ram用户\",{\"1\":{\"210\":1}}],[\"rabbithandler\",{\"1\":{\"164\":1}}],[\"rabbitlistener\",{\"1\":{\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"171\":1}}],[\"rabbittemplate\",{\"1\":{\"163\":7,\"170\":4}}],[\"rabbit\",{\"1\":{\"148\":1}}],[\"rabbitmqtest\",{\"1\":{\"163\":1}}],[\"rabbitmqconnection\",{\"1\":{\"150\":1,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2}}],[\"rabbitmq\",{\"0\":{\"146\":1},\"1\":{\"162\":1,\"164\":1}}],[\"range\",{\"1\":{\"110\":1}}],[\"randomuuid\",{\"1\":{\"232\":1,\"245\":1}}],[\"randomutil\",{\"1\":{\"120\":1}}],[\"randomint\",{\"1\":{\"120\":1}}],[\"rand\",{\"1\":{\"39\":1}}],[\"runners\",{\"1\":{\"282\":1}}],[\"runnable\",{\"1\":{\"241\":1}}],[\"runs\",{\"1\":{\"279\":1,\"282\":2}}],[\"run\",{\"1\":{\"105\":1,\"118\":1,\"122\":1,\"136\":1,\"220\":1,\"221\":1,\"241\":1,\"261\":1,\"262\":1,\"279\":5,\"282\":5}}],[\"runtime\",{\"1\":{\"93\":1,\"202\":1,\"220\":1,\"221\":3}}],[\"runtimeexception\",{\"1\":{\"25\":2,\"232\":1}}],[\"rootpath\",{\"1\":{\"232\":2}}],[\"rootbeandefinition\",{\"1\":{\"221\":1}}],[\"root\",{\"1\":{\"138\":2,\"257\":1,\"258\":1,\"287\":1}}],[\"routing\",{\"1\":{\"169\":2,\"170\":2}}],[\"routingkey\",{\"1\":{\"158\":2,\"159\":2,\"161\":3}}],[\"route2\",{\"1\":{\"167\":1}}],[\"route1\",{\"1\":{\"167\":1}}],[\"routeconsumer\",{\"1\":{\"167\":1}}],[\"route\",{\"1\":{\"163\":1}}],[\"routes\",{\"1\":{\"127\":1}}],[\"round\",{\"1\":{\"39\":2,\"79\":1,\"80\":1}}],[\"row\",{\"1\":{\"52\":1,\"61\":2,\"105\":1}}],[\"rows\",{\"1\":{\"52\":2,\"61\":1}}],[\"rollbackfor\",{\"1\":{\"25\":2}}],[\"rollbackfor属性用于控制出现何种异常类型\",{\"1\":{\"25\":1}}],[\"rename\",{\"1\":{\"261\":1}}],[\"regex\",{\"0\":{\"288\":1}}],[\"regasdgsdgister\",{\"1\":{\"245\":1}}],[\"registry\",{\"1\":{\"95\":3,\"100\":3,\"221\":3,\"231\":2}}],[\"registerbeandefinition\",{\"1\":{\"221\":1}}],[\"registerbeandefinitions\",{\"1\":{\"221\":2}}],[\"register\",{\"1\":{\"82\":1}}],[\"req\",{\"1\":{\"232\":5}}],[\"require\",{\"1\":{\"275\":3,\"277\":4}}],[\"required\",{\"1\":{\"134\":1}}],[\"requiredargsconstructor\",{\"1\":{\"133\":2}}],[\"requesthandlerselectors\",{\"1\":{\"248\":1}}],[\"requestheader\",{\"1\":{\"134\":1}}],[\"requesttemplate\",{\"1\":{\"136\":3}}],[\"requestinterceptor\",{\"1\":{\"136\":2}}],[\"request\",{\"1\":{\"94\":3,\"98\":1,\"99\":3,\"129\":1,\"132\":6,\"133\":3,\"134\":1,\"212\":2,\"213\":2,\"232\":1}}],[\"requestmethod\",{\"1\":{\"89\":2,\"90\":1}}],[\"requestmapping\",{\"1\":{\"82\":1,\"84\":1,\"85\":1,\"88\":2,\"89\":2,\"90\":2}}],[\"requestparam\",{\"1\":{\"87\":2,\"90\":1,\"97\":1,\"122\":1}}],[\"requestbody\",{\"1\":{\"10\":1,\"11\":1,\"12\":1}}],[\"rejected\",{\"1\":{\"212\":1,\"213\":1}}],[\"rewrite\",{\"1\":{\"182\":3}}],[\"red\",{\"1\":{\"301\":2}}],[\"redsi\",{\"1\":{\"175\":1}}],[\"redis分布式锁\",{\"0\":{\"245\":1}}],[\"redis分布式锁在高并发场景下可能存在死锁的问题\",{\"1\":{\"244\":1}}],[\"redis分布式锁在锁定后需要手动维护锁的超时时间\",{\"1\":{\"244\":1}}],[\"redis分布式锁在进行锁定和解锁操作时\",{\"1\":{\"244\":1}}],[\"redis分布式锁需要手动编写锁逻辑代码\",{\"1\":{\"244\":1}}],[\"redis分布式锁是基于redis的setnx命令实现的\",{\"1\":{\"244\":1}}],[\"redis分布式锁和redisson分布式锁都是用于实现分布式系统中的分布式锁\",{\"0\":{\"244\":1}}],[\"redissonclient\",{\"1\":{\"246\":4}}],[\"redissonconfig\",{\"1\":{\"246\":2}}],[\"redisson<\",{\"1\":{\"246\":1}}],[\"redisson学习地址\",{\"1\":{\"246\":1}}],[\"redisson分布式锁使用redlock算法避免了死锁的问题\",{\"1\":{\"244\":1}}],[\"redisson分布式锁内部封装了锁的自动续期机制\",{\"1\":{\"244\":1}}],[\"redisson分布式锁内部封装了redis的单线程模型\",{\"1\":{\"244\":1}}],[\"redisson分布式锁封装了锁逻辑\",{\"1\":{\"244\":1}}],[\"redisson\",{\"0\":{\"246\":1},\"1\":{\"217\":1,\"246\":3}}],[\"redis主从\",{\"1\":{\"183\":1}}],[\"redisconnectionfactory\",{\"1\":{\"177\":1}}],[\"redisconfig\",{\"1\":{\"177\":2}}],[\"redistemplate\",{\"1\":{\"177\":3,\"178\":4}}],[\"redistemplate<string\",{\"1\":{\"177\":3}}],[\"redis默认使用的序列化格式\",{\"1\":{\"176\":1}}],[\"redis支持多种序列化格式\",{\"1\":{\"176\":1}}],[\"redis是一种内存数据库\",{\"1\":{\"176\":1}}],[\"redis详细解释\",{\"1\":{\"172\":1}}],[\"redis\",{\"0\":{\"172\":1},\"1\":{\"173\":2,\"180\":2,\"181\":1,\"182\":2,\"185\":3,\"217\":1,\"246\":1}}],[\"red对应id\",{\"1\":{\"73\":1}}],[\"rect\",{\"1\":{\"304\":5}}],[\"rectangle\",{\"0\":{\"304\":1},\"1\":{\"304\":3}}],[\"recrive\",{\"1\":{\"164\":1}}],[\"records\",{\"1\":{\"23\":1}}],[\"recordmapper\",{\"1\":{\"23\":2}}],[\"recordipage\",{\"1\":{\"23\":2}}],[\"remote\",{\"1\":{\"193\":5}}],[\"remoteaddr=192\",{\"1\":{\"129\":1}}],[\"remove\",{\"1\":{\"135\":1,\"192\":1}}],[\"removeuser\",{\"1\":{\"135\":1}}],[\"realpath\",{\"1\":{\"232\":3}}],[\"reason\",{\"1\":{\"212\":1,\"213\":1}}],[\"reactor\",{\"1\":{\"133\":1}}],[\"reactive\",{\"1\":{\"133\":2}}],[\"readasdataurl\",{\"1\":{\"242\":1}}],[\"reader\",{\"1\":{\"242\":4}}],[\"readme\",{\"1\":{\"239\":1,\"282\":1}}],[\"read\",{\"1\":{\"52\":2,\"54\":2}}],[\"retentionpolicy\",{\"1\":{\"93\":1,\"220\":1,\"221\":3}}],[\"retention\",{\"1\":{\"93\":1,\"220\":1,\"221\":3}}],[\"ret\",{\"1\":{\"80\":2}}],[\"return\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"23\":2,\"80\":1,\"82\":4,\"84\":1,\"85\":1,\"87\":1,\"88\":2,\"94\":1,\"96\":2,\"97\":1,\"99\":1,\"132\":3,\"133\":6,\"134\":2,\"135\":2,\"136\":1,\"150\":1,\"169\":4,\"170\":1,\"177\":1,\"211\":1,\"212\":2,\"213\":2,\"218\":1,\"221\":2,\"223\":1,\"225\":4,\"226\":2,\"227\":4,\"232\":3,\"239\":1,\"240\":1,\"241\":1,\"242\":5,\"245\":7,\"246\":2,\"248\":2,\"275\":1,\"298\":1}}],[\"reported\",{\"1\":{\"275\":1}}],[\"repositories\",{\"1\":{\"196\":1}}],[\"repository和tag\",{\"1\":{\"257\":1}}],[\"repository\",{\"1\":{\"75\":1}}],[\"repeatforever\",{\"1\":{\"64\":1,\"65\":1}}],[\"reflog\",{\"1\":{\"191\":1}}],[\"ref=\",{\"1\":{\"73\":1,\"242\":1}}],[\"references\",{\"1\":{\"42\":1}}],[\"refid\",{\"1\":{\"3\":1}}],[\"refid=\",{\"1\":{\"3\":4}}],[\"resids\",{\"1\":{\"239\":2}}],[\"reset\",{\"1\":{\"191\":2}}],[\"resolve\",{\"1\":{\"232\":1}}],[\"resolveargument\",{\"1\":{\"96\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"231\":1}}],[\"resources\",{\"1\":{\"231\":1}}],[\"resource\",{\"1\":{\"170\":1}}],[\"restorestate\",{\"1\":{\"304\":1}}],[\"restart\",{\"1\":{\"261\":1}}],[\"restart=always\",{\"1\":{\"118\":1}}],[\"resttemplate\",{\"1\":{\"120\":1}}],[\"restcontroller\",{\"1\":{\"90\":1,\"232\":1,\"241\":1,\"242\":1}}],[\"restful快速开发\",{\"1\":{\"89\":1}}],[\"rest风格\",{\"0\":{\"89\":1}}],[\"restrict\",{\"1\":{\"42\":1}}],[\"responseentity<list<itemdto>>\",{\"1\":{\"120\":1}}],[\"response\",{\"1\":{\"94\":1,\"98\":1,\"99\":3,\"120\":1,\"133\":3,\"212\":1,\"213\":1,\"299\":4}}],[\"responsebody\",{\"1\":{\"82\":1,\"84\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":3}}],[\"resp\",{\"1\":{\"23\":4}}],[\"res\",{\"1\":{\"19\":4,\"239\":2,\"245\":2}}],[\"result\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"97\":1,\"242\":1,\"245\":7,\"246\":2,\"306\":2}}],[\"result=\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"resultmsg\",{\"1\":{\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"resultmap=\",{\"1\":{\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"resultmap>\",{\"1\":{\"4\":1}}],[\"resultmap\",{\"0\":{\"4\":1},\"1\":{\"2\":1}}],[\"resulttype=\",{\"1\":{\"3\":2,\"15\":3}}],[\"完整性和一致性非常重要\",{\"1\":{\"25\":1}}],[\"将修改后的document写回到新的xml文件中\",{\"1\":{\"306\":1}}],[\"将表格添加到文档中\",{\"1\":{\"302\":1}}],[\"将段落添加到文档中\",{\"1\":{\"301\":1}}],[\"将其条件修改为忽略大小写\",{\"1\":{\"294\":1}}],[\"将文件推送到新的分支\",{\"1\":{\"282\":1}}],[\"将全文代码格式化\",{\"1\":{\"266\":1}}],[\"将全文的word1替换为word2\",{\"1\":{\"266\":2}}],[\"将选中的文本整体向左缩进一次\",{\"1\":{\"266\":1}}],[\"将选中的文本整体向右缩进一次\",{\"1\":{\"266\":1}}],[\"将复制的数据在光标的下一行\",{\"1\":{\"266\":1}}],[\"将本地文件xxx\",{\"1\":{\"261\":1}}],[\"将本地内容推送到远程仓库\",{\"1\":{\"193\":2}}],[\"将容器container导出到本地文件xxx\",{\"1\":{\"261\":1}}],[\"将镜像ubuntu\",{\"1\":{\"260\":2}}],[\"将name移入到数据库1中\",{\"1\":{\"175\":1}}],[\"将通道声明到交换机\",{\"1\":{\"154\":1}}],[\"将功能增强\",{\"1\":{\"76\":1}}],[\"将年龄低于50和性别为\",{\"1\":{\"48\":1}}],[\"将所有操作合并到一个事务中可以减少i\",{\"1\":{\"25\":1}}],[\"将数据回滚至操作之前的状态\",{\"1\":{\"25\":1}}],[\"以此类推\",{\"1\":{\"285\":3}}],[\"以保证可以使用\",{\"1\":{\"273\":1}}],[\"以保证数据同步到磁盘\",{\"1\":{\"182\":1}}],[\"以nginx为例\",{\"1\":{\"254\":1}}],[\"以及其\",{\"1\":{\"276\":1}}],[\"以及b表的name\",{\"1\":{\"45\":1}}],[\"以及两张表交集部分\",{\"1\":{\"45\":1}}],[\"以避免并发访问引起的数据冲突和错误\",{\"1\":{\"25\":1}}],[\"以便在其它语句中使用\",{\"1\":{\"3\":1}}],[\"并保存截图至\",{\"1\":{\"275\":1}}],[\"并生成预渲染内容\",{\"1\":{\"271\":1}}],[\"并将该字符串替换为word2\",{\"1\":{\"266\":1}}],[\"并将镜像命名为image\",{\"1\":{\"261\":1}}],[\"并将结果存储到新的有序集合中\",{\"1\":{\"175\":2}}],[\"并提供了api接口\",{\"1\":{\"244\":1}}],[\"并不保证能够解决所有的失效问题\",{\"1\":{\"229\":1}}],[\"并设置到对应的实体对象中\",{\"1\":{\"114\":1}}],[\"并遍历每个结果\",{\"1\":{\"114\":1}}],[\"并获取查询结果的searchhits对象\",{\"1\":{\"114\":1}}],[\"并支持关键词匹配和排名\",{\"1\":{\"50\":1}}],[\"并且里面的属性已经根据配置文件绑定好了\",{\"1\":{\"223\":1}}],[\"并且传递的依赖是没有数量和层级的限制的\",{\"1\":{\"199\":1}}],[\"并且切换过去\",{\"1\":{\"188\":1}}],[\"并且\",{\"1\":{\"32\":1}}],[\"并且可以在不同的\",{\"1\":{\"3\":1}}],[\"并打印异常信息\",{\"1\":{\"25\":1}}],[\"并发控制\",{\"1\":{\"25\":1}}],[\"错误回滚\",{\"1\":{\"25\":1}}],[\"事务对于确保数据的正确性\",{\"1\":{\"25\":1}}],[\"事务会自动将所有操作撤消\",{\"1\":{\"25\":1}}],[\"事务可以优化数据库操作的性能\",{\"1\":{\"25\":1}}],[\"事务可以通过锁机制来控制这些操作的执行顺序\",{\"1\":{\"25\":1}}],[\"事务可以解决数据库并发访问的问题\",{\"1\":{\"25\":1}}],[\"事务可以在发生错误或异常时回滚到之前的状态\",{\"1\":{\"25\":1}}],[\"事务可以确保数据的一致性\",{\"1\":{\"25\":1}}],[\"事务可以确保多个操作在一个逻辑单元中执行\",{\"1\":{\"25\":1}}],[\"事务主要的作用体现在以下几个方面\",{\"1\":{\"25\":1}}],[\"事务\",{\"0\":{\"25\":1}}],[\"lf\",{\"1\":{\"292\":1}}],[\"l\",{\"1\":{\"266\":1,\"284\":1,\"286\":1}}],[\"ls\",{\"1\":{\"193\":1,\"255\":1}}],[\"lset\",{\"1\":{\"175\":1}}],[\"lesson\",{\"1\":{\"262\":1}}],[\"length\",{\"1\":{\"239\":3,\"245\":3}}],[\"learngit\",{\"1\":{\"189\":2}}],[\"left\",{\"1\":{\"45\":2}}],[\"latest\",{\"1\":{\"279\":1,\"282\":1}}],[\"launch\",{\"1\":{\"275\":3,\"276\":3,\"277\":2}}],[\"lazily\",{\"1\":{\"232\":1}}],[\"lastindexof\",{\"1\":{\"232\":1}}],[\"lastsave\",{\"1\":{\"181\":1}}],[\"lambdaupdatewrapper<>\",{\"1\":{\"24\":1}}],[\"lambdaupdatewrapper<article>\",{\"1\":{\"24\":1}}],[\"lrem\",{\"1\":{\"175\":1}}],[\"lrange\",{\"1\":{\"175\":1}}],[\"llen\",{\"1\":{\"175\":1}}],[\"lpop\",{\"1\":{\"175\":1}}],[\"lpush\",{\"1\":{\"175\":1}}],[\"lb\",{\"1\":{\"127\":2}}],[\"lts\",{\"1\":{\"258\":1}}],[\"ltrim\",{\"1\":{\"175\":1}}],[\"lte`\",{\"1\":{\"110\":1}}],[\"lt\",{\"1\":{\"110\":1}}],[\"load会保存完整记录\",{\"1\":{\"261\":1}}],[\"load的区别\",{\"1\":{\"261\":1}}],[\"load\",{\"1\":{\"260\":1}}],[\"loadbalancer<\",{\"1\":{\"122\":1,\"127\":1}}],[\"local\",{\"1\":{\"264\":1,\"279\":2,\"281\":1}}],[\"localhost\",{\"1\":{\"141\":1,\"232\":1,\"246\":1,\"287\":1}}],[\"location\",{\"1\":{\"232\":1}}],[\"locations\",{\"1\":{\"231\":1}}],[\"lock\",{\"1\":{\"52\":2,\"54\":3,\"245\":1,\"246\":4}}],[\"lombok\",{\"1\":{\"133\":1,\"139\":1}}],[\"logfile\",{\"1\":{\"185\":1}}],[\"loglevel\",{\"1\":{\"185\":2}}],[\"log\",{\"1\":{\"60\":3,\"138\":1,\"185\":2,\"191\":2,\"275\":1,\"298\":1}}],[\"log=1\",{\"1\":{\"60\":1}}],[\"long\",{\"1\":{\"60\":3,\"111\":1,\"133\":1,\"135\":2}}],[\"lower\",{\"1\":{\"38\":2}}],[\"light\",{\"1\":{\"298\":1,\"299\":1}}],[\"linkchunk\",{\"1\":{\"301\":3}}],[\"line\",{\"1\":{\"282\":2}}],[\"linux\",{\"0\":{\"249\":1},\"1\":{\"273\":1,\"276\":1}}],[\"lindex\",{\"1\":{\"175\":1}}],[\"liming\",{\"1\":{\"178\":1}}],[\"limit\",{\"1\":{\"30\":2,\"36\":3}}],[\"lib\",{\"1\":{\"60\":1,\"258\":1}}],[\"like\",{\"1\":{\"15\":6,\"32\":1,\"59\":1,\"60\":1}}],[\"listobjects\",{\"1\":{\"210\":1,\"212\":1}}],[\"list<web>\",{\"1\":{\"245\":1}}],[\"list<objecterror>\",{\"1\":{\"242\":1}}],[\"list<object>\",{\"1\":{\"18\":1}}],[\"list<ossobjectsummary>\",{\"1\":{\"212\":1}}],[\"list<cartvo>\",{\"1\":{\"134\":1}}],[\"list<itemdto>\",{\"1\":{\"122\":2}}],[\"list<integer>\",{\"1\":{\"19\":2}}],[\"list<serviceinstance>\",{\"1\":{\"120\":1}}],[\"list<string>\",{\"1\":{\"12\":1,\"87\":1,\"133\":1,\"242\":1}}],[\"list<mytest>\",{\"1\":{\"113\":1}}],[\"list<map<string\",{\"1\":{\"18\":1}}],[\"list<handlermethodargumentresolver>\",{\"1\":{\"95\":1}}],[\"list<record>\",{\"1\":{\"23\":1}}],[\"list<user>\",{\"1\":{\"19\":3}}],[\"list<t>\",{\"1\":{\"18\":3}}],[\"list<employee>\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"list\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":7,\"19\":4,\"23\":2,\"74\":1,\"87\":1,\"97\":3,\"133\":1,\"175\":9,\"211\":1,\"212\":4,\"213\":1}}],[\"+1\",{\"1\":{\"246\":1}}],[\"+999999\",{\"1\":{\"245\":1}}],[\"+\",{\"1\":{\"24\":3,\"61\":30,\"85\":1,\"87\":1,\"90\":1,\"120\":2,\"132\":5,\"133\":2,\"134\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"171\":1,\"212\":6,\"213\":5,\"232\":11,\"239\":1,\"242\":1,\"245\":4,\"266\":2,\"302\":9,\"306\":3}}],[\"djasypt\",{\"1\":{\"287\":1}}],[\"dd\",{\"1\":{\"232\":1,\"266\":1,\"277\":2}}],[\"domsource\",{\"1\":{\"306\":2}}],[\"dos\",{\"1\":{\"292\":1}}],[\"dotask\",{\"1\":{\"241\":1}}],[\"downloadpdf\",{\"1\":{\"299\":2}}],[\"downloaded\",{\"1\":{\"279\":1}}],[\"down\",{\"1\":{\"185\":1}}],[\"docket\",{\"1\":{\"248\":2}}],[\"dockercompose\",{\"0\":{\"258\":1}}],[\"docker安装rabbitmq详细步骤\",{\"1\":{\"146\":1}}],[\"docker\",{\"0\":{\"253\":1},\"1\":{\"105\":2,\"118\":1,\"255\":5,\"257\":6,\"258\":5,\"260\":7,\"261\":19,\"262\":3}}],[\"doc\",{\"1\":{\"109\":5}}],[\"documentbuilder\",{\"1\":{\"306\":2}}],[\"documentbuilderfactory\",{\"1\":{\"306\":4}}],[\"documentexception\",{\"1\":{\"299\":1}}],[\"documentelement\",{\"1\":{\"275\":2}}],[\"documented\",{\"1\":{\"93\":1}}],[\"documentationtype\",{\"1\":{\"248\":1}}],[\"document\",{\"1\":{\"105\":1,\"111\":1,\"275\":2,\"299\":6,\"300\":1,\"301\":1,\"302\":1,\"303\":1,\"306\":7}}],[\"dump\",{\"1\":{\"181\":2}}],[\"duration\",{\"1\":{\"61\":1}}],[\"dimensions\",{\"1\":{\"275\":5}}],[\"div>\",{\"1\":{\"242\":1}}],[\"dirname\",{\"1\":{\"251\":1,\"277\":2}}],[\"dir\",{\"1\":{\"232\":1}}],[\"directory\",{\"1\":{\"232\":4}}],[\"directorypath\",{\"1\":{\"232\":2}}],[\"direct\",{\"1\":{\"158\":3,\"159\":8,\"161\":1,\"163\":3,\"167\":4,\"169\":1}}],[\"direct类型的exchange\",{\"1\":{\"157\":1}}],[\"disposition\",{\"1\":{\"299\":1}}],[\"disposablebean\",{\"1\":{\"70\":1}}],[\"disable\",{\"1\":{\"277\":1}}],[\"discoveryclient\",{\"1\":{\"120\":3}}],[\"discovery<\",{\"1\":{\"119\":1,\"120\":1,\"127\":1}}],[\"discovery\",{\"1\":{\"105\":1,\"119\":1,\"120\":1,\"127\":2}}],[\"distinct\",{\"1\":{\"31\":1}}],[\"dproject\",{\"1\":{\"141\":2}}],[\"dcsp\",{\"1\":{\"141\":2}}],[\"dserver\",{\"1\":{\"141\":2}}],[\"driver\",{\"1\":{\"138\":2,\"287\":2}}],[\"d+\",{\"1\":{\"129\":1}}],[\"db\",{\"1\":{\"118\":2,\"138\":6}}],[\"dbtype\",{\"1\":{\"23\":1}}],[\"d\",{\"1\":{\"105\":1,\"118\":1,\"188\":2,\"258\":2,\"264\":2,\"266\":1,\"292\":3,\"306\":2}}],[\"daisy\",{\"1\":{\"193\":2}}],[\"dashboard\",{\"1\":{\"141\":7}}],[\"dataid\",{\"1\":{\"138\":3}}],[\"database\",{\"1\":{\"138\":1,\"180\":1}}],[\"databases\",{\"1\":{\"105\":1,\"107\":1,\"265\":1}}],[\"datasource\",{\"1\":{\"138\":1,\"287\":1}}],[\"data\",{\"1\":{\"111\":2,\"139\":2,\"217\":1,\"223\":2,\"232\":1,\"258\":1}}],[\"date2\",{\"1\":{\"40\":1}}],[\"date1\",{\"1\":{\"40\":1}}],[\"datediff\",{\"1\":{\"40\":1}}],[\"date\",{\"1\":{\"40\":6,\"133\":1,\"232\":1,\"245\":2,\"277\":2}}],[\"dao\",{\"1\":{\"69\":1,\"72\":1,\"73\":3,\"74\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"day\",{\"1\":{\"40\":2}}],[\"debug\",{\"1\":{\"185\":1,\"239\":1}}],[\"dec\",{\"1\":{\"284\":1}}],[\"decimalmax\",{\"1\":{\"242\":1}}],[\"decimalmin\",{\"1\":{\"242\":1}}],[\"dectby\",{\"1\":{\"175\":1}}],[\"decrypt\",{\"1\":{\"287\":1}}],[\"decr\",{\"1\":{\"175\":1}}],[\"deploy\",{\"1\":{\"282\":1}}],[\"deplyconsumer\",{\"1\":{\"171\":1}}],[\"deplyproducer\",{\"1\":{\"170\":1}}],[\"deplybinding\",{\"1\":{\"169\":1}}],[\"dependencymanagement\",{\"1\":{\"306\":1}}],[\"dependency\",{\"1\":{\"306\":7}}],[\"dependency>\",{\"1\":{\"1\":1,\"63\":1,\"69\":1,\"82\":2,\"111\":1,\"119\":1,\"120\":1,\"122\":2,\"123\":1,\"127\":3,\"138\":2,\"141\":1,\"162\":1,\"200\":1,\"201\":2,\"224\":1,\"232\":1,\"233\":1,\"239\":1,\"242\":1,\"246\":1,\"248\":1,\"287\":1,\"297\":3}}],[\"dependencies\",{\"1\":{\"279\":1}}],[\"dependencies>\",{\"1\":{\"82\":1}}],[\"delaytime\",{\"1\":{\"170\":3}}],[\"delayqueue\",{\"1\":{\"169\":2}}],[\"delayed\",{\"1\":{\"169\":2}}],[\"delayexchange\",{\"1\":{\"169\":2}}],[\"delay\",{\"1\":{\"169\":3}}],[\"deleteobject\",{\"1\":{\"210\":1,\"213\":2}}],[\"deletebatchids\",{\"1\":{\"18\":1,\"19\":1}}],[\"deletebymap\",{\"1\":{\"18\":1,\"19\":1}}],[\"deletebyid\",{\"1\":{\"18\":1,\"19\":1}}],[\"delete\",{\"0\":{\"29\":1},\"1\":{\"2\":1,\"18\":1,\"19\":2,\"29\":2,\"52\":2,\"57\":1,\"89\":1,\"108\":1,\"109\":1,\"112\":1,\"113\":2,\"245\":1}}],[\"dead\",{\"1\":{\"169\":6,\"170\":4,\"171\":1}}],[\"devicepixelratio\",{\"1\":{\"275\":1}}],[\"devicescalefactor\",{\"1\":{\"275\":1}}],[\"devtools\",{\"1\":{\"270\":1}}],[\"devtools<\",{\"1\":{\"233\":1}}],[\"dev\",{\"1\":{\"138\":1}}],[\"denver\",{\"1\":{\"129\":1}}],[\"destfile\",{\"1\":{\"232\":2}}],[\"destroy\",{\"1\":{\"70\":1}}],[\"destory\",{\"1\":{\"70\":3}}],[\"desc\",{\"1\":{\"35\":2,\"110\":1}}],[\"description\",{\"1\":{\"20\":1,\"22\":1,\"133\":1,\"157\":1,\"160\":1,\"248\":1,\"298\":1}}],[\"detail\",{\"1\":{\"65\":1}}],[\"defaultdatasource\",{\"1\":{\"287\":1}}],[\"defaulttyping\",{\"1\":{\"177\":1}}],[\"defaultconsumer\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"defaultconfiguration\",{\"1\":{\"136\":1}}],[\"default\",{\"1\":{\"41\":1,\"138\":1,\"221\":4,\"239\":1,\"242\":1,\"276\":1}}],[\"demo\",{\"1\":{\"10\":1,\"257\":4}}],[\"赋值\",{\"1\":{\"21\":1}}],[\"雪花算法\",{\"1\":{\"21\":1}}],[\"所以需要用\",{\"1\":{\"285\":1}}],[\"所以指定的是\",{\"1\":{\"257\":1}}],[\"所以大家在使用时需要多加注意\",{\"1\":{\"227\":1}}],[\"所以在a\",{\"1\":{\"225\":1}}],[\"所以额外添加一个注解更加合适\",{\"1\":{\"219\":1}}],[\"所以我们通常会利用数据卷将两个目录与宿主机目录关联\",{\"1\":{\"254\":1}}],[\"所以我们现在需要一个属性a\",{\"1\":{\"223\":1}}],[\"所以我们在这里修改名称为aautoconfiguration\",{\"1\":{\"222\":1}}],[\"所以我们需要用另外的方式来导入这个配置类\",{\"1\":{\"218\":1}}],[\"所以我们必须把这种影响降低\",{\"1\":{\"143\":1}}],[\"所以现在就把我们要实现的starter取名为a\",{\"1\":{\"217\":1}}],[\"所以是cart\",{\"1\":{\"139\":1}}],[\"所以正确的引用方式如下\",{\"1\":{\"7\":1}}],[\"所有写操作命令追加到文件的过程\",{\"1\":{\"182\":1}}],[\"所有的op发起的请求都会先调用拦截器处理请求\",{\"1\":{\"136\":1}}],[\"所有的数据\",{\"1\":{\"19\":1}}],[\"所有后续的微服务中\",{\"1\":{\"136\":1}}],[\"39\",{\"1\":{\"266\":1}}],[\"380f\",{\"1\":{\"303\":1}}],[\"38\",{\"1\":{\"266\":1}}],[\"37\",{\"1\":{\"266\":1}}],[\"36\",{\"1\":{\"266\":1}}],[\"35\",{\"1\":{\"266\":1}}],[\"34\",{\"1\":{\"266\":1}}],[\"33\",{\"1\":{\"266\":1}}],[\"3306\",{\"1\":{\"138\":1,\"287\":1}}],[\"32\",{\"1\":{\"266\":1}}],[\"31\",{\"1\":{\"266\":1,\"284\":1}}],[\"30各执行一次任务\",{\"1\":{\"286\":1}}],[\"30\",{\"1\":{\"266\":1,\"286\":1,\"302\":1}}],[\"300\",{\"1\":{\"181\":1}}],[\"3个字段\",{\"1\":{\"43\":1}}],[\"3\",{\"0\":{\"95\":1},\"1\":{\"19\":1,\"39\":1,\"61\":1,\"64\":1,\"69\":2,\"82\":1,\"175\":1,\"190\":1,\"201\":1,\"258\":1,\"266\":1,\"276\":1,\"285\":1,\"286\":1,\"302\":2}}],[\"2f\",{\"1\":{\"302\":1}}],[\"2代表星期一\",{\"1\":{\"284\":1}}],[\"29\",{\"1\":{\"266\":1}}],[\"28\",{\"1\":{\"266\":1}}],[\"27\",{\"1\":{\"266\":1}}],[\"27003\",{\"1\":{\"185\":1}}],[\"26\",{\"1\":{\"266\":1}}],[\"25\",{\"1\":{\"258\":1,\"266\":1}}],[\"200\",{\"1\":{\"304\":2}}],[\"200m～400m\",{\"1\":{\"281\":1}}],[\"20000\",{\"1\":{\"262\":1}}],[\"20l\",{\"1\":{\"245\":1}}],[\"20\",{\"1\":{\"175\":2,\"260\":11,\"261\":3,\"266\":1}}],[\"2024\",{\"1\":{\"298\":1}}],[\"2023\",{\"1\":{\"133\":1}}],[\"2022版mybatisplus教程\",{\"1\":{\"17\":1}}],[\"20t17\",{\"1\":{\"129\":1}}],[\"20t06\",{\"1\":{\"129\":1}}],[\"24\",{\"1\":{\"129\":1,\"266\":1}}],[\"23\",{\"1\":{\"109\":1,\"266\":1,\"284\":1}}],[\"23<\",{\"1\":{\"69\":1,\"82\":1}}],[\"22\",{\"1\":{\"24\":1,\"258\":1,\"262\":1,\"266\":1}}],[\"21\",{\"1\":{\"24\":1,\"266\":1}}],[\"2\",{\"0\":{\"94\":1,\"100\":1},\"1\":{\"19\":2,\"61\":1,\"69\":1,\"105\":2,\"110\":1,\"175\":7,\"185\":2,\"239\":1,\"242\":1,\"248\":1,\"264\":1,\"265\":1,\"266\":1,\"276\":1,\"282\":1,\"285\":1,\"297\":1,\"301\":1,\"302\":4}}],[\"不支持\",{\"1\":{\"284\":1}}],[\"不过这里需要注意这几个注解只能对自动配置生效\",{\"1\":{\"229\":1}}],[\"不过我个人习惯还是xxx\",{\"1\":{\"217\":1}}],[\"不启用方法代理的情况下\",{\"1\":{\"225\":1}}],[\"不知道大家有没有发现\",{\"1\":{\"224\":1}}],[\"不想使用其中的某个依赖\",{\"1\":{\"201\":1}}],[\"不执行fsync\",{\"1\":{\"182\":1}}],[\"不是autodelete\",{\"1\":{\"164\":1}}],[\"不是数据库中字段\",{\"1\":{\"21\":1}}],[\"不再是任意绑定了\",{\"1\":{\"157\":1}}],[\"不关闭\",{\"1\":{\"149\":1}}],[\"不同的地方还是读取原来服务的application\",{\"1\":{\"138\":1}}],[\"不携带请求头\",{\"1\":{\"136\":1}}],[\"不可被分开的词查询\",{\"1\":{\"111\":1}}],[\"不可被索引\",{\"1\":{\"111\":1}}],[\"不可写\",{\"1\":{\"52\":1}}],[\"不能被索引\",{\"1\":{\"110\":1}}],[\"不加id\",{\"1\":{\"109\":1}}],[\"不改变原始设计\",{\"1\":{\"76\":1}}],[\"不允许重复值\",{\"1\":{\"50\":1}}],[\"不去重\",{\"1\":{\"48\":1}}],[\"不参与计算\",{\"1\":{\"33\":1}}],[\"不等于\",{\"1\":{\"32\":1}}],[\"不重复\",{\"1\":{\"31\":1}}],[\"不写条件\",{\"1\":{\"28\":1}}],[\"不管如何都会回滚\",{\"1\":{\"25\":1}}],[\"不会直接依赖\",{\"1\":{\"205\":1}}],[\"不会污染数据\",{\"1\":{\"25\":1}}],[\"不会改变数据\",{\"1\":{\"25\":1}}],[\"不会参与查询\",{\"1\":{\"21\":1}}],[\"不被修改\",{\"1\":{\"19\":1}}],[\"不屑password\",{\"1\":{\"19\":1}}],[\"q可以挂起容器\",{\"1\":{\"261\":1}}],[\"qq\",{\"1\":{\"239\":5}}],[\"qian\",{\"1\":{\"79\":1}}],[\"queues\",{\"1\":{\"171\":1}}],[\"queuestodeclare\",{\"1\":{\"164\":1,\"165\":2}}],[\"queuebinding\",{\"1\":{\"166\":2,\"167\":2,\"168\":2}}],[\"queuebind\",{\"1\":{\"155\":1,\"159\":4,\"161\":3}}],[\"queue\",{\"1\":{\"155\":3,\"159\":8,\"161\":5,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"169\":5,\"171\":1}}],[\"queuedeclare\",{\"1\":{\"148\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"querymycarts\",{\"1\":{\"134\":2}}],[\"query=smile\",{\"1\":{\"129\":1}}],[\"query\",{\"1\":{\"52\":4,\"60\":6,\"61\":5,\"110\":5,\"122\":2}}],[\"querywrapper<web>\",{\"1\":{\"245\":2}}],[\"querywrapper<>\",{\"1\":{\"23\":1}}],[\"querywrapper<record>\",{\"1\":{\"23\":1}}],[\"querywrapper\",{\"1\":{\"18\":8,\"23\":3,\"245\":3}}],[\"quartz<\",{\"1\":{\"63\":1}}],[\"quartz\",{\"0\":{\"62\":1},\"1\":{\"287\":1}}],[\"q\",{\"1\":{\"19\":3,\"24\":5,\"266\":3}}],[\"837bpgx2vwwq\",{\"1\":{\"287\":1}}],[\"8秒\",{\"1\":{\"285\":1}}],[\"8<\",{\"1\":{\"207\":2}}],[\"8\",{\"1\":{\"207\":2,\"239\":1,\"258\":1,\"265\":1,\"266\":1}}],[\"8848\",{\"1\":{\"118\":2,\"119\":1,\"120\":1,\"127\":1,\"138\":1}}],[\"880\",{\"1\":{\"19\":2}}],[\"800px\",{\"1\":{\"275\":1}}],[\"8090\",{\"1\":{\"141\":3,\"258\":2}}],[\"80\",{\"1\":{\"19\":1}}],[\"三个不同的redis\",{\"1\":{\"184\":1}}],[\"三\",{\"0\":{\"190\":1},\"1\":{\"19\":1,\"87\":1}}],[\"二进制协议是redis自定义的序列化格式\",{\"1\":{\"176\":1}}],[\"二\",{\"0\":{\"188\":1,\"189\":1},\"1\":{\"19\":1,\"87\":1}}],[\"一张图片大概3m\",{\"1\":{\"277\":1}}],[\"一起使用\",{\"1\":{\"276\":1}}],[\"一次性提交多个文件\",{\"1\":{\"190\":1}}],[\"一条消息\",{\"1\":{\"157\":1}}],[\"一页几条数据\",{\"1\":{\"110\":1}}],[\"一般当我们重写了某个库中的某个组件后\",{\"1\":{\"227\":1}}],[\"一般情况下\",{\"1\":{\"222\":1}}],[\"一般情况下我们会使用\",{\"1\":{\"216\":1}}],[\"一般在一个项目中也会有一些标记了\",{\"1\":{\"218\":1}}],[\"一般来说\",{\"1\":{\"217\":1}}],[\"一般\",{\"1\":{\"73\":1}}],[\"一般对象都是直接通过new出来\",{\"1\":{\"69\":1}}],[\"一种思想\",{\"1\":{\"69\":1}}],[\"一个调度容器中可以注册多个\",{\"1\":{\"62\":1}}],[\"一\",{\"0\":{\"187\":1},\"1\":{\"19\":1,\"87\":1}}],[\"一套玩转mybatis\",{\"1\":{\"17\":1}}],[\"天天学习\",{\"1\":{\"19\":1}}],[\"支持性\",{\"1\":{\"236\":1,\"237\":1}}],[\"支持指定分数\",{\"1\":{\"175\":1}}],[\"支持各种数据类型\",{\"1\":{\"105\":1}}],[\"支持关键词自动转义\",{\"1\":{\"17\":1}}],[\"支持自定义全局通用操作\",{\"1\":{\"17\":1}}],[\"支持activerecord模式\",{\"1\":{\"17\":1}}],[\"支持主键自动生成\",{\"1\":{\"17\":1}}],[\"支持多种数据库\",{\"1\":{\"17\":1}}],[\"支持lambda形式调用\",{\"1\":{\"17\":1}}],[\"损耗小\",{\"1\":{\"17\":1}}],[\"哔哩哔哩\",{\"1\":{\"17\":1,\"26\":1,\"49\":1,\"68\":1,\"81\":1,\"87\":1,\"89\":1,\"146\":1,\"183\":1}}],[\"尚硅谷\",{\"1\":{\"17\":1}}],[\"的磁盘空间\",{\"1\":{\"281\":1}}],[\"的情况\",{\"1\":{\"281\":1}}],[\"的不同\",{\"1\":{\"276\":1}}],[\"的headless\",{\"1\":{\"276\":1}}],[\"的\",{\"1\":{\"275\":1}}],[\"的一个\",{\"1\":{\"234\":1}}],[\"的一种新协议\",{\"1\":{\"234\":1}}],[\"的多节点部署\",{\"1\":{\"185\":1}}],[\"的另一种数据持久化方式\",{\"1\":{\"182\":1}}],[\"的缩写\",{\"1\":{\"182\":1}}],[\"的默认数据持久化方式\",{\"1\":{\"180\":1}}],[\"的发送方在向exchang发送消息时\",{\"1\":{\"157\":1}}],[\"的依赖\",{\"1\":{\"123\":1}}],[\"的方式进行组合\",{\"1\":{\"110\":1}}],[\"的人\",{\"1\":{\"48\":1}}],[\"的基础上只做增强不做改变\",{\"1\":{\"17\":1}}],[\"的增强工具\",{\"1\":{\"17\":1}}],[\"在后面的\",{\"1\":{\"294\":1}}],[\"在秒字段就是每分钟的第3秒开始\",{\"1\":{\"285\":1}}],[\"在秒字段里就是每分钟的第2\",{\"1\":{\"285\":1}}],[\"在秒字段里就是每分钟的第1到10秒\",{\"1\":{\"285\":1}}],[\"在分就是每小时的第1到10分钟\",{\"1\":{\"285\":1}}],[\"在不同的字段上\",{\"1\":{\"285\":1}}],[\"在线测试\",{\"1\":{\"283\":1}}],[\"在创建browser实例时传入\",{\"1\":{\"276\":1}}],[\"在页面中执行脚本\",{\"1\":{\"275\":1}}],[\"在命令行中执行\",{\"1\":{\"275\":3}}],[\"在项目中使用\",{\"1\":{\"273\":1}}],[\"在第n1行与n2行之间寻找word1这个字符串\",{\"1\":{\"266\":1}}],[\"在本地和容器间复制文件\",{\"1\":{\"261\":1}}],[\"在容器中执行命令\",{\"1\":{\"261\":1}}],[\"在当前目录及其子目录下查找\",{\"1\":{\"251\":1}}],[\"在指定目录下查找文件\",{\"1\":{\"251\":1}}],[\"在图片文件读取完毕后设置预览图片的\",{\"1\":{\"242\":1}}],[\"在spring\",{\"1\":{\"240\":1}}],[\"在这种抄送方式中\",{\"1\":{\"239\":1}}],[\"在某些实现中\",{\"1\":{\"306\":1}}],[\"在某些情况下\",{\"1\":{\"229\":1,\"306\":1}}],[\"在某时刻需要完成的单次任务等场景\",{\"1\":{\"283\":1}}],[\"在某个配置之后进行配置\",{\"1\":{\"229\":1}}],[\"在某个配置之前进行配置\",{\"1\":{\"229\":1}}],[\"在我们写starter的过程中\",{\"1\":{\"227\":1}}],[\"在方法参数中也可以直接注入aproperties对象\",{\"1\":{\"223\":1}}],[\"在父工程配置了依赖\",{\"1\":{\"205\":1}}],[\"在key对应的hash中设置field对应的value\",{\"1\":{\"175\":1}}],[\"在fanout的模式下\",{\"1\":{\"157\":1}}],[\"在服务中添加配置\",{\"1\":{\"139\":1}}],[\"在nacos中添加配置文件\",{\"1\":{\"139\":1}}],[\"在nacos配置管理\",{\"1\":{\"138\":1}}],[\"在相应服务中新建bootstrap\",{\"1\":{\"138\":1}}],[\"在上述例子中\",{\"1\":{\"114\":1}}],[\"在原来的数据上修改\",{\"1\":{\"109\":1}}],[\"在里面加载spring配置\",{\"1\":{\"82\":1}}],[\"在哪里执行\",{\"1\":{\"77\":1}}],[\"在mysql中\",{\"1\":{\"42\":1}}],[\"在多个操作之间存在依赖关系的情况下\",{\"1\":{\"25\":1}}],[\"在\",{\"1\":{\"17\":1,\"251\":1}}],[\"在加载的时候\",{\"1\":{\"3\":1}}],[\"是容器内目录与宿主机目录之间映射的桥梁\",{\"1\":{\"254\":1}}],[\"是会从spring的容器中获得b实例\",{\"1\":{\"225\":1}}],[\"是统一管理依赖版本\",{\"1\":{\"205\":1}}],[\"是直接依赖\",{\"1\":{\"205\":1}}],[\"是\",{\"1\":{\"180\":1,\"182\":1,\"234\":2,\"284\":6}}],[\"是webflux里面\",{\"1\":{\"132\":1}}],[\"是web里面的\",{\"1\":{\"132\":1}}],[\"是用来定义文档和它所包含的字段是如何被存储和索引的\",{\"1\":{\"110\":1}}],[\"是这个可执行程调度程序所要执行的内容\",{\"1\":{\"62\":1}}],[\"是否为节点\",{\"1\":{\"306\":1}}],[\"是否必需\",{\"1\":{\"284\":1}}],[\"是否延迟解析\",{\"1\":{\"232\":1}}],[\"是否以append\",{\"1\":{\"182\":1}}],[\"是否消费结束后自动删除\",{\"1\":{\"148\":1,\"149\":1}}],[\"是否独占队列\",{\"1\":{\"148\":1,\"149\":1}}],[\"是否开启上传\",{\"1\":{\"232\":1}}],[\"是否开启多个消息同时确认\",{\"1\":{\"152\":1}}],[\"是否开启\",{\"1\":{\"61\":1}}],[\"是否支持\",{\"1\":{\"61\":1}}],[\"是最常见的索引类型\",{\"1\":{\"50\":1}}],[\"是最复杂也是最强大的元素\",{\"1\":{\"2\":1}}],[\"是保证数据库安全和稳定运行的基本手段\",{\"1\":{\"25\":1}}],[\"是一个的轻量级的\",{\"1\":{\"274\":1}}],[\"是一个虚拟目录\",{\"1\":{\"254\":1}}],[\"是一个分布式的\",{\"1\":{\"105\":1}}],[\"是一个\",{\"1\":{\"17\":1,\"270\":1}}],[\"1f\",{\"1\":{\"302\":2}}],[\"1代表星期天\",{\"1\":{\"284\":1}}],[\"18\",{\"1\":{\"266\":1,\"279\":1}}],[\"17\",{\"1\":{\"266\":1,\"286\":1,\"298\":1}}],[\"13<\",{\"1\":{\"297\":2}}],[\"13秒\",{\"1\":{\"285\":1}}],[\"13\",{\"1\":{\"266\":1}}],[\"11\",{\"1\":{\"266\":1}}],[\"110\",{\"1\":{\"40\":2}}],[\"19\",{\"1\":{\"266\":1}}],[\"19138084894\",{\"1\":{\"239\":3}}],[\"1920\",{\"1\":{\"277\":2}}],[\"192\",{\"1\":{\"138\":1}}],[\"163\",{\"1\":{\"239\":3}}],[\"16\",{\"1\":{\"133\":1,\"266\":1,\"279\":1,\"286\":1}}],[\"168\",{\"1\":{\"129\":1,\"138\":1}}],[\"14016179\",{\"1\":{\"242\":1}}],[\"14\",{\"1\":{\"89\":1,\"266\":1,\"286\":2}}],[\"1<\",{\"1\":{\"82\":1,\"201\":1,\"207\":2}}],[\"120f\",{\"1\":{\"303\":1}}],[\"127\",{\"1\":{\"111\":1,\"119\":1,\"120\":1,\"127\":1,\"138\":1,\"148\":1,\"149\":1,\"150\":1,\"162\":1,\"185\":2,\"267\":3}}],[\"12\",{\"0\":{\"241\":1},\"1\":{\"110\":1,\"113\":1,\"133\":1,\"241\":1,\"266\":1,\"278\":1,\"284\":1,\"286\":2,\"299\":1,\"301\":8}}],[\"123456\",{\"1\":{\"287\":1}}],[\"123\",{\"1\":{\"72\":1,\"138\":2,\"258\":1}}],[\"123root\",{\"1\":{\"19\":1}}],[\"1223\",{\"1\":{\"52\":1}}],[\"15执行任务\",{\"1\":{\"286\":4}}],[\"150\",{\"1\":{\"138\":1}}],[\"15\",{\"1\":{\"43\":1,\"266\":1,\"286\":5}}],[\"1的随机小数\",{\"1\":{\"39\":1}}],[\"1080\",{\"1\":{\"277\":2}}],[\"10mb\",{\"1\":{\"232\":2}}],[\"100\",{\"1\":{\"182\":1,\"242\":3,\"302\":1,\"304\":2}}],[\"10000\",{\"1\":{\"181\":1,\"185\":1}}],[\"1000\",{\"1\":{\"152\":1}}],[\"101\",{\"1\":{\"113\":1,\"138\":1}}],[\"102\",{\"1\":{\"113\":1}}],[\"102l\",{\"1\":{\"113\":1}}],[\"10\",{\"1\":{\"23\":1,\"36\":3,\"52\":2,\"60\":1,\"65\":1,\"163\":1,\"181\":1,\"242\":1,\"266\":1,\"277\":2,\"282\":1,\"285\":1,\"286\":5,\"302\":1}}],[\"1\",{\"0\":{\"93\":1,\"99\":1,\"214\":1},\"1\":{\"15\":1,\"19\":1,\"24\":3,\"36\":1,\"52\":1,\"61\":4,\"69\":1,\"109\":3,\"111\":1,\"118\":2,\"119\":1,\"120\":1,\"127\":1,\"129\":2,\"138\":1,\"148\":1,\"149\":1,\"150\":1,\"152\":1,\"162\":1,\"175\":16,\"178\":1,\"181\":1,\"185\":3,\"242\":1,\"245\":2,\"246\":1,\"248\":1,\"257\":3,\"262\":1,\"265\":1,\"266\":3,\"267\":3,\"274\":1,\"276\":1,\"282\":1,\"284\":4,\"285\":2,\"301\":1,\"302\":1}}],[\"可根据需要调整时间\",{\"1\":{\"279\":1}}],[\"可执行文件的路径即可\",{\"1\":{\"276\":1}}],[\"可靠性\",{\"1\":{\"237\":1}}],[\"可能会导致资源浪费和性能问题\",{\"1\":{\"236\":1}}],[\"可能会导致丢失这1s数据\",{\"1\":{\"182\":1}}],[\"可选依赖\",{\"0\":{\"200\":1},\"1\":{\"200\":1}}],[\"可选值\",{\"1\":{\"185\":1}}],[\"可以用来设置段落的某些文本样式\",{\"1\":{\"301\":1}}],[\"可以取消当前正在执行的命令\",{\"1\":{\"266\":1}}],[\"可以使用\",{\"1\":{\"277\":1}}],[\"可以使用以下命令找到导出的数据库\",{\"1\":{\"264\":1}}],[\"可以使用两个表之间的联系去除无用数据\",{\"1\":{\"43\":1}}],[\"可以将当前用户加入安装中自动创建的docker用户组如何在\",{\"1\":{\"258\":1}}],[\"可以将日志输出到指定的文件\",{\"1\":{\"185\":1}}],[\"可以保证数据的可靠性\",{\"1\":{\"237\":1}}],[\"可以同时在客户端和服务器端发送和接收消息\",{\"1\":{\"235\":1}}],[\"可以自动降级为支持长轮询等传输方式的\",{\"1\":{\"234\":1}}],[\"可以指定在servlet或reactive环境中生效\",{\"1\":{\"228\":1}}],[\"可以发现这些自带的starter的名称格式都是spring\",{\"1\":{\"217\":1}}],[\"可以有效降低accesskey泄露的风险\",{\"1\":{\"210\":1}}],[\"可以看到3次\",{\"1\":{\"191\":1}}],[\"可以添加更多的\",{\"1\":{\"185\":1}}],[\"可以设置日志级别\",{\"1\":{\"185\":1}}],[\"可以让aof文件执行重写功能\",{\"1\":{\"182\":1}}],[\"可以执行\",{\"1\":{\"182\":1}}],[\"可以暂时切断对下游服务的调用\",{\"1\":{\"144\":1}}],[\"可以省略\",{\"1\":{\"139\":1}}],[\"可以被索引\",{\"1\":{\"110\":1}}],[\"可以被分词查询\",{\"1\":{\"110\":1}}],[\"可以很好地存储和查询文档\",{\"1\":{\"105\":1}}],[\"可以加速等值查询\",{\"1\":{\"50\":1}}],[\"可以把id拿出来\",{\"1\":{\"14\":1}}],[\"可被其它语句引用的可重用语句块\",{\"1\":{\"2\":1}}],[\"添加一行数据\",{\"1\":{\"302\":1}}],[\"添加一行配置\",{\"1\":{\"184\":1}}],[\"添加单元格到表格\",{\"1\":{\"302\":1}}],[\"添加到doc中\",{\"1\":{\"300\":1}}],[\"添加要写入的内容\",{\"1\":{\"299\":1}}],[\"添加字体失败\",{\"1\":{\"298\":1}}],[\"添加apioperiation注解的被扫描\",{\"1\":{\"248\":1}}],[\"添加注解的类的可以是任意的配置类\",{\"1\":{\"229\":1}}],[\"添加多个\",{\"1\":{\"113\":1}}],[\"添加文档\",{\"1\":{\"113\":1}}],[\"添加用户时出现异常\",{\"1\":{\"25\":2}}],[\"添加用户\",{\"1\":{\"25\":1}}],[\"添加\",{\"0\":{\"14\":1},\"1\":{\"190\":1}}],[\"o\",{\"1\":{\"260\":1,\"261\":1}}],[\"oe\",{\"1\":{\"212\":5,\"213\":5}}],[\"oepnfeign\",{\"1\":{\"136\":1}}],[\"os\",{\"1\":{\"211\":3}}],[\"ossexception\",{\"1\":{\"212\":2,\"213\":2}}],[\"ossobjectsummary\",{\"1\":{\"212\":1}}],[\"ossclient\",{\"1\":{\"212\":4,\"213\":4}}],[\"ossclientbuilder\",{\"1\":{\"211\":1,\"212\":1,\"213\":1}}],[\"oss\",{\"0\":{\"208\":1,\"209\":1},\"1\":{\"210\":3,\"211\":2,\"212\":2,\"213\":2}}],[\"our\",{\"1\":{\"201\":1}}],[\"output=file\",{\"1\":{\"60\":1}}],[\"outer\",{\"1\":{\"45\":1}}],[\"out\",{\"1\":{\"14\":1,\"19\":6,\"24\":2,\"64\":1,\"65\":2,\"70\":2,\"77\":1,\"79\":3,\"80\":1,\"82\":1,\"84\":1,\"85\":1,\"87\":1,\"89\":2,\"99\":3,\"132\":5,\"133\":2,\"134\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"171\":1,\"178\":1,\"212\":6,\"213\":5,\"232\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"245\":2,\"287\":3,\"306\":6}}],[\"other\",{\"0\":{\"311\":1},\"1\":{\"282\":1}}],[\"othermaster\",{\"1\":{\"185\":1}}],[\"otherwise>\",{\"1\":{\"15\":1}}],[\"om\",{\"1\":{\"177\":4}}],[\"options\",{\"1\":{\"258\":1}}],[\"option\",{\"1\":{\"251\":1,\"276\":1}}],[\"optional>\",{\"1\":{\"200\":1,\"224\":1,\"233\":1}}],[\"optional为true时不让别人知道自己所用依赖\",{\"1\":{\"200\":1}}],[\"opts=\",{\"1\":{\"105\":2}}],[\"opsforvalue\",{\"1\":{\"178\":2,\"245\":1}}],[\"open\",{\"1\":{\"299\":1}}],[\"openfiegn\",{\"1\":{\"136\":1}}],[\"openfeign传递\",{\"0\":{\"136\":1}}],[\"openfeign<\",{\"1\":{\"122\":1,\"123\":1}}],[\"openfeign\",{\"0\":{\"121\":1},\"1\":{\"122\":1,\"217\":1}}],[\"open=\",{\"1\":{\"12\":1}}],[\"oldname\",{\"1\":{\"232\":3}}],[\"old\",{\"1\":{\"105\":1}}],[\"objecterror\",{\"1\":{\"242\":1}}],[\"objectprovider<b>\",{\"1\":{\"226\":1}}],[\"objectlisting\",{\"1\":{\"212\":3}}],[\"objectmapper\",{\"1\":{\"177\":3}}],[\"object\",{\"1\":{\"80\":3,\"94\":1,\"96\":1,\"99\":3,\"177\":1}}],[\"object>>>\",{\"1\":{\"18\":1}}],[\"object>>\",{\"1\":{\"18\":1}}],[\"object>\",{\"1\":{\"18\":2,\"19\":2,\"169\":2,\"177\":2,\"221\":2}}],[\"of\",{\"1\":{\"69\":1,\"120\":1,\"275\":1,\"282\":1}}],[\"okhttp\",{\"1\":{\"123\":1}}],[\"okhttp<\",{\"1\":{\"123\":1}}],[\"ok\",{\"1\":{\"52\":3,\"61\":1,\"123\":1}}],[\"onload\",{\"1\":{\"242\":1}}],[\"only模式作为持久化方式\",{\"1\":{\"182\":1}}],[\"only\",{\"1\":{\"182\":1}}],[\"onmessage\",{\"1\":{\"171\":1}}],[\"one\",{\"1\":{\"154\":2,\"155\":2,\"282\":1}}],[\"on\",{\"1\":{\"44\":1,\"45\":2,\"47\":1,\"182\":1,\"279\":2,\"282\":2,\"294\":1,\"295\":1}}],[\"o操作和网络传输\",{\"1\":{\"25\":1}}],[\"o操作或网络传输\",{\"1\":{\"25\":1}}],[\"or\",{\"1\":{\"273\":1,\"274\":1}}],[\"originalfilename\",{\"1\":{\"211\":2}}],[\"origin\",{\"1\":{\"188\":3,\"193\":4,\"279\":3}}],[\"or或\",{\"1\":{\"32\":1}}],[\"ordered\",{\"1\":{\"132\":1,\"133\":2}}],[\"order\",{\"1\":{\"30\":2,\"35\":1,\"110\":1}}],[\"orderbyasc\",{\"1\":{\"23\":1}}],[\"org\",{\"1\":{\"1\":1,\"133\":11,\"139\":2,\"224\":1}}],[\"override\",{\"1\":{\"23\":1,\"25\":1,\"64\":1,\"65\":1,\"82\":3,\"94\":1,\"95\":2,\"96\":2,\"99\":3,\"100\":1,\"132\":2,\"133\":2,\"136\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1,\"221\":2,\"231\":1,\"241\":1,\"246\":1}}],[\"传递集合类型参数list\",{\"0\":{\"12\":1}}],[\"传参\",{\"0\":{\"6\":1}}],[\"wqy\",{\"1\":{\"279\":1}}],[\"wq\",{\"1\":{\"266\":1}}],[\"w\",{\"1\":{\"266\":2,\"292\":3}}],[\"window\",{\"1\":{\"275\":1}}],[\"win\",{\"1\":{\"273\":1}}],[\"width\",{\"1\":{\"242\":1,\"275\":1,\"277\":2}}],[\"withmethodannotation\",{\"1\":{\"248\":1}}],[\"withintervalinseconds\",{\"1\":{\"64\":1,\"65\":1}}],[\"withidentity\",{\"1\":{\"64\":2,\"65\":2}}],[\"withschedule\",{\"1\":{\"64\":1,\"65\":1}}],[\"with\",{\"1\":{\"52\":1,\"169\":1,\"212\":1,\"213\":1,\"279\":1,\"282\":1}}],[\"www\",{\"1\":{\"242\":1,\"278\":1}}],[\"wed\",{\"1\":{\"286\":2}}],[\"we\",{\"1\":{\"201\":1}}],[\"web1\",{\"1\":{\"245\":7}}],[\"webmapper\",{\"1\":{\"245\":2}}],[\"webmvcconfigurer\",{\"1\":{\"100\":1,\"231\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"95\":1,\"100\":1}}],[\"webmvc<\",{\"1\":{\"82\":1}}],[\"webs\",{\"1\":{\"245\":2}}],[\"websocket在连接建立后会一直保持连接\",{\"1\":{\"236\":1}}],[\"websocket是html5标准的一部分\",{\"1\":{\"236\":1}}],[\"websocket是一个非常简单的协议\",{\"1\":{\"235\":1}}],[\"websocket提供了双向通信的功能\",{\"1\":{\"235\":1}}],[\"websocket的缺点\",{\"0\":{\"236\":1}}],[\"websocket的头部信息非常小\",{\"1\":{\"235\":1}}],[\"websocket的优势\",{\"0\":{\"235\":1}}],[\"websocket和sockjs都是在web应用程序中使用实时通信的协议\",{\"1\":{\"234\":1}}],[\"websocket\",{\"0\":{\"234\":1},\"1\":{\"217\":1,\"234\":5}}],[\"webcontrollerapplication<\",{\"1\":{\"207\":1}}],[\"web\",{\"1\":{\"133\":1,\"217\":1,\"231\":1,\"245\":2,\"258\":1}}],[\"webdatabinderfactory\",{\"1\":{\"96\":2}}],[\"webapplicationcontext\",{\"1\":{\"82\":2}}],[\"waituntil\",{\"1\":{\"275\":1}}],[\"was\",{\"1\":{\"212\":1,\"213\":1}}],[\"warning\",{\"1\":{\"185\":1}}],[\"warn\",{\"1\":{\"158\":1,\"159\":2,\"161\":2,\"163\":1,\"167\":2}}],[\"wapper条件构造器\",{\"0\":{\"20\":1}}],[\"worklogs\",{\"0\":{\"313\":1}}],[\"work2\",{\"1\":{\"165\":1}}],[\"work1\",{\"1\":{\"165\":1}}],[\"workconsumer\",{\"1\":{\"165\":1}}],[\"work\",{\"1\":{\"163\":4,\"165\":2}}],[\"word2\",{\"1\":{\"266\":3}}],[\"word1\",{\"1\":{\"266\":3}}],[\"word\",{\"1\":{\"152\":2,\"252\":1,\"266\":2}}],[\"world\",{\"1\":{\"38\":1,\"65\":2,\"74\":1,\"75\":1,\"82\":1,\"84\":1,\"85\":1,\"87\":1,\"154\":1,\"163\":1,\"175\":1,\"239\":1,\"282\":2}}],[\"which\",{\"1\":{\"212\":1,\"213\":1}}],[\"while\",{\"1\":{\"147\":1}}],[\"when>\",{\"1\":{\"15\":2}}],[\"where\",{\"1\":{\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"15\":3,\"19\":2,\"28\":1,\"29\":1,\"30\":2,\"38\":1,\"44\":1,\"48\":4,\"52\":2}}],[\"wrote\",{\"1\":{\"190\":1}}],[\"writer\",{\"1\":{\"299\":2,\"304\":1}}],[\"write\",{\"1\":{\"54\":2}}],[\"wrapper<t>\",{\"1\":{\"18\":9}}],[\"wg\",{\"1\":{\"10\":1}}],[\"black\",{\"1\":{\"301\":6,\"304\":1}}],[\"blog\",{\"0\":{\"308\":1},\"1\":{\"15\":6}}],[\"bf\",{\"1\":{\"298\":3,\"299\":2,\"301\":8}}],[\"browser\",{\"1\":{\"275\":10,\"276\":2,\"277\":6}}],[\"branches\",{\"1\":{\"279\":1,\"282\":1}}],[\"branch\",{\"1\":{\"188\":3,\"279\":1,\"282\":1}}],[\"bprovider\",{\"1\":{\"226\":2}}],[\"but\",{\"1\":{\"212\":1,\"213\":1}}],[\"bucket\",{\"1\":{\"212\":1,\"213\":1}}],[\"bucketname\",{\"1\":{\"211\":2}}],[\"build>\",{\"1\":{\"207\":2}}],[\"builder\",{\"1\":{\"134\":2,\"306\":4}}],[\"build\",{\"1\":{\"64\":2,\"65\":2,\"134\":3,\"211\":1,\"212\":1,\"213\":1,\"248\":2,\"257\":3,\"258\":1,\"282\":2}}],[\"b依赖了c和d\",{\"1\":{\"199\":1}}],[\"bgrewriteaof\",{\"1\":{\"182\":1}}],[\"bgsave\",{\"1\":{\"181\":1}}],[\"bdsize\",{\"1\":{\"174\":1}}],[\"bin\",{\"1\":{\"264\":1}}],[\"bind\",{\"1\":{\"169\":1}}],[\"bindingresult\",{\"1\":{\"242\":4}}],[\"bindingbuilder\",{\"1\":{\"169\":1}}],[\"binding\",{\"1\":{\"169\":1}}],[\"bindings\",{\"1\":{\"166\":2,\"167\":2,\"168\":2}}],[\"bilibili\",{\"1\":{\"17\":1,\"26\":1,\"49\":1,\"68\":1,\"81\":1,\"87\":1,\"89\":1,\"146\":1,\"183\":1}}],[\"border\",{\"1\":{\"302\":3}}],[\"bold\",{\"1\":{\"301\":1}}],[\"boldchunk\",{\"1\":{\"301\":2}}],[\"body\",{\"1\":{\"149\":3,\"152\":3,\"155\":3,\"159\":4,\"161\":2}}],[\"boolfilter来创建一个布尔过滤器\",{\"1\":{\"114\":1}}],[\"boolquery来创建一个布尔查询\",{\"1\":{\"114\":1}}],[\"bool\",{\"1\":{\"110\":1}}],[\"bool把各种其它查询通过must\",{\"1\":{\"110\":1}}],[\"boolean\",{\"1\":{\"25\":1,\"94\":1,\"96\":1,\"99\":1,\"133\":1,\"221\":7,\"223\":1,\"245\":1,\"298\":1}}],[\"book\",{\"1\":{\"73\":2}}],[\"bookserviceimpl\",{\"1\":{\"69\":1,\"73\":1}}],[\"bookservice\",{\"1\":{\"69\":1,\"73\":1}}],[\"bookdao1\",{\"1\":{\"69\":2}}],[\"bookdaoimpl\",{\"1\":{\"69\":2,\"72\":1,\"73\":2,\"74\":1,\"75\":1}}],[\"bookdao\",{\"1\":{\"69\":7,\"72\":1,\"73\":7,\"74\":1,\"75\":2,\"77\":1,\"79\":1,\"80\":1}}],[\"boot应用程序中使用\",{\"1\":{\"240\":1}}],[\"boot项目中\",{\"1\":{\"215\":1}}],[\"boot中的spring\",{\"1\":{\"139\":1}}],[\"bootstrap<\",{\"1\":{\"138\":1}}],[\"boot\",{\"0\":{\"66\":1,\"162\":1},\"1\":{\"63\":1,\"111\":1,\"139\":1,\"162\":1,\"207\":4,\"217\":10,\"222\":2,\"224\":3,\"233\":1,\"239\":1,\"242\":1,\"287\":1}}],[\"boot<\",{\"1\":{\"63\":1,\"111\":1,\"162\":1,\"207\":2,\"224\":1,\"233\":1,\"239\":1,\"242\":1}}],[\"b2\",{\"1\":{\"148\":1,\"149\":1}}],[\"b1\",{\"1\":{\"148\":1,\"149\":1}}],[\"ba\",{\"1\":{\"287\":5}}],[\"basictextencryptor\",{\"1\":{\"287\":1}}],[\"basicack\",{\"1\":{\"152\":1}}],[\"basicqos\",{\"1\":{\"152\":1}}],[\"basicproperties\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"basicpublish\",{\"1\":{\"148\":1,\"154\":1,\"158\":1,\"161\":1}}],[\"basicconsume\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"basic\",{\"1\":{\"148\":1}}],[\"basefont\",{\"1\":{\"298\":3,\"299\":3}}],[\"basecolor\",{\"1\":{\"298\":1,\"301\":8,\"304\":1}}],[\"basepackages\",{\"1\":{\"136\":1}}],[\"basemapper<t>\",{\"1\":{\"18\":1}}],[\"basemapper\",{\"0\":{\"18\":1}}],[\"baseresultmap\",{\"1\":{\"4\":1,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"baomidou\",{\"1\":{\"138\":1}}],[\"backimg\",{\"1\":{\"97\":1}}],[\"btree索引\",{\"1\":{\"50\":1}}],[\"b交集部分数据\",{\"1\":{\"44\":1}}],[\"b\",{\"1\":{\"42\":4,\"43\":2,\"44\":8,\"45\":8,\"148\":2,\"149\":1,\"188\":2,\"223\":6,\"225\":10,\"226\":3,\"282\":1}}],[\"b为父表\",{\"1\":{\"42\":1}}],[\"be\",{\"1\":{\"201\":1}}],[\"before=2017\",{\"1\":{\"129\":1}}],[\"beink\",{\"1\":{\"69\":2,\"72\":1,\"73\":2,\"74\":1,\"75\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"277\":1}}],[\"because\",{\"1\":{\"52\":1}}],[\"between\",{\"1\":{\"32\":1}}],[\"beandefinitionregistry\",{\"1\":{\"221\":2}}],[\"bean>\",{\"1\":{\"72\":1,\"73\":2,\"74\":1}}],[\"bean\",{\"0\":{\"70\":1},\"1\":{\"23\":1,\"136\":1,\"169\":3,\"177\":1,\"218\":2,\"223\":1,\"225\":4,\"226\":2,\"227\":4,\"246\":1,\"248\":1}}],[\"bean传递多个参数\",{\"0\":{\"10\":1},\"1\":{\"10\":1}}],[\"byte\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"by\",{\"1\":{\"30\":4,\"34\":1,\"35\":1,\"275\":1}}],[\"hn\",{\"1\":{\"275\":3}}],[\"h\",{\"1\":{\"266\":1,\"298\":1,\"299\":1}}],[\"html转pdf\",{\"1\":{\"296\":1}}],[\"htmlworker\",{\"1\":{\"296\":1}}],[\"html\",{\"1\":{\"242\":1,\"254\":1,\"255\":2}}],[\"html5\",{\"1\":{\"234\":1}}],[\"httpheaders\",{\"1\":{\"132\":1,\"133\":2}}],[\"http\",{\"1\":{\"123\":1,\"133\":5,\"141\":1,\"277\":1,\"301\":1}}],[\"httpmethod\",{\"1\":{\"120\":1}}],[\"httpstatus\",{\"1\":{\"133\":3}}],[\"httpservletresponse\",{\"1\":{\"94\":1,\"98\":1,\"99\":3,\"299\":1}}],[\"httpservletrequest\",{\"1\":{\"94\":1,\"96\":2,\"98\":1,\"99\":3,\"132\":1,\"232\":1}}],[\"https\",{\"1\":{\"1\":1,\"211\":1,\"229\":1,\"242\":1,\"271\":1,\"275\":4,\"277\":1}}],[\"hvals\",{\"1\":{\"175\":2}}],[\"hkeys\",{\"1\":{\"175\":2}}],[\"hlen\",{\"1\":{\"175\":2}}],[\"hdel\",{\"1\":{\"175\":2}}],[\"hgetall\",{\"1\":{\"175\":2}}],[\"hget\",{\"1\":{\"175\":2}}],[\"hset\",{\"1\":{\"175\":2}}],[\"hh\",{\"1\":{\"160\":3,\"163\":1,\"175\":1,\"178\":2,\"287\":2}}],[\"hhhhh\",{\"1\":{\"64\":1}}],[\"hhh\",{\"1\":{\"19\":1,\"82\":1,\"175\":1}}],[\"hmy\",{\"1\":{\"258\":2}}],[\"hmget等\",{\"1\":{\"175\":1}}],[\"hmset\",{\"1\":{\"175\":1}}],[\"hm\",{\"1\":{\"138\":5,\"139\":2}}],[\"hmall\",{\"1\":{\"136\":2,\"139\":1}}],[\"hmll\",{\"1\":{\"133\":3}}],[\"home\",{\"1\":{\"255\":1,\"266\":1}}],[\"hot\",{\"0\":{\"233\":1}}],[\"hostname====\",{\"1\":{\"132\":1}}],[\"hostname\",{\"1\":{\"132\":2,\"267\":1}}],[\"host=\",{\"1\":{\"129\":1}}],[\"host=127\",{\"1\":{\"118\":1}}],[\"host\",{\"1\":{\"118\":1,\"129\":1,\"138\":1,\"162\":2,\"212\":1,\"213\":1,\"239\":1,\"267\":1}}],[\"hou\",{\"1\":{\"79\":1}}],[\"highlight\",{\"1\":{\"110\":1}}],[\"height\",{\"1\":{\"242\":1,\"275\":1,\"277\":2}}],[\"here\",{\"1\":{\"241\":1}}],[\"helper\",{\"1\":{\"239\":12}}],[\"helloworld\",{\"1\":{\"252\":1}}],[\"hello\",{\"1\":{\"38\":3,\"65\":2,\"74\":1,\"82\":1,\"84\":1,\"85\":1,\"87\":1,\"148\":3,\"149\":2,\"154\":1,\"163\":7,\"164\":1,\"175\":3,\"239\":1,\"252\":2,\"282\":2}}],[\"hexists\",{\"1\":{\"175\":2}}],[\"headless\",{\"1\":{\"270\":1,\"276\":2}}],[\"head\",{\"1\":{\"191\":1}}],[\"head~100\",{\"1\":{\"191\":1}}],[\"head^\",{\"1\":{\"191\":1}}],[\"headers====\",{\"1\":{\"132\":1,\"133\":1}}],[\"headers\",{\"1\":{\"132\":2,\"133\":3}}],[\"header=x\",{\"1\":{\"129\":1}}],[\"header\",{\"1\":{\"129\":1,\"134\":1,\"136\":1}}],[\"health\",{\"1\":{\"107\":1}}],[\"haserrors\",{\"1\":{\"242\":1}}],[\"hash的value序列化方式采用jackson\",{\"1\":{\"177\":1}}],[\"hash的key也采用string的序列化方式\",{\"1\":{\"177\":1}}],[\"hash命令\",{\"1\":{\"175\":1}}],[\"hash\",{\"1\":{\"175\":1}}],[\"hashmap<string\",{\"1\":{\"19\":2,\"169\":1}}],[\"hashmap<>\",{\"1\":{\"9\":1,\"19\":2}}],[\"hangzhou\",{\"1\":{\"211\":1}}],[\"handledelivery\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"handlers\",{\"1\":{\"138\":1}}],[\"handlermethodargumentresolver\",{\"1\":{\"96\":1}}],[\"handler\",{\"1\":{\"94\":1,\"99\":3,\"138\":1}}],[\"handlerinterceptor\",{\"1\":{\"94\":1,\"99\":1}}],[\"hard\",{\"1\":{\"191\":1}}],[\"have\",{\"1\":{\"52\":1,\"61\":2}}],[\"havingvalue\",{\"1\":{\"223\":1}}],[\"having\",{\"1\":{\"30\":1,\"34\":1}}],[\"npm\",{\"1\":{\"273\":1,\"274\":1,\"279\":2}}],[\"nu\",{\"1\":{\"266\":1}}],[\"null\",{\"1\":{\"15\":10,\"19\":1,\"23\":1,\"24\":2,\"32\":1,\"33\":1,\"41\":1,\"42\":1,\"82\":1,\"120\":1,\"133\":3,\"138\":1,\"148\":2,\"149\":1,\"152\":1,\"154\":1,\"158\":1,\"161\":1,\"212\":2,\"213\":2,\"241\":1,\"245\":2,\"298\":1}}],[\"n2s\",{\"1\":{\"266\":1}}],[\"n1与n2为数字\",{\"1\":{\"266\":1}}],[\"n1\",{\"1\":{\"266\":1}}],[\"n<enter>\",{\"1\":{\"266\":1}}],[\"n<space>\",{\"1\":{\"266\":1}}],[\"n为数字\",{\"1\":{\"266\":2}}],[\"ng\",{\"1\":{\"266\":1}}],[\"n表示数字\",{\"1\":{\"266\":1}}],[\"nignx\",{\"1\":{\"255\":1}}],[\"n\",{\"1\":{\"245\":2,\"266\":3,\"282\":1,\"292\":3}}],[\"networkidle2\",{\"1\":{\"275\":1}}],[\"net\",{\"1\":{\"239\":1}}],[\"netflix\",{\"1\":{\"217\":1}}],[\"nexus\",{\"1\":{\"196\":1}}],[\"newoutputstream\",{\"1\":{\"306\":1}}],[\"newtransformer\",{\"1\":{\"306\":1}}],[\"newtrigger\",{\"1\":{\"64\":1,\"65\":1}}],[\"newdocumentbuilder\",{\"1\":{\"306\":2}}],[\"newinstance\",{\"1\":{\"306\":3}}],[\"news\",{\"1\":{\"275\":1}}],[\"newpage\",{\"1\":{\"275\":3,\"277\":2}}],[\"newname\",{\"1\":{\"232\":3}}],[\"newconnection\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"newjob\",{\"1\":{\"64\":1,\"65\":1}}],[\"new\",{\"1\":{\"9\":1,\"19\":5,\"23\":5,\"24\":2,\"25\":2,\"65\":1,\"69\":2,\"75\":1,\"82\":2,\"95\":2,\"113\":1,\"120\":1,\"133\":1,\"135\":1,\"136\":1,\"148\":1,\"149\":4,\"150\":1,\"152\":3,\"155\":3,\"159\":4,\"161\":2,\"169\":3,\"170\":2,\"175\":2,\"177\":4,\"178\":1,\"211\":1,\"212\":2,\"213\":1,\"218\":1,\"221\":3,\"223\":2,\"225\":4,\"226\":2,\"227\":4,\"232\":7,\"239\":8,\"241\":1,\"242\":2,\"245\":12,\"246\":2,\"248\":2,\"277\":2,\"298\":1,\"299\":2,\"300\":1,\"301\":18,\"302\":10,\"304\":1,\"306\":3}}],[\"nanotime\",{\"1\":{\"245\":1}}],[\"nacos地址\",{\"1\":{\"138\":1}}],[\"nacos配置管理\",{\"1\":{\"138\":1}}],[\"nacos\",{\"1\":{\"118\":5,\"119\":3,\"120\":3,\"127\":3,\"138\":2}}],[\"nacos安装\",{\"0\":{\"118\":1}}],[\"nacos注册中心\",{\"0\":{\"117\":1}}],[\"nativerequest\",{\"1\":{\"96\":2}}],[\"nativewebrequest\",{\"1\":{\"96\":3}}],[\"names\",{\"1\":{\"265\":1}}],[\"name>\",{\"1\":{\"196\":1}}],[\"name字段包含搜索词\",{\"1\":{\"114\":1}}],[\"name字段\",{\"1\":{\"110\":1}}],[\"name\",{\"1\":{\"14\":2,\"15\":9,\"21\":1,\"31\":3,\"38\":2,\"44\":4,\"45\":2,\"64\":1,\"65\":1,\"75\":1,\"84\":2,\"85\":2,\"87\":1,\"105\":1,\"109\":2,\"110\":7,\"111\":1,\"118\":1,\"119\":1,\"120\":1,\"127\":1,\"132\":1,\"138\":2,\"158\":2,\"159\":6,\"161\":6,\"174\":1,\"175\":14,\"177\":1,\"187\":4,\"223\":1,\"242\":8,\"245\":1,\"251\":2,\"260\":1,\"261\":2,\"262\":1,\"264\":1,\"279\":7,\"282\":5,\"287\":2}}],[\"name=sentinel\",{\"1\":{\"141\":2}}],[\"name=nacos\",{\"1\":{\"118\":1}}],[\"name=name\",{\"1\":{\"84\":1}}],[\"name=hello\",{\"1\":{\"75\":1}}],[\"name=\",{\"1\":{\"3\":4,\"72\":2,\"73\":3,\"74\":2,\"232\":1}}],[\"noh\",{\"1\":{\"266\":1}}],[\"nopaste\",{\"1\":{\"266\":1}}],[\"nonu\",{\"1\":{\"266\":1}}],[\"non\",{\"1\":{\"177\":1}}],[\"none\",{\"1\":{\"21\":1}}],[\"noargs\",{\"1\":{\"169\":1}}],[\"noargsconstructor\",{\"1\":{\"111\":1}}],[\"nodelist可以作为xpath查询的结果返回\",{\"1\":{\"306\":1}}],[\"nodelist可以是动态的\",{\"1\":{\"306\":1}}],[\"nodelist也会相应地更新\",{\"1\":{\"306\":1}}],[\"nodelist中的每个节点都是node接口的一个实例\",{\"1\":{\"306\":1}}],[\"nodelist\",{\"1\":{\"306\":3}}],[\"nodes\",{\"1\":{\"107\":1}}],[\"node\",{\"1\":{\"105\":1,\"270\":1,\"275\":5,\"278\":1,\"279\":4,\"281\":3,\"306\":6}}],[\"normal索引适用于一般的数据查询\",{\"1\":{\"50\":1}}],[\"normal索引\",{\"1\":{\"50\":1}}],[\"normal\",{\"1\":{\"50\":1,\"299\":1,\"301\":4}}],[\"no\",{\"1\":{\"42\":1,\"182\":3,\"277\":1,\"302\":3}}],[\"now\",{\"1\":{\"40\":3}}],[\"note\",{\"1\":{\"273\":1,\"275\":1}}],[\"notnull\",{\"1\":{\"242\":3}}],[\"notice\",{\"1\":{\"185\":2}}],[\"not\",{\"1\":{\"32\":1,\"41\":1,\"110\":1,\"138\":1,\"298\":1,\"299\":1}}],[\"注意sql的路径\",{\"1\":{\"265\":1}}],[\"注意这里按参数名去引用的话会报如下错误\",{\"1\":{\"7\":1}}],[\"注册与发现\",{\"1\":{\"119\":1,\"120\":1}}],[\"注入\",{\"1\":{\"73\":1}}],[\"注解和spring\",{\"1\":{\"222\":1}}],[\"注解参数\",{\"0\":{\"221\":1}}],[\"注解导入\",{\"0\":{\"220\":1}}],[\"注解开发\",{\"0\":{\"75\":1}}],[\"注解说明\",{\"0\":{\"21\":1,\"90\":1}}],[\"注解方式传参\",{\"1\":{\"8\":1}}],[\"这意味着当底层文档结构发生变化时\",{\"1\":{\"306\":1}}],[\"这意味着你可以对它们执行如获取节点名称\",{\"1\":{\"306\":1}}],[\"这两个值实际上是冲突的\",{\"1\":{\"285\":1}}],[\"这两种方式其实用哪种都一样\",{\"1\":{\"219\":1}}],[\"这样就能把\",{\"1\":{\"281\":1}}],[\"这样当你的项目启动后\",{\"1\":{\"222\":1}}],[\"这时需要使用下面的命令来手动安装\",{\"1\":{\"281\":1}}],[\"这篇文章\",{\"1\":{\"276\":1}}],[\"这只不过是一个测试而已\",{\"1\":{\"239\":3}}],[\"这里创建一个3列的表格\",{\"1\":{\"302\":1}}],[\"这里的周就没有效果了\",{\"1\":{\"285\":1}}],[\"这里使用配置文件是不合适的\",{\"1\":{\"219\":1}}],[\"这里是一些基本的redis\",{\"1\":{\"175\":1}}],[\"这里明确给我们提示\",{\"1\":{\"7\":1}}],[\"这种情况下\",{\"1\":{\"226\":1}}],[\"这种方式光引入包还不够\",{\"1\":{\"219\":1}}],[\"这种方式在许多应用中已经足够用了\",{\"1\":{\"182\":1}}],[\"这种方式可以在损失一定数据的情况下更快地恢复数据库\",{\"1\":{\"180\":1}}],[\"这种模型routingkey一般都是由一个或多个单词组成\",{\"1\":{\"160\":1}}],[\"这种传参方式的缺点是不够灵活\",{\"1\":{\"7\":1}}],[\"这是粗体文本\",{\"1\":{\"301\":1}}],[\"这是斜体文本\",{\"1\":{\"301\":1}}],[\"这是带删除线的文本\",{\"1\":{\"301\":1}}],[\"这是带下划线的文本\",{\"1\":{\"301\":1}}],[\"这是彩色的文本\",{\"1\":{\"301\":1}}],[\"这是普通的文本\",{\"1\":{\"301\":1}}],[\"这是direct发布于的\",{\"1\":{\"158\":1,\"161\":1}}],[\"这是个aop\",{\"1\":{\"77\":1}}],[\"这个包默认不会下载\",{\"1\":{\"274\":1}}],[\"这个时候我们可以尝试指定配置顺序\",{\"1\":{\"229\":1}}],[\"这个时候可能就有同学要问了\",{\"1\":{\"221\":1}}],[\"这个用法大家应该也是比较熟悉\",{\"1\":{\"218\":1}}],[\"这个\",{\"1\":{\"3\":1}}],[\"这个元素可以用来定义可重用的\",{\"1\":{\"3\":1}}],[\"警告\",{\"1\":{\"7\":1,\"210\":1}}],[\"echo\",{\"1\":{\"282\":4}}],[\"evaluateonnewdocument\",{\"1\":{\"275\":1}}],[\"evaluate\",{\"1\":{\"275\":2}}],[\"event\",{\"1\":{\"242\":2}}],[\"everysec\",{\"1\":{\"182\":2}}],[\"eureka\",{\"1\":{\"217\":1}}],[\"error\",{\"1\":{\"159\":2,\"161\":4,\"212\":3,\"213\":3,\"242\":3,\"298\":1}}],[\"embedded\",{\"1\":{\"298\":2,\"299\":1}}],[\"email\",{\"1\":{\"187\":4,\"242\":9,\"279\":1}}],[\"ems\",{\"1\":{\"148\":3,\"149\":3,\"150\":3,\"162\":3}}],[\"employee\",{\"1\":{\"7\":2,\"8\":1,\"9\":1,\"10\":7,\"11\":1,\"12\":1}}],[\"employeemapper\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"endbug\",{\"1\":{\"282\":1}}],[\"end\",{\"1\":{\"266\":1}}],[\"endpoint\",{\"1\":{\"211\":2,\"212\":1,\"213\":1}}],[\"endpoint以华东1\",{\"1\":{\"211\":1}}],[\"enc\",{\"1\":{\"287\":2}}],[\"encryptor\",{\"1\":{\"287\":2}}],[\"encrypt\",{\"1\":{\"287\":2}}],[\"encode\",{\"1\":{\"245\":1}}],[\"encoding\",{\"1\":{\"239\":1,\"298\":1}}],[\"encoding>\",{\"1\":{\"207\":2}}],[\"enctype=\",{\"1\":{\"232\":1}}],[\"enum\",{\"1\":{\"138\":1}}],[\"enableswagger2\",{\"1\":{\"248\":1}}],[\"enablescheduling\",{\"1\":{\"240\":1}}],[\"enableconfigurationproperties就行了\",{\"1\":{\"223\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"223\":2}}],[\"enableautoconfiguration=\",{\"1\":{\"222\":2}}],[\"enablea注解添加一个参数enabled\",{\"1\":{\"221\":1}}],[\"enablea\",{\"1\":{\"220\":3,\"221\":6}}],[\"enablexxx的注解来启用某个功能\",{\"1\":{\"219\":1}}],[\"enablexxx或是spring\",{\"1\":{\"219\":1}}],[\"enabled控制是否注入a\",{\"1\":{\"223\":1}}],[\"enabled来控制是否注入a\",{\"1\":{\"223\":1}}],[\"enablediscoveryclient\",{\"1\":{\"219\":1}}],[\"enabledefaulttyping\",{\"1\":{\"177\":1}}],[\"enabled\",{\"1\":{\"123\":1,\"221\":10,\"223\":3,\"232\":1}}],[\"enablefeignclients这个注解是可以配置扫描路径的\",{\"1\":{\"219\":1}}],[\"enablefeignclients\",{\"1\":{\"122\":1,\"136\":1,\"219\":1}}],[\"environment\",{\"1\":{\"258\":1}}],[\"envelope\",{\"1\":{\"149\":2,\"152\":3,\"155\":2,\"159\":4,\"161\":2}}],[\"env\",{\"1\":{\"118\":3}}],[\"entry>\",{\"1\":{\"74\":1}}],[\"entity\",{\"1\":{\"18\":3}}],[\"esc\",{\"1\":{\"266\":1}}],[\"es\",{\"1\":{\"105\":2,\"112\":2,\"113\":4}}],[\"else\",{\"1\":{\"221\":1}}],[\"element\",{\"1\":{\"302\":3,\"306\":7}}],[\"element2\",{\"1\":{\"175\":2}}],[\"element1\",{\"1\":{\"175\":7}}],[\"elementtype\",{\"1\":{\"93\":1,\"220\":1,\"221\":3}}],[\"elasticsearch<\",{\"1\":{\"111\":1}}],[\"elasticsearchbilibili\",{\"1\":{\"105\":1}}],[\"elasticsearchbilibilinew\",{\"1\":{\"105\":1}}],[\"elasticsearch\",{\"0\":{\"105\":1},\"1\":{\"105\":5,\"111\":1}}],[\"equals\",{\"1\":{\"245\":1}}],[\"eq\",{\"1\":{\"19\":1,\"24\":2,\"245\":1}}],[\"e\",{\"1\":{\"18\":4,\"25\":2,\"79\":2,\"80\":4,\"105\":2,\"129\":1,\"133\":1,\"150\":2,\"232\":5,\"239\":1,\"242\":4,\"278\":1,\"298\":2}}],[\"etc\",{\"1\":{\"258\":1}}],[\"et\",{\"1\":{\"18\":2}}],[\"ew\",{\"1\":{\"18\":9}}],[\"exec\",{\"1\":{\"261\":1}}],[\"executablepath\",{\"1\":{\"276\":1}}],[\"executing\",{\"1\":{\"241\":1}}],[\"executions>\",{\"1\":{\"207\":1}}],[\"execution>\",{\"1\":{\"207\":1}}],[\"execution\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"execute\",{\"1\":{\"52\":1,\"64\":1,\"65\":1}}],[\"exposefunction\",{\"1\":{\"275\":1}}],[\"export\",{\"1\":{\"242\":1,\"261\":3}}],[\"explicit\",{\"1\":{\"201\":1}}],[\"expire\",{\"1\":{\"175\":1,\"245\":1}}],[\"exists\",{\"1\":{\"175\":1,\"232\":1}}],[\"exist=false\",{\"1\":{\"21\":1}}],[\"extension\",{\"1\":{\"138\":1}}],[\"extends\",{\"1\":{\"18\":5,\"82\":1,\"95\":1,\"100\":1,\"298\":1}}],[\"exclusions>\",{\"1\":{\"201\":1}}],[\"exclusion>\",{\"1\":{\"201\":1}}],[\"exchange在发送消息时\",{\"1\":{\"157\":1}}],[\"exchangedeclare\",{\"1\":{\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2}}],[\"exchange\",{\"1\":{\"120\":1,\"132\":3,\"133\":5,\"134\":1,\"166\":4,\"167\":4,\"168\":4,\"169\":3,\"170\":2}}],[\"exception\",{\"1\":{\"25\":3,\"94\":1,\"96\":1,\"99\":4,\"133\":1,\"298\":1}}],[\"ex\",{\"1\":{\"99\":1}}],[\"examplebucket\",{\"1\":{\"211\":1}}],[\"example\",{\"1\":{\"4\":1,\"187\":2,\"193\":1,\"207\":1,\"275\":10}}],[\"goto\",{\"1\":{\"275\":3,\"277\":2}}],[\"goals>\",{\"1\":{\"207\":1}}],[\"goal>\",{\"1\":{\"207\":1}}],[\"gc\",{\"1\":{\"266\":1}}],[\"gg=g\",{\"1\":{\"266\":1}}],[\"gg\",{\"1\":{\"266\":1}}],[\"ggg\",{\"1\":{\"113\":1}}],[\"grep\",{\"0\":{\"252\":1},\"1\":{\"252\":3}}],[\"gradle\",{\"1\":{\"224\":1}}],[\"groupid\",{\"1\":{\"306\":4}}],[\"groupid>\",{\"1\":{\"1\":1,\"63\":1,\"69\":1,\"82\":2,\"111\":1,\"119\":1,\"120\":1,\"122\":2,\"123\":1,\"127\":3,\"138\":2,\"141\":1,\"162\":1,\"200\":1,\"201\":3,\"207\":4,\"224\":1,\"232\":1,\"233\":1,\"239\":1,\"242\":1,\"246\":1,\"248\":1,\"287\":1,\"297\":3}}],[\"group\",{\"1\":{\"30\":2,\"34\":1,\"64\":1,\"65\":1}}],[\"g\",{\"1\":{\"161\":1,\"266\":3,\"294\":1,\"295\":2}}],[\"gash\",{\"1\":{\"163\":1}}],[\"gas\",{\"1\":{\"161\":2}}],[\"gasd\",{\"1\":{\"113\":1}}],[\"gag\",{\"1\":{\"161\":1}}],[\"gatewayfilterchain\",{\"1\":{\"132\":1,\"133\":2}}],[\"gateway\",{\"1\":{\"127\":2,\"133\":5,\"217\":1}}],[\"gateway<\",{\"1\":{\"127\":1}}],[\"gte\",{\"1\":{\"110\":1}}],[\"gt\",{\"1\":{\"110\":2}}],[\"gi\",{\"1\":{\"294\":2}}],[\"gitskills\",{\"1\":{\"193\":1}}],[\"gitignore\",{\"1\":{\"192\":1}}],[\"git文件\",{\"1\":{\"189\":1}}],[\"git安装后\",{\"0\":{\"187\":1}}],[\"git\",{\"0\":{\"186\":1},\"1\":{\"187\":4,\"188\":8,\"189\":1,\"190\":3,\"191\":7,\"192\":6,\"193\":12,\"245\":2,\"279\":9}}],[\"github\",{\"0\":{\"279\":1},\"1\":{\"66\":1,\"123\":1,\"141\":1,\"193\":2,\"279\":2,\"282\":1,\"287\":1}}],[\"gis\",{\"1\":{\"50\":1}}],[\"globalfilter\",{\"0\":{\"132\":1},\"1\":{\"132\":1,\"133\":2}}],[\"globalinterceptor\",{\"1\":{\"94\":1,\"95\":1}}],[\"global\",{\"1\":{\"59\":1,\"138\":1,\"187\":2}}],[\"getnodetype\",{\"1\":{\"306\":1}}],[\"getname\",{\"1\":{\"221\":3,\"239\":1,\"242\":1}}],[\"getnativerequest\",{\"1\":{\"96\":1}}],[\"getdirectcontent\",{\"1\":{\"304\":1}}],[\"getdefaultmessage\",{\"1\":{\"242\":3}}],[\"getdefaultscheduler\",{\"1\":{\"64\":1}}],[\"getdeliverytag\",{\"1\":{\"152\":1}}],[\"getfont\",{\"1\":{\"298\":1}}],[\"getviews\",{\"1\":{\"246\":1}}],[\"getlength\",{\"1\":{\"306\":3}}],[\"getleft\",{\"1\":{\"304\":1}}],[\"getlock\",{\"1\":{\"246\":1}}],[\"getlist\",{\"1\":{\"211\":1,\"212\":1,\"213\":1}}],[\"getproperty\",{\"1\":{\"232\":1}}],[\"getpath\",{\"1\":{\"132\":1,\"133\":1}}],[\"getparameterannotation\",{\"1\":{\"96\":1}}],[\"gettextcontent\",{\"1\":{\"306\":4}}],[\"gettop\",{\"1\":{\"304\":1}}],[\"gettype\",{\"1\":{\"223\":1}}],[\"gettrigger\",{\"1\":{\"65\":1}}],[\"getelementsbytagname\",{\"1\":{\"306\":5}}],[\"getemail\",{\"1\":{\"242\":1}}],[\"geterrorcode\",{\"1\":{\"212\":1,\"213\":1}}],[\"geterrormessage\",{\"1\":{\"212\":1,\"213\":1}}],[\"getexcludepaths\",{\"1\":{\"133\":1}}],[\"getkey\",{\"1\":{\"212\":2}}],[\"getoutputstream\",{\"1\":{\"299\":1}}],[\"getobjectsummaries\",{\"1\":{\"212\":1}}],[\"getoriginalfilename\",{\"1\":{\"211\":1,\"232\":2}}],[\"getorder\",{\"1\":{\"132\":1,\"133\":1}}],[\"getright\",{\"1\":{\"304\":1}}],[\"getrange\",{\"1\":{\"175\":1}}],[\"getrealpath\",{\"1\":{\"232\":1}}],[\"getresponse\",{\"1\":{\"133\":1}}],[\"getremoteaddress\",{\"1\":{\"132\":1}}],[\"getrequestid\",{\"1\":{\"212\":1,\"213\":1}}],[\"getrequest\",{\"1\":{\"132\":1,\"133\":1}}],[\"getrecords\",{\"1\":{\"23\":1}}],[\"getqueue\",{\"1\":{\"155\":1,\"159\":2,\"161\":1}}],[\"getconnection\",{\"1\":{\"150\":1,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2}}],[\"getclass\",{\"1\":{\"113\":1}}],[\"getbottom\",{\"1\":{\"304\":1}}],[\"getb\",{\"1\":{\"223\":1}}],[\"getbytes\",{\"1\":{\"148\":1,\"154\":1,\"158\":1,\"161\":1,\"170\":1}}],[\"getbean\",{\"1\":{\"69\":1}}],[\"getuser\",{\"1\":{\"135\":1,\"136\":1}}],[\"geturi\",{\"1\":{\"120\":1,\"132\":1}}],[\"gethostid\",{\"1\":{\"212\":1,\"213\":1}}],[\"gethoststring\",{\"1\":{\"132\":1}}],[\"gethost\",{\"1\":{\"132\":1}}],[\"gethostname\",{\"1\":{\"132\":1}}],[\"getheaders\",{\"1\":{\"132\":2,\"133\":1}}],[\"getheader\",{\"1\":{\"94\":1}}],[\"getifunique\",{\"1\":{\"226\":1}}],[\"getinstance\",{\"1\":{\"299\":1,\"303\":1}}],[\"getinstances\",{\"1\":{\"120\":1}}],[\"getinputstream\",{\"1\":{\"211\":1}}],[\"getid\",{\"1\":{\"14\":1,\"24\":1}}],[\"getallerrors\",{\"1\":{\"242\":1}}],[\"getage\",{\"1\":{\"242\":1}}],[\"getaddress\",{\"1\":{\"242\":1}}],[\"getannotationattributes\",{\"1\":{\"221\":2}}],[\"getattribute\",{\"1\":{\"96\":1}}],[\"getargs\",{\"1\":{\"80\":1}}],[\"getscheme\",{\"1\":{\"232\":1}}],[\"getsubject\",{\"1\":{\"94\":1}}],[\"getserverport\",{\"1\":{\"232\":1}}],[\"getservername\",{\"1\":{\"232\":1}}],[\"getservletcontext\",{\"1\":{\"232\":1}}],[\"getservletmappings\",{\"1\":{\"82\":1}}],[\"getset\",{\"1\":{\"175\":1}}],[\"getsession\",{\"1\":{\"94\":1,\"96\":1,\"232\":1}}],[\"get\",{\"0\":{\"84\":1},\"1\":{\"65\":2,\"89\":4,\"90\":5,\"97\":2,\"107\":1,\"108\":1,\"109\":2,\"110\":5,\"113\":1,\"120\":2,\"133\":2,\"135\":1,\"175\":1,\"178\":1,\"221\":2,\"245\":1,\"275\":3,\"279\":1}}],[\"getjobdatamap\",{\"1\":{\"65\":3}}],[\"getjobdetail\",{\"1\":{\"65\":1}}],[\"getmessageproperties\",{\"1\":{\"170\":1}}],[\"getmessage\",{\"1\":{\"149\":1}}],[\"getmethod\",{\"1\":{\"132\":1}}],[\"getmsg\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"getmapping\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"90\":1,\"122\":1,\"134\":1,\"241\":1,\"299\":1}}],[\"gender\",{\"1\":{\"7\":6,\"8\":6,\"9\":5,\"10\":2,\"11\":2}}],[\"匿名顺序传参\",{\"1\":{\"7\":1}}],[\"匿名参数只能使用\",{\"1\":{\"7\":1}}],[\"匿名参数\",{\"0\":{\"7\":1}}],[\"=>\",{\"1\":{\"242\":1,\"275\":4,\"294\":1,\"295\":1}}],[\"=resids\",{\"1\":{\"239\":1}}],[\"=null\",{\"1\":{\"96\":1,\"150\":2}}],[\"==0\",{\"1\":{\"245\":1}}],[\"==\",{\"1\":{\"90\":1,\"245\":2,\"306\":1}}],[\"===\",{\"1\":{\"75\":1}}],[\"=\",{\"0\":{\"241\":1},\"1\":{\"7\":5,\"8\":3,\"9\":4,\"10\":3,\"11\":3,\"12\":1,\"15\":14,\"19\":15,\"21\":1,\"23\":5,\"24\":5,\"25\":2,\"32\":2,\"36\":1,\"38\":2,\"43\":1,\"44\":2,\"45\":2,\"48\":2,\"52\":2,\"64\":3,\"65\":5,\"69\":3,\"73\":3,\"75\":1,\"80\":3,\"82\":1,\"89\":4,\"90\":3,\"94\":1,\"96\":1,\"97\":2,\"111\":3,\"113\":2,\"120\":4,\"122\":1,\"132\":6,\"133\":11,\"134\":5,\"135\":1,\"136\":2,\"139\":1,\"148\":3,\"149\":4,\"150\":1,\"152\":3,\"154\":2,\"155\":4,\"158\":3,\"159\":6,\"161\":6,\"163\":1,\"164\":3,\"165\":4,\"166\":12,\"167\":14,\"168\":14,\"169\":4,\"170\":2,\"171\":2,\"177\":4,\"178\":1,\"211\":6,\"212\":5,\"213\":2,\"221\":5,\"223\":7,\"225\":1,\"232\":13,\"239\":6,\"240\":2,\"241\":3,\"242\":24,\"245\":12,\"246\":4,\"275\":10,\"276\":2,\"277\":15,\"298\":3,\"299\":4,\"300\":1,\"301\":10,\"302\":6,\"303\":2,\"304\":2,\"306\":23}}],[\"顺序传递参数\",{\"0\":{\"7\":1}}],[\"属性\",{\"0\":{\"5\":1}}],[\"属性或内部语句中使用属性值\",{\"1\":{\"3\":1}}],[\"jzmnmtazzf0uxnfstwttug==\",{\"1\":{\"287\":1}}],[\"jenkins\",{\"0\":{\"268\":1},\"1\":{\"268\":1}}],[\"j\",{\"1\":{\"266\":1}}],[\"jpg\",{\"1\":{\"239\":1}}],[\"juejin\",{\"1\":{\"229\":1}}],[\"jasypt\",{\"0\":{\"287\":1},\"1\":{\"287\":1}}],[\"jan\",{\"1\":{\"284\":1}}],[\"jackson2jsonredisserializer\",{\"1\":{\"177\":6}}],[\"jar\",{\"1\":{\"141\":4,\"287\":2}}],[\"javascript\",{\"1\":{\"271\":1}}],[\"java文件中出现的hello字符串的位置\",{\"1\":{\"252\":1}}],[\"java结尾的文件中包含hello字符串的位置\",{\"1\":{\"252\":1}}],[\"java结尾的文\",{\"1\":{\"251\":1}}],[\"java结尾文件\",{\"1\":{\"251\":1}}],[\"javamailsender\",{\"1\":{\"239\":7}}],[\"javax\",{\"1\":{\"239\":1}}],[\"java\",{\"0\":{\"209\":1,\"290\":1},\"1\":{\"69\":1,\"72\":1,\"82\":2,\"105\":2,\"133\":1,\"141\":2,\"177\":2,\"251\":2,\"252\":2,\"287\":1}}],[\"jdbc\",{\"1\":{\"138\":3,\"287\":2}}],[\"jdbctype=\",{\"1\":{\"4\":5}}],[\"jwttool\",{\"1\":{\"133\":4}}],[\"jwt\",{\"0\":{\"104\":1},\"1\":{\"245\":2}}],[\"jwtutil\",{\"1\":{\"94\":1,\"245\":1}}],[\"js\",{\"1\":{\"161\":1,\"275\":6,\"278\":1,\"279\":2,\"281\":1}}],[\"jsp\",{\"1\":{\"88\":3}}],[\"jsp页面\",{\"1\":{\"88\":1}}],[\"jsonautodetect\",{\"1\":{\"177\":1}}],[\"json和messagepack是常用的序列化格式\",{\"1\":{\"176\":1}}],[\"json\",{\"1\":{\"87\":1,\"176\":1}}],[\"json数据传递参数\",{\"1\":{\"87\":1}}],[\"jsonobject\",{\"1\":{\"11\":3,\"23\":3}}],[\"jobs\",{\"1\":{\"279\":1,\"282\":1}}],[\"jobdatamap1\",{\"1\":{\"65\":2}}],[\"jobdatamap\",{\"1\":{\"65\":9}}],[\"jobdetail\",{\"1\":{\"62\":4,\"64\":1,\"65\":1}}],[\"jobbuilder\",{\"1\":{\"64\":1,\"65\":1}}],[\"jobexecutionexception\",{\"1\":{\"64\":1,\"65\":1}}],[\"jobexecutioncontext\",{\"1\":{\"64\":2,\"65\":1}}],[\"job\",{\"1\":{\"62\":2,\"64\":3,\"65\":2}}],[\"join\",{\"1\":{\"3\":1,\"44\":1,\"45\":2,\"47\":1,\"120\":1,\"277\":2}}],[\"jkl\",{\"1\":{\"19\":1}}],[\"f\",{\"1\":{\"292\":2}}],[\"fullpage\",{\"1\":{\"277\":1}}],[\"fulltext索引使用特定的搜索算法来提高搜索性能\",{\"1\":{\"50\":1}}],[\"fulltext索引\",{\"1\":{\"50\":1}}],[\"function\",{\"1\":{\"277\":2}}],[\"fontname\",{\"1\":{\"298\":1}}],[\"font\",{\"1\":{\"298\":6,\"299\":4,\"300\":1,\"301\":17,\"302\":6}}],[\"fonts\",{\"1\":{\"279\":1}}],[\"folder\",{\"1\":{\"232\":4}}],[\"formatteddate\",{\"1\":{\"277\":4}}],[\"format\",{\"1\":{\"232\":4,\"275\":1}}],[\"form>\",{\"1\":{\"232\":1}}],[\"form\",{\"1\":{\"232\":1}}],[\"for\",{\"1\":{\"61\":1,\"133\":1,\"163\":1,\"212\":2,\"213\":1,\"239\":1,\"242\":1,\"302\":1,\"306\":1}}],[\"foreign\",{\"1\":{\"41\":1,\"42\":1}}],[\"foreach\",{\"1\":{\"19\":3}}],[\"foreach>\",{\"1\":{\"12\":1}}],[\"fetch\",{\"1\":{\"188\":1,\"279\":1}}],[\"feign\",{\"1\":{\"123\":1}}],[\"feignclient\",{\"1\":{\"122\":1}}],[\"featured\",{\"1\":{\"15\":1}}],[\"fristgroup\",{\"1\":{\"64\":1,\"65\":1}}],[\"from\",{\"1\":{\"3\":2,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"15\":3,\"19\":2,\"29\":2,\"30\":1,\"31\":3,\"33\":4,\"34\":1,\"35\":1,\"36\":3,\"44\":2,\"45\":2,\"47\":1,\"48\":4,\"52\":2,\"61\":2,\"110\":1,\"239\":6}}],[\"float\",{\"1\":{\"298\":1,\"302\":1}}],[\"floor\",{\"1\":{\"39\":1}}],[\"flushall\",{\"1\":{\"174\":1,\"181\":1}}],[\"flushdb\",{\"1\":{\"174\":1}}],[\"flush\",{\"1\":{\"52\":1}}],[\"fk\",{\"1\":{\"42\":1}}],[\"fatcatsat\",{\"1\":{\"295\":1}}],[\"fat\",{\"1\":{\"294\":1}}],[\"faq\",{\"0\":{\"270\":1}}],[\"factories将aautoconfiguration\",{\"1\":{\"222\":1}}],[\"factories中的配置的类\",{\"1\":{\"229\":1}}],[\"factories中的配置\",{\"1\":{\"222\":1,\"229\":1}}],[\"factories中的配置类都会取名xxxautoconfiguration\",{\"1\":{\"222\":1}}],[\"factories中将aconfiguration\",{\"1\":{\"222\":1}}],[\"factories文件\",{\"1\":{\"222\":1}}],[\"factories选择一种就可以啦\",{\"1\":{\"222\":1}}],[\"factories来导入配置\",{\"1\":{\"222\":1}}],[\"factories导入\",{\"0\":{\"222\":1}}],[\"factories就只要引入包就可以直接生效了\",{\"1\":{\"219\":1}}],[\"factories\",{\"1\":{\"219\":1}}],[\"factory\",{\"1\":{\"177\":2,\"306\":8}}],[\"failover\",{\"1\":{\"185\":1}}],[\"fanout2\",{\"1\":{\"166\":1}}],[\"fanout1\",{\"1\":{\"166\":1}}],[\"fanoutconsumer\",{\"1\":{\"166\":1}}],[\"fanout\",{\"1\":{\"154\":1,\"155\":1,\"163\":4,\"166\":4}}],[\"false\",{\"1\":{\"21\":1,\"99\":1,\"110\":1,\"111\":1,\"133\":1,\"134\":1,\"148\":3,\"149\":3,\"152\":7,\"169\":1,\"221\":1,\"225\":1,\"232\":1,\"276\":1,\"277\":1}}],[\"fastjson\",{\"1\":{\"11\":1}}],[\"fixedrate\",{\"1\":{\"240\":1}}],[\"finally\",{\"1\":{\"212\":1,\"213\":1,\"246\":1}}],[\"final\",{\"1\":{\"120\":1,\"122\":1,\"133\":3,\"135\":1,\"169\":3,\"177\":1,\"245\":2,\"298\":6}}],[\"find\",{\"0\":{\"251\":1},\"1\":{\"251\":3,\"264\":1}}],[\"findactivebloglike\",{\"1\":{\"15\":3}}],[\"findbylist\",{\"1\":{\"12\":5}}],[\"findbyjsonobject\",{\"1\":{\"11\":5}}],[\"findbybeans\",{\"1\":{\"10\":2}}],[\"findbymapparams\",{\"1\":{\"9\":2}}],[\"findbyparams2\",{\"1\":{\"8\":2}}],[\"findbyparams\",{\"1\":{\"7\":2}}],[\"filereader\",{\"1\":{\"242\":2}}],[\"filename=hello\",{\"1\":{\"299\":1}}],[\"filename\",{\"1\":{\"232\":2,\"251\":1,\"252\":1}}],[\"filepath\",{\"1\":{\"232\":4}}],[\"fileuploadcontroller\",{\"1\":{\"232\":1}}],[\"filesystemresource\",{\"1\":{\"239\":2}}],[\"files\",{\"1\":{\"190\":1,\"242\":1,\"306\":1}}],[\"file\",{\"1\":{\"118\":1,\"138\":1,\"182\":1,\"185\":2,\"190\":1,\"211\":3,\"232\":13,\"239\":6,\"242\":4,\"306\":1}}],[\"file=\",{\"1\":{\"60\":1}}],[\"filters\",{\"1\":{\"133\":1}}],[\"filter\",{\"0\":{\"104\":1},\"1\":{\"130\":1,\"132\":2,\"133\":5,\"134\":1}}],[\"first\",{\"1\":{\"64\":3,\"65\":3,\"188\":2}}],[\"firstjob\",{\"1\":{\"64\":2,\"65\":2}}],[\"fieldtype\",{\"1\":{\"111\":1}}],[\"fields\",{\"1\":{\"110\":1}}],[\"field\",{\"1\":{\"105\":1,\"111\":3,\"175\":5}}],[\"field3\",{\"1\":{\"3\":1}}],[\"field2\",{\"1\":{\"3\":1}}],[\"field1\",{\"1\":{\"3\":1}}],[\"phrase\",{\"1\":{\"302\":3}}],[\"phrase不拆分\",{\"1\":{\"110\":1}}],[\"pdfcontentbyte\",{\"1\":{\"304\":1}}],[\"pdfpcell\",{\"1\":{\"302\":7}}],[\"pdfptable\",{\"1\":{\"302\":2}}],[\"pdfwriter\",{\"1\":{\"299\":2}}],[\"pdf\",{\"1\":{\"271\":1,\"275\":4,\"299\":3}}],[\"ps\",{\"1\":{\"261\":1}}],[\"p2\",{\"1\":{\"239\":1}}],[\"p1\",{\"1\":{\"239\":1}}],[\"png`\",{\"1\":{\"277\":2}}],[\"png\",{\"1\":{\"239\":1,\"275\":2,\"279\":1}}],[\"pictures\",{\"1\":{\"239\":2}}],[\"plugins>\",{\"1\":{\"207\":2}}],[\"plugins<\",{\"1\":{\"207\":2}}],[\"plugin>\",{\"1\":{\"207\":3}}],[\"plugin<\",{\"1\":{\"207\":4}}],[\"plus\",{\"0\":{\"16\":1,\"17\":1},\"1\":{\"17\":2,\"138\":1,\"217\":1}}],[\"percentage\",{\"1\":{\"182\":1}}],[\"persistent\",{\"1\":{\"148\":1}}],[\"p端\",{\"1\":{\"147\":1}}],[\"pwd\",{\"1\":{\"189\":1}}],[\"pw\",{\"1\":{\"138\":1}}],[\"p\",{\"1\":{\"105\":2,\"118\":3,\"242\":1,\"261\":1,\"262\":1,\"264\":4,\"265\":2,\"266\":1,\"279\":1,\"292\":2}}],[\"polyfill\",{\"1\":{\"234\":1}}],[\"ports\",{\"1\":{\"258\":1}}],[\"port=8090\",{\"1\":{\"141\":2}}],[\"port=3306\",{\"1\":{\"118\":1}}],[\"port\",{\"1\":{\"127\":1,\"138\":1,\"162\":1,\"184\":2,\"185\":1,\"239\":1}}],[\"pointcut\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"posthandle\",{\"1\":{\"99\":2}}],[\"post乱码处理\",{\"0\":{\"86\":1}}],[\"post\",{\"0\":{\"85\":1},\"1\":{\"89\":1,\"109\":3,\"229\":1,\"232\":1}}],[\"postconstruct\",{\"1\":{\"75\":1,\"241\":1}}],[\"postmapping\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"97\":1,\"232\":2,\"242\":1}}],[\"pom\",{\"0\":{\"204\":1},\"1\":{\"69\":1,\"82\":1,\"239\":1,\"306\":3}}],[\"po\",{\"1\":{\"10\":1}}],[\"pojo\",{\"1\":{\"4\":1,\"242\":1}}],[\"puppeteer没有自动安装chromium的解决办法\",{\"0\":{\"281\":1},\"1\":{\"281\":1}}],[\"puppeteer\",{\"0\":{\"269\":1,\"274\":1},\"1\":{\"270\":2,\"271\":2,\"273\":4,\"274\":7,\"275\":13,\"276\":7,\"277\":6,\"279\":1,\"281\":3}}],[\"push\",{\"1\":{\"188\":1,\"193\":2,\"279\":2,\"282\":2}}],[\"publisher\",{\"1\":{\"133\":1}}],[\"publicmapper\",{\"1\":{\"245\":1}}],[\"public\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"18\":1,\"23\":3,\"25\":2,\"64\":2,\"65\":2,\"69\":2,\"70\":2,\"73\":2,\"77\":2,\"79\":3,\"80\":2,\"82\":4,\"84\":1,\"85\":1,\"87\":1,\"88\":2,\"89\":2,\"93\":1,\"94\":2,\"95\":1,\"96\":3,\"97\":1,\"99\":4,\"100\":1,\"111\":1,\"122\":3,\"132\":3,\"133\":3,\"134\":1,\"135\":4,\"136\":5,\"139\":1,\"149\":1,\"150\":3,\"152\":3,\"154\":2,\"155\":3,\"158\":2,\"159\":6,\"161\":5,\"163\":1,\"164\":2,\"165\":3,\"166\":3,\"167\":3,\"168\":3,\"169\":7,\"170\":2,\"171\":2,\"177\":3,\"211\":1,\"212\":1,\"213\":1,\"216\":2,\"218\":2,\"220\":3,\"221\":10,\"223\":4,\"225\":6,\"226\":4,\"227\":8,\"231\":2,\"232\":3,\"239\":4,\"240\":2,\"241\":5,\"242\":11,\"245\":2,\"246\":2,\"248\":2,\"298\":2,\"299\":1,\"306\":2}}],[\"pull\",{\"1\":{\"105\":1,\"260\":1,\"279\":1}}],[\"putobject\",{\"1\":{\"210\":1,\"211\":1}}],[\"put\",{\"1\":{\"9\":2,\"19\":3,\"23\":2,\"65\":2,\"89\":4,\"108\":1,\"109\":1,\"110\":1,\"169\":1}}],[\"paste\",{\"1\":{\"266\":1}}],[\"pass\",{\"1\":{\"185\":2,\"245\":2}}],[\"password=hh\",{\"1\":{\"287\":1}}],[\"password=123456\",{\"1\":{\"118\":1}}],[\"passwordencoder\",{\"1\":{\"245\":1}}],[\"password\",{\"1\":{\"3\":1,\"19\":3,\"138\":1,\"162\":1,\"185\":1,\"239\":1,\"245\":4,\"258\":1,\"287\":2}}],[\"pattern\",{\"1\":{\"231\":1,\"242\":2}}],[\"pathselectors\",{\"1\":{\"248\":1}}],[\"paths\",{\"1\":{\"248\":1,\"282\":1}}],[\"pathpattern\",{\"1\":{\"133\":2}}],[\"path\",{\"1\":{\"129\":1,\"132\":2,\"133\":2,\"231\":1,\"275\":2,\"276\":1,\"277\":8}}],[\"path====\",{\"1\":{\"132\":1}}],[\"path=\",{\"1\":{\"127\":2,\"129\":1}}],[\"pathvariable\",{\"1\":{\"89\":2,\"90\":1}}],[\"package\",{\"1\":{\"133\":1,\"139\":1,\"197\":1}}],[\"paragraph\",{\"0\":{\"300\":1},\"1\":{\"300\":6,\"301\":13,\"302\":3}}],[\"param=characterencoding=utf8\",{\"1\":{\"118\":1}}],[\"parameterizedtypereference<list<itemdto>>\",{\"1\":{\"120\":1}}],[\"parameter\",{\"1\":{\"93\":1}}],[\"parametertype=\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"params\",{\"1\":{\"9\":5,\"11\":3}}],[\"param\",{\"1\":{\"8\":2,\"18\":15,\"100\":1,\"135\":1}}],[\"param注解\",{\"0\":{\"8\":1}}],[\"param2\",{\"1\":{\"7\":2}}],[\"param1\",{\"1\":{\"7\":2}}],[\"parse\",{\"1\":{\"306\":2}}],[\"parserconfigurationexception\",{\"1\":{\"306\":2}}],[\"parsetoken\",{\"1\":{\"133\":1}}],[\"parsejwt\",{\"1\":{\"94\":1}}],[\"paginationinnerinterceptor\",{\"1\":{\"23\":1}}],[\"page<>\",{\"1\":{\"23\":1}}],[\"page\",{\"1\":{\"18\":2,\"23\":2,\"275\":14,\"277\":7}}],[\"prune\",{\"1\":{\"255\":1,\"261\":1}}],[\"previewimg\",{\"1\":{\"242\":2}}],[\"previewimage\",{\"1\":{\"242\":2}}],[\"pretty=oneline\",{\"1\":{\"191\":1}}],[\"predicates\",{\"1\":{\"127\":2}}],[\"predestroy\",{\"1\":{\"75\":1}}],[\"prefer\",{\"1\":{\"118\":1,\"201\":1}}],[\"prefix\",{\"1\":{\"3\":2,\"139\":1,\"223\":1}}],[\"prehandle\",{\"1\":{\"94\":1,\"99\":2}}],[\"project\",{\"1\":{\"282\":1}}],[\"proxybeanmethods\",{\"1\":{\"225\":1}}],[\"processor<\",{\"1\":{\"224\":1}}],[\"processor\",{\"1\":{\"224\":1}}],[\"proceed\",{\"1\":{\"79\":1,\"80\":2}}],[\"proceedingjoinpoint\",{\"1\":{\"79\":1,\"80\":1}}],[\"provided\",{\"1\":{\"202\":1}}],[\"productapi\",{\"1\":{\"248\":1}}],[\"producterone\",{\"1\":{\"129\":1}}],[\"producer\",{\"1\":{\"154\":1,\"158\":1,\"161\":1}}],[\"properties中配置一些参数\",{\"1\":{\"223\":1}}],[\"properties复制代码org\",{\"1\":{\"222\":2}}],[\"properties\",{\"1\":{\"110\":1,\"139\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1,\"223\":2,\"239\":1,\"242\":1}}],[\"propertyaccessor\",{\"1\":{\"177\":1}}],[\"propertysource\",{\"1\":{\"75\":1}}],[\"property>\",{\"1\":{\"74\":2}}],[\"property=\",{\"1\":{\"4\":5}}],[\"protected\",{\"1\":{\"82\":3,\"95\":2,\"100\":1}}],[\"profile\",{\"1\":{\"61\":1,\"139\":3}}],[\"profiles\",{\"0\":{\"61\":1},\"1\":{\"61\":1,\"138\":1}}],[\"profiling=1\",{\"1\":{\"61\":1}}],[\"profiling\",{\"1\":{\"61\":8}}],[\"price字段必须在1000到5000之间的过滤条件\",{\"1\":{\"114\":1}}],[\"primary\",{\"1\":{\"41\":1}}],[\"printstacktrace\",{\"1\":{\"25\":1,\"150\":1,\"232\":1}}],[\"println\",{\"1\":{\"14\":1,\"19\":6,\"24\":2,\"64\":1,\"65\":2,\"70\":2,\"77\":1,\"79\":3,\"80\":1,\"82\":1,\"84\":1,\"85\":1,\"87\":1,\"89\":2,\"99\":3,\"132\":5,\"133\":2,\"134\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"171\":1,\"178\":1,\"212\":6,\"213\":5,\"232\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"245\":2,\"287\":3,\"306\":6}}],[\"private\",{\"1\":{\"25\":1,\"72\":2,\"73\":3,\"75\":2,\"77\":1,\"79\":1,\"80\":1,\"100\":1,\"111\":4,\"120\":1,\"122\":1,\"133\":4,\"135\":1,\"139\":1,\"150\":1,\"163\":1,\"177\":2,\"178\":1,\"223\":3,\"239\":1,\"241\":3,\"242\":4,\"248\":1}}],[\"csdn博客\",{\"1\":{\"296\":2}}],[\"csdn博客安装后再看这\",{\"1\":{\"281\":1}}],[\"ci\",{\"1\":{\"282\":1}}],[\"ctrl\",{\"1\":{\"266\":2}}],[\"ctx\",{\"1\":{\"82\":3}}],[\"cp\",{\"1\":{\"261\":2}}],[\"cc\",{\"1\":{\"239\":1}}],[\"cell\",{\"1\":{\"302\":14}}],[\"center\",{\"1\":{\"300\":1,\"302\":3}}],[\"central\",{\"1\":{\"196\":1}}],[\"ceil\",{\"1\":{\"39\":1}}],[\"c\",{\"1\":{\"193\":1,\"239\":3}}],[\"cd\",{\"1\":{\"189\":1,\"193\":1,\"278\":1}}],[\"c端\",{\"1\":{\"147\":1}}],[\"cn\",{\"1\":{\"211\":1,\"229\":1,\"277\":1}}],[\"cnblogs\",{\"1\":{\"146\":1,\"242\":1,\"296\":1}}],[\"cnf\",{\"1\":{\"60\":1,\"258\":2}}],[\"cj\",{\"1\":{\"138\":1,\"287\":1}}],[\"customexchange\",{\"1\":{\"169\":2}}],[\"custom\",{\"1\":{\"118\":2}}],[\"currentdate\",{\"1\":{\"277\":4}}],[\"curtime\",{\"1\":{\"40\":1}}],[\"curdate\",{\"1\":{\"40\":1}}],[\"curd\",{\"0\":{\"19\":1}}],[\"cr\",{\"1\":{\"292\":1}}],[\"cron表达式是一个具有时间含义的字符串\",{\"1\":{\"283\":1}}],[\"cron适用于周期性执行\",{\"1\":{\"283\":1}}],[\"crontab\",{\"1\":{\"278\":1}}],[\"cron\",{\"0\":{\"241\":1,\"283\":1},\"1\":{\"241\":1,\"279\":1,\"282\":1}}],[\"cross\",{\"1\":{\"3\":1}}],[\"createfont\",{\"1\":{\"298\":1,\"299\":1}}],[\"createjwt\",{\"1\":{\"245\":1}}],[\"createmimemessage\",{\"1\":{\"239\":2}}],[\"createchannel\",{\"1\":{\"148\":1,\"149\":1,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2}}],[\"create\",{\"1\":{\"112\":1,\"246\":1,\"255\":1,\"261\":1,\"265\":1,\"279\":1}}],[\"createrootapplicationcontext\",{\"1\":{\"82\":1}}],[\"createservletapplicationcontext\",{\"1\":{\"82\":1}}],[\"chunk\",{\"0\":{\"301\":1},\"1\":{\"301\":18}}],[\"chrome\",{\"1\":{\"270\":1,\"276\":3}}],[\"chromium\",{\"1\":{\"270\":1,\"274\":1,\"276\":8,\"281\":5}}],[\"checkout\",{\"1\":{\"188\":2,\"191\":1,\"192\":1,\"279\":3,\"282\":1}}],[\"chenkout\",{\"1\":{\"188\":1}}],[\"change=\",{\"1\":{\"242\":1}}],[\"channel\",{\"1\":{\"148\":5,\"149\":6,\"150\":4,\"152\":7,\"154\":5,\"155\":7,\"158\":5,\"159\":16,\"161\":14}}],[\"chain\",{\"1\":{\"132\":2,\"133\":3,\"134\":1}}],[\"chat\",{\"1\":{\"52\":2}}],[\"choose>\",{\"1\":{\"15\":1}}],[\"choose\",{\"1\":{\"15\":1}}],[\"capturescreenshot\",{\"1\":{\"277\":4}}],[\"caught\",{\"1\":{\"212\":1,\"213\":1}}],[\"cached\",{\"1\":{\"192\":1}}],[\"cartproperties\",{\"1\":{\"139\":1}}],[\"cart\",{\"1\":{\"138\":1,\"139\":3}}],[\"cartservice\",{\"1\":{\"134\":1}}],[\"cat\",{\"0\":{\"107\":1},\"1\":{\"107\":4,\"191\":1,\"294\":1}}],[\"catch\",{\"1\":{\"25\":1,\"133\":1,\"150\":1,\"212\":1,\"213\":1,\"232\":2,\"298\":1}}],[\"canvas\",{\"1\":{\"304\":6}}],[\"cancel\",{\"1\":{\"241\":1}}],[\"can\",{\"1\":{\"52\":1}}],[\"cascade\",{\"1\":{\"42\":1}}],[\"clean\",{\"1\":{\"197\":1}}],[\"clip\",{\"1\":{\"277\":1}}],[\"cli\",{\"1\":{\"173\":1,\"184\":1}}],[\"clientheight\",{\"1\":{\"275\":1}}],[\"clientwidth\",{\"1\":{\"275\":1}}],[\"client\",{\"1\":{\"136\":1,\"217\":1}}],[\"clone\",{\"1\":{\"193\":1}}],[\"closechannelandconnection\",{\"1\":{\"150\":1}}],[\"close\",{\"1\":{\"148\":2,\"149\":2,\"150\":2,\"154\":2,\"158\":2,\"161\":2,\"275\":3,\"277\":2,\"299\":2}}],[\"close=\",{\"1\":{\"12\":1}}],[\"cloud<\",{\"1\":{\"119\":1,\"120\":1,\"122\":2,\"127\":3,\"138\":2,\"141\":1}}],[\"cloud\",{\"0\":{\"115\":1},\"1\":{\"119\":2,\"120\":2,\"122\":2,\"127\":4,\"133\":2,\"138\":3,\"141\":2,\"217\":4}}],[\"classpath\",{\"1\":{\"231\":2}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"69\":1}}],[\"class配置上去\",{\"1\":{\"222\":1}}],[\"class了\",{\"1\":{\"221\":1}}],[\"class的全限定名\",{\"1\":{\"221\":1}}],[\"class就可以了\",{\"1\":{\"220\":1}}],[\"class=\",{\"1\":{\"69\":2,\"72\":1,\"73\":2,\"74\":1}}],[\"class\",{\"1\":{\"23\":1,\"25\":3,\"64\":3,\"65\":3,\"69\":1,\"77\":1,\"79\":1,\"80\":1,\"82\":4,\"94\":1,\"95\":1,\"96\":2,\"99\":1,\"100\":1,\"111\":1,\"112\":2,\"113\":1,\"122\":2,\"132\":1,\"133\":1,\"135\":1,\"136\":4,\"138\":1,\"139\":1,\"150\":1,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"177\":3,\"216\":2,\"218\":1,\"220\":3,\"221\":17,\"223\":4,\"225\":2,\"226\":2,\"227\":5,\"231\":1,\"232\":1,\"239\":2,\"240\":1,\"241\":2,\"242\":2,\"246\":1,\"248\":2,\"287\":1,\"298\":1}}],[\"cm\",{\"1\":{\"18\":2}}],[\"coupons\",{\"1\":{\"279\":1}}],[\"count\",{\"1\":{\"23\":1,\"30\":1,\"34\":1}}],[\"copy\",{\"1\":{\"267\":1}}],[\"code\",{\"1\":{\"212\":1,\"213\":1,\"241\":1,\"279\":1}}],[\"core<\",{\"1\":{\"201\":1}}],[\"core\",{\"0\":{\"274\":1},\"1\":{\"133\":2,\"138\":1,\"274\":5}}],[\"cookie=ityouknow\",{\"1\":{\"129\":1}}],[\"cookie\",{\"1\":{\"129\":1}}],[\"conditionalonwebapplication\",{\"1\":{\"228\":1}}],[\"conditionalonmissingclass\",{\"1\":{\"228\":1}}],[\"conditionalonmissingbean中的值\",{\"1\":{\"227\":1}}],[\"conditionalonmissingbean的缺省值是方法的返回类型\",{\"1\":{\"227\":1}}],[\"conditionalonmissingbean的判断逻辑是\",{\"1\":{\"227\":2}}],[\"conditionalonmissingbean\",{\"1\":{\"227\":4}}],[\"conditionalonmissingbean了\",{\"1\":{\"227\":1}}],[\"conditionalonclass\",{\"1\":{\"228\":1}}],[\"conditionalonbean\",{\"1\":{\"228\":1}}],[\"conditionalonproperty来根据a\",{\"1\":{\"223\":1}}],[\"conditionalonproperty\",{\"1\":{\"223\":1,\"228\":1}}],[\"convertandsend\",{\"1\":{\"163\":5,\"170\":2}}],[\"con\",{\"1\":{\"150\":3}}],[\"connection\",{\"1\":{\"148\":4,\"149\":4,\"150\":2,\"152\":3,\"154\":4,\"155\":3,\"158\":4,\"159\":6,\"161\":7}}],[\"connectionfactory\",{\"1\":{\"148\":9,\"149\":9,\"150\":10}}],[\"connecttimeout=1000\",{\"1\":{\"118\":1}}],[\"console\",{\"1\":{\"275\":1}}],[\"const\",{\"1\":{\"242\":2,\"275\":10,\"276\":2,\"277\":15}}],[\"constraint\",{\"1\":{\"42\":1}}],[\"consumertwo\",{\"1\":{\"159\":1}}],[\"consumertag\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"consumerone\",{\"1\":{\"155\":1,\"159\":1,\"161\":1}}],[\"consumer2\",{\"1\":{\"152\":1}}],[\"consumer\",{\"0\":{\"152\":1},\"1\":{\"147\":1}}],[\"conf文件\",{\"1\":{\"254\":1}}],[\"conf\",{\"1\":{\"184\":2,\"185\":1,\"254\":1,\"258\":2}}],[\"conflicting\",{\"1\":{\"52\":1}}],[\"configs\",{\"1\":{\"138\":1}}],[\"config<\",{\"1\":{\"138\":1}}],[\"config类\",{\"1\":{\"82\":1}}],[\"configuration的proxybeanmethods默认是true\",{\"1\":{\"225\":1}}],[\"configuration的proxybeanmethods可以指定该配置中的方法是否进行代理\",{\"1\":{\"225\":1}}],[\"configuration的配置类\",{\"1\":{\"218\":1}}],[\"configuration+\",{\"1\":{\"218\":1}}],[\"configuration>\",{\"1\":{\"207\":3}}],[\"configurationproperties+\",{\"1\":{\"223\":1}}],[\"configurationproperties\",{\"1\":{\"139\":2,\"223\":1}}],[\"configuration\",{\"1\":{\"23\":1,\"75\":1,\"82\":1,\"95\":1,\"100\":1,\"138\":1,\"169\":1,\"177\":1,\"185\":1,\"218\":1,\"223\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":4,\"231\":1,\"240\":1,\"246\":1,\"248\":1}}],[\"config\",{\"1\":{\"23\":1,\"133\":1,\"136\":2,\"138\":3,\"139\":1,\"169\":1,\"187\":4,\"246\":5,\"279\":2}}],[\"concat\",{\"1\":{\"38\":2}}],[\"contributing\",{\"0\":{\"270\":1}}],[\"control\",{\"1\":{\"69\":1}}],[\"controller\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"75\":1,\"82\":2,\"90\":2,\"242\":1}}],[\"contaienr\",{\"1\":{\"261\":1}}],[\"container2\",{\"1\":{\"261\":1}}],[\"container1\",{\"1\":{\"261\":1}}],[\"container\",{\"0\":{\"261\":1},\"1\":{\"260\":2,\"261\":19}}],[\"contextloads\",{\"1\":{\"113\":1,\"178\":1}}],[\"context<\",{\"1\":{\"69\":1}}],[\"context\",{\"1\":{\"65\":3,\"139\":1}}],[\"content\",{\"1\":{\"4\":2,\"196\":1,\"239\":6,\"245\":2,\"282\":1,\"299\":1}}],[\"coloredchunk\",{\"1\":{\"301\":2}}],[\"colorservice\",{\"1\":{\"97\":1}}],[\"color\",{\"1\":{\"95\":1,\"97\":3,\"298\":3}}],[\"collutils\",{\"1\":{\"120\":1}}],[\"collection<long>\",{\"1\":{\"122\":1}}],[\"collection<\",{\"1\":{\"18\":2}}],[\"collection=\",{\"1\":{\"12\":1}}],[\"coll\",{\"1\":{\"18\":2}}],[\"columnwidths\",{\"1\":{\"302\":2}}],[\"columns\",{\"1\":{\"105\":1}}],[\"columnmap\",{\"1\":{\"18\":2}}],[\"column=\",{\"1\":{\"4\":5}}],[\"commands\",{\"1\":{\"282\":1}}],[\"command\",{\"1\":{\"258\":1,\"261\":1}}],[\"commit\",{\"1\":{\"190\":2,\"191\":1,\"192\":2,\"260\":1,\"279\":1,\"282\":1}}],[\"compose\",{\"1\":{\"258\":3}}],[\"component已经不太合适了\",{\"1\":{\"218\":1}}],[\"component就不太合适了\",{\"1\":{\"216\":1}}],[\"component往spring容器中注入实例\",{\"1\":{\"216\":1}}],[\"componentscan\",{\"1\":{\"75\":1,\"82\":1}}],[\"component\",{\"1\":{\"75\":1,\"77\":1,\"99\":1,\"132\":1,\"133\":2,\"139\":2,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"170\":1,\"171\":1,\"216\":1}}],[\"compiler\",{\"1\":{\"207\":2}}],[\"compile\",{\"1\":{\"197\":1,\"202\":1}}],[\"com\",{\"1\":{\"1\":1,\"4\":1,\"10\":1,\"11\":1,\"59\":1,\"69\":2,\"72\":1,\"73\":2,\"74\":1,\"75\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"105\":1,\"129\":1,\"133\":3,\"136\":2,\"138\":2,\"139\":1,\"146\":1,\"187\":2,\"193\":3,\"196\":1,\"211\":1,\"222\":2,\"239\":8,\"242\":1,\"271\":1,\"275\":4,\"277\":1,\"279\":1,\"287\":1,\"296\":1,\"301\":1}}],[\"tmp\",{\"1\":{\"258\":2}}],[\"t参数是指定镜像的名称\",{\"1\":{\"257\":1}}],[\"txt\",{\"1\":{\"190\":1,\"191\":3,\"192\":4}}],[\"tl\",{\"1\":{\"135\":4}}],[\"type来配置a的某个字段\",{\"1\":{\"223\":1}}],[\"type\",{\"1\":{\"105\":1,\"110\":3,\"111\":1,\"138\":2,\"166\":2,\"167\":2,\"168\":2,\"169\":1,\"174\":1,\"220\":1,\"221\":3,\"223\":3,\"242\":1}}],[\"type=single\",{\"1\":{\"105\":1}}],[\"type=\",{\"1\":{\"4\":1,\"21\":2,\"232\":2,\"242\":1}}],[\"ttl\",{\"1\":{\"175\":1}}],[\"ttt\",{\"1\":{\"88\":1}}],[\"ttrigger\",{\"1\":{\"65\":1}}],[\"tools\",{\"0\":{\"312\":1}}],[\"tool<\",{\"1\":{\"297\":1}}],[\"toisostring\",{\"1\":{\"277\":2}}],[\"to\",{\"1\":{\"169\":1,\"212\":1,\"213\":1,\"239\":6,\"276\":1,\"282\":2}}],[\"topath\",{\"1\":{\"306\":1}}],[\"topage\",{\"1\":{\"88\":1}}],[\"top\",{\"1\":{\"261\":1}}],[\"topic2\",{\"1\":{\"168\":1}}],[\"topic1\",{\"1\":{\"168\":1}}],[\"topicconsumer\",{\"1\":{\"168\":1}}],[\"topic\",{\"1\":{\"161\":7,\"163\":3,\"168\":4}}],[\"topic类型的exchange与direct\",{\"1\":{\"160\":1}}],[\"totryeverything\",{\"1\":{\"133\":1,\"239\":5}}],[\"tom\",{\"1\":{\"109\":2,\"110\":3,\"175\":1}}],[\"token\",{\"1\":{\"94\":2,\"133\":3}}],[\"toattpage\",{\"1\":{\"88\":1}}],[\"toapage\",{\"1\":{\"88\":1}}],[\"tostring\",{\"1\":{\"19\":1,\"80\":1,\"133\":1,\"134\":1,\"232\":1,\"245\":1}}],[\"temp\",{\"1\":{\"232\":1}}],[\"template>\",{\"1\":{\"242\":1}}],[\"template\",{\"1\":{\"177\":9}}],[\"tell\",{\"1\":{\"110\":1}}],[\"text\",{\"1\":{\"61\":1,\"110\":2}}],[\"testdelayqueueconfig\",{\"1\":{\"169\":1}}],[\"testdelete\",{\"1\":{\"19\":1}}],[\"testselect\",{\"1\":{\"19\":1}}],[\"testupdata\",{\"1\":{\"19\":1}}],[\"testinsert\",{\"1\":{\"19\":1}}],[\"test\",{\"0\":{\"163\":1},\"1\":{\"19\":4,\"112\":1,\"113\":1,\"148\":1,\"149\":1,\"163\":6,\"178\":1,\"190\":2,\"191\":3,\"192\":4,\"197\":1,\"202\":1,\"239\":7,\"255\":1,\"282\":1,\"287\":1,\"306\":4}}],[\"test=\",{\"1\":{\"15\":7}}],[\"test1\",{\"1\":{\"14\":3}}],[\"though\",{\"1\":{\"201\":1}}],[\"threshold\",{\"1\":{\"232\":1}}],[\"thread\",{\"1\":{\"152\":1}}],[\"threadlocal<>\",{\"1\":{\"135\":1}}],[\"threadlocal<long>\",{\"1\":{\"135\":1}}],[\"throwable\",{\"1\":{\"79\":1,\"80\":1}}],[\"throws\",{\"1\":{\"64\":1,\"65\":1,\"79\":1,\"80\":1,\"94\":1,\"96\":1,\"99\":3,\"148\":1,\"149\":2,\"150\":1,\"152\":2,\"154\":1,\"155\":2,\"158\":1,\"159\":4,\"161\":3,\"211\":1,\"239\":4,\"299\":1,\"306\":2}}],[\"throw\",{\"1\":{\"25\":2,\"232\":1}}],[\"this\",{\"1\":{\"73\":3,\"213\":1,\"242\":5}}],[\"the\",{\"1\":{\"52\":1,\"201\":1,\"275\":3,\"282\":1,\"294\":7,\"295\":2}}],[\"t\",{\"1\":{\"18\":5,\"52\":1,\"193\":1,\"212\":1,\"257\":3,\"292\":2}}],[\"troubleshooting\",{\"0\":{\"270\":1}}],[\"trace\",{\"1\":{\"271\":1}}],[\"transform\",{\"1\":{\"306\":1}}],[\"transformer\",{\"1\":{\"306\":3}}],[\"transformerfactory\",{\"1\":{\"306\":4}}],[\"transferto\",{\"1\":{\"232\":2}}],[\"transport\",{\"1\":{\"141\":1}}],[\"transactional\",{\"1\":{\"25\":3}}],[\"tradeapplication\",{\"1\":{\"136\":2}}],[\"trade\",{\"1\":{\"136\":1}}],[\"triggerbuilder\",{\"1\":{\"64\":1,\"65\":1}}],[\"trigger\",{\"1\":{\"62\":3,\"64\":2,\"65\":2}}],[\"trim\",{\"1\":{\"15\":1,\"38\":1,\"245\":1}}],[\"try\",{\"1\":{\"25\":1,\"133\":1,\"150\":1,\"212\":1,\"213\":1,\"232\":2,\"246\":1,\"271\":1,\"298\":1}}],[\"true\",{\"1\":{\"14\":1,\"72\":1,\"73\":1,\"94\":1,\"99\":2,\"110\":2,\"123\":1,\"133\":1,\"141\":1,\"149\":1,\"155\":1,\"159\":2,\"161\":1,\"169\":2,\"221\":3,\"223\":3,\"232\":1,\"239\":4,\"241\":1,\"245\":1,\"276\":1,\"306\":4}}],[\"timeline\",{\"1\":{\"271\":1}}],[\"timeunit\",{\"1\":{\"245\":1}}],[\"time<\",{\"1\":{\"200\":2}}],[\"timeout\",{\"1\":{\"185\":1}}],[\"timeoutexception\",{\"1\":{\"148\":1,\"149\":1,\"150\":2,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2}}],[\"time=3\",{\"1\":{\"60\":1}}],[\"time的默认值为\",{\"1\":{\"60\":1}}],[\"time值的sql\",{\"1\":{\"60\":1}}],[\"timestamp\",{\"1\":{\"4\":1}}],[\"time\",{\"1\":{\"4\":2,\"60\":1}}],[\"title\",{\"1\":{\"4\":2,\"15\":9,\"245\":3,\"248\":1}}],[\"tar导入成镜像\",{\"1\":{\"261\":1}}],[\"tar中加载出来\",{\"1\":{\"260\":1}}],[\"tar中\",{\"1\":{\"260\":1,\"261\":1}}],[\"tar\",{\"1\":{\"260\":2,\"261\":2}}],[\"target>\",{\"1\":{\"207\":2}}],[\"target\",{\"1\":{\"3\":2,\"93\":1,\"220\":1,\"221\":3,\"242\":1}}],[\"tag\",{\"1\":{\"260\":1,\"261\":2}}],[\"taskscheduler\",{\"1\":{\"241\":3}}],[\"task\",{\"1\":{\"241\":2}}],[\"tables\",{\"1\":{\"52\":2,\"54\":2}}],[\"tablefield\",{\"1\":{\"21\":4}}],[\"tableid\",{\"1\":{\"21\":3}}],[\"tablename\",{\"1\":{\"21\":1}}],[\"table\",{\"0\":{\"302\":1},\"1\":{\"3\":3,\"42\":1,\"105\":1,\"302\":12}}],[\"t2\",{\"1\":{\"3\":2}}],[\"t1\",{\"1\":{\"3\":2}}],[\"v3\",{\"1\":{\"282\":1}}],[\"v7\",{\"1\":{\"275\":1,\"282\":1}}],[\"v6\",{\"1\":{\"275\":1}}],[\"vs\",{\"1\":{\"274\":1}}],[\"volumes\",{\"1\":{\"258\":1}}],[\"volume\",{\"1\":{\"254\":1,\"255\":5}}],[\"void\",{\"1\":{\"19\":4,\"64\":1,\"65\":1,\"69\":1,\"70\":2,\"73\":1,\"77\":3,\"79\":4,\"80\":2,\"89\":2,\"95\":2,\"99\":2,\"100\":1,\"112\":1,\"113\":1,\"122\":1,\"135\":2,\"136\":2,\"148\":1,\"149\":2,\"150\":1,\"152\":2,\"154\":1,\"155\":2,\"158\":1,\"159\":4,\"161\":3,\"163\":5,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"170\":1,\"171\":1,\"178\":1,\"220\":1,\"221\":3,\"231\":1,\"239\":6,\"241\":3,\"242\":4,\"287\":1,\"299\":1,\"306\":2}}],[\"version\",{\"1\":{\"201\":2,\"207\":2,\"248\":1,\"258\":1,\"279\":1,\"306\":4}}],[\"version>\",{\"1\":{\"1\":1,\"69\":1,\"82\":2,\"111\":1,\"200\":1,\"201\":2,\"207\":4,\"232\":1,\"246\":1,\"248\":1,\"287\":1,\"297\":3}}],[\"verbose\",{\"1\":{\"185\":1}}],[\"v\",{\"1\":{\"175\":1,\"193\":2,\"245\":3,\"255\":2,\"266\":1,\"292\":1}}],[\"viewport\",{\"1\":{\"275\":1}}],[\"views\",{\"1\":{\"14\":2,\"24\":2}}],[\"vim\",{\"0\":{\"266\":1}}],[\"visibility\",{\"1\":{\"177\":1}}],[\"virtual\",{\"1\":{\"162\":1}}],[\"v2\",{\"1\":{\"118\":1,\"279\":2}}],[\"validated\",{\"1\":{\"242\":1}}],[\"validationmessages\",{\"1\":{\"242\":1}}],[\"validation<\",{\"1\":{\"242\":1}}],[\"valueoperations\",{\"1\":{\"245\":1}}],[\"valueof\",{\"1\":{\"133\":1,\"136\":1,\"240\":1,\"246\":1}}],[\"value确实能拿到配置文件中的值\",{\"1\":{\"223\":1}}],[\"value不就好了\",{\"1\":{\"223\":1}}],[\"value序列化方式采用jackson\",{\"1\":{\"177\":1}}],[\"value的长度\",{\"1\":{\"175\":1}}],[\"value后面增加world\",{\"1\":{\"175\":1}}],[\"value>\",{\"1\":{\"74\":2}}],[\"values\",{\"1\":{\"14\":1,\"27\":4}}],[\"value\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"75\":1,\"89\":2,\"90\":1,\"134\":1,\"164\":1,\"166\":4,\"167\":4,\"168\":4,\"175\":1,\"242\":2,\"245\":3}}],[\"value=\",{\"1\":{\"3\":4,\"21\":1,\"72\":2,\"73\":2,\"74\":1,\"232\":2}}],[\"var\",{\"1\":{\"60\":1,\"258\":1}}],[\"variables\",{\"1\":{\"60\":1}}],[\"varchar\",{\"1\":{\"4\":3}}],[\"片段可以在其它语句中使用\",{\"1\":{\"3\":1}}],[\"a4\",{\"1\":{\"275\":1}}],[\"await\",{\"1\":{\"275\":16,\"276\":2,\"277\":11}}],[\"a的另一个扩展类\",{\"1\":{\"227\":1}}],[\"a1\",{\"1\":{\"227\":5}}],[\"a需要依赖b实例\",{\"1\":{\"226\":1}}],[\"aautoconfiguration\",{\"1\":{\"222\":1}}],[\"aaa\",{\"1\":{\"161\":1,\"264\":3,\"265\":5}}],[\"aimportbeandefinitionregistrar\",{\"1\":{\"221\":3}}],[\"aimportselector\",{\"1\":{\"221\":3}}],[\"a实例就能被注入\",{\"1\":{\"218\":1}}],[\"akgit\",{\"1\":{\"193\":2}}],[\"ah\",{\"1\":{\"189\":1}}],[\"aof持久化策略的配置\",{\"1\":{\"182\":1}}],[\"aof\",{\"0\":{\"182\":1},\"1\":{\"182\":6}}],[\"aop\",{\"0\":{\"76\":1},\"1\":{\"77\":1,\"79\":1}}],[\"abc\",{\"1\":{\"160\":1}}],[\"abstractdispatcherservletinitializer\",{\"1\":{\"82\":1}}],[\"adress\",{\"1\":{\"242\":1}}],[\"administrator\",{\"1\":{\"239\":2}}],[\"admin\",{\"1\":{\"160\":5}}],[\"addcell\",{\"1\":{\"302\":6}}],[\"addattachment\",{\"1\":{\"239\":1}}],[\"addargumentresolvers\",{\"1\":{\"95\":1}}],[\"addresourcelocations\",{\"1\":{\"231\":1}}],[\"addresourcehandler\",{\"1\":{\"231\":1}}],[\"addresourcehandlers\",{\"1\":{\"231\":1}}],[\"address\",{\"1\":{\"111\":1,\"127\":1,\"242\":7}}],[\"addr\",{\"1\":{\"119\":1,\"120\":1,\"127\":1,\"138\":1}}],[\"addpathpatterns\",{\"1\":{\"95\":1,\"100\":1}}],[\"addinline\",{\"1\":{\"239\":1}}],[\"addinterceptor\",{\"1\":{\"95\":1,\"100\":1}}],[\"addinterceptors\",{\"1\":{\"95\":2,\"100\":1}}],[\"addinnerinterceptor\",{\"1\":{\"23\":1}}],[\"add\",{\"1\":{\"40\":3,\"42\":1,\"95\":1,\"190\":2,\"192\":1,\"193\":1,\"212\":1,\"242\":1,\"273\":1,\"274\":1,\"279\":2,\"282\":3,\"300\":1,\"301\":10,\"302\":1,\"303\":1}}],[\"adduser\",{\"1\":{\"25\":1,\"242\":2}}],[\"amqp<\",{\"1\":{\"162\":1}}],[\"amqp\",{\"1\":{\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1}}],[\"america\",{\"1\":{\"129\":1}}],[\"amount\",{\"1\":{\"110\":1}}],[\"annotationmetadata\",{\"1\":{\"221\":3}}],[\"annotationconfigwebapplicationcontext\",{\"1\":{\"82\":2}}],[\"an\",{\"1\":{\"212\":2,\"213\":2}}],[\"any\",{\"1\":{\"177\":1,\"248\":1}}],[\"antpathmatcher\",{\"1\":{\"133\":5}}],[\"and\",{\"1\":{\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"15\":10,\"19\":1,\"32\":2,\"275\":1,\"282\":2}}],[\"after\",{\"1\":{\"185\":1}}],[\"afterpropertiesset\",{\"1\":{\"177\":1}}],[\"after=2018\",{\"1\":{\"129\":1}}],[\"aftercompletion\",{\"1\":{\"99\":2}}],[\"afterthrowing\",{\"1\":{\"79\":1}}],[\"afterreturning\",{\"1\":{\"77\":1,\"79\":2}}],[\"affected\",{\"1\":{\"52\":3,\"61\":1}}],[\"at\",{\"1\":{\"295\":1}}],[\"attachment\",{\"1\":{\"299\":1}}],[\"attach\",{\"1\":{\"261\":1}}],[\"attributes\",{\"1\":{\"221\":4}}],[\"atx\",{\"1\":{\"69\":2}}],[\"atguigu\",{\"1\":{\"60\":1}}],[\"aproperties\",{\"1\":{\"223\":3}}],[\"appspot\",{\"1\":{\"271\":1}}],[\"appendfsync\",{\"1\":{\"182\":3}}],[\"appendfilename\",{\"1\":{\"182\":2}}],[\"appendonly\",{\"1\":{\"182\":2}}],[\"append\",{\"1\":{\"175\":1,\"182\":1}}],[\"apply\",{\"1\":{\"136\":1}}],[\"application\",{\"1\":{\"119\":1,\"120\":1,\"127\":1,\"138\":1,\"239\":1,\"299\":1}}],[\"applicationcontext\",{\"1\":{\"69\":3}}],[\"apt\",{\"1\":{\"173\":2,\"279\":1}}],[\"apache\",{\"1\":{\"133\":1,\"201\":1,\"207\":2}}],[\"apis\",{\"1\":{\"248\":1}}],[\"apiinfobuilder\",{\"1\":{\"248\":1}}],[\"apiinfo\",{\"1\":{\"248\":4}}],[\"api\",{\"0\":{\"270\":1},\"1\":{\"136\":1,\"270\":1,\"273\":1,\"275\":1,\"276\":1}}],[\"apifox\",{\"1\":{\"105\":1}}],[\"api<\",{\"1\":{\"82\":1,\"232\":1}}],[\"apioperation\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"248\":1}}],[\"a\",{\"1\":{\"52\":1,\"72\":2,\"73\":5,\"190\":1,\"216\":2,\"218\":3,\"221\":2,\"223\":7,\"225\":6,\"226\":6,\"227\":8,\"261\":1,\"282\":3,\"292\":1}}],[\"always\",{\"1\":{\"182\":1}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"287\":1}}],[\"allerrors\",{\"1\":{\"242\":2}}],[\"allargsconstructor\",{\"1\":{\"111\":1}}],[\"all查询所有\",{\"1\":{\"110\":1}}],[\"all\",{\"1\":{\"48\":1,\"110\":1,\"177\":1}}],[\"alter\",{\"1\":{\"42\":1}}],[\"align\",{\"1\":{\"300\":1,\"302\":3}}],[\"aliyuncs\",{\"1\":{\"211\":1}}],[\"aliyun\",{\"0\":{\"208\":1,\"209\":1},\"1\":{\"196\":1}}],[\"alibaba\",{\"1\":{\"11\":1,\"119\":2,\"120\":2,\"127\":2,\"138\":2,\"141\":2}}],[\"alias\",{\"1\":{\"3\":5}}],[\"ag\",{\"1\":{\"258\":1}}],[\"agsdga\",{\"1\":{\"161\":1}}],[\"agv\",{\"1\":{\"33\":1}}],[\"age\",{\"1\":{\"7\":6,\"8\":6,\"9\":5,\"10\":2,\"11\":2,\"12\":3,\"33\":3,\"34\":1,\"35\":1,\"48\":2,\"111\":1,\"175\":4,\"242\":9}}],[\"async\",{\"1\":{\"275\":4,\"277\":2}}],[\"asg\",{\"1\":{\"161\":1}}],[\"asian库中的中文字体\",{\"1\":{\"299\":1}}],[\"asianfontprovider\",{\"1\":{\"298\":1}}],[\"asian<\",{\"1\":{\"297\":1}}],[\"asia\",{\"1\":{\"129\":1}}],[\"aspect\",{\"1\":{\"77\":1}}],[\"asc\",{\"1\":{\"35\":2}}],[\"as\",{\"1\":{\"31\":1,\"275\":1}}],[\"aslist\",{\"1\":{\"19\":2}}],[\"avg\",{\"1\":{\"30\":1,\"33\":1,\"34\":1}}],[\"autoconfigureorder\",{\"1\":{\"229\":1}}],[\"autoconfigureafter\",{\"1\":{\"229\":1}}],[\"autoconfigurebefore\",{\"1\":{\"229\":1}}],[\"autoconfigure\",{\"1\":{\"222\":2}}],[\"autoreconnect=true\",{\"1\":{\"118\":1}}],[\"autowired\",{\"1\":{\"25\":1,\"75\":1,\"100\":1,\"163\":1,\"178\":1,\"239\":2,\"241\":1,\"246\":1,\"287\":1}}],[\"auto\",{\"1\":{\"21\":1,\"138\":1,\"182\":2}}],[\"auth\",{\"1\":{\"185\":2}}],[\"authglobalfilter\",{\"1\":{\"133\":1}}],[\"authproperties\",{\"1\":{\"133\":4}}],[\"authorization\",{\"1\":{\"94\":1,\"133\":5}}],[\"author\",{\"1\":{\"15\":12,\"133\":1,\"298\":1}}],[\"auther\",{\"1\":{\"4\":2}}],[\"aconfiguration\",{\"1\":{\"218\":1,\"220\":1,\"221\":4,\"222\":2,\"223\":1,\"225\":2,\"226\":2,\"227\":4}}],[\"accept=\",{\"1\":{\"242\":1}}],[\"accesskeysecert\",{\"1\":{\"212\":1,\"213\":1}}],[\"accesskeysecret\",{\"1\":{\"211\":2}}],[\"accesskeyid\",{\"1\":{\"211\":2,\"212\":1,\"213\":1}}],[\"accesskey进行操作\",{\"1\":{\"210\":1}}],[\"account\",{\"1\":{\"19\":3,\"94\":1,\"95\":1,\"96\":1,\"97\":3,\"245\":11}}],[\"actions\",{\"1\":{\"279\":2,\"282\":2}}],[\"action=\",{\"1\":{\"232\":1}}],[\"action\",{\"0\":{\"279\":1,\"282\":1},\"1\":{\"42\":1,\"210\":1,\"279\":2}}],[\"active\",{\"1\":{\"15\":2,\"138\":1,\"139\":3}}],[\"arki+pg956fgx9vyp09p9a==\",{\"1\":{\"287\":1}}],[\"around\",{\"1\":{\"79\":1,\"80\":1}}],[\"arraylist<>\",{\"1\":{\"212\":1,\"242\":1}}],[\"arraylist<string>\",{\"1\":{\"212\":1,\"242\":1}}],[\"array>\",{\"1\":{\"74\":1}}],[\"arrays\",{\"1\":{\"19\":2,\"80\":1}}],[\"array传递多个参数\",{\"1\":{\"12\":1}}],[\"array\",{\"0\":{\"12\":1}}],[\"argumentresolvers\",{\"1\":{\"95\":2}}],[\"arg\",{\"1\":{\"73\":3}}],[\"args\",{\"1\":{\"69\":1,\"80\":4,\"122\":2,\"136\":2,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2,\"169\":3,\"220\":2,\"221\":2,\"277\":1,\"306\":2}}],[\"arg0\",{\"1\":{\"7\":1}}],[\"arg1\",{\"1\":{\"7\":1}}],[\"articlemapper\",{\"1\":{\"24\":2,\"246\":2}}],[\"article\",{\"1\":{\"4\":1,\"24\":1,\"246\":6}}],[\"artifactid\",{\"1\":{\"306\":4}}],[\"artifactid>\",{\"1\":{\"1\":1,\"63\":1,\"69\":1,\"82\":2,\"111\":1,\"119\":1,\"120\":1,\"122\":2,\"123\":1,\"127\":3,\"138\":2,\"141\":1,\"162\":1,\"200\":1,\"201\":3,\"207\":4,\"224\":1,\"232\":1,\"233\":1,\"239\":1,\"242\":1,\"246\":1,\"248\":1,\"287\":1,\"297\":3}}],[\"artifact\",{\"1\":{\"1\":1}}],[\"$s\",{\"1\":{\"266\":2}}],[\"$user\",{\"1\":{\"258\":1}}],[\"$refs\",{\"1\":{\"242\":1}}],[\"$\",{\"1\":{\"3\":5,\"75\":1,\"138\":5,\"189\":4,\"190\":3,\"191\":8,\"192\":4,\"193\":11,\"266\":1}}],[\"ucs2\",{\"1\":{\"298\":1,\"299\":1}}],[\"ulisesbocchio<\",{\"1\":{\"287\":1}}],[\"ui\",{\"1\":{\"271\":1}}],[\"u用户名\",{\"1\":{\"264\":2,\"265\":1}}],[\"ubuntu\",{\"1\":{\"258\":1,\"260\":6,\"261\":2,\"279\":1,\"282\":1}}],[\"using\",{\"1\":{\"282\":1}}],[\"usr\",{\"1\":{\"255\":2,\"264\":1}}],[\"uses\",{\"1\":{\"279\":2,\"282\":2}}],[\"usesingleserver\",{\"1\":{\"246\":1}}],[\"usessl=false\",{\"1\":{\"118\":1,\"287\":1}}],[\"useunicode=true\",{\"1\":{\"118\":1,\"287\":1}}],[\"use\",{\"1\":{\"61\":1,\"265\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"14\":1}}],[\"usermod\",{\"1\":{\"258\":1}}],[\"usermapper\",{\"1\":{\"19\":9,\"25\":3}}],[\"userid\",{\"1\":{\"133\":4,\"134\":1,\"135\":3}}],[\"userinfoimpl\",{\"1\":{\"95\":1,\"96\":1}}],[\"userinfo\",{\"1\":{\"93\":1,\"96\":1,\"97\":1,\"134\":5,\"136\":1}}],[\"user=root\",{\"1\":{\"118\":1}}],[\"usercontext\",{\"1\":{\"135\":1,\"136\":1}}],[\"usercontroller\",{\"1\":{\"82\":1,\"242\":1}}],[\"usercontroler类\",{\"1\":{\"82\":1}}],[\"usercolumns\",{\"1\":{\"3\":3}}],[\"userlist\",{\"1\":{\"23\":1}}],[\"userservice\",{\"1\":{\"25\":1}}],[\"userserviceimpl\",{\"1\":{\"25\":1}}],[\"users\",{\"1\":{\"19\":6,\"239\":2}}],[\"user\",{\"1\":{\"19\":17,\"25\":3,\"87\":2,\"95\":1,\"97\":1,\"100\":2,\"127\":3,\"134\":2,\"136\":1,\"163\":1,\"168\":3,\"175\":8,\"187\":4,\"232\":1,\"242\":12,\"267\":1,\"279\":2}}],[\"username\",{\"1\":{\"3\":1,\"87\":2,\"138\":1,\"162\":1,\"239\":1,\"287\":1}}],[\"uuid\",{\"1\":{\"232\":1,\"245\":1}}],[\"u\",{\"1\":{\"193\":1,\"266\":1}}],[\"utf\",{\"1\":{\"239\":1,\"265\":1}}],[\"utf8mb4\",{\"1\":{\"26\":1}}],[\"util\",{\"1\":{\"133\":3}}],[\"uroot\",{\"1\":{\"264\":2,\"265\":1}}],[\"url>\",{\"1\":{\"196\":1}}],[\"url\",{\"1\":{\"132\":1,\"138\":1,\"242\":1,\"287\":1,\"303\":2,\"306\":4}}],[\"uri\",{\"1\":{\"120\":3,\"127\":2}}],[\"uris\",{\"1\":{\"111\":1}}],[\"underline\",{\"1\":{\"301\":1}}],[\"underlinechunk\",{\"1\":{\"301\":2}}],[\"un\",{\"1\":{\"138\":1}}],[\"unauthorized\",{\"1\":{\"133\":1}}],[\"unlock\",{\"1\":{\"52\":1,\"54\":1,\"246\":1}}],[\"unigb\",{\"1\":{\"298\":1,\"299\":1}}],[\"union\",{\"1\":{\"48\":2}}],[\"unique索引适用于需要唯一性约束的列\",{\"1\":{\"50\":1}}],[\"unique索引\",{\"1\":{\"50\":1}}],[\"unique\",{\"1\":{\"41\":1}}],[\"uploadfile\",{\"1\":{\"232\":7}}],[\"upload\",{\"1\":{\"232\":3}}],[\"uploadobject\",{\"1\":{\"211\":1}}],[\"upper\",{\"1\":{\"38\":3}}],[\"up\",{\"1\":{\"14\":2,\"24\":4,\"258\":1}}],[\"updatewrapper<article>\",{\"1\":{\"24\":1}}],[\"updatewrapper<>\",{\"1\":{\"19\":1,\"24\":1}}],[\"updatewrapper<user>\",{\"1\":{\"19\":1}}],[\"updatewrapper\",{\"1\":{\"18\":1,\"24\":3}}],[\"updatebyid\",{\"1\":{\"18\":1,\"246\":1}}],[\"update\",{\"0\":{\"28\":1},\"1\":{\"2\":1,\"18\":1,\"19\":1,\"24\":2,\"28\":1,\"38\":1,\"109\":1,\"138\":1,\"173\":1,\"192\":1,\"261\":1}}],[\"i<srcpath\",{\"1\":{\"239\":1}}],[\"i=0\",{\"1\":{\"239\":1}}],[\"i++\",{\"1\":{\"163\":1,\"239\":1,\"240\":1,\"302\":1,\"306\":1}}],[\"i\",{\"1\":{\"163\":2,\"239\":2,\"240\":1,\"246\":1,\"260\":1,\"266\":1,\"273\":1,\"274\":1,\"294\":2,\"302\":5,\"306\":3}}],[\"ioexception\",{\"1\":{\"148\":1,\"149\":2,\"150\":2,\"152\":2,\"154\":1,\"155\":2,\"158\":1,\"159\":4,\"161\":3,\"211\":1,\"232\":2,\"299\":1,\"306\":2}}],[\"ioc容器来控制对象的创建\",{\"1\":{\"69\":1}}],[\"ioc\",{\"0\":{\"69\":1},\"1\":{\"69\":1}}],[\"ip地址和端口\",{\"1\":{\"185\":1}}],[\"ip====\",{\"1\":{\"132\":1}}],[\"ipv6地址\",{\"1\":{\"132\":1}}],[\"ipv4\",{\"1\":{\"132\":1}}],[\"ip\",{\"1\":{\"129\":1,\"132\":2,\"184\":2}}],[\"ipage<record>\",{\"1\":{\"23\":1}}],[\"ipage<map<string\",{\"1\":{\"18\":1}}],[\"ipage<t>>\",{\"1\":{\"18\":1}}],[\"italic\",{\"1\":{\"301\":1}}],[\"italicchunk\",{\"1\":{\"301\":2}}],[\"itextpdf\",{\"1\":{\"297\":1,\"301\":1}}],[\"itextpdf<\",{\"1\":{\"297\":2}}],[\"itext5\",{\"1\":{\"296\":1}}],[\"itext7使用\",{\"1\":{\"296\":1}}],[\"itemclient\",{\"1\":{\"122\":4}}],[\"itemapplication\",{\"1\":{\"122\":2}}],[\"itemids\",{\"1\":{\"120\":1,\"122\":1}}],[\"items\",{\"1\":{\"120\":1,\"122\":2,\"127\":1}}],[\"item\",{\"1\":{\"119\":1,\"120\":2,\"122\":1,\"127\":2,\"160\":1,\"306\":6}}],[\"item=\",{\"1\":{\"12\":1}}],[\"itd\",{\"1\":{\"261\":1,\"262\":1}}],[\"itcast目录及其子目录下查找\",{\"1\":{\"251\":1}}],[\"itcast\",{\"1\":{\"251\":1}}],[\"it\",{\"1\":{\"201\":1,\"212\":1,\"213\":1,\"261\":1}}],[\"ityouknow\",{\"1\":{\"129\":1}}],[\"image\",{\"0\":{\"303\":1},\"1\":{\"242\":2,\"258\":1,\"260\":2,\"261\":1,\"279\":6,\"303\":6}}],[\"images\",{\"0\":{\"260\":1},\"1\":{\"232\":1,\"260\":1,\"279\":1}}],[\"import会丢弃历史记录和元数据信息\",{\"1\":{\"261\":1}}],[\"import与docker\",{\"1\":{\"261\":1}}],[\"importingclassmetadata\",{\"1\":{\"221\":1}}],[\"importbeandefinitionregistrar可以直接注册beandefinition\",{\"1\":{\"221\":1}}],[\"importbeandefinitionregistrar\",{\"1\":{\"221\":2}}],[\"importselector\",{\"1\":{\"221\":1}}],[\"import注解导入aconfiguration\",{\"1\":{\"220\":1}}],[\"import\",{\"1\":{\"133\":15,\"139\":3,\"220\":1,\"221\":7,\"261\":1}}],[\"impl\",{\"1\":{\"69\":2,\"72\":2,\"73\":2,\"74\":1}}],[\"implements\",{\"1\":{\"25\":1,\"64\":1,\"65\":1,\"70\":1,\"94\":1,\"96\":1,\"99\":1,\"100\":1,\"132\":1,\"133\":1,\"177\":1,\"221\":2,\"231\":1,\"241\":1}}],[\"img\",{\"1\":{\"86\":1,\"242\":1}}],[\"isdirectory\",{\"1\":{\"232\":1}}],[\"isexclude\",{\"1\":{\"133\":2}}],[\"isempty\",{\"1\":{\"19\":1,\"133\":1,\"245\":1}}],[\"is\",{\"1\":{\"32\":1,\"276\":1}}],[\"if>\",{\"1\":{\"15\":5}}],[\"if\",{\"1\":{\"15\":1,\"133\":3,\"150\":2,\"212\":1,\"213\":1,\"221\":2,\"232\":2,\"239\":1,\"241\":1,\"242\":2,\"245\":7,\"306\":1}}],[\"id>\",{\"1\":{\"196\":1,\"207\":1}}],[\"ids\",{\"1\":{\"120\":2,\"122\":2}}],[\"ids=\",{\"1\":{\"120\":1}}],[\"idtype\",{\"1\":{\"21\":2}}],[\"idlist\",{\"1\":{\"18\":2}}],[\"id\",{\"1\":{\"3\":1,\"4\":2,\"14\":3,\"18\":2,\"19\":1,\"23\":1,\"24\":1,\"35\":1,\"38\":1,\"42\":5,\"44\":4,\"45\":4,\"52\":2,\"61\":2,\"85\":2,\"87\":2,\"89\":6,\"90\":2,\"111\":2,\"127\":2,\"129\":1,\"138\":1,\"177\":1,\"191\":1,\"212\":2,\"213\":2,\"246\":3,\"267\":1}}],[\"id=5\",{\"1\":{\"90\":1}}],[\"id=\",{\"1\":{\"3\":5,\"4\":1,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"14\":1,\"15\":3,\"69\":2,\"72\":1,\"73\":2,\"74\":1}}],[\"input\",{\"1\":{\"242\":1}}],[\"inf目录下创建spring\",{\"1\":{\"222\":1}}],[\"inf目录\",{\"1\":{\"222\":1}}],[\"info\",{\"1\":{\"134\":2,\"136\":1,\"159\":2,\"161\":3,\"167\":1}}],[\"incrby\",{\"1\":{\"175\":1}}],[\"incr\",{\"1\":{\"175\":1}}],[\"include>\",{\"1\":{\"3\":3}}],[\"include\",{\"1\":{\"3\":4}}],[\"inspect\",{\"1\":{\"255\":1}}],[\"install\",{\"1\":{\"173\":1,\"197\":1,\"279\":4,\"281\":1}}],[\"instancs\",{\"1\":{\"120\":2}}],[\"instances\",{\"1\":{\"120\":3}}],[\"insert>\",{\"1\":{\"14\":1}}],[\"insert\",{\"0\":{\"27\":1},\"1\":{\"2\":1,\"14\":3,\"18\":1,\"19\":1,\"25\":1,\"27\":4,\"160\":1,\"245\":2}}],[\"indices\",{\"1\":{\"105\":1,\"107\":1}}],[\"indexops\",{\"1\":{\"112\":3}}],[\"indexname\",{\"1\":{\"111\":1}}],[\"index\",{\"1\":{\"88\":3,\"110\":3,\"111\":1,\"306\":1}}],[\"initialdelay\",{\"1\":{\"240\":1}}],[\"initializingbean\",{\"1\":{\"70\":1}}],[\"init\",{\"1\":{\"70\":4,\"189\":1}}],[\"inversion\",{\"1\":{\"69\":1}}],[\"inner\",{\"1\":{\"44\":1}}],[\"int\",{\"1\":{\"18\":7,\"19\":2,\"72\":1,\"73\":2,\"132\":1,\"133\":1,\"163\":1,\"239\":1,\"246\":1,\"298\":1,\"302\":1,\"306\":1}}],[\"interval\",{\"1\":{\"40\":2}}],[\"interceptorregistry\",{\"1\":{\"95\":1,\"100\":1}}],[\"interceptor\",{\"0\":{\"104\":1},\"1\":{\"23\":3,\"95\":1}}],[\"interface\",{\"1\":{\"18\":1,\"93\":1,\"122\":1,\"220\":1,\"221\":4}}],[\"integer\",{\"1\":{\"4\":1,\"18\":1,\"23\":1,\"111\":1,\"139\":1,\"170\":1,\"177\":1,\"242\":3,\"246\":1}}],[\"into\",{\"1\":{\"14\":1,\"27\":4}}],[\"in\",{\"1\":{\"12\":1,\"19\":1,\"32\":1,\"61\":2}}],[\"确定下来\",{\"1\":{\"3\":1}}],[\"smtp\",{\"1\":{\"239\":2}}],[\"smembers\",{\"1\":{\"175\":2}}],[\"swap\",{\"0\":{\"233\":1}}],[\"swaggerconfig\",{\"1\":{\"248\":1}}],[\"swagger2<\",{\"1\":{\"248\":1}}],[\"swagger\",{\"0\":{\"247\":1},\"1\":{\"138\":1,\"248\":1}}],[\"sdf\",{\"1\":{\"232\":2}}],[\"sdiff\",{\"1\":{\"175\":2}}],[\"s为图片的名字\",{\"1\":{\"213\":1}}],[\"s为子表\",{\"1\":{\"42\":1}}],[\"src\",{\"1\":{\"242\":1,\"282\":1}}],[\"srcpath\",{\"1\":{\"239\":3}}],[\"srandmember\",{\"1\":{\"175\":2}}],[\"srem\",{\"1\":{\"175\":2}}],[\"saxexception\",{\"1\":{\"306\":2}}],[\"sat\",{\"1\":{\"284\":1,\"294\":1}}],[\"sandbox\",{\"1\":{\"277\":2}}],[\"sampleapplication\",{\"1\":{\"220\":2,\"221\":2}}],[\"same\",{\"1\":{\"201\":1}}],[\"sadd\",{\"1\":{\"175\":2}}],[\"savestate\",{\"1\":{\"304\":1}}],[\"save\",{\"1\":{\"69\":2,\"77\":1,\"79\":1,\"80\":1,\"82\":2,\"84\":3,\"85\":2,\"87\":2,\"90\":1,\"113\":2,\"181\":5,\"260\":1,\"261\":2}}],[\"sneakythrows\",{\"1\":{\"152\":1}}],[\"s1\",{\"1\":{\"148\":1,\"149\":1,\"185\":1}}],[\"slf4j\",{\"1\":{\"298\":1}}],[\"slice\",{\"1\":{\"277\":2}}],[\"slim\",{\"1\":{\"118\":1}}],[\"slaveof\",{\"1\":{\"184\":2}}],[\"sleep\",{\"1\":{\"152\":1}}],[\"slow\",{\"1\":{\"60\":3}}],[\"socketfactory\",{\"1\":{\"239\":1}}],[\"sockettimeout=3000\",{\"1\":{\"118\":1}}],[\"sockjs的缺点\",{\"0\":{\"238\":1}}],[\"sockjs的优势\",{\"0\":{\"237\":1}}],[\"sockjs在不支持websocket的浏览器中使用的是长轮询技术\",{\"1\":{\"237\":1}}],[\"sockjs可以通过polyfill模拟websocket的功能\",{\"1\":{\"237\":1}}],[\"sockjs可以在所有支持javascript的浏览器中运行\",{\"1\":{\"237\":1}}],[\"sockjs\",{\"0\":{\"234\":1},\"1\":{\"234\":3}}],[\"sortedset2\",{\"1\":{\"175\":2}}],[\"sortedset1\",{\"1\":{\"175\":2}}],[\"sortedset\",{\"1\":{\"175\":2}}],[\"sorted\",{\"1\":{\"175\":1}}],[\"sort\",{\"1\":{\"110\":1}}],[\"source>\",{\"1\":{\"207\":2}}],[\"source\",{\"1\":{\"110\":1,\"265\":1,\"306\":2}}],[\"someinclude\",{\"1\":{\"3\":2}}],[\"sometable\",{\"1\":{\"3\":2}}],[\"some\",{\"1\":{\"3\":3,\"212\":1,\"213\":1}}],[\"ssr\",{\"1\":{\"271\":1}}],[\"sslsocketfactory\",{\"1\":{\"239\":1}}],[\"ssl\",{\"1\":{\"239\":1}}],[\"ssh\",{\"0\":{\"267\":1},\"1\":{\"193\":1,\"267\":4}}],[\"ss\",{\"1\":{\"77\":2,\"79\":3,\"80\":2}}],[\"since\",{\"1\":{\"298\":1}}],[\"sinter\",{\"1\":{\"175\":2}}],[\"singleton\",{\"1\":{\"75\":1}}],[\"sismember\",{\"1\":{\"175\":2}}],[\"size\",{\"1\":{\"110\":1,\"120\":1,\"182\":1,\"232\":3,\"242\":6,\"298\":2}}],[\"simplechunk\",{\"1\":{\"301\":2}}],[\"simpletest\",{\"1\":{\"287\":1}}],[\"simpletrigger\",{\"1\":{\"64\":1,\"65\":1}}],[\"simplemailmessage\",{\"1\":{\"239\":2}}],[\"simpledateformat\",{\"1\":{\"232\":2}}],[\"simple简单模式\",{\"0\":{\"147\":1}}],[\"simpleschedule\",{\"1\":{\"64\":1,\"65\":1}}],[\"simpleschedulebuilder\",{\"1\":{\"64\":1,\"65\":1}}],[\"scaleabsolute\",{\"1\":{\"303\":1}}],[\"scard\",{\"1\":{\"175\":2}}],[\"script\",{\"1\":{\"279\":1,\"282\":2}}],[\"script>\",{\"1\":{\"242\":1}}],[\"screenshotoptions\",{\"1\":{\"277\":2}}],[\"screenshotpath\",{\"1\":{\"277\":4}}],[\"screenshot\",{\"1\":{\"275\":1,\"277\":2}}],[\"sc\",{\"1\":{\"133\":1}}],[\"schedul\",{\"1\":{\"240\":1}}],[\"schedule和push只能用一个\",{\"1\":{\"282\":1}}],[\"schedule\",{\"1\":{\"279\":1,\"282\":1}}],[\"schedulewithfixeddelay\",{\"1\":{\"241\":1}}],[\"schedulecontroller\",{\"1\":{\"241\":1}}],[\"scheduledfuture\",{\"1\":{\"241\":4}}],[\"scheduledfuture<\",{\"1\":{\"241\":1}}],[\"scheduled\",{\"0\":{\"241\":1},\"1\":{\"240\":1,\"241\":1}}],[\"scheduledtasksconfig\",{\"1\":{\"240\":1}}],[\"scheduled注解标记的定时任务是在应用程序启动时自动启动的\",{\"1\":{\"240\":1}}],[\"schedulejob\",{\"1\":{\"64\":1}}],[\"scheduler\",{\"1\":{\"62\":2,\"64\":5}}],[\"school字段\",{\"1\":{\"110\":1}}],[\"school\",{\"1\":{\"109\":1,\"110\":1}}],[\"scope>\",{\"1\":{\"82\":1,\"232\":1}}],[\"scope\",{\"1\":{\"75\":1,\"202\":1}}],[\"shell\",{\"1\":{\"282\":1}}],[\"share\",{\"1\":{\"255\":1}}],[\"shared\",{\"1\":{\"138\":4}}],[\"shanghai\",{\"1\":{\"118\":1,\"129\":1,\"287\":1}}],[\"shutdown\",{\"1\":{\"64\":1,\"211\":1,\"212\":1,\"213\":1}}],[\"shot\",{\"1\":{\"278\":2,\"279\":1}}],[\"should\",{\"1\":{\"110\":2,\"201\":1}}],[\"shopping\",{\"1\":{\"108\":3,\"109\":2,\"110\":6}}],[\"showbyid\",{\"1\":{\"246\":1}}],[\"show\",{\"0\":{\"61\":1},\"1\":{\"59\":1,\"60\":1,\"61\":3,\"107\":1,\"245\":1}}],[\"short\",{\"1\":{\"7\":2,\"8\":2,\"9\":1}}],[\"spa\",{\"1\":{\"271\":1}}],[\"spatial索引适用于处理地理信息系统\",{\"1\":{\"50\":1}}],[\"spatial索引\",{\"1\":{\"50\":1}}],[\"spatial和unique\",{\"1\":{\"50\":1}}],[\"spop\",{\"1\":{\"175\":2}}],[\"specify\",{\"1\":{\"141\":1}}],[\"springfox<\",{\"1\":{\"248\":1}}],[\"springframework<\",{\"1\":{\"69\":1,\"82\":1}}],[\"springframework\",{\"1\":{\"63\":1,\"111\":1,\"122\":2,\"127\":2,\"133\":10,\"138\":1,\"139\":2,\"162\":1,\"207\":2,\"222\":2,\"224\":2,\"233\":1,\"239\":1,\"242\":1}}],[\"spring自带的配置是会有提示的\",{\"1\":{\"224\":1}}],[\"spring就会自动读取spring\",{\"1\":{\"222\":1}}],[\"spring本身就有很多自带的starter\",{\"1\":{\"217\":1}}],[\"spring或是第三方都会提供一个starter来帮助我们更简单的集成对应的功能到我们的spring\",{\"1\":{\"215\":1}}],[\"springapplication\",{\"1\":{\"122\":1,\"136\":1,\"220\":1,\"221\":1}}],[\"springboottest\",{\"1\":{\"163\":1}}],[\"springbootapplication\",{\"1\":{\"122\":1,\"136\":1,\"220\":1,\"221\":1}}],[\"springboot\",{\"0\":{\"111\":1}}],[\"springmvcconfig\",{\"1\":{\"82\":3}}],[\"springmvc入门案例\",{\"1\":{\"81\":1}}],[\"springmvc\",{\"0\":{\"67\":1,\"81\":1},\"1\":{\"81\":1,\"87\":1,\"89\":1}}],[\"spring\",{\"0\":{\"67\":1,\"68\":1,\"115\":1,\"162\":1,\"222\":1},\"1\":{\"68\":1,\"111\":1,\"119\":1,\"120\":1,\"127\":1,\"138\":2,\"139\":2,\"141\":1,\"162\":1,\"207\":2,\"217\":10,\"224\":1,\"231\":1,\"232\":1,\"239\":1,\"287\":2}}],[\"s表的全部\",{\"1\":{\"45\":1}}],[\"s表的字段\",{\"1\":{\"42\":1}}],[\"sun\",{\"1\":{\"284\":1}}],[\"sunion\",{\"1\":{\"175\":2}}],[\"success\",{\"1\":{\"245\":1,\"246\":1}}],[\"subscriptchunk\",{\"1\":{\"301\":3}}],[\"substring\",{\"1\":{\"38\":1,\"94\":1,\"232\":1}}],[\"subject\",{\"1\":{\"239\":6}}],[\"submit\",{\"1\":{\"232\":1}}],[\"sudo\",{\"1\":{\"173\":2,\"258\":1,\"279\":1}}],[\"support\",{\"1\":{\"100\":1}}],[\"supportsparameter\",{\"1\":{\"96\":1}}],[\"superscriptchunk\",{\"1\":{\"301\":3}}],[\"super\",{\"1\":{\"95\":1}}],[\"sums\",{\"1\":{\"212\":2}}],[\"sum\",{\"1\":{\"30\":1,\"33\":2}}],[\"s\",{\"0\":{\"307\":2},\"1\":{\"34\":1,\"35\":1,\"36\":2,\"42\":2,\"43\":2,\"44\":6,\"45\":6,\"48\":4,\"61\":2,\"72\":2,\"73\":5,\"75\":1,\"148\":2,\"149\":2,\"212\":3,\"213\":2,\"292\":3}}],[\"stsong\",{\"1\":{\"298\":1,\"299\":1}}],[\"style\",{\"1\":{\"298\":2}}],[\"style=\",{\"1\":{\"242\":1}}],[\"steps\",{\"1\":{\"279\":1,\"282\":1}}],[\"stereotype\",{\"1\":{\"133\":1,\"139\":1}}],[\"stop\",{\"1\":{\"241\":3,\"261\":1}}],[\"stu\",{\"1\":{\"177\":2,\"178\":4}}],[\"study\",{\"1\":{\"34\":1,\"147\":1,\"151\":1,\"239\":1}}],[\"streamresult\",{\"1\":{\"306\":2}}],[\"stroke\",{\"1\":{\"304\":1}}],[\"strikethru\",{\"1\":{\"301\":1}}],[\"strikechunk\",{\"1\":{\"301\":2}}],[\"stringredistemplate\",{\"1\":{\"245\":3}}],[\"stringredisserializer\",{\"1\":{\"177\":6}}],[\"string>\",{\"1\":{\"177\":1}}],[\"string>map\",{\"1\":{\"97\":1}}],[\"string\",{\"1\":{\"7\":2,\"8\":2,\"9\":1,\"69\":1,\"72\":1,\"73\":2,\"75\":1,\"82\":3,\"84\":2,\"85\":3,\"87\":3,\"88\":2,\"89\":2,\"94\":1,\"97\":3,\"111\":2,\"113\":1,\"122\":1,\"132\":4,\"133\":3,\"134\":2,\"136\":2,\"149\":3,\"152\":4,\"154\":1,\"155\":5,\"158\":2,\"159\":8,\"161\":6,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"169\":3,\"170\":1,\"171\":1,\"175\":1,\"177\":1,\"211\":5,\"213\":1,\"220\":1,\"221\":4,\"223\":2,\"232\":11,\"239\":16,\"240\":2,\"241\":1,\"242\":9,\"245\":8,\"246\":1,\"298\":2,\"303\":1,\"306\":7}}],[\"struts\",{\"1\":{\"201\":1}}],[\"struts<\",{\"1\":{\"201\":1}}],[\"strlen\",{\"1\":{\"175\":1}}],[\"strategy\",{\"1\":{\"138\":1}}],[\"stdschedulerfactory\",{\"1\":{\"64\":1}}],[\"stash\",{\"1\":{\"279\":1}}],[\"startswith\",{\"1\":{\"242\":1}}],[\"start\",{\"1\":{\"64\":1,\"241\":1,\"261\":1}}],[\"startnow\",{\"1\":{\"64\":1,\"65\":1}}],[\"starter<\",{\"1\":{\"287\":1}}],[\"starter感觉更标准一点\",{\"1\":{\"217\":1}}],[\"starter或是xxx\",{\"1\":{\"217\":2}}],[\"starter\",{\"0\":{\"214\":1},\"1\":{\"63\":1,\"111\":1,\"119\":1,\"120\":1,\"122\":2,\"127\":3,\"138\":2,\"141\":1,\"162\":1,\"217\":12,\"239\":1,\"242\":1}}],[\"stats\",{\"1\":{\"261\":1}}],[\"statichandles\",{\"1\":{\"231\":1}}],[\"static\",{\"1\":{\"69\":1,\"122\":1,\"135\":4,\"136\":1,\"150\":3,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2,\"169\":3,\"220\":1,\"221\":1,\"223\":1,\"231\":6,\"232\":1,\"306\":2}}],[\"status\",{\"1\":{\"59\":1,\"191\":1}}],[\"state\",{\"1\":{\"15\":5}}],[\"system\",{\"1\":{\"14\":1,\"19\":6,\"24\":2,\"64\":1,\"65\":2,\"70\":2,\"77\":1,\"79\":3,\"80\":1,\"82\":1,\"84\":1,\"85\":1,\"87\":1,\"89\":2,\"99\":3,\"132\":5,\"133\":2,\"134\":1,\"149\":1,\"152\":1,\"155\":1,\"159\":2,\"161\":1,\"164\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"171\":1,\"178\":1,\"212\":6,\"213\":5,\"232\":2,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"245\":3,\"287\":3,\"306\":6}}],[\"sendimgmail\",{\"1\":{\"239\":1}}],[\"sendmailimg\",{\"1\":{\"239\":2}}],[\"sendfailmail\",{\"1\":{\"239\":3}}],[\"sendsimplemail\",{\"1\":{\"239\":3}}],[\"send\",{\"1\":{\"148\":1,\"170\":1,\"239\":3}}],[\"sentinel<\",{\"1\":{\"141\":1}}],[\"sentinel\",{\"0\":{\"141\":1},\"1\":{\"141\":6,\"185\":21}}],[\"search\",{\"1\":{\"109\":1,\"110\":5,\"114\":1,\"127\":1}}],[\"seconds\",{\"1\":{\"245\":1}}],[\"sec\",{\"1\":{\"52\":3,\"61\":3}}],[\"sex\",{\"1\":{\"34\":3,\"48\":2,\"110\":1}}],[\"server=localhost\",{\"1\":{\"141\":2}}],[\"serverhttpresponse\",{\"1\":{\"133\":2}}],[\"serverhttprequest\",{\"1\":{\"132\":2,\"133\":2}}],[\"serverwebexchange\",{\"1\":{\"132\":1,\"133\":2,\"134\":1}}],[\"server\",{\"1\":{\"118\":1,\"119\":1,\"120\":1,\"127\":2,\"133\":3,\"138\":1,\"173\":1,\"262\":1}}],[\"servertimezone=asia\",{\"1\":{\"118\":1,\"287\":1}}],[\"servletinitconfig\",{\"1\":{\"82\":2}}],[\"servlet\",{\"1\":{\"82\":1,\"232\":1}}],[\"servlet<\",{\"1\":{\"82\":1,\"232\":1}}],[\"services\",{\"1\":{\"258\":1}}],[\"serviceinstance\",{\"1\":{\"120\":1}}],[\"service\",{\"1\":{\"25\":1,\"69\":1,\"73\":1,\"75\":1,\"118\":6,\"119\":1,\"120\":2,\"122\":1,\"127\":4,\"138\":1,\"139\":1,\"239\":2}}],[\"serializable>\",{\"1\":{\"18\":2}}],[\"serializable\",{\"1\":{\"18\":2,\"177\":1}}],[\"separator=\",{\"1\":{\"12\":1}}],[\"setfixedheight\",{\"1\":{\"302\":1}}],[\"setfrom\",{\"1\":{\"239\":3}}],[\"setwidths\",{\"1\":{\"302\":1}}],[\"setwidthpercentage\",{\"1\":{\"302\":1}}],[\"setup\",{\"1\":{\"279\":2}}],[\"setuid\",{\"1\":{\"277\":1}}],[\"setusername\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"setuser\",{\"1\":{\"135\":1}}],[\"setdatabase\",{\"1\":{\"246\":1}}],[\"setdate\",{\"1\":{\"245\":1}}],[\"setdelay\",{\"1\":{\"170\":2}}],[\"setlist\",{\"1\":{\"245\":1}}],[\"setborder\",{\"1\":{\"302\":3}}],[\"setbookdao\",{\"1\":{\"73\":1}}],[\"setbackimg\",{\"1\":{\"245\":1}}],[\"setignoringelementcontentwhitespace\",{\"1\":{\"306\":2}}],[\"setignoringcomments\",{\"1\":{\"306\":2}}],[\"setifabsent\",{\"1\":{\"245\":1}}],[\"setid\",{\"1\":{\"19\":1}}],[\"setemail\",{\"1\":{\"242\":1}}],[\"setname\",{\"1\":{\"242\":1}}],[\"setnx\",{\"1\":{\"175\":1}}],[\"settextrise\",{\"1\":{\"301\":2}}],[\"settext\",{\"1\":{\"239\":3}}],[\"setter\",{\"0\":{\"72\":1}}],[\"setto\",{\"1\":{\"239\":3}}],[\"sethorizontalalignment\",{\"1\":{\"302\":3}}],[\"sethost\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"setheader\",{\"1\":{\"299\":1}}],[\"sethashvalueserializer\",{\"1\":{\"177\":1}}],[\"sethashkeyserializer\",{\"1\":{\"177\":1}}],[\"setvalueserializer\",{\"1\":{\"177\":2}}],[\"setviewport\",{\"1\":{\"275\":1,\"277\":1}}],[\"setviews\",{\"1\":{\"246\":1}}],[\"setvisibility\",{\"1\":{\"177\":1}}],[\"setvirtualhost\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"setkeyserializer\",{\"1\":{\"177\":1}}],[\"setobjectmapper\",{\"1\":{\"177\":1}}],[\"set3\",{\"1\":{\"175\":3}}],[\"set2\",{\"1\":{\"175\":3}}],[\"set1\",{\"1\":{\"175\":3}}],[\"setport\",{\"1\":{\"148\":1,\"149\":1,\"150\":1}}],[\"setpassword\",{\"1\":{\"19\":1,\"148\":1,\"149\":1,\"150\":1,\"245\":1,\"287\":1}}],[\"setcontenttype\",{\"1\":{\"299\":1}}],[\"setconnectionfactory\",{\"1\":{\"177\":1}}],[\"setcomplete\",{\"1\":{\"133\":1}}],[\"setcolorstroke\",{\"1\":{\"304\":1}}],[\"setcolor\",{\"1\":{\"97\":2,\"298\":1}}],[\"setspacingafter\",{\"1\":{\"302\":1}}],[\"setspacingbefore\",{\"1\":{\"302\":1}}],[\"setsubject\",{\"1\":{\"239\":3}}],[\"sets\",{\"1\":{\"175\":1}}],[\"setstatuscode\",{\"1\":{\"133\":1}}],[\"setsql\",{\"1\":{\"24\":3}}],[\"setabsoluteposition\",{\"1\":{\"303\":1}}],[\"setanchor\",{\"1\":{\"301\":1}}],[\"setalignment\",{\"1\":{\"300\":1}}],[\"setage\",{\"1\":{\"242\":1}}],[\"setaddress\",{\"1\":{\"242\":1,\"246\":1}}],[\"setattribute\",{\"1\":{\"94\":1}}],[\"setaccount\",{\"1\":{\"19\":2,\"245\":1}}],[\"setjobdata\",{\"1\":{\"65\":1}}],[\"set\",{\"0\":{\"12\":1},\"1\":{\"12\":1,\"28\":1,\"38\":1,\"42\":1,\"61\":3,\"77\":1,\"79\":1,\"135\":1,\"175\":2,\"178\":1,\"265\":1,\"266\":4,\"282\":1}}],[\"selectimports\",{\"1\":{\"221\":1}}],[\"selectpage\",{\"1\":{\"18\":1,\"23\":1}}],[\"selectobjs\",{\"1\":{\"18\":1}}],[\"selectone\",{\"1\":{\"18\":1}}],[\"selectmapspage\",{\"1\":{\"18\":1}}],[\"selectmaps\",{\"1\":{\"18\":1}}],[\"selectlist\",{\"1\":{\"18\":1,\"19\":1,\"245\":1}}],[\"selectcount\",{\"1\":{\"18\":1,\"23\":1}}],[\"selectbatchids\",{\"1\":{\"18\":1,\"19\":1}}],[\"selectbymap\",{\"1\":{\"18\":1,\"19\":1}}],[\"selectbymapparams\",{\"1\":{\"9\":3}}],[\"selectbyid\",{\"1\":{\"18\":1,\"19\":1,\"246\":1}}],[\"selectbybeans\",{\"1\":{\"10\":3}}],[\"selectbygenderandage2\",{\"1\":{\"8\":1}}],[\"selectbygenderandage\",{\"1\":{\"7\":4,\"8\":2}}],[\"select>\",{\"1\":{\"3\":2,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"15\":3}}],[\"selectusers\",{\"1\":{\"3\":1}}],[\"select\",{\"0\":{\"30\":1},\"1\":{\"2\":1,\"3\":3,\"7\":3,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"15\":3,\"21\":1,\"30\":1,\"31\":3,\"33\":4,\"34\":1,\"35\":1,\"36\":3,\"38\":3,\"39\":1,\"40\":2,\"44\":2,\"45\":2,\"47\":1,\"48\":4,\"61\":6,\"174\":1,\"248\":1}}],[\"sql>\",{\"1\":{\"3\":3}}],[\"sql\",{\"0\":{\"3\":1},\"1\":{\"2\":1,\"3\":2,\"264\":5,\"265\":3}}],[\"映射宿主机上\",{\"1\":{\"255\":1}}],[\"映射\",{\"1\":{\"21\":1,\"110\":2,\"223\":2}}],[\"映射查询语句\",{\"1\":{\"2\":1}}],[\"映射删除语句\",{\"1\":{\"2\":1}}],[\"映射更新语句\",{\"1\":{\"2\":1}}],[\"映射插入语句\",{\"1\":{\"2\":1}}],[\"59\",{\"1\":{\"284\":2}}],[\"54chensongxia\",{\"1\":{\"242\":1}}],[\"5s\",{\"1\":{\"175\":1}}],[\"5672\",{\"1\":{\"148\":1,\"149\":1,\"150\":1,\"162\":1}}],[\"5个字段\",{\"1\":{\"43\":1}}],[\"51\",{\"1\":{\"38\":1}}],[\"500mb\",{\"1\":{\"261\":1}}],[\"5000ms\",{\"1\":{\"241\":1}}],[\"5000l\",{\"1\":{\"241\":1}}],[\"5000\",{\"1\":{\"185\":1,\"240\":2}}],[\"50\",{\"1\":{\"34\":1,\"48\":2}}],[\"5<\",{\"1\":{\"1\":1,\"232\":1,\"246\":1}}],[\"5\",{\"0\":{\"97\":1},\"1\":{\"1\":1,\"39\":2,\"61\":1,\"89\":1,\"175\":1,\"245\":1,\"258\":1,\"266\":1,\"285\":2,\"297\":2,\"301\":2,\"302\":2}}],[\">>\",{\"1\":{\"282\":1}}],[\">aaa\",{\"1\":{\"264\":1}}],[\">50\",{\"1\":{\"245\":1}}],[\">=\",{\"1\":{\"32\":1}}],[\"><img\",{\"1\":{\"239\":1}}],[\"><\",{\"1\":{\"3\":2,\"74\":1}}],[\"><property\",{\"1\":{\"3\":2}}],[\">\",{\"1\":{\"1\":1,\"3\":9,\"4\":6,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"14\":1,\"15\":10,\"32\":1,\"34\":1,\"39\":1,\"69\":4,\"70\":1,\"72\":3,\"73\":6,\"74\":3,\"119\":1,\"120\":1,\"122\":2,\"123\":1,\"127\":3,\"134\":1,\"138\":2,\"141\":1,\"160\":2,\"170\":1,\"201\":1,\"232\":3,\"239\":1,\"241\":1,\"242\":4,\"246\":1,\"264\":3,\"266\":1,\"297\":3}}],[\"md\",{\"1\":{\"239\":1,\"282\":1}}],[\"mm\",{\"1\":{\"232\":1,\"277\":2}}],[\"mv\",{\"1\":{\"279\":1}}],[\"mvc\",{\"1\":{\"231\":1}}],[\"mvn\",{\"1\":{\"197\":5}}],[\"mvnrepository\",{\"1\":{\"1\":1}}],[\"m\",{\"0\":{\"307\":1},\"1\":{\"190\":2,\"192\":2,\"279\":1}}],[\"mkdirs\",{\"1\":{\"232\":2}}],[\"mkdir\",{\"1\":{\"189\":1,\"279\":1}}],[\"microservices\",{\"0\":{\"310\":1}}],[\"mishu\",{\"1\":{\"298\":1}}],[\"mimemessagehelper\",{\"1\":{\"239\":4}}],[\"mimemessage\",{\"1\":{\"239\":2}}],[\"mirror>\",{\"1\":{\"196\":1}}],[\"mirrorof>\",{\"1\":{\"196\":1}}],[\"milliseconds\",{\"1\":{\"185\":1}}],[\"minimal\",{\"1\":{\"148\":1}}],[\"min\",{\"1\":{\"30\":1,\"33\":2,\"182\":1,\"242\":1}}],[\"mset\",{\"1\":{\"175\":1}}],[\"msg\",{\"1\":{\"170\":3,\"171\":3,\"239\":12}}],[\"mget\",{\"1\":{\"175\":1}}],[\"memory\",{\"1\":{\"261\":1}}],[\"messagingexception\",{\"1\":{\"239\":4}}],[\"messagepack等\",{\"1\":{\"176\":1}}],[\"messageproperties\",{\"1\":{\"148\":1,\"170\":5}}],[\"message2\",{\"1\":{\"165\":1,\"166\":1,\"167\":1,\"168\":1}}],[\"message1\",{\"1\":{\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"170\":3}}],[\"message\",{\"1\":{\"164\":3,\"165\":4,\"166\":4,\"167\":5,\"168\":5,\"169\":1,\"170\":4,\"212\":1,\"213\":1,\"242\":5,\"282\":1}}],[\"metoo\",{\"1\":{\"282\":1}}],[\"metadata\",{\"1\":{\"221\":4}}],[\"methods\",{\"1\":{\"242\":1}}],[\"methodname====\",{\"1\":{\"132\":1}}],[\"methodname\",{\"1\":{\"132\":2}}],[\"methodparameter\",{\"1\":{\"96\":5}}],[\"method\",{\"1\":{\"89\":2,\"90\":1,\"107\":1,\"141\":1}}],[\"method=get\",{\"1\":{\"129\":1}}],[\"method=\",{\"1\":{\"70\":2,\"232\":1}}],[\"means\",{\"1\":{\"212\":1,\"213\":1}}],[\"mq的引言和不同mq的特点\",{\"1\":{\"146\":1}}],[\"multi\",{\"1\":{\"282\":1}}],[\"multipart\",{\"1\":{\"232\":2}}],[\"multipartfile\",{\"1\":{\"211\":1,\"232\":2}}],[\"mutate\",{\"1\":{\"134\":1}}],[\"must\",{\"1\":{\"110\":1}}],[\"move\",{\"1\":{\"175\":1}}],[\"monitor\",{\"1\":{\"185\":2}}],[\"mono\",{\"1\":{\"133\":1}}],[\"mono<void>\",{\"1\":{\"132\":1,\"133\":1}}],[\"month\",{\"1\":{\"40\":1}}],[\"modules\",{\"1\":{\"281\":2}}],[\"mode\",{\"1\":{\"276\":1}}],[\"mode=standalone\",{\"1\":{\"118\":1}}],[\"mode=hostname\",{\"1\":{\"118\":1}}],[\"modelandview\",{\"1\":{\"99\":2}}],[\"modelandviewcontainer\",{\"1\":{\"96\":2}}],[\"mod\",{\"1\":{\"39\":1}}],[\"markmap\",{\"0\":{\"309\":1}}],[\"mat\",{\"1\":{\"294\":1,\"295\":1}}],[\"matchifmissing\",{\"1\":{\"223\":1}}],[\"match拆分后模糊查询\",{\"1\":{\"110\":1}}],[\"match\",{\"1\":{\"110\":7,\"133\":1}}],[\"mac\",{\"1\":{\"273\":1}}],[\"mailservice\",{\"1\":{\"239\":6}}],[\"mail<\",{\"1\":{\"239\":1}}],[\"mail\",{\"1\":{\"239\":2}}],[\"main分支变动时\",{\"1\":{\"282\":1}}],[\"mainclass>\",{\"1\":{\"207\":1}}],[\"main\",{\"1\":{\"69\":3,\"122\":1,\"136\":1,\"152\":1,\"154\":1,\"155\":1,\"158\":1,\"159\":2,\"161\":2,\"220\":1,\"221\":1,\"279\":2,\"282\":2,\"306\":2}}],[\"made\",{\"1\":{\"212\":1,\"213\":1}}],[\"maven<\",{\"1\":{\"196\":1}}],[\"maven\",{\"0\":{\"194\":1},\"1\":{\"196\":1,\"207\":4}}],[\"master\",{\"1\":{\"107\":1,\"193\":2}}],[\"maxamount\",{\"1\":{\"139\":1}}],[\"maxitems\",{\"1\":{\"139\":1}}],[\"max\",{\"1\":{\"30\":1,\"33\":2,\"232\":2,\"242\":3}}],[\"mapping\",{\"1\":{\"110\":2}}],[\"mapperscan\",{\"1\":{\"136\":1}}],[\"mapper<t>\",{\"1\":{\"18\":1}}],[\"mapper\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"14\":1,\"136\":1}}],[\"map>\",{\"1\":{\"74\":1}}],[\"map<string\",{\"1\":{\"18\":2,\"97\":1,\"169\":1,\"221\":2}}],[\"map\",{\"1\":{\"3\":2,\"9\":3,\"19\":7,\"74\":1,\"87\":1,\"97\":2,\"120\":1,\"148\":1,\"149\":1}}],[\"my\",{\"1\":{\"262\":1}}],[\"mytask\",{\"1\":{\"241\":2}}],[\"mytest\",{\"1\":{\"111\":2,\"112\":2,\"113\":6}}],[\"mymaster\",{\"1\":{\"185\":4}}],[\"myid\",{\"1\":{\"185\":1}}],[\"myindex\",{\"1\":{\"109\":4}}],[\"myinterceptor\",{\"1\":{\"99\":1,\"100\":3}}],[\"mysortedset\",{\"1\":{\"175\":8}}],[\"myset\",{\"1\":{\"175\":7}}],[\"mysqldump\",{\"1\":{\"264\":4}}],[\"mysqld\",{\"1\":{\"60\":1}}],[\"mysql的慢查询日志是mysql提供的一种日志记录\",{\"1\":{\"60\":1}}],[\"mysql的索引类型包括fulltext\",{\"1\":{\"50\":1}}],[\"mysql>\",{\"1\":{\"52\":4,\"61\":5,\"265\":4}}],[\"mysql\",{\"0\":{\"26\":1,\"263\":1},\"1\":{\"23\":1,\"60\":1,\"118\":7,\"138\":2,\"255\":4,\"258\":7,\"264\":1,\"265\":2,\"287\":2}}],[\"myglobalfilter\",{\"1\":{\"132\":1}}],[\"myaop\",{\"1\":{\"77\":1,\"79\":1,\"80\":1}}],[\"mybatisenumtypehandler\",{\"1\":{\"138\":1}}],[\"mybatisplus\",{\"1\":{\"138\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"23\":4}}],[\"mybatis+字段+1\",{\"0\":{\"24\":1}}],[\"mybatisconfig\",{\"1\":{\"23\":1}}],[\"mybatisx\",{\"0\":{\"22\":1},\"1\":{\"22\":1}}],[\"mybatis错误提示很细致\",{\"1\":{\"7\":1}}],[\"mybatis<\",{\"1\":{\"1\":1}}],[\"mybatis\",{\"0\":{\"1\":1,\"16\":1,\"17\":1},\"1\":{\"1\":2,\"4\":1,\"17\":3,\"138\":1,\"217\":1}}],[\"mp\",{\"1\":{\"17\":1}}],[\"<div>\",{\"1\":{\"242\":1}}],[\"<dependencymanagement>\",{\"1\":{\"205\":1}}],[\"<dependency>\",{\"1\":{\"1\":1,\"63\":1,\"69\":1,\"82\":2,\"111\":1,\"119\":1,\"120\":1,\"122\":2,\"123\":1,\"127\":3,\"138\":2,\"141\":1,\"162\":1,\"200\":1,\"201\":2,\"232\":1,\"233\":1,\"239\":1,\"242\":1,\"246\":1,\"248\":1,\"287\":1,\"297\":3}}],[\"<dependencies>\",{\"1\":{\"82\":1,\"205\":1}}],[\"<template>\",{\"1\":{\"242\":1}}],[\"<target>17<\",{\"1\":{\"207\":2}}],[\"<第一步获得的密钥>\",{\"1\":{\"239\":1}}],[\"<form\",{\"1\":{\"232\":1}}],[\"<foreach\",{\"1\":{\"12\":1}}],[\"<goal>repackage<\",{\"1\":{\"207\":1}}],[\"<goals>\",{\"1\":{\"207\":1}}],[\"<groupid>asm<\",{\"1\":{\"201\":2}}],[\"<groupid>joda\",{\"1\":{\"200\":1}}],[\"<groupid>javax\",{\"1\":{\"82\":1,\"232\":1}}],[\"<groupid>io\",{\"1\":{\"123\":1,\"248\":1}}],[\"<groupid>com\",{\"1\":{\"119\":1,\"120\":1,\"127\":1,\"138\":1,\"141\":1,\"287\":1,\"297\":3}}],[\"<groupid>org\",{\"1\":{\"1\":1,\"63\":1,\"69\":1,\"82\":1,\"111\":1,\"122\":2,\"127\":2,\"138\":1,\"162\":1,\"201\":1,\"207\":4,\"224\":1,\"233\":1,\"239\":1,\"242\":1,\"246\":1}}],[\"<plugin>\",{\"1\":{\"207\":3}}],[\"<plugins>\",{\"1\":{\"207\":2}}],[\"<property\",{\"1\":{\"3\":2,\"72\":2,\"74\":2}}],[\"<build>\",{\"1\":{\"207\":2}}],[\"<bean\",{\"1\":{\"69\":2,\"70\":1,\"72\":1,\"73\":2,\"74\":1}}],[\"<optional>true<\",{\"1\":{\"200\":1,\"224\":1,\"233\":1}}],[\"<otherwise>\",{\"1\":{\"15\":1}}],[\"<url>http\",{\"1\":{\"196\":1}}],[\"<name>aliyun\",{\"1\":{\"196\":1}}],[\"<mainclass>com\",{\"1\":{\"207\":1}}],[\"<map>\",{\"1\":{\"74\":1}}],[\"<mirrorof>central<\",{\"1\":{\"196\":1}}],[\"<mirror>\",{\"1\":{\"196\":1}}],[\"<>\",{\"1\":{\"177\":1}}],[\"<>或\",{\"1\":{\"32\":1}}],[\"<value>world<\",{\"1\":{\"74\":1}}],[\"<value>hello\",{\"1\":{\"74\":1}}],[\"<version>\",{\"1\":{\"287\":1}}],[\"<version>$\",{\"1\":{\"201\":1,\"207\":2}}],[\"<version>2\",{\"1\":{\"111\":1,\"200\":1,\"232\":1}}],[\"<version>4\",{\"1\":{\"82\":1}}],[\"<version>5\",{\"1\":{\"69\":1,\"82\":1,\"297\":3}}],[\"<version>3\",{\"1\":{\"1\":1,\"201\":1,\"207\":2,\"246\":1,\"248\":1}}],[\"<array>\",{\"1\":{\"74\":1}}],[\"<artifactid>xmlworker<\",{\"1\":{\"297\":1}}],[\"<artifactid>itext\",{\"1\":{\"297\":1}}],[\"<artifactid>itextpdf<\",{\"1\":{\"297\":1}}],[\"<artifactid>redisson<\",{\"1\":{\"246\":1}}],[\"<artifactid>maven\",{\"1\":{\"207\":2}}],[\"<artifactid>mybatis<\",{\"1\":{\"1\":1}}],[\"<artifactid>asm<\",{\"1\":{\"201\":2}}],[\"<artifactid>servlet\",{\"1\":{\"232\":1}}],[\"<artifactid>struts2\",{\"1\":{\"201\":1}}],[\"<artifactid>springfox\",{\"1\":{\"248\":1}}],[\"<artifactid>spring\",{\"1\":{\"63\":1,\"69\":1,\"82\":1,\"111\":1,\"119\":1,\"120\":1,\"122\":2,\"127\":3,\"138\":2,\"141\":1,\"162\":1,\"207\":2,\"224\":1,\"233\":1,\"239\":1,\"242\":1}}],[\"<artifactid>jasypt\",{\"1\":{\"287\":1}}],[\"<artifactid>javax\",{\"1\":{\"82\":1}}],[\"<artifactid>joda\",{\"1\":{\"200\":1}}],[\"<artifactid>feign\",{\"1\":{\"123\":1}}],[\"<configuration>\",{\"1\":{\"207\":3}}],[\"<constructor\",{\"1\":{\"73\":3}}],[\"<choose>\",{\"1\":{\"15\":1}}],[\"<=\",{\"1\":{\"32\":1}}],[\"<execution>\",{\"1\":{\"207\":1}}],[\"<executions>\",{\"1\":{\"207\":1}}],[\"<exclusion>\",{\"1\":{\"201\":1}}],[\"<exclusions>\",{\"1\":{\"201\":1}}],[\"<encoding>utf\",{\"1\":{\"207\":2}}],[\"<entry\",{\"1\":{\"74\":1}}],[\"<e\",{\"1\":{\"18\":2}}],[\"<employee>\",{\"1\":{\"10\":1,\"11\":1,\"12\":1}}],[\"<when\",{\"1\":{\"15\":2}}],[\"<result\",{\"1\":{\"4\":4}}],[\"<resultmap\",{\"1\":{\"4\":1}}],[\"<img\",{\"1\":{\"239\":1,\"242\":1}}],[\"<if\",{\"1\":{\"15\":5}}],[\"<input\",{\"1\":{\"232\":2,\"242\":1}}],[\"<insert\",{\"1\":{\"14\":1}}],[\"<include\",{\"1\":{\"3\":4}}],[\"<id>repackage<\",{\"1\":{\"207\":1}}],[\"<id>alimaven<\",{\"1\":{\"196\":1}}],[\"<id\",{\"1\":{\"4\":1}}],[\"<script>\",{\"1\":{\"242\":1}}],[\"<scope>provided<\",{\"1\":{\"82\":1,\"232\":1}}],[\"<source>17<\",{\"1\":{\"207\":2}}],[\"<select\",{\"1\":{\"3\":2,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"15\":3}}],[\"<sql\",{\"1\":{\"3\":3}}],[\"<\",{\"1\":{\"1\":2,\"3\":6,\"4\":1,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"14\":1,\"15\":12,\"32\":1,\"48\":2,\"63\":1,\"69\":3,\"72\":1,\"73\":3,\"74\":6,\"82\":3,\"111\":1,\"119\":2,\"120\":2,\"122\":4,\"123\":2,\"127\":6,\"138\":4,\"141\":2,\"162\":1,\"163\":1,\"196\":2,\"200\":1,\"201\":6,\"207\":15,\"224\":1,\"232\":2,\"233\":1,\"239\":1,\"242\":6,\"246\":2,\"248\":1,\"265\":2,\"266\":1,\"287\":2,\"297\":6,\"302\":1,\"306\":1}}],[\"依赖范围\",{\"0\":{\"202\":1}}],[\"依赖传递\",{\"0\":{\"199\":1}}],[\"依赖管理\",{\"0\":{\"198\":1}}],[\"依赖注入\",{\"0\":{\"71\":1},\"1\":{\"73\":1}}],[\"依赖\",{\"0\":{\"63\":1,\"297\":1},\"1\":{\"1\":1,\"122\":1,\"123\":1,\"127\":1,\"141\":1,\"242\":1,\"287\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
