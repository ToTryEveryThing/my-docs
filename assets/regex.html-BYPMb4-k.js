import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as p,b as c,w as n,a,d as s,e as u}from"./app-C2LybZOg.js";const d={},k=a("h1",{id:"regex",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#regex","aria-hidden":"true"},"#"),s(" Regex")],-1),b=a("h2",{id:"插件",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#插件","aria-hidden":"true"},"#"),s(" 插件")],-1),v=a("div",{class:"language-text line-numbers-mode","data-ext":"text"},[a("pre",{class:"language-text"},[a("code",null,`[正则大全](https://any-rule.vercel.app/)
`)]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),m=a("div",{class:"language-text line-numbers-mode","data-ext":"text"},[a("pre",{class:"language-text"},[a("code",null,`[Regexp Tester](https://plugins.jetbrains.com/plugin/2917-regexp-tester)
`)]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),h=a("h2",{id:"java",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java","aria-hidden":"true"},"#"),s(" java")],-1),g=a("code",null,"Pattern",-1),x=a("code",null,"Matcher",-1),_=a("code",null,"String",-1),y=a("code",null,"matches",-1),f=a("code",null,"String",-1),w=a("code",null,"replaceAll",-1),A=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"import"),s(),a("span",{class:"token import"},[a("span",{class:"token namespace"},[s("java"),a("span",{class:"token punctuation"},"."),s("util"),a("span",{class:"token punctuation"},"."),s("regex"),a("span",{class:"token punctuation"},".")]),a("span",{class:"token class-name"},"Matcher")]),a("span",{class:"token punctuation"},";"),s(`
`),a("span",{class:"token keyword"},"import"),s(),a("span",{class:"token import"},[a("span",{class:"token namespace"},[s("java"),a("span",{class:"token punctuation"},"."),s("util"),a("span",{class:"token punctuation"},"."),s("regex"),a("span",{class:"token punctuation"},".")]),a("span",{class:"token class-name"},"Pattern")]),a("span",{class:"token punctuation"},";"),s(`

`),a("span",{class:"token keyword"},"public"),s(),a("span",{class:"token keyword"},"class"),s(),a("span",{class:"token class-name"},"RegexExample"),s(),a("span",{class:"token punctuation"},"{"),s(`
    `),a("span",{class:"token keyword"},"public"),s(),a("span",{class:"token keyword"},"static"),s(),a("span",{class:"token keyword"},"void"),s(),a("span",{class:"token function"},"main"),a("span",{class:"token punctuation"},"("),a("span",{class:"token class-name"},"String"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),s(" args"),a("span",{class:"token punctuation"},")"),s(),a("span",{class:"token punctuation"},"{"),s(`
        `),a("span",{class:"token class-name"},"String"),s(" inputString "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token string"},'"Hello,123"'),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token class-name"},"String"),s(" regexPattern "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token string"},'"\\\\d+"'),a("span",{class:"token punctuation"},";"),s(),a("span",{class:"token comment"},"// 匹配数字"),s(`

        `),a("span",{class:"token class-name"},"Pattern"),s(" pattern "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token class-name"},"Pattern"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"compile"),a("span",{class:"token punctuation"},"("),s("regexPattern"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token class-name"},"Matcher"),s(" matcher "),a("span",{class:"token operator"},"="),s(" pattern"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"matcher"),a("span",{class:"token punctuation"},"("),s("inputString"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`

        `),a("span",{class:"token keyword"},"if"),s(),a("span",{class:"token punctuation"},"("),s("matcher"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"find"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),s(),a("span",{class:"token punctuation"},"{"),s(`
            `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),s("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"字符串中包含匹配的子串："'),s(),a("span",{class:"token operator"},"+"),s(" matcher"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"group"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
            `),a("span",{class:"token comment"},"// 字符串中包含匹配的子串：123"),s(`
        `),a("span",{class:"token punctuation"},"}"),s(),a("span",{class:"token keyword"},"else"),s(),a("span",{class:"token punctuation"},"{"),s(`
            `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),s("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"字符串中没有匹配的子串。"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token punctuation"},"}"),s(`
    `),a("span",{class:"token punctuation"},"}"),s(`
`),a("span",{class:"token punctuation"},"}"),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),S=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"public"),s(),a("span",{class:"token keyword"},"class"),s(),a("span",{class:"token class-name"},"RegexExample2"),s(),a("span",{class:"token punctuation"},"{"),s(`
    `),a("span",{class:"token keyword"},"public"),s(),a("span",{class:"token keyword"},"static"),s(),a("span",{class:"token keyword"},"void"),s(),a("span",{class:"token function"},"main"),a("span",{class:"token punctuation"},"("),a("span",{class:"token class-name"},"String"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),s(" args"),a("span",{class:"token punctuation"},")"),s(),a("span",{class:"token punctuation"},"{"),s(`
        `),a("span",{class:"token class-name"},"String"),s(" inputString "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token string"},'"Hello,123"'),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token class-name"},"String"),s(" regexPattern "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token string"},'"\\\\d+"'),a("span",{class:"token punctuation"},";"),s(),a("span",{class:"token comment"},"// 匹配数字"),s(`

        `),a("span",{class:"token keyword"},"if"),s(),a("span",{class:"token punctuation"},"("),s("inputString"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"matches"),a("span",{class:"token punctuation"},"("),s("regexPattern"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),s(),a("span",{class:"token punctuation"},"{"),s(`
            `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),s("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"字符串匹配正则表达式。"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token punctuation"},"}"),s(),a("span",{class:"token keyword"},"else"),s(),a("span",{class:"token punctuation"},"{"),s(`
            `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),s("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"字符串不匹配正则表达式。"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
            `),a("span",{class:"token comment"},"// 字符串不匹配正则表达式。"),s(`
        `),a("span",{class:"token punctuation"},"}"),s(`
    `),a("span",{class:"token punctuation"},"}"),s(`
`),a("span",{class:"token punctuation"},"}"),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),T=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"public"),s(),a("span",{class:"token keyword"},"class"),s(),a("span",{class:"token class-name"},"RegexExample3"),s(),a("span",{class:"token punctuation"},"{"),s(`
    `),a("span",{class:"token keyword"},"public"),s(),a("span",{class:"token keyword"},"static"),s(),a("span",{class:"token keyword"},"void"),s(),a("span",{class:"token function"},"main"),a("span",{class:"token punctuation"},"("),a("span",{class:"token class-name"},"String"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),s(" args"),a("span",{class:"token punctuation"},")"),s(),a("span",{class:"token punctuation"},"{"),s(`
        `),a("span",{class:"token class-name"},"String"),s(" inputString "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token string"},'"Hello,123"'),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token class-name"},"String"),s(" regexPattern "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token string"},'"\\\\d+"'),a("span",{class:"token punctuation"},";"),s(),a("span",{class:"token comment"},"// 匹配数字"),s(`

        `),a("span",{class:"token class-name"},"String"),s(" replacedString "),a("span",{class:"token operator"},"="),s(" inputString"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"replaceAll"),a("span",{class:"token punctuation"},"("),s("regexPattern"),a("span",{class:"token punctuation"},","),s(),a("span",{class:"token string"},'""'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),s("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"替换后的字符串："'),s(),a("span",{class:"token operator"},"+"),s(" replacedString"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
        `),a("span",{class:"token comment"},"// 替换后的字符串：Hello,"),s(`
    `),a("span",{class:"token punctuation"},"}"),s(`
`),a("span",{class:"token punctuation"},"}"),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),j=a("h2",{id:"元字符",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#元字符","aria-hidden":"true"},"#"),s(" 元字符")],-1),P=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s(`- 是元字符中最简单的例子。
- 匹配任意单个字符，但不匹配换行符。

`),a("span",{class:"token string"},'".ar"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" The "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("car"),a("span",{class:"token variable"},"`")]),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("par"),a("span",{class:"token variable"},"`")]),s("ked "),a("span",{class:"token keyword"},"in"),s(" the "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("gar"),a("span",{class:"token variable"},"`")]),s(`age.
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),R=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s(`- 字符集也叫做字符类。
- 方括号用来指定一个字符集。
- 在方括号中使用连字符来指定字符集的范围。
- 在方括号中的字符集不关心顺序。

`),a("span",{class:"token string"},'"[Tt]he"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("The"),a("span",{class:"token variable"},"`")]),s(" car parked "),a("span",{class:"token keyword"},"in"),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("the"),a("span",{class:"token variable"},"`")]),s(` garage.

- 方括号的句号就表示句号。

`),a("span",{class:"token string"},'"ar[.]"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" A garage is a good place to park a c"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("ar."),a("span",{class:"token variable"},"`")]),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),C=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s(`- 否定字符集

`),a("span",{class:"token punctuation"},"["),s("^c"),a("span",{class:"token punctuation"},"]"),s("ar "),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" The car "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("par"),a("span",{class:"token variable"},"`")]),s("ked "),a("span",{class:"token keyword"},"in"),s(" the "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("gar"),a("span",{class:"token variable"},"`")]),s(`age.

`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),q=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s("- "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("*"),a("span",{class:"token variable"},"`")]),s("号匹配 在"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("*"),a("span",{class:"token variable"},"`")]),s("之前的字符出现"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("大于等于0"),a("span",{class:"token variable"},"`")]),s(`次。
- 表达式`),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"["),s("a-z"),a("span",{class:"token punctuation"},"]"),s("*"),a("span",{class:"token variable"},"`")]),s(` 匹配一个行中所有以小写字母开头的字符串。

`),a("span",{class:"token string"},'"[a-z]*"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" T"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("he car parked "),a("span",{class:"token keyword"},"in"),s(" the garage"),a("span",{class:"token variable"},"`")]),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),E=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s("- "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("+"),a("span",{class:"token variable"},"`")]),s("号匹配"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("+"),a("span",{class:"token variable"},"`")]),s("号之前的字符出现 "),a("span",{class:"token operator"},">="),a("span",{class:"token number"},"1"),s(` 次。

- 例如表达式`),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("c.+t"),a("span",{class:"token variable"},"`")]),s(" 匹配以首字母"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("c"),a("span",{class:"token variable"},"`")]),s("开头以"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("t"),a("span",{class:"token variable"},"`")]),s(`结尾，中间跟着至少一个字符的字符串。

`),a("span",{class:"token string"},'"c.+t"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" The fat "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token function"},"cat"),s(" sat on the mat"),a("span",{class:"token variable"},"`")]),a("span",{class:"token builtin class-name"},"."),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),H=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s("- 出现 "),a("span",{class:"token number"},"0"),s(" 或 "),a("span",{class:"token number"},"1"),s(` 次。
- 表达式 `),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"["),s("T"),a("span",{class:"token punctuation"},"]"),s("?he"),a("span",{class:"token variable"},"`")]),s(" 匹配字符串 "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("he"),a("span",{class:"token variable"},"`")]),s(" 和 "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("The"),a("span",{class:"token variable"},"`")]),s(`

`),a("span",{class:"token string"},'"[T]he"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("The"),a("span",{class:"token variable"},"`")]),s(" car is parked "),a("span",{class:"token keyword"},"in"),s(` the garage.

`),a("span",{class:"token string"},'"[T]?he"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("The"),a("span",{class:"token variable"},"`")]),s(" car is parked "),a("span",{class:"token keyword"},"in"),s(" t"),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("he"),a("span",{class:"token variable"},"`")]),s(` garage.

`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),M=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s(`- 常用来限定一个或一组字符可以重复出现的次数。
- 表达式 `),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"0"),s("-9"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token number"},"2,3"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token variable"},"`")]),s(" 匹配最少 "),a("span",{class:"token number"},"2"),s(" 位最多 "),a("span",{class:"token number"},"3"),s(" 位 "),a("span",{class:"token number"},"0"),s(`~9 的数字

`),a("span",{class:"token string"},'"[0-9]{2,3}"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" The number was "),a("span",{class:"token number"},"9"),s("."),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token number"},"9997"),a("span",{class:"token variable"},"`")]),s(" but we rounded it off to "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token number"},"10"),a("span",{class:"token variable"},"`")]),s(`.0.

- 我们可以省略第二个参数。
- `),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"0"),s("-9"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token number"},"2"),s(","),a("span",{class:"token punctuation"},"}"),a("span",{class:"token variable"},"`")]),s(" 匹配至少两位 "),a("span",{class:"token number"},"0"),s(`~9 的数字。

`),a("span",{class:"token string"},'"[0-9]{2,}"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" The number was "),a("span",{class:"token number"},"9"),s("."),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token number"},"9997"),a("span",{class:"token variable"},"`")]),s(" but we rounded it off to "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token number"},"10"),a("span",{class:"token variable"},"`")]),s(`.0.

- 如果逗号也省略掉则表示重复固定的次数。
- `),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"0"),s("-9"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token number"},"3"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token variable"},"`")]),s(` 匹配3位数字

`),a("span",{class:"token string"},'"[0-9]{3}"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(" The number was "),a("span",{class:"token number"},"9"),s("."),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token number"},"999"),a("span",{class:"token variable"},"`")]),a("span",{class:"token number"},"7"),s(" but we rounded it off to "),a("span",{class:"token number"},"10.0"),s(`.
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),N=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s(`- 或运算符就表示或，用作判断条件。

- `),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"("),s("T"),a("span",{class:"token operator"},"|"),s("t"),a("span",{class:"token punctuation"},")"),s("he"),a("span",{class:"token operator"},"|"),s("car"),a("span",{class:"token variable"},"`")]),s(" 匹配 "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),a("span",{class:"token punctuation"},"("),s("T"),a("span",{class:"token operator"},"|"),s("t"),a("span",{class:"token punctuation"},")"),s("he"),a("span",{class:"token variable"},"`")]),s(" 或 "),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("car"),a("span",{class:"token variable"},"`")]),s(`。

`),a("span",{class:"token string"},'"(T|t)he|car"'),s(),a("span",{class:"token operator"},"="),a("span",{class:"token operator"},">"),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("The"),a("span",{class:"token variable"},"`")]),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("car"),a("span",{class:"token variable"},"`")]),s(" is parked "),a("span",{class:"token keyword"},"in"),s(),a("span",{class:"token variable"},[a("span",{class:"token variable"},"`"),s("the"),a("span",{class:"token variable"},"`")]),s(` garage.
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),V=u('<h2 id="简写字符集" tabindex="-1"><a class="header-anchor" href="#简写字符集" aria-hidden="true">#</a> 简写字符集</h2><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;">\\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9]</code></td></tr><tr><td style="text-align:center;">\\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td></tr><tr><td style="text-align:center;">\\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td>匹配非数字： <code>[^\\d]</code></td></tr><tr><td style="text-align:center;">\\s</td><td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;">\\S</td><td>匹配所有非空格字符： <code>[^\\s]</code></td></tr><tr><td style="text-align:center;">\\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center;">\\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center;">\\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center;">\\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center;">\\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center;">\\p</td><td>匹配 CR/LF（等同于 <code>\\r\\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><h2 id="标志" tabindex="-1"><a class="header-anchor" href="#标志" aria-hidden="true">#</a> 标志</h2><h3 id="忽略大小写" tabindex="-1"><a class="header-anchor" href="#忽略大小写" aria-hidden="true">#</a> 忽略大小写</h3><ul><li>修饰语 <code>i</code> 用于忽略大小写。</li><li>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</li></ul><p>&quot;/The/gi&quot; =&gt; <code>The</code> fat cat sat on <code>the</code> mat.</p><h3 id="全局搜索" tabindex="-1"><a class="header-anchor" href="#全局搜索" aria-hidden="true">#</a> 全局搜索</h3><ul><li>修饰符 <code>g</code> 常用于执行一个全局搜索匹配</li></ul><p>&quot;/.(at)/g&quot; =&gt; The <code>fat</code> <code>cat</code> <code>sat</code> on the <code>mat</code>.</p>',9);function z(B,D){const l=i("CodeTabs");return r(),p("div",null,[k,b,c(l,{id:"6",data:[{id:"vscode"},{id:"idea"}]},{title0:n(({value:e,isActive:t})=>[s("vscode")]),title1:n(({value:e,isActive:t})=>[s("idea")]),tab0:n(({value:e,isActive:t})=>[v]),tab1:n(({value:e,isActive:t})=>[m]),_:1}),h,c(l,{id:"17",data:[{id:"使用<code v-pre>Pattern</code>和<code v-pre>Matcher</code>类"},{id:"使用<code v-pre>String</code>类的<code v-pre>matches</code>方法"},{id:"使用<code v-pre>String</code>类的<code v-pre>replaceAll</code>方法"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[s("使用"),g,s("和"),x,s("类")]),title1:n(({value:e,isActive:t})=>[s("使用"),_,s("类的"),y,s("方法")]),title2:n(({value:e,isActive:t})=>[s("使用"),f,s("类的"),w,s("方法")]),tab0:n(({value:e,isActive:t})=>[A]),tab1:n(({value:e,isActive:t})=>[S]),tab2:n(({value:e,isActive:t})=>[T]),_:1}),j,c(l,{id:"34",data:[{id:"."},{id:"[]"},{id:"^"},{id:"*"},{id:"+"},{id:"?"},{id:"{}"},{id:"|"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[s(".")]),title1:n(({value:e,isActive:t})=>[s("[]")]),title2:n(({value:e,isActive:t})=>[s("^")]),title3:n(({value:e,isActive:t})=>[s("*")]),title4:n(({value:e,isActive:t})=>[s("+")]),title5:n(({value:e,isActive:t})=>[s("?")]),title6:n(({value:e,isActive:t})=>[s("{}")]),title7:n(({value:e,isActive:t})=>[s("|")]),tab0:n(({value:e,isActive:t})=>[P]),tab1:n(({value:e,isActive:t})=>[R]),tab2:n(({value:e,isActive:t})=>[C]),tab3:n(({value:e,isActive:t})=>[q]),tab4:n(({value:e,isActive:t})=>[E]),tab5:n(({value:e,isActive:t})=>[H]),tab6:n(({value:e,isActive:t})=>[M]),tab7:n(({value:e,isActive:t})=>[N]),_:1}),V])}const L=o(d,[["render",z],["__file","regex.html.vue"]]);export{L as default};
