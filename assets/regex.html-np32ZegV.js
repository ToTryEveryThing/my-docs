import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as d,c as p,d as o,w as e,a as n,b as s,f as u}from"./app-HgLMW5er.js";const r={},k=n("h1",{id:"regex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#regex","aria-hidden":"true"},"#"),s(" Regex")],-1),m=n("h2",{id:"java",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java","aria-hidden":"true"},"#"),s(" java")],-1),v=n("code",null,"Pattern",-1),b=n("code",null,"Matcher",-1),g=n("code",null,"String",-1),h=n("code",null,"matches",-1),w=n("code",null,"String",-1),y=n("code",null,"replaceAll",-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},"."),s("regex"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Matcher")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},"."),s("regex"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Pattern")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RegexExample"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" inputString "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello,123"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" regexPattern "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"\\\\d+"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 匹配数字"),s(`

        `),n("span",{class:"token class-name"},"Pattern"),s(" pattern "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Pattern"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compile"),n("span",{class:"token punctuation"},"("),s("regexPattern"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Matcher"),s(" matcher "),n("span",{class:"token operator"},"="),s(" pattern"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"matcher"),n("span",{class:"token punctuation"},"("),s("inputString"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("matcher"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"字符串中包含匹配的子串："'),s(),n("span",{class:"token operator"},"+"),s(" matcher"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"group"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 字符串中包含匹配的子串：123"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"字符串中没有匹配的子串。"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RegexExample2"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" inputString "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello,123"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" regexPattern "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"\\\\d+"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 匹配数字"),s(`

        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("inputString"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"matches"),n("span",{class:"token punctuation"},"("),s("regexPattern"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"字符串匹配正则表达式。"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"字符串不匹配正则表达式。"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 字符串不匹配正则表达式。"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RegexExample3"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" inputString "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello,123"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" regexPattern "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"\\\\d+"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 匹配数字"),s(`

        `),n("span",{class:"token class-name"},"String"),s(" replacedString "),n("span",{class:"token operator"},"="),s(" inputString"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"replaceAll"),n("span",{class:"token punctuation"},"("),s("regexPattern"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"替换后的字符串："'),s(),n("span",{class:"token operator"},"+"),s(" replacedString"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 替换后的字符串：Hello,"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("h2",{id:"元字符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元字符","aria-hidden":"true"},"#"),s(" 元字符")],-1),T=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` 是元字符中最简单的例子。
`),n("span",{class:"token list punctuation"},"-"),s(` 匹配任意单个字符，但不匹配换行符。

".ar" => The `),n("span",{class:"token code-snippet code keyword"},"`car`"),s(),n("span",{class:"token code-snippet code keyword"},"`par`"),s("ked in the "),n("span",{class:"token code-snippet code keyword"},"`gar`"),s(`age.
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` 字符集也叫做字符类。
`),n("span",{class:"token list punctuation"},"-"),s(` 方括号用来指定一个字符集。
`),n("span",{class:"token list punctuation"},"-"),s(` 在方括号中使用连字符来指定字符集的范围。
`),n("span",{class:"token list punctuation"},"-"),s(` 在方括号中的字符集不关心顺序。

"[Tt]he" => `),n("span",{class:"token code-snippet code keyword"},"`The`"),s(" car parked in "),n("span",{class:"token code-snippet code keyword"},"`the`"),s(` garage.

`),n("span",{class:"token list punctuation"},"-"),s(` 方括号的句号就表示句号。

"ar[.]" => A garage is a good place to park a c`),n("span",{class:"token code-snippet code keyword"},"`ar.`"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` 否定字符集

[^c]ar => The car `),n("span",{class:"token code-snippet code keyword"},"`par`"),s("ked in the "),n("span",{class:"token code-snippet code keyword"},"`gar`"),s(`age.

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`*`"),s("号匹配 在"),n("span",{class:"token code-snippet code keyword"},"`*`"),s("之前的字符出现"),n("span",{class:"token code-snippet code keyword"},"`大于等于0`"),s(`次。
`),n("span",{class:"token list punctuation"},"-"),s(" 表达式"),n("span",{class:"token code-snippet code keyword"},"`[a-z]*`"),s(` 匹配一个行中所有以小写字母开头的字符串。

"[a-z]*" => T`),n("span",{class:"token code-snippet code keyword"},"`he car parked in the garage`"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`+`"),s("号匹配"),n("span",{class:"token code-snippet code keyword"},"`+`"),s(`号之前的字符出现 >=1 次。

`),n("span",{class:"token list punctuation"},"-"),s(" 例如表达式"),n("span",{class:"token code-snippet code keyword"},"`c.+t`"),s(" 匹配以首字母"),n("span",{class:"token code-snippet code keyword"},"`c`"),s("开头以"),n("span",{class:"token code-snippet code keyword"},"`t`"),s(`结尾，中间跟着至少一个字符的字符串。

"c.+t" => The fat `),n("span",{class:"token code-snippet code keyword"},"`cat sat on the mat`"),s(`.
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` 出现 0 或 1 次。
`),n("span",{class:"token list punctuation"},"-"),s(" 表达式 "),n("span",{class:"token code-snippet code keyword"},"`[T]?he`"),s(" 匹配字符串 "),n("span",{class:"token code-snippet code keyword"},"`he`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`The`"),s(`

"[T]he" => `),n("span",{class:"token code-snippet code keyword"},"`The`"),s(` car is parked in the garage.

"[T]?he" => `),n("span",{class:"token code-snippet code keyword"},"`The`"),s(" car is parked in t"),n("span",{class:"token code-snippet code keyword"},"`he`"),s(` garage.

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` 常用来限定一个或一组字符可以重复出现的次数。
`),n("span",{class:"token list punctuation"},"-"),s(" 表达式 "),n("span",{class:"token code-snippet code keyword"},"`[0-9]{2,3}`"),s(` 匹配最少 2 位最多 3 位 0~9 的数字

"[0-9]{2,3}" => The number was 9.`),n("span",{class:"token code-snippet code keyword"},"`9997`"),s(" but we rounded it off to "),n("span",{class:"token code-snippet code keyword"},"`10`"),s(`.0.

`),n("span",{class:"token list punctuation"},"-"),s(` 我们可以省略第二个参数。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`[0-9]{2,}`"),s(` 匹配至少两位 0~9 的数字。

"[0-9]{2,}" => The number was 9.`),n("span",{class:"token code-snippet code keyword"},"`9997`"),s(" but we rounded it off to "),n("span",{class:"token code-snippet code keyword"},"`10`"),s(`.0.

`),n("span",{class:"token list punctuation"},"-"),s(` 如果逗号也省略掉则表示重复固定的次数。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`[0-9]{3}`"),s(` 匹配3位数字

"[0-9]{3}" => The number was 9.`),n("span",{class:"token code-snippet code keyword"},"`999`"),s(`7 but we rounded it off to 10.0.
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` 或运算符就表示或，用作判断条件。

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`(T|t)he|car`"),s(" 匹配 "),n("span",{class:"token code-snippet code keyword"},"`(T|t)he`"),s(" 或 "),n("span",{class:"token code-snippet code keyword"},"`car`"),s(`。

"(T|t)he|car" => `),n("span",{class:"token code-snippet code keyword"},"`The`"),s(),n("span",{class:"token code-snippet code keyword"},"`car`"),s(" is parked in "),n("span",{class:"token code-snippet code keyword"},"`the`"),s(` garage.
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=u('<h2 id="简写字符集" tabindex="-1"><a class="header-anchor" href="#简写字符集" aria-hidden="true">#</a> 简写字符集</h2><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;">\\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9]</code></td></tr><tr><td style="text-align:center;">\\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td></tr><tr><td style="text-align:center;">\\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td>匹配非数字： <code>[^\\d]</code></td></tr><tr><td style="text-align:center;">\\s</td><td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;">\\S</td><td>匹配所有非空格字符： <code>[^\\s]</code></td></tr><tr><td style="text-align:center;">\\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center;">\\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center;">\\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center;">\\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center;">\\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center;">\\p</td><td>匹配 CR/LF（等同于 <code>\\r\\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><h2 id="标志" tabindex="-1"><a class="header-anchor" href="#标志" aria-hidden="true">#</a> 标志</h2><h3 id="忽略大小写" tabindex="-1"><a class="header-anchor" href="#忽略大小写" aria-hidden="true">#</a> 忽略大小写</h3><ul><li>修饰语 <code>i</code> 用于忽略大小写。</li><li>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</li></ul><p>&quot;/The/gi&quot; =&gt; <code>The</code> fat cat sat on <code>the</code> mat.</p><h3 id="全局搜索" tabindex="-1"><a class="header-anchor" href="#全局搜索" aria-hidden="true">#</a> 全局搜索</h3><ul><li>修饰符 <code>g</code> 常用于执行一个全局搜索匹配</li></ul><p>&quot;/.(at)/g&quot; =&gt; The <code>fat</code> <code>cat</code> <code>sat</code> on the <code>mat</code>.</p>',9);function M(N,V){const c=i("CodeTabs");return d(),p("div",null,[k,m,o(c,{id:"6",data:[{id:"使用<code v-pre>Pattern</code>和<code v-pre>Matcher</code>类"},{id:"使用<code v-pre>String</code>类的<code v-pre>matches</code>方法"},{id:"使用<code v-pre>String</code>类的<code v-pre>replaceAll</code>方法"}],"tab-id":"shell"},{title0:e(({value:a,isActive:t})=>[s("使用"),v,s("和"),b,s("类")]),title1:e(({value:a,isActive:t})=>[s("使用"),g,s("类的"),h,s("方法")]),title2:e(({value:a,isActive:t})=>[s("使用"),w,s("类的"),y,s("方法")]),tab0:e(({value:a,isActive:t})=>[_]),tab1:e(({value:a,isActive:t})=>[x]),tab2:e(({value:a,isActive:t})=>[f]),_:1}),S,o(c,{id:"23",data:[{id:"."},{id:"[]"},{id:"^"},{id:"*"},{id:"+"},{id:"?"},{id:"{}"},{id:"|"}],"tab-id":"shell"},{title0:e(({value:a,isActive:t})=>[s(".")]),title1:e(({value:a,isActive:t})=>[s("[]")]),title2:e(({value:a,isActive:t})=>[s("^")]),title3:e(({value:a,isActive:t})=>[s("*")]),title4:e(({value:a,isActive:t})=>[s("+")]),title5:e(({value:a,isActive:t})=>[s("?")]),title6:e(({value:a,isActive:t})=>[s("{}")]),title7:e(({value:a,isActive:t})=>[s("|")]),tab0:e(({value:a,isActive:t})=>[T]),tab1:e(({value:a,isActive:t})=>[A]),tab2:e(({value:a,isActive:t})=>[j]),tab3:e(({value:a,isActive:t})=>[P]),tab4:e(({value:a,isActive:t})=>[C]),tab5:e(({value:a,isActive:t})=>[R]),tab6:e(({value:a,isActive:t})=>[q]),tab7:e(({value:a,isActive:t})=>[E]),_:1},8,["data"]),H])}const D=l(r,[["render",M],["__file","regex.html.vue"]]);export{D as default};
