import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as c,c as h,a as e,b as t,d as o,f as a}from"./app-44c31854.js";const s={},l=e("h2",{id:"什么是正则表达式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是正则表达式","aria-hidden":"true"},"#"),t(" 什么是正则表达式？")],-1),g={href:"https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md",target:"_blank",rel:"noopener noreferrer"},p=a(`<blockquote><p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p></blockquote><p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。 正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p><h2 id="_1-基本匹配" tabindex="-1"><a class="header-anchor" href="#_1-基本匹配" aria-hidden="true">#</a> 1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。 例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p><pre>&quot;the&quot; =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>`,5),i={href:"https://regex101.com/r/dmRygT/1",target:"_blank",rel:"noopener noreferrer"},_=a(`<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p><p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p><pre>&quot;The&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>`,3),f={href:"https://regex101.com/r/1paXsy/1",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="_2-元字符" tabindex="-1"><a class="header-anchor" href="#_2-元字符" aria-hidden="true">#</a> 2. 元字符</h2><p>正则表达式主要依赖于元字符。 元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>句号匹配任意单个字符除了换行符。</td></tr><tr><td>[ ]</td><td>字符种类。匹配方括号内的任意字符。</td></tr><tr><td>[^ ]</td><td>否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td>*</td><td>匹配&gt;=0个重复的在*号之前的字符。</td></tr><tr><td>+</td><td>匹配&gt;=1个重复的+号前的字符。</td></tr><tr><td>?</td><td>标记?之前的字符为可选.</td></tr><tr><td><code>{n,m}</code></td><td><code>匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</code></td></tr><tr><td>(xyz)</td><td>字符集，匹配与 xyz 完全相等的字符串.</td></tr><tr><td>|</td><td>或运算符，匹配符号前或后的字符.</td></tr><tr><td>\\</td><td>转义字符,用于匹配一些保留的字符 `[ ] ( ) { } . * + ? ^ $ \\</td></tr><tr><td>^</td><td>从开始行开始匹配.</td></tr><tr><td>$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="_2-1-点运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-点运算符" aria-hidden="true">#</a> 2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子。 <code>.</code>匹配任意单个字符，但不匹配换行符。 例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p><pre>&quot;.ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n</pre>',6),x={href:"https://regex101.com/r/xc9GkU/1",target:"_blank",rel:"noopener noreferrer"},b=a(`<h2 id="_2-2-字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-字符集" aria-hidden="true">#</a> 2.2 字符集</h2><p>字符集也叫做字符类。 方括号用来指定一个字符集。 在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。 例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p><pre>&quot;[Tt]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>`,3),m={href:"https://regex101.com/r/2ITLQ4/1",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,[t("方括号的句号就表示句号。 表达式 "),e("code",null,"ar[.]"),t(" 匹配 "),e("code",null,"ar."),t("字符串")],-1),k=e("pre",null,[t('"ar[.]" => A garage is a good place to park a c'),e("a",{href:"#learn-regex"},[e("strong",null,"ar.")]),t(`
`)],-1),q={href:"https://regex101.com/r/wL3xtE/1",target:"_blank",rel:"noopener noreferrer"},y=a(`<h3 id="_2-2-1-否定字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-1-否定字符集" aria-hidden="true">#</a> 2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。 例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p><pre>&quot;[^c]ar&quot; =&gt; The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>`,3),$={href:"https://regex101.com/r/nNNlq3/1",target:"_blank",rel:"noopener noreferrer"},z=a(`<h2 id="_2-3-重复次数" tabindex="-1"><a class="header-anchor" href="#_2-3-重复次数" aria-hidden="true">#</a> 2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。 这些元字符在不同的情况下有着不同的意思。</p><h3 id="_2-3-1-号" tabindex="-1"><a class="header-anchor" href="#_2-3-1-号" aria-hidden="true">#</a> 2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p><pre>&quot;[a-z]*&quot; =&gt; T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>`,5),v={href:"https://regex101.com/r/7m8me5/1",target:"_blank",rel:"noopener noreferrer"},A=a(`<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。 <code>*</code>和表示匹配空格的符号<code>\\s</code>连起来用，如表达式<code>\\s*cat\\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p><pre>&quot;\\s*cat\\s*&quot; =&gt; The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre>`,2),w={href:"https://regex101.com/r/gGrwuz/1",target:"_blank",rel:"noopener noreferrer"},E=a(`<h3 id="_2-3-2-号" tabindex="-1"><a class="header-anchor" href="#_2-3-2-号" aria-hidden="true">#</a> 2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。 例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p><pre>&quot;c.+t&quot; =&gt; The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>`,3),D={href:"https://regex101.com/r/Dzf9Aa/1",target:"_blank",rel:"noopener noreferrer"},G=a(`<h3 id="_2-3-3-号" tabindex="-1"><a class="header-anchor" href="#_2-3-3-号" aria-hidden="true">#</a> 2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。 例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p><pre>&quot;[T]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>`,3),N={href:"https://regex101.com/r/cIg9zm/1",target:"_blank",rel:"noopener noreferrer"},B=e("pre",null,[t('"[T]?he" => '),e("a",{href:"#learn-regex"},[e("strong",null,"The")]),t(" car is parked in t"),e("a",{href:"#learn-regex"},[e("strong",null,"he")]),t(` garage.
`)],-1),I={href:"https://regex101.com/r/kPpO2x/1",target:"_blank",rel:"noopener noreferrer"},M=a(`<h2 id="_2-4-号" tabindex="-1"><a class="header-anchor" href="#_2-4-号" aria-hidden="true">#</a> 2.4 <code>{}</code> 号</h2><p>在正则表达式中 <code>{}</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式 <code>[0-9]{2,3}</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p><pre>&quot;[0-9]{2,3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>`,3),R={href:"https://regex101.com/r/juM86s/1",target:"_blank",rel:"noopener noreferrer"},j=e("p",null,[t("我们可以省略第二个参数。 例如，"),e("code",null,"[0-9]{2,}"),t(" 匹配至少两位 0~9 的数字。")],-1),L=e("pre",null,[t('"[0-9]{2,}" => The number was 9.'),e("a",{href:"#learn-regex"},[e("strong",null,"9997")]),t(" but we rounded it off to "),e("a",{href:"#learn-regex"},[e("strong",null,"10")]),t(`.0.
`)],-1),O={href:"https://regex101.com/r/Gdy4w5/1",target:"_blank",rel:"noopener noreferrer"},V=e("p",null,[t("如果逗号也省略掉则表示重复固定的次数。 例如，"),e("code",null,"[0-9]{3}"),t(" 匹配3位数字")],-1),S=e("pre",null,[t('"[0-9]{3}" => The number was 9.'),e("a",{href:"#learn-regex"},[e("strong",null,"999")]),t(`7 but we rounded it off to 10.0.
`)],-1),X={href:"https://regex101.com/r/Sivu30/1",target:"_blank",rel:"noopener noreferrer"},C=a(`<h2 id="_2-5-特征标群" tabindex="-1"><a class="header-anchor" href="#_2-5-特征标群" aria-hidden="true">#</a> 2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>{}</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre>&quot;(c|g|p)ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>`,4),H={href:"https://regex101.com/r/tUxrBG/1",target:"_blank",rel:"noopener noreferrer"},J=a(`<h2 id="_2-6-或运算符" tabindex="-1"><a class="header-anchor" href="#_2-6-或运算符" aria-hidden="true">#</a> 2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或，用作判断条件。</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p><pre>&quot;(T|t)he|car&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>`,4),P={href:"https://regex101.com/r/fBXyX0/1",target:"_blank",rel:"noopener noreferrer"},Q=a(`<h2 id="_2-7-转码特殊字符" tabindex="-1"><a class="header-anchor" href="#_2-7-转码特殊字符" aria-hidden="true">#</a> 2.7 转码特殊字符</h2><p>反斜线 <code>\\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>{ } [ ] / \\ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\\</code>。</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\\.</code> 以下这个例子 <code>\\.?</code>是选择性匹配<code>.</code></p><pre>&quot;(f|c|m)at\\.?&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>`,4),U={href:"https://regex101.com/r/DOc5Nu/1",target:"_blank",rel:"noopener noreferrer"},W=a(`<h2 id="_2-8-锚点" tabindex="-1"><a class="header-anchor" href="#_2-8-锚点" aria-hidden="true">#</a> 2.8 锚点</h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p><h3 id="_2-8-1-号" tabindex="-1"><a class="header-anchor" href="#_2-8-1-号" aria-hidden="true">#</a> 2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p><p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p><pre>&quot;(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>`,7),Z={href:"https://regex101.com/r/5ljjgB/1",target:"_blank",rel:"noopener noreferrer"},F=e("pre",null,[t('"^(T|t)he" => '),e("a",{href:"#learn-regex"},[e("strong",null,"The")]),t(` car is parked in the garage.
`)],-1),K={href:"https://regex101.com/r/jXrKne/1",target:"_blank",rel:"noopener noreferrer"},Y=a(`<h3 id="_2-8-2-号" tabindex="-1"><a class="header-anchor" href="#_2-8-2-号" aria-hidden="true">#</a> 2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p><pre>&quot;(at\\.)&quot; =&gt; The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>`,4),ee={href:"https://regex101.com/r/y4Au4D/1",target:"_blank",rel:"noopener noreferrer"},te=e("pre",null,[t('"(at\\.)$" => The fat cat. sat. on the m'),e("a",{href:"#learn-regex"},[e("strong",null,"at.")]),t(`
`)],-1),re={href:"https://regex101.com/r/t0AkOd/1",target:"_blank",rel:"noopener noreferrer"},oe=a(`<h2 id="_3-简写字符集" tabindex="-1"><a class="header-anchor" href="#_3-简写字符集" aria-hidden="true">#</a> 3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写。如下:</p><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;">\\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center;">\\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td></tr><tr><td style="text-align:center;">\\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td>匹配非数字： <code>[^\\d]</code></td></tr><tr><td style="text-align:center;">\\s</td><td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;">\\S</td><td>匹配所有非空格字符： <code>[^\\s]</code></td></tr><tr><td style="text-align:center;">\\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center;">\\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center;">\\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center;">\\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center;">\\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center;">\\p</td><td>匹配 CR/LF（等同于 <code>\\r\\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><h2 id="_4-零宽度断言-前后预查" tabindex="-1"><a class="header-anchor" href="#_4-零宽度断言-前后预查" aria-hidden="true">#</a> 4. 零宽度断言（前后预查）</h2><p>先行断言和后发断言（合称 lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p><p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\\$)[0-9\\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p><p>零宽度断言如下：</p><table><thead><tr><th style="text-align:center;">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">?=</td><td>正先行断言-存在</td></tr><tr><td style="text-align:center;">?!</td><td>负先行断言-排除</td></tr><tr><td style="text-align:center;">?&lt;=</td><td>正后发断言-存在</td></tr><tr><td style="text-align:center;">?&lt;!</td><td>负后发断言-排除</td></tr></tbody></table><h3 id="_4-1-正先行断言" tabindex="-1"><a class="header-anchor" href="#_4-1-正先行断言" aria-hidden="true">#</a> 4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p><p>正先行断言的内容写在括号中的等号后面。 例如，表达式 <code>(T|t)he(?=\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p><pre>&quot;(T|t)he(?=\\sfat)&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>`,13),ae={href:"https://regex101.com/r/IDDARt/1",target:"_blank",rel:"noopener noreferrer"},de=a(`<h3 id="_4-2-负先行断言" tabindex="-1"><a class="header-anchor" href="#_4-2-负先行断言" aria-hidden="true">#</a> 4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p><p>表达式 <code>(T|t)he(?!\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p><pre>&quot;(T|t)he(?!\\sfat)&quot; =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>`,4),ne={href:"https://regex101.com/r/V32Npg/1",target:"_blank",rel:"noopener noreferrer"},ce=a(`<h3 id="_4-3-正后发断言" tabindex="-1"><a class="header-anchor" href="#_4-3-正后发断言" aria-hidden="true">#</a> 4.3 <code>?&lt;= ...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p><pre>&quot;(?《 =(T|t)he\\s)(fat|mat)&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>`,3),he={href:"https://regex101.com/r/avH165/1",target:"_blank",rel:"noopener noreferrer"},se=a(`<h3 id="_4-4-负后发断言" tabindex="-1"><a class="header-anchor" href="#_4-4-负后发断言" aria-hidden="true">#</a> 4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p><pre>&quot;(? &lt; !(T|t)he\\s)(cat)&quot; =&gt; The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>`,3),le={href:"https://regex101.com/r/8Efx5G/1",target:"_blank",rel:"noopener noreferrer"},ge=a(`<h2 id="_5-标志" tabindex="-1"><a class="header-anchor" href="#_5-标志" aria-hidden="true">#</a> 5. 标志</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。 这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p><table><thead><tr><th style="text-align:center;">标志</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td>忽略大小写。</td></tr><tr><td style="text-align:center;">g</td><td>全局搜索。</td></tr><tr><td style="text-align:center;">m</td><td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td></tr></tbody></table><h3 id="_5-1-忽略大小写-case-insensitive" tabindex="-1"><a class="header-anchor" href="#_5-1-忽略大小写-case-insensitive" aria-hidden="true">#</a> 5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写。 例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p><pre>&quot;The&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>`,6),pe={href:"https://regex101.com/r/dpQyf9/1",target:"_blank",rel:"noopener noreferrer"},ie=e("pre",null,[t('"/The/gi" => '),e("a",{href:"#learn-regex"},[e("strong",null,"The")]),t(" fat cat sat on "),e("a",{href:"#learn-regex"},[e("strong",null,"the")]),t(` mat.
`)],-1),_e={href:"https://regex101.com/r/ahfiuh/1",target:"_blank",rel:"noopener noreferrer"},fe=a(`<h3 id="_5-2-全局搜索-global-search" tabindex="-1"><a class="header-anchor" href="#_5-2-全局搜索-global-search" aria-hidden="true">#</a> 5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。 例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p><pre>&quot;/.(at)/&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>`,3),ue={href:"https://regex101.com/r/jnk6gM/1",target:"_blank",rel:"noopener noreferrer"},xe=e("pre",null,[t('"/.(at)/g" => The '),e("a",{href:"#learn-regex"},[e("strong",null,"fat")]),t(),e("a",{href:"#learn-regex"},[e("strong",null,"cat")]),t(),e("a",{href:"#learn-regex"},[e("strong",null,"sat")]),t(" on the "),e("a",{href:"#learn-regex"},[e("strong",null,"mat")]),t(`.
`)],-1),be={href:"https://regex101.com/r/dO1nef/1",target:"_blank",rel:"noopener noreferrer"},me=a(`<h3 id="_5-3-多行修饰符-multiline" tabindex="-1"><a class="header-anchor" href="#_5-3-多行修饰符-multiline" aria-hidden="true">#</a> 5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p><p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p><pre>&quot;/.at(.)?$/&quot; =&gt; The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>`,5),Te={href:"https://regex101.com/r/hoGMkP/1",target:"_blank",rel:"noopener noreferrer"},ke=e("pre",null,[t('"/.at(.)?$/gm" => The '),e("a",{href:"#learn-regex"},[e("strong",null,"fat")]),t(`
                  cat `),e("a",{href:"#learn-regex"},[e("strong",null,"sat")]),t(`
                  on the `),e("a",{href:"#learn-regex"},[e("strong",null,"mat.")]),t(`
`)],-1),qe={href:"https://regex101.com/r/E88WE2/1",target:"_blank",rel:"noopener noreferrer"},ye=e("h3",{id:"_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching","aria-hidden":"true"},"#"),t(" 6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)")],-1),$e=e("p",null,[t("正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 "),e("code",null,"?"),t(" 将贪婪匹配模式转化为惰性匹配模式。")],-1),ze=e("pre",null,[t('"/(.*at)/" => '),e("a",{href:"#learn-regex"},[e("strong",null,"The fat cat sat on the mat")]),t(". ")],-1),ve={href:"https://regex101.com/r/AyAdgJ/1",target:"_blank",rel:"noopener noreferrer"},Ae=e("pre",null,[t('"/(.*?at)/" => '),e("a",{href:"#learn-regex"},[e("strong",null,"The fat")]),t(" cat sat on the mat. ")],-1),we={href:"https://regex101.com/r/AyAdgJ/2",target:"_blank",rel:"noopener noreferrer"};function Ee(De,Ge){const r=n("ExternalLinkIcon");return c(),h("div",null,[l,e("p",null,[e("a",g,[t("地址：learn-regex/translations/README-cn.md at master · ziishaned/learn-regex · GitHub"),o(r)])]),p,e("p",null,[e("a",i,[t("在线练习"),o(r)])]),_,e("p",null,[e("a",f,[t("在线练习"),o(r)])]),u,e("p",null,[e("a",x,[t("在线练习"),o(r)])]),b,e("p",null,[e("a",m,[t("在线练习"),o(r)])]),T,k,e("p",null,[e("a",q,[t("在线练习"),o(r)])]),y,e("p",null,[e("a",$,[t("在线练习"),o(r)])]),z,e("p",null,[e("a",v,[t("在线练习"),o(r)])]),A,e("p",null,[e("a",w,[t("在线练习"),o(r)])]),E,e("p",null,[e("a",D,[t("在线练习"),o(r)])]),G,e("p",null,[e("a",N,[t("在线练习"),o(r)])]),B,e("p",null,[e("a",I,[t("在线练习"),o(r)])]),M,e("p",null,[e("a",R,[t("在线练习"),o(r)])]),j,L,e("p",null,[e("a",O,[t("在线练习"),o(r)])]),V,S,e("p",null,[e("a",X,[t("在线练习"),o(r)])]),C,e("p",null,[e("a",H,[t("在线练习"),o(r)])]),J,e("p",null,[e("a",P,[t("在线练习"),o(r)])]),Q,e("p",null,[e("a",U,[t("在线练习"),o(r)])]),W,e("p",null,[e("a",Z,[t("在线练习"),o(r)])]),F,e("p",null,[e("a",K,[t("在线练习"),o(r)])]),Y,e("p",null,[e("a",ee,[t("在线练习"),o(r)])]),te,e("p",null,[e("a",re,[t("在线练习"),o(r)])]),oe,e("p",null,[e("a",ae,[t("在线练习"),o(r)])]),de,e("p",null,[e("a",ne,[t("在线练习"),o(r)])]),ce,e("p",null,[e("a",he,[t("在线练习"),o(r)])]),se,e("p",null,[e("a",le,[t("在线练习"),o(r)])]),ge,e("p",null,[e("a",pe,[t("在线练习"),o(r)])]),ie,e("p",null,[e("a",_e,[t("在线练习"),o(r)])]),fe,e("p",null,[e("a",ue,[t("在线练习"),o(r)])]),xe,e("p",null,[e("a",be,[t("在线练习"),o(r)])]),me,e("p",null,[e("a",Te,[t("在线练习"),o(r)])]),ke,e("p",null,[e("a",qe,[t("在线练习"),o(r)])]),ye,$e,ze,e("p",null,[e("a",ve,[t("在线练习"),o(r)])]),Ae,e("p",null,[e("a",we,[t("在线练习"),o(r)])])])}const Ie=d(s,[["render",Ee],["__file","regex.html.vue"]]);export{Ie as default};
