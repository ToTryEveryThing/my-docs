export default "{\"documentCount\":501,\"nextId\":501,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-145ac574\",\"2\":\"v-3daef8ee\",\"3\":\"v-e7d29956\",\"4\":\"v-e7d29956#java-上传-aliyun-oss\",\"5\":\"v-e7d29956#使用ram访问-更安全\",\"6\":\"v-e7d29956#上传图片\",\"7\":\"v-e7d29956#目录列表\",\"8\":\"v-e7d29956#删除图片\",\"9\":\"v-e7d29956#自定义-starter\",\"10\":\"v-e7d29956#介绍\",\"11\":\"v-e7d29956#准备\",\"12\":\"v-e7d29956#取名\",\"13\":\"v-e7d29956#配置类\",\"14\":\"v-e7d29956#导入方式\",\"15\":\"v-e7d29956#注解导入\",\"16\":\"v-e7d29956#注解参数\",\"17\":\"v-e7d29956#spring-factories导入\",\"18\":\"v-e7d29956#配置文件\",\"19\":\"v-e7d29956#自动提示\",\"20\":\"v-e7d29956#配置代理\",\"21\":\"v-e7d29956#配置依赖\",\"22\":\"v-e7d29956#条件装配\",\"23\":\"v-e7d29956#其他常用的条件注解\",\"24\":\"v-e7d29956#配置顺序\",\"25\":\"v-870b7946\",\"26\":\"v-870b7946#静态资源访问\",\"27\":\"v-870b7946#文件上传\",\"28\":\"v-870b7946#热加载-hot-swap\",\"29\":\"v-870b7946#websocket-和-sockjs\",\"30\":\"v-870b7946#websocket的优势\",\"31\":\"v-870b7946#websocket的缺点\",\"32\":\"v-870b7946#sockjs的优势\",\"33\":\"v-870b7946#sockjs的缺点\",\"34\":\"v-870b7946#发送邮件\",\"35\":\"v-870b7946#定时任务\",\"36\":\"v-870b7946#scheduled-cron-0-0-12-使用cron表达式指定执行时间。\",\"37\":\"v-870b7946#数据校验\",\"38\":\"v-870b7946#分布式锁\",\"39\":\"v-870b7946#redis分布式锁和redisson分布式锁都是用于实现分布式系统中的分布式锁-但它们之间有以下区别\",\"40\":\"v-870b7946#redis分布式锁\",\"41\":\"v-870b7946#redisson\",\"42\":\"v-870b7946#swagger\",\"43\":\"v-870b7946#搭建\",\"44\":\"v-2bcb26fa\",\"45\":\"v-2bcb26fa#一、git安装后-指定名称和邮箱\",\"46\":\"v-2bcb26fa#二、分支管理\",\"47\":\"v-2bcb26fa#二、创建版本库\",\"48\":\"v-2bcb26fa#三、把文件添加add和提交commit到版本库\",\"49\":\"v-2bcb26fa#四、版本控制\",\"50\":\"v-2bcb26fa#五、删除文件-缓存\",\"51\":\"v-2bcb26fa#六、远程仓库\",\"52\":\"v-2bcb26fa#七、批量修改提交人信息\",\"53\":\"v-083f0e38\",\"54\":\"v-083f0e38#查找命令\",\"55\":\"v-083f0e38#find\",\"56\":\"v-083f0e38#grep\",\"57\":\"v-083f0e38#docker\",\"58\":\"v-083f0e38#数据卷\",\"59\":\"v-083f0e38#基本命令\",\"60\":\"v-083f0e38#示例\",\"61\":\"v-083f0e38#自定义镜像\",\"62\":\"v-083f0e38#dockercompose\",\"63\":\"v-083f0e38#基操\",\"64\":\"v-083f0e38#镜像-images\",\"65\":\"v-083f0e38#容器-container\",\"66\":\"v-083f0e38#例子\",\"67\":\"v-083f0e38#mysql\",\"68\":\"v-083f0e38#导出完整数据库\",\"69\":\"v-083f0e38#导入数据库\",\"70\":\"v-083f0e38#vim\",\"71\":\"v-083f0e38#ssh-免密登录\",\"72\":\"v-9e67bfbe\",\"73\":\"v-9e67bfbe#安装\",\"74\":\"v-9e67bfbe#阿里镜像\",\"75\":\"v-9e67bfbe#简单命令\",\"76\":\"v-9e67bfbe#依赖管理\",\"77\":\"v-9e67bfbe#依赖传递\",\"78\":\"v-9e67bfbe#可选依赖\",\"79\":\"v-9e67bfbe#排除依赖\",\"80\":\"v-9e67bfbe#依赖范围\",\"81\":\"v-9e67bfbe#分模块\",\"82\":\"v-9e67bfbe#pom\",\"83\":\"v-9e67bfbe#说明\",\"84\":\"v-9e67bfbe#多模块打包\",\"85\":\"v-9e67bfbe#正确流程\",\"86\":\"v-752d211c\",\"87\":\"v-752d211c#正向代理\",\"88\":\"v-752d211c#反向代理\",\"89\":\"v-752d211c#负载均衡\",\"90\":\"v-752d211c#nginx-conf\",\"91\":\"v-5e797cda\",\"92\":\"v-400e65a8\",\"93\":\"v-400e65a8#jwt-filter-interceptor\",\"94\":\"v-62533046\",\"95\":\"v-62533046#基础操作\",\"96\":\"v-62533046#cat\",\"97\":\"v-62533046#索引\",\"98\":\"v-62533046#文档\",\"99\":\"v-62533046#高级查询\",\"100\":\"v-62533046#springboot\",\"101\":\"v-62533046#索引-1\",\"102\":\"v-62533046#文档-1\",\"103\":\"v-62533046#高级查询-1\",\"104\":\"v-4d91c61a\",\"105\":\"v-4d91c61a#基础部分\",\"106\":\"v-4d91c61a#simple简单模式\",\"107\":\"v-4d91c61a#生产消息\",\"108\":\"v-4d91c61a#消费消息\",\"109\":\"v-4d91c61a#实现工具类\",\"110\":\"v-4d91c61a#任务模型\",\"111\":\"v-4d91c61a#consumer\",\"112\":\"v-4d91c61a#广播\",\"113\":\"v-4d91c61a#生产者\",\"114\":\"v-4d91c61a#消费者\",\"115\":\"v-4d91c61a#路由模型\",\"116\":\"v-4d91c61a#直连\",\"117\":\"v-4d91c61a#生产者-1\",\"118\":\"v-4d91c61a#消费者-1\",\"119\":\"v-4d91c61a#动态\",\"120\":\"v-4d91c61a#代码\",\"121\":\"v-4d91c61a#spring-boot-整合\",\"122\":\"v-4d91c61a#test\",\"123\":\"v-4d91c61a#简单\",\"124\":\"v-4d91c61a#任务\",\"125\":\"v-4d91c61a#广播-1\",\"126\":\"v-4d91c61a#静态路由\",\"127\":\"v-4d91c61a#动态路由\",\"128\":\"v-4d91c61a#高级\",\"129\":\"v-4d91c61a#_1-发送者的可靠性\",\"130\":\"v-4d91c61a#_1-1-生产者重试机制\",\"131\":\"v-4d91c61a#_1-2-生产者确认机制\",\"132\":\"v-4d91c61a#_2-mq的可靠性\",\"133\":\"v-4d91c61a#_2-1-数据持久化\",\"134\":\"v-4d91c61a#_2-2-lazyqueue\",\"135\":\"v-4d91c61a#_2-2-1-控制台配置lazy模式\",\"136\":\"v-4d91c61a#_2-2-2-代码配置lazy模式\",\"137\":\"v-4d91c61a#_2-2-3-更新已有队列为lazy模式\",\"138\":\"v-4d91c61a#_3-消费者的可靠性\",\"139\":\"v-4d91c61a#_2-1-消费者确认机制\",\"140\":\"v-4d91c61a#_2-2-失败重试机制\",\"141\":\"v-4d91c61a#_2-3-失败处理策略\",\"142\":\"v-4d91c61a#_2-4-业务幂等性\",\"143\":\"v-4d91c61a#_2-4-1-唯一消息id\",\"144\":\"v-4d91c61a#_2-4-2-业务判断\",\"145\":\"v-4d91c61a#_2-5-兜底方案\",\"146\":\"v-4d91c61a#延迟队列\",\"147\":\"v-4d91c61a#生产者-2\",\"148\":\"v-4d91c61a#消费者-2\",\"149\":\"v-2b65e03e\",\"150\":\"v-72d40a42\",\"151\":\"v-72d40a42#安装\",\"152\":\"v-72d40a42#基本命令\",\"153\":\"v-72d40a42#五大数据类型\",\"154\":\"v-72d40a42#序列化\",\"155\":\"v-72d40a42#实现\",\"156\":\"v-72d40a42#测试\",\"157\":\"v-72d40a42#持久化\",\"158\":\"v-72d40a42#rdb\",\"159\":\"v-72d40a42#触发\",\"160\":\"v-72d40a42#aof\",\"161\":\"v-72d40a42#主从\",\"162\":\"v-72d40a42#开启\",\"163\":\"v-72d40a42#哨兵\",\"164\":\"v-07e0409c\",\"165\":\"v-07e0409c#服务注册和发现\",\"166\":\"v-07e0409c#nacos注册中心\",\"167\":\"v-07e0409c#nacos安装\",\"168\":\"v-07e0409c#服务注册\",\"169\":\"v-07e0409c#服务发现\",\"170\":\"v-07e0409c#openfeign\",\"171\":\"v-07e0409c#基础使用\",\"172\":\"v-07e0409c#连接池\",\"173\":\"v-07e0409c#最佳实践-优化\",\"174\":\"v-07e0409c#日志\",\"175\":\"v-07e0409c#网关\",\"176\":\"v-07e0409c#启动\",\"177\":\"v-07e0409c#路由属性\",\"178\":\"v-07e0409c#路由断言\",\"179\":\"v-07e0409c#路由过滤器\",\"180\":\"v-07e0409c#网关登录校验\",\"181\":\"v-07e0409c#globalfilter\",\"182\":\"v-07e0409c#登录样例\",\"183\":\"v-07e0409c#网关传递信息\",\"184\":\"v-07e0409c#使用线程存储数据\",\"185\":\"v-07e0409c#openfeign传递\",\"186\":\"v-07e0409c#共享配置\",\"187\":\"v-07e0409c#共享配置-1\",\"188\":\"v-07e0409c#配置热跟新\",\"189\":\"v-07e0409c#服务保护\",\"190\":\"v-07e0409c#sentinel\",\"191\":\"v-07e0409c#请求限流\",\"192\":\"v-07e0409c#线程隔断\",\"193\":\"v-07e0409c#服务熔断\",\"194\":\"v-07e0409c#分布式事务\",\"195\":\"v-515b615c\",\"196\":\"v-515b615c#xml映射\",\"197\":\"v-515b615c#sql\",\"198\":\"v-515b615c#resultmap\",\"199\":\"v-515b615c#属性\",\"200\":\"v-515b615c#传参\",\"201\":\"v-515b615c#匿名参数-顺序传递参数\",\"202\":\"v-515b615c#使用-param注解\",\"203\":\"v-515b615c#使用map传递参数\",\"204\":\"v-515b615c#用过java-bean传递多个参数\",\"205\":\"v-515b615c#直接使用json传递参数\",\"206\":\"v-515b615c#传递集合类型参数list、set、array\",\"207\":\"v-515b615c#其他\",\"208\":\"v-515b615c#添加-主键返回\",\"209\":\"v-515b615c#动态条件查询\",\"210\":\"v-14596a62\",\"211\":\"v-14596a62#mybatis-plus\",\"212\":\"v-14596a62#basemapper\",\"213\":\"v-14596a62#curd\",\"214\":\"v-14596a62#wapper条件构造器\",\"215\":\"v-14596a62#注解说明\",\"216\":\"v-14596a62#mybatisx\",\"217\":\"v-14596a62#分页\",\"218\":\"v-14596a62#mybatis-字段-1\",\"219\":\"v-14596a62#事务\",\"220\":\"v-0b42c94d\",\"221\":\"v-0b42c94d#基础语句\",\"222\":\"v-0b42c94d#insert\",\"223\":\"v-0b42c94d#update\",\"224\":\"v-0b42c94d#delete\",\"225\":\"v-0b42c94d#select\",\"226\":\"v-0b42c94d#基本查询\",\"227\":\"v-0b42c94d#条件查询\",\"228\":\"v-0b42c94d#聚合函数\",\"229\":\"v-0b42c94d#分组查询\",\"230\":\"v-0b42c94d#排序查询\",\"231\":\"v-0b42c94d#分页查询\",\"232\":\"v-0b42c94d#函数\",\"233\":\"v-0b42c94d#约束\",\"234\":\"v-0b42c94d#外键约束\",\"235\":\"v-0b42c94d#多表查询\",\"236\":\"v-0b42c94d#索引\",\"237\":\"v-0b42c94d#视图\",\"238\":\"v-0b42c94d#创建视图\",\"239\":\"v-0b42c94d#修改视图\",\"240\":\"v-0b42c94d#删除视图\",\"241\":\"v-0b42c94d#查看\",\"242\":\"v-0b42c94d#其他\",\"243\":\"v-0b42c94d#查看curd执行频率\",\"244\":\"v-0b42c94d#慢查询日志\",\"245\":\"v-0b42c94d#show-profiles\",\"246\":\"v-00404208\",\"247\":\"v-00404208#依赖\",\"248\":\"v-00404208#步骤\",\"249\":\"v-00404208#任务传参\",\"250\":\"v-00404208#整合spring-boot\",\"251\":\"v-35f9e756\",\"252\":\"v-3325177c\",\"253\":\"v-3325177c#spring\",\"254\":\"v-3325177c#ioc\",\"255\":\"v-3325177c#bean\",\"256\":\"v-3325177c#依赖注入\",\"257\":\"v-3325177c#setter\",\"258\":\"v-3325177c#构造器\",\"259\":\"v-3325177c#集合注入\",\"260\":\"v-3325177c#注解开发\",\"261\":\"v-3325177c#aop\",\"262\":\"v-3325177c#举例\",\"263\":\"v-3325177c#切入点表达式\",\"264\":\"v-3325177c#通知类型\",\"265\":\"v-3325177c#获取通知数据\",\"266\":\"v-3325177c#springmvc\",\"267\":\"v-3325177c#创建使用\",\"268\":\"v-3325177c#请求\",\"269\":\"v-3325177c#get\",\"270\":\"v-3325177c#post\",\"271\":\"v-3325177c#post乱码处理\",\"272\":\"v-3325177c#参数类型\",\"273\":\"v-3325177c#响应\",\"274\":\"v-3325177c#rest风格\",\"275\":\"v-3325177c#注解说明\",\"276\":\"v-3325177c#其他\",\"277\":\"v-3325177c#自定义注解为属性赋值\",\"278\":\"v-3325177c#_1-创建自定义注解\",\"279\":\"v-3325177c#_2-创建拦截器-获得token-存入作用域中\",\"280\":\"v-3325177c#_3-配置拦截器\",\"281\":\"v-3325177c#_4-实现自定义注解\",\"282\":\"v-3325177c#_5-使用\",\"283\":\"v-3325177c#拦截器\",\"284\":\"v-3325177c#_1-先实现一个拦截对象\",\"285\":\"v-3325177c#_2-配置\",\"286\":\"v-3325177c#过滤器\",\"287\":\"v-3325177c#枚举\",\"288\":\"v-75d4898a\",\"289\":\"v-35ca4be3\",\"290\":\"v-35ca4be3#取值范围\",\"291\":\"v-35ca4be3#连接符\",\"292\":\"v-35ca4be3#示例\",\"293\":\"v-417ecfb0\",\"294\":\"v-6ef3d3aa\",\"295\":\"v-4f662cc3\",\"296\":\"v-4f662cc3#api-faq-contributing-troubleshooting\",\"297\":\"v-4f662cc3#能做什么\",\"298\":\"v-4f662cc3#开始使用\",\"299\":\"v-4f662cc3#安装\",\"300\":\"v-4f662cc3#puppeteer-core\",\"301\":\"v-4f662cc3#使用\",\"302\":\"v-4f662cc3#默认设置\",\"303\":\"v-4f662cc3#模板\",\"304\":\"v-4f662cc3#定时\",\"305\":\"v-4f662cc3#github-action\",\"306\":\"v-4f662cc3#问题\",\"307\":\"v-4f662cc3#puppeteer没有自动安装chromium的解决办法\",\"308\":\"v-4def5fb0\",\"309\":\"v-a77cb9cc\",\"310\":\"v-a77cb9cc#插件\",\"311\":\"v-a77cb9cc#java\",\"312\":\"v-a77cb9cc#元字符\",\"313\":\"v-a77cb9cc#简写字符集\",\"314\":\"v-a77cb9cc#标志\",\"315\":\"v-a77cb9cc#忽略大小写\",\"316\":\"v-a77cb9cc#全局搜索\",\"317\":\"v-ce8b95bc\",\"318\":\"v-ce8b95bc#依赖\",\"319\":\"v-ce8b95bc#配置中文字体\",\"320\":\"v-ce8b95bc#初始化\",\"321\":\"v-ce8b95bc#paragraph\",\"322\":\"v-ce8b95bc#chunk\",\"323\":\"v-ce8b95bc#table\",\"324\":\"v-ce8b95bc#image\",\"325\":\"v-ce8b95bc#rectangle\",\"326\":\"v-b021ee0a\",\"327\":\"v-83ce75c6\",\"328\":\"v-83ce75c6#使用jaxp\",\"329\":\"v-deaea8ac\",\"330\":\"v-deaea8ac#_1-三大组件\",\"331\":\"v-deaea8ac#_1-1-channel-buffer\",\"332\":\"v-deaea8ac#_1-2-selector\",\"333\":\"v-deaea8ac#多线程版设计\",\"334\":\"v-deaea8ac#⚠️-多线程版缺点\",\"335\":\"v-deaea8ac#线程池版设计\",\"336\":\"v-deaea8ac#⚠️-线程池版缺点\",\"337\":\"v-deaea8ac#selector-版设计\",\"338\":\"v-deaea8ac#_2-bytebuffer\",\"339\":\"v-deaea8ac#_2-1-bytebuffer-正确使用姿势\",\"340\":\"v-deaea8ac#_2-2-bytebuffer-结构\",\"341\":\"v-deaea8ac#💡-调试工具类\",\"342\":\"v-deaea8ac#_2-3-bytebuffer-常见方法\",\"343\":\"v-deaea8ac#分配空间\",\"344\":\"v-deaea8ac#向-buffer-写入数据\",\"345\":\"v-deaea8ac#从-buffer-读取数据\",\"346\":\"v-deaea8ac#mark-和-reset\",\"347\":\"v-deaea8ac#字符串与-bytebuffer-互转\",\"348\":\"v-deaea8ac#⚠️-buffer-的线程安全\",\"349\":\"v-deaea8ac#_2-4-scattering-reads\",\"350\":\"v-deaea8ac#_2-5-gathering-writes\",\"351\":\"v-deaea8ac#_2-6-练习\",\"352\":\"v-deaea8ac#_3-文件编程\",\"353\":\"v-deaea8ac#_3-1-filechannel\",\"354\":\"v-deaea8ac#⚠️-filechannel-工作模式\",\"355\":\"v-deaea8ac#获取\",\"356\":\"v-deaea8ac#读取\",\"357\":\"v-deaea8ac#写入\",\"358\":\"v-deaea8ac#关闭\",\"359\":\"v-deaea8ac#位置\",\"360\":\"v-deaea8ac#大小\",\"361\":\"v-deaea8ac#强制写入\",\"362\":\"v-deaea8ac#_3-2-两个-channel-传输数据\",\"363\":\"v-deaea8ac#_3-3-path\",\"364\":\"v-deaea8ac#_3-4-files\",\"365\":\"v-deaea8ac#⚠️-删除很危险\",\"366\":\"v-deaea8ac#_4-网络编程\",\"367\":\"v-deaea8ac#_4-1-非阻塞-vs-阻塞\",\"368\":\"v-deaea8ac#阻塞\",\"369\":\"v-deaea8ac#非阻塞\",\"370\":\"v-deaea8ac#多路复用\",\"371\":\"v-deaea8ac#_4-2-selector\",\"372\":\"v-deaea8ac#创建\",\"373\":\"v-deaea8ac#绑定-channel-事件\",\"374\":\"v-deaea8ac#监听-channel-事件\",\"375\":\"v-deaea8ac#💡-select-何时不阻塞\",\"376\":\"v-deaea8ac#_4-3-处理-accept-事件\",\"377\":\"v-deaea8ac#💡-事件发生后能否不处理\",\"378\":\"v-deaea8ac#_4-4-处理-read-事件\",\"379\":\"v-deaea8ac#💡-为何要-iter-remove\",\"380\":\"v-deaea8ac#💡-cancel-的作用\",\"381\":\"v-deaea8ac#⚠️-不处理边界的问题\",\"382\":\"v-deaea8ac#处理消息的边界\",\"383\":\"v-deaea8ac#bytebuffer-大小分配\",\"384\":\"v-deaea8ac#_4-5-处理-write-事件\",\"385\":\"v-deaea8ac#一次无法写完例子\",\"386\":\"v-deaea8ac#💡-write-为何要取消\",\"387\":\"v-deaea8ac#_4-6-更进一步\",\"388\":\"v-deaea8ac#💡-利用多线程优化\",\"389\":\"v-deaea8ac#💡-如何拿到-cpu-个数\",\"390\":\"v-deaea8ac#_4-7-udp\",\"391\":\"v-deaea8ac#_5-nio-vs-bio\",\"392\":\"v-deaea8ac#_5-1-stream-vs-channel\",\"393\":\"v-deaea8ac#_5-2-io-模型\",\"394\":\"v-deaea8ac#🔖-参考\",\"395\":\"v-deaea8ac#_5-3-零拷贝\",\"396\":\"v-deaea8ac#传统-io-问题\",\"397\":\"v-deaea8ac#nio-优化\",\"398\":\"v-deaea8ac#_5-3-aio\",\"399\":\"v-deaea8ac#文件-aio\",\"400\":\"v-deaea8ac#💡-守护线程\",\"401\":\"v-deaea8ac#网络-aio\",\"402\":\"v-356fdab0\",\"403\":\"v-356fdab0#_1-概述\",\"404\":\"v-356fdab0#_1-1-netty-是什么\",\"405\":\"v-356fdab0#_1-2-netty-的作者\",\"406\":\"v-356fdab0#_1-3-netty-的地位\",\"407\":\"v-356fdab0#_1-4-netty-的优势\",\"408\":\"v-356fdab0#_2-hello-world\",\"409\":\"v-356fdab0#_2-1-目标\",\"410\":\"v-356fdab0#_2-2-服务器端\",\"411\":\"v-356fdab0#_2-3-客户端\",\"412\":\"v-356fdab0#_2-4-流程梳理\",\"413\":\"v-356fdab0#💡-提示\",\"414\":\"v-356fdab0#_3-组件\",\"415\":\"v-356fdab0#_3-1-eventloop\",\"416\":\"v-356fdab0#💡-优雅关闭\",\"417\":\"v-356fdab0#演示-nioeventloop-处理-io-事件\",\"418\":\"v-356fdab0#💡-handler-执行中如何换人\",\"419\":\"v-356fdab0#演示-nioeventloop-处理普通任务\",\"420\":\"v-356fdab0#演示-nioeventloop-处理定时任务\",\"421\":\"v-356fdab0#_3-2-channel\",\"422\":\"v-356fdab0#channelfuture\",\"423\":\"v-356fdab0#closefuture\",\"424\":\"v-356fdab0#💡-异步提升的是什么\",\"425\":\"v-356fdab0#_3-3-future-promise\",\"426\":\"v-356fdab0#例1\",\"427\":\"v-356fdab0#例2\",\"428\":\"v-356fdab0#例3\",\"429\":\"v-356fdab0#例4\",\"430\":\"v-356fdab0#例5\",\"431\":\"v-356fdab0#例6\",\"432\":\"v-356fdab0#_3-4-handler-pipeline\",\"433\":\"v-356fdab0#_3-5-bytebuf\",\"434\":\"v-356fdab0#_1-创建\",\"435\":\"v-356fdab0#_2-直接内存-vs-堆内存\",\"436\":\"v-356fdab0#_3-池化-vs-非池化\",\"437\":\"v-356fdab0#_4-组成\",\"438\":\"v-356fdab0#_5-写入\",\"439\":\"v-356fdab0#_6-扩容\",\"440\":\"v-356fdab0#_7-读取\",\"441\":\"v-356fdab0#_8-retain-release\",\"442\":\"v-356fdab0#_9-slice\",\"443\":\"v-356fdab0#_10-duplicate\",\"444\":\"v-356fdab0#_11-copy\",\"445\":\"v-356fdab0#_12-compositebytebuf\",\"446\":\"v-356fdab0#_13-unpooled\",\"447\":\"v-356fdab0#💡-bytebuf-优势\",\"448\":\"v-356fdab0#_4-双向通信\",\"449\":\"v-356fdab0#_4-1-练习\",\"450\":\"v-356fdab0#💡-读和写的误解\",\"451\":\"v-3724b34f\",\"452\":\"v-3724b34f#_1-粘包与半包\",\"453\":\"v-3724b34f#_1-1-粘包现象\",\"454\":\"v-3724b34f#_1-2-半包现象\",\"455\":\"v-3724b34f#_1-3-现象分析\",\"456\":\"v-3724b34f#_1-4-解决方案\",\"457\":\"v-3724b34f#方法1-短链接\",\"458\":\"v-3724b34f#方法2-固定长度\",\"459\":\"v-3724b34f#方法3-固定分隔符\",\"460\":\"v-3724b34f#方法4-预设长度\",\"461\":\"v-3724b34f#_2-协议设计与解析\",\"462\":\"v-3724b34f#_2-1-为什么需要协议\",\"463\":\"v-3724b34f#_2-2-redis-协议举例\",\"464\":\"v-3724b34f#_2-3-http-协议举例\",\"465\":\"v-3724b34f#_2-4-自定义协议要素\",\"466\":\"v-3724b34f#编解码器\",\"467\":\"v-3724b34f#💡-什么时候可以加-sharable\",\"468\":\"v-3724b34f#_3-聊天室案例\",\"469\":\"v-3724b34f#_3-1-聊天室业务介绍\",\"470\":\"v-3724b34f#_3-2-聊天室业务-登录\",\"471\":\"v-3724b34f#_3-3-聊天室业务-单聊\",\"472\":\"v-3724b34f#_3-4-聊天室业务-群聊\",\"473\":\"v-3724b34f#_3-5-聊天室业务-退出\",\"474\":\"v-3724b34f#_3-6-聊天室业务-空闲检测\",\"475\":\"v-3724b34f#连接假死\",\"476\":\"v-38d98bee\",\"477\":\"v-38d98bee#_1-优化\",\"478\":\"v-38d98bee#_1-1-扩展序列化算法\",\"479\":\"v-38d98bee#_1-2-参数调优\",\"480\":\"v-38d98bee#_1-connect-timeout-millis\",\"481\":\"v-38d98bee#_2-so-backlog\",\"482\":\"v-38d98bee#_3-ulimit-n\",\"483\":\"v-38d98bee#_4-tcp-nodelay\",\"484\":\"v-38d98bee#_5-so-sndbuf-so-rcvbuf\",\"485\":\"v-38d98bee#_6-allocator\",\"486\":\"v-38d98bee#_7-rcvbuf-allocator\",\"487\":\"v-38d98bee#_1-3-rpc-框架\",\"488\":\"v-38d98bee#_1-准备工作\",\"489\":\"v-38d98bee#_2-服务器-handler\",\"490\":\"v-38d98bee#_3-客户端代码第一版\",\"491\":\"v-38d98bee#_4-客户端-handler-第一版\",\"492\":\"v-38d98bee#_5-客户端代码-第二版\",\"493\":\"v-38d98bee#_6-客户端-handler-第二版\",\"494\":\"v-38d98bee#_2-源码分析\",\"495\":\"v-38d98bee#_2-1-启动剖析\",\"496\":\"v-38d98bee#_2-2-nioeventloop-剖析\",\"497\":\"v-38d98bee#⚠️-注意\",\"498\":\"v-38d98bee#_2-3-accept-剖析\",\"499\":\"v-38d98bee#_2-4-read-剖析\",\"500\":\"v-f5005bca\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1],\"3\":[2],\"4\":[4,1],\"5\":[2,21],\"6\":[1,45],\"7\":[1,75],\"8\":[1,63],\"9\":[4],\"10\":[1,4],\"11\":[1,13],\"12\":[1,29],\"13\":[1,25],\"14\":[1,22],\"15\":[1,28],\"16\":[1,82],\"17\":[2,31],\"18\":[1,59],\"19\":[1,25],\"20\":[1,29],\"21\":[1,24],\"22\":[1,41],\"23\":[1,11],\"24\":[1,22],\"25\":[1],\"26\":[1,23],\"27\":[1,135],\"28\":[4,14],\"29\":[3,23],\"30\":[2,12],\"31\":[2,10],\"32\":[2,10],\"33\":[2,9],\"34\":[1,138],\"35\":[1,28],\"36\":[7,50],\"37\":[1,144],\"38\":[1],\"39\":[3,18],\"40\":[1,85],\"41\":[1,64],\"42\":[1],\"43\":[1,47],\"44\":[1],\"45\":[3,13],\"46\":[2,25],\"47\":[2,17],\"48\":[2,16],\"49\":[2,32],\"50\":[3,19],\"51\":[2,39],\"52\":[2,38],\"53\":[1],\"54\":[1],\"55\":[1,16],\"56\":[1,15],\"57\":[1],\"58\":[1,21],\"59\":[1,24],\"60\":[1,1],\"61\":[1,17],\"62\":[1,56],\"63\":[1],\"64\":[3,31],\"65\":[3,76],\"66\":[1,15],\"67\":[1],\"68\":[1,24],\"69\":[1,29],\"70\":[1,150],\"71\":[2,20],\"72\":[1],\"73\":[1,1],\"74\":[1,20],\"75\":[1,12],\"76\":[1],\"77\":[1,7],\"78\":[1,18],\"79\":[1,38],\"80\":[1,10],\"81\":[1],\"82\":[1],\"83\":[1,10],\"84\":[1],\"85\":[1,56],\"86\":[1,15],\"87\":[1,11],\"88\":[1,51],\"89\":[1,24],\"90\":[2,206],\"91\":[1],\"92\":[1],\"93\":[3],\"94\":[1,65],\"95\":[1],\"96\":[2,13],\"97\":[1,8],\"98\":[1,25],\"99\":[1,78],\"100\":[1,52],\"101\":[1,12],\"102\":[1,25],\"103\":[1,34],\"104\":[1,10],\"105\":[1],\"106\":[1,21],\"107\":[1,65],\"108\":[1,78],\"109\":[1,50],\"110\":[1,9],\"111\":[1,55],\"112\":[1,10],\"113\":[1,33],\"114\":[1,49],\"115\":[1],\"116\":[1,18],\"117\":[1,30],\"118\":[1,54],\"119\":[1,20],\"120\":[1,69],\"121\":[3,25],\"122\":[1,34],\"123\":[1,24],\"124\":[1,22],\"125\":[1,26],\"126\":[1,29],\"127\":[1,28],\"128\":[1,8],\"129\":[2,29],\"130\":[2,56],\"131\":[3,46],\"132\":[2,5],\"133\":[3,14],\"134\":[2,36],\"135\":[3,5],\"136\":[2,38],\"137\":[3,31],\"138\":[2,18],\"139\":[3,108],\"140\":[2,67],\"141\":[3,77],\"142\":[3,55],\"143\":[4,31],\"144\":[3,72],\"145\":[3,50],\"146\":[1,46],\"147\":[1,30],\"148\":[1,19],\"149\":[1],\"150\":[1,1],\"151\":[1,9],\"152\":[1,12],\"153\":[1,163],\"154\":[1,15],\"155\":[1,61],\"156\":[1,20],\"157\":[1],\"158\":[1,12],\"159\":[1,33],\"160\":[1,52],\"161\":[1,7],\"162\":[1,19],\"163\":[1,81],\"164\":[2,1],\"165\":[1],\"166\":[1],\"167\":[1,41],\"168\":[1,30],\"169\":[1,72],\"170\":[1],\"171\":[1,55],\"172\":[1,25],\"173\":[3,2],\"174\":[1],\"175\":[1,3],\"176\":[1,48],\"177\":[1],\"178\":[1,42],\"179\":[1,1],\"180\":[1],\"181\":[1,60],\"182\":[1,110],\"183\":[1,37],\"184\":[1,27],\"185\":[1,48],\"186\":[1,6],\"187\":[1,101],\"188\":[1,47],\"189\":[1],\"190\":[1,37],\"191\":[1,1],\"192\":[1,8],\"193\":[1,4],\"194\":[1],\"195\":[1,22],\"196\":[1,14],\"197\":[1,60],\"198\":[1,27],\"199\":[1],\"200\":[1],\"201\":[2,49],\"202\":[2,39],\"203\":[1,43],\"204\":[2,41],\"205\":[1,38],\"206\":[3,43],\"207\":[1],\"208\":[2,23],\"209\":[1,37],\"210\":[2],\"211\":[2,30],\"212\":[1,53],\"213\":[1,80],\"214\":[1,1],\"215\":[1,24],\"216\":[1,2],\"217\":[1,43],\"218\":[1,26],\"219\":[1,75],\"220\":[1,4],\"221\":[1],\"222\":[1,12],\"223\":[1,9],\"224\":[1,6],\"225\":[1,26],\"226\":[1,11],\"227\":[1,30],\"228\":[1,13],\"229\":[1,15],\"230\":[1,18],\"231\":[1,15],\"232\":[1,62],\"233\":[1,12],\"234\":[1,33],\"235\":[1,65],\"236\":[1,42],\"237\":[1,26],\"238\":[1,19],\"239\":[1,9],\"240\":[1,8],\"241\":[1,3],\"242\":[1],\"243\":[1,6],\"244\":[1,36],\"245\":[2,49],\"246\":[1,22],\"247\":[1,13],\"248\":[1,57],\"249\":[1,62],\"250\":[2,1],\"251\":[1],\"252\":[2],\"253\":[1,5],\"254\":[1,66],\"255\":[1,11],\"256\":[1],\"257\":[1,25],\"258\":[1,39],\"259\":[1,32],\"260\":[1,48],\"261\":[1,2],\"262\":[1,25],\"263\":[1,8],\"264\":[1,34],\"265\":[1,38],\"266\":[1,5],\"267\":[1,78],\"268\":[1],\"269\":[1,14],\"270\":[1,15],\"271\":[1,1],\"272\":[1,37],\"273\":[1,15],\"274\":[1,29],\"275\":[1,25],\"276\":[1],\"277\":[1,5],\"278\":[2,11],\"279\":[4,32],\"280\":[2,26],\"281\":[2,32],\"282\":[2,20],\"283\":[1,6],\"284\":[2,36],\"285\":[2,26],\"286\":[1],\"287\":[1],\"288\":[1,87],\"289\":[1,21],\"290\":[1,37],\"291\":[1,39],\"292\":[1,31],\"293\":[1,82],\"294\":[1,1],\"295\":[1],\"296\":[5,19],\"297\":[2,34],\"298\":[1],\"299\":[1,23],\"300\":[2,23],\"301\":[1,96],\"302\":[1,54],\"303\":[1,64],\"304\":[1,9],\"305\":[2,77],\"306\":[1],\"307\":[1,28],\"308\":[1],\"309\":[1],\"310\":[1],\"311\":[1],\"312\":[1],\"313\":[1,41],\"314\":[1],\"315\":[1,22],\"316\":[1,11],\"317\":[1,13],\"318\":[1,24],\"319\":[1,53],\"320\":[1,47],\"321\":[1,16],\"322\":[1,58],\"323\":[1,61],\"324\":[1,19],\"325\":[1,23],\"326\":[1],\"327\":[1],\"328\":[1,104],\"329\":[2,5],\"330\":[2],\"331\":[3,32],\"332\":[3,3],\"333\":[1],\"334\":[2,3],\"335\":[1],\"336\":[2,5],\"337\":[2,22],\"338\":[2,77],\"339\":[4,19],\"340\":[3,24],\"341\":[2,147],\"342\":[4],\"343\":[1,13],\"344\":[3,17],\"345\":[3,30],\"346\":[3,16],\"347\":[3,50],\"348\":[3,2],\"349\":[4,57],\"350\":[4,65],\"351\":[3,70],\"352\":[2],\"353\":[3],\"354\":[3,2],\"355\":[1,18],\"356\":[1,13],\"357\":[1,18],\"358\":[1,11],\"359\":[1,19],\"360\":[1,3],\"361\":[1,9],\"362\":[5,62],\"363\":[2,41],\"364\":[3,98],\"365\":[2,45],\"366\":[2],\"367\":[5],\"368\":[1,95],\"369\":[1,91],\"370\":[1,24],\"371\":[3,11],\"372\":[1,5],\"373\":[3,30],\"374\":[3,24],\"375\":[3,29],\"376\":[5,80],\"377\":[2,9],\"378\":[4,128],\"379\":[5,27],\"380\":[3,10],\"381\":[2,66],\"382\":[1,191],\"383\":[2,44],\"384\":[5],\"385\":[1,131],\"386\":[3,9],\"387\":[3],\"388\":[2,134],\"389\":[4,21],\"390\":[3,82],\"391\":[4],\"392\":[5,16],\"393\":[4,30],\"394\":[2,4],\"395\":[3],\"396\":[3,78],\"397\":[2,89],\"398\":[3,25],\"399\":[2,84],\"400\":[2,8],\"401\":[2,93],\"402\":[2],\"403\":[2],\"404\":[4,23],\"405\":[4,3],\"406\":[4,37],\"407\":[4,53],\"408\":[3],\"409\":[3,22],\"410\":[2,71],\"411\":[3,84],\"412\":[3],\"413\":[2,51],\"414\":[2],\"415\":[3,76],\"416\":[2,9],\"417\":[5,175],\"418\":[4,44],\"419\":[3,35],\"420\":[3,35],\"421\":[3,19],\"422\":[1,78],\"423\":[1,80],\"424\":[2,61],\"425\":[3,64],\"426\":[1,43],\"427\":[1,48],\"428\":[1,83],\"429\":[1,55],\"430\":[1,49],\"431\":[1,78],\"432\":[4,124],\"433\":[3,1],\"434\":[2,46],\"435\":[4,21],\"436\":[4,36],\"437\":[2,5],\"438\":[2,99],\"439\":[2,61],\"440\":[2,59],\"441\":[3,172],\"442\":[2,86],\"443\":[2,13],\"444\":[2,5],\"445\":[2,94],\"446\":[2,72],\"447\":[3,18],\"448\":[2],\"449\":[3,81],\"450\":[2,84],\"451\":[2,1],\"452\":[2],\"453\":[2,168],\"454\":[3,121],\"455\":[3,157],\"456\":[3,16],\"457\":[2,96],\"458\":[2,171],\"459\":[2,182],\"460\":[2,199],\"461\":[2],\"462\":[4,82],\"463\":[3,78],\"464\":[4,86],\"465\":[3,23],\"466\":[1,108],\"467\":[3,103],\"468\":[2],\"469\":[3,78],\"470\":[4,166],\"471\":[3,61],\"472\":[4,82],\"473\":[4,33],\"474\":[4],\"475\":[1,88],\"476\":[1],\"477\":[2],\"478\":[2,238],\"479\":[3],\"480\":[4,103],\"481\":[3,160],\"482\":[3,1],\"483\":[3,3],\"484\":[4,12],\"485\":[2,8],\"486\":[3,15],\"487\":[4],\"488\":[2,175],\"489\":[3,53],\"490\":[2,76],\"491\":[4,21],\"492\":[3,142],\"493\":[4,47],\"494\":[2],\"495\":[3,324],\"496\":[3,194],\"497\":[2,197],\"498\":[4,235],\"499\":[4,102],\"500\":[1]},\"averageFieldLength\":[1.7604790419161678,42.83882561493527],\"storedFields\":{\"0\":{\"h\":\"\"},\"1\":{\"h\":\"blog\"},\"2\":{\"h\":\"黑马\"},\"3\":{\"h\":\"aliyun OSS\"},\"4\":{\"h\":\"Java 上传 aliyun OSS\",\"t\":[\"阿里官方文档Java上传文件概述和文件下载\"]},\"5\":{\"h\":\"使用RAM访问 更安全\",\"t\":[\"警告\",\"主账号AccessKey泄露会威胁您所有资源的安全。建议使用子账号（RAM用户）AccessKey进行操作，可以有效降低AccessKey泄露的风险。\",\"① 使用RAM用户访问密钥发起请求 ② \\\"Action\\\": [ \\\"oss:PutObject\\\", \\\"oss:ListObjects\\\", \\\"oss:DeleteObject\\\" ],放行权限 上传/目录/删除 权限 ③ 跨域放行\"]},\"6\":{\"h\":\"上传图片\",\"t\":[\"public List uploadObject(MultipartFile file) throws IOException { // Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。 String Endpoint = \\\"https://oss-cn-hangzhou.aliyuncs.com\\\"; // 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。 String AccessKeyId = \\\"yourAccessKeyId\\\"; String AccessKeySecret = \\\"yourAccessKeySecret\\\"; // 填写Bucket名称，例如examplebucket。 String BucketName = \\\"examplebucket\\\"; String originalFilename = file.getOriginalFilename(); OSS os = new OSSClientBuilder().build( Endpoint , AccessKeyId , AccessKeySecret ); os.putObject( BucketName , originalFilename, file.getInputStream() ); os.shutdown(); return getList(); } \"]},\"7\":{\"h\":\"目录列表\",\"t\":[\"public List getList(){ OSS ossClient = new OSSClientBuilder().build( Endpoint ,AccessKeyId ,AccessKeySecert); try { // 列举文件。如果不设置keyPrefix，则列举存储空间下的所有文件。如果设置keyPrefix，则列举包含指定前缀的文件。 ObjectListing objectListing = ossClient.listObjects(Bucket); List<OSSObjectSummary> sums = objectListing.getObjectSummaries(); ArrayList<String> list = new ArrayList<>(); for (OSSObjectSummary s : sums) { // System.out.println(\\\"\\\\t\\\" + s.getKey()); list.add(s.getKey());//返回所有的链接 } return list; } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } finally { if (ossClient != null) { ossClient.shutdown(); } } return null; } \"]},\"8\":{\"h\":\"删除图片\",\"t\":[\"public List deleteObject(String s){ //s为图片的名字 OSS ossClient = new OSSClientBuilder().build( Endpoint() ,AccessKeyId() ,AccessKeySecert()); try { // 删除文件或目录。如果要删除目录，目录必须为空。 ossClient.deleteObject(Bucket(), s); return this.getList(); } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } finally { if (ossClient != null) { ossClient.shutdown(); } } return null; } \"]},\"9\":{\"h\":\"自定义 Starter [1]\"},\"10\":{\"h\":\"介绍\",\"t\":[\"大家在开发的过程中应该经常会看到各种各样的Starter\",\"当我们需要集成某个功能的时候，Spring或是第三方都会提供一个Starter来帮助我们更简单的集成对应的功能到我们的Spring Boot项目中\"]},\"11\":{\"h\":\"准备\",\"t\":[\"现在我们假定，我们实现了一个A类用于提供我们封装好的功能\",\"public class A { ... } \",\"一般情况下我们会使用@Component往Spring容器中注入实例，如下：\",\"@Component public class A { ... } \",\"现在当我们要把A单独抽出来做成一个Starter时@Component就不太合适了，那么我们应该怎么实现呢，让我们先给我们的Starter取个名字吧哈哈哈\"]},\"12\":{\"h\":\"取名\",\"t\":[\"首先我们要先确定我们的Starter的名字\",\"Spring本身就有很多自带的Starter，比如：\",\"spring-boot-starter-web\",\"spring-boot-starter-data-redis\",\"spring-boot-starter-websocket\",\"spring-cloud-starter-netflix-eureka-client\",\"spring-cloud-starter-openfeign\",\"spring-cloud-starter-gateway\",\"可以发现这些自带的Starter的名称格式都是spring-boot-starter-xxx或是spring-cloud-starter-xxx\",\"另外我们也可以看到很多第三方库的Starter，比如：\",\"redisson-spring-boot-starter\",\"mybatis-plus-boot-starter\",\"一般来说，第三方的Starter会把starter放后面，xxx-spring-boot-starter或是xxx-boot-starter或是xxx-starter\",\"不过我个人习惯还是xxx-spring-boot-starter感觉更标准一点\",\"所以现在就把我们要实现的Starter取名为a-spring-boot-starter\"]},\"13\":{\"h\":\"配置类\",\"t\":[\"之前说@Component已经不太合适了，那么要怎么把A注入到Spring的容器中呢\",\"答案是：@Configuration+@Bean，如下\",\"@Configuration public class AConfiguration { @Bean public A a() { return new A(); } } \",\"这个用法大家应该也是比较熟悉，一般在一个项目中也会有一些标记了@Configuration的配置类\",\"只要Spring能够扫描到这个类，A实例就能被注入\",\"如果这个配置类是写在我们自己的包下，那么Spring默认的扫描路径就能扫到\",\"但是现在我们如果做成一个Starter，对应的包名可能就扫不到了\",\"所以我们需要用另外的方式来导入这个配置类\"]},\"14\":{\"h\":\"导入方式\",\"t\":[\"接下来就可以决定我们的Starter的导入方式了\",\"常用的导入方式有两种：使用@EnableXXX或是spring.factories\",\"我们经常能看到有些组件的会需要你添加@EnableXXX的注解来启用某个功能，比如：\",\"@EnableDiscoveryClient\",\"@EnableFeignClients\",\"这种方式光引入包还不够，需要手动添加注解来启用\",\"而使用spring.factories就只要引入包就可以直接生效了\",\"这两种方式其实用哪种都一样，主要是看有没有必要额外配置一个注解\",\"比如@EnableFeignClients这个注解是可以配置扫描路径的，所以额外添加一个注解更加合适（这里使用配置文件是不合适的，因为我们的包结构是确定的，如果配置在配置文件里面反而多余又容易写错）\"]},\"15\":{\"h\":\"注解导入\",\"t\":[\"我们先使用注解的方式来导入，定义一个@EnableA\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AConfiguration.class) public @interface EnableA { } \",\"使用@Import注解导入AConfiguration.class就可以了\",\"当我们需要集成这个功能的时候只要添加这个注解就行了\",\"@EnableA @SpringBootApplication public class SampleApplication { public static void main(String[] args) { SpringApplication.run(SampleApplication.class, args); } } \"]},\"16\":{\"h\":\"注解参数\",\"t\":[\"这个时候可能就有同学要问了，如果我的注解上有参数呢，上面的写法好像没办法拿到参数啊\",\"接下来我们来解决这个问题\",\"现在我们给@EnableA注解添加一个参数enabled，当enabled为true时导入AConfiguration.class，当enabled为false时不导入AConfiguration.class\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AConfiguration.class) public @interface EnableA { boolean enabled() default true; } \",\"接着我们实现一个ImportSelector\",\"public class AImportSelector implements ImportSelector { @Override public String[] selectImports(AnnotationMetadata metadata) { Map<String, Object> attributes = metadata .getAnnotationAttributes(EnableA.class.getName()); boolean enabled = (boolean) attributes.get(\\\"enabled\\\"); if (enabled) { return new String[]{AConfiguration.class.getName()}; } else { return new String[]{}; } } } \",\"我们可以通过ImportSelector中提供给我们的AnnotationMetadata来获得EnableA中的属性enabled\",\"当enabled为true时，我们返回AConfiguration.class的全限定名；当enabled为false时，返回空数组即可\",\"最后我们将@Import(AConfiguration.class)改为@Import(AImportSelector.class)就行了\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AImportSelector.class) public @interface EnableA { boolean enabled() default true; } \",\"当我们将enabled设置为false时，就不会配置AConfiguration.class了\",\"@EnableA(enabled = false) @SpringBootApplication public class SampleApplication { public static void main(String[] args) { SpringApplication.run(SampleApplication.class, args); } } \",\"其实还有另一种方式也可以拿到注解的属性，那就是ImportBeanDefinitionRegistrar\",\"public interface ImportBeanDefinitionRegistrar { default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { } } \",\"和ImportSelector不同的是，ImportBeanDefinitionRegistrar可以直接注册BeanDefinition\",\"如果我们用ImportBeanDefinitionRegistrar来实现上面的功能大概就是这个样子\",\"public class AImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar { @Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { Map<String, Object> attributes = metadata .getAnnotationAttributes(EnableA.class.getName()); boolean enabled = (boolean) attributes.get(\\\"enabled\\\"); if (enabled) { registry.registerBeanDefinition(\\\"a\\\", new RootBeanDefinition(A.class)); } } } \",\"然后同样的把@Import(AConfiguration.class)改为@Import(AImportBeanDefinitionRegistrar.class)就行了\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(AImportBeanDefinitionRegistrar.class) public @interface EnableA { boolean enabled() default true; } \"]},\"17\":{\"h\":\"spring.factories导入\",\"t\":[\"接下来我们使用spring.factories来导入配置（注解和spring.factories选择一种就可以啦）\",\"我们需要在resources目录下新建一个META-INF目录，然后在META-INF目录下创建spring.factories文件\",\"接着我们需要在spring.factories中将AConfiguration.class配置上去\",\"properties复制代码org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\ com.xxx.xxx.AConfiguration \",\"一般情况下，如果是配置在spring.factories中的配置类都会取名xxxAutoConfiguration，所以我们在这里修改名称为AAutoConfiguration\",\"最后在spring.factories中的配置\",\"properties复制代码org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\ com.xxx.xxx.AAutoConfiguration \",\"这样当你的项目启动后，Spring就会自动读取spring.factories将AAutoConfiguration(AConfiguration)扫描进去了\"]},\"18\":{\"h\":\"配置文件\",\"t\":[\"正常情况下，我们很有可能需要在application.yml或application.properties中配置一些参数\",\"所以我们现在需要一个属性a.enabled来控制是否注入A\",\"还需要一个属性a.b.type来配置A的某个字段\",\"那么怎么在我们的AAutoConfiguration中获得这两个属性呢\",\"大家可能会想，简单啊，用@Value不就好了？\",\"虽然@Value确实能拿到配置文件中的值，但是有更好的方式\",\"那就是用@ConfigurationProperties+@EnableConfigurationProperties\",\"我们需要先定义一个AProperties\",\"@Data @ConfigurationProperties(prefix = \\\"a\\\") public class AProperties { //映射 a.enabled; private boolean enabled = true; private B b = new B(); @Data public static class B { //映射 a.b.type; private String type; } } \",\"同时给AProperties添加ConfigurationProperties注解并标记前缀为a\",\"接着我们在AAutoConfiguration上添加@EnableConfigurationProperties就行了\",\"@Configuration @EnableConfigurationProperties(AProperties.class) public class AConfiguration { @Bean @ConditionalOnProperty(name = \\\"a.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true) public A a(AProperties properties) { String type = properties.getB().getType(); return new A(); } } \",\"我们可以通过@ConditionalOnProperty来根据a.enabled控制是否注入A\",\"在方法参数中也可以直接注入AProperties对象，并且里面的属性已经根据配置文件绑定好了\"]},\"19\":{\"h\":\"自动提示\",\"t\":[\"不知道大家有没有发现，Spring自带的配置是会有提示的，但是我们自定义的配置就没有\",\"有没有什么办法让我们的AProperties也能自动提示呢\",\"只要引入下面这个包就行啦\",\"gradle 复制代码annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor' xml复制代码<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \",\"如果AProperties有改动需要重新编译才会生效哦\"]},\"20\":{\"h\":\"配置代理\",\"t\":[\"@Configuration的proxyBeanMethods可以指定该配置中的方法是否进行代理，具体有什么作用呢\",\"假设现在我们的A需要依赖B实例，那我们的配置可以这样写\",\"@Configuration public class AConfiguration { @Bean public B b() { return new B(); } @Bean public A a() { return new A(b()); } } \",\"@Configuration的proxyBeanMethods默认是true，所以在a()中调用b()是会从Spring的容器中获得B实例\",\"如果我们不启用方法代理可以这样写\",\"@Configuration(proxyBeanMethods = false) public class AConfiguration { @Bean public B b() { return new B(); } @Bean public A a(B b) { return new A(b); } } \",\"直接在方法参数中注入即可\",\"不启用方法代理的情况下，如果直接调用方法，就是普通的方法调用，每调用一次就会新建一个B实例\"]},\"21\":{\"h\":\"配置依赖\",\"t\":[\"接着之前的假设，A需要依赖B实例，但是现在B允许为null\",\"那么之前的配置方式就不行了\",\"@Configuration public class AConfiguration { @Bean public A a(B b) { return new A(b); } } \",\"如果直接在方法上注入B实例，就会报错找不到对应的Bean\",\"这种情况下，我们可以使用ObjectProvider，如下：\",\"@Configuration public class AConfiguration { @Bean public A a(ObjectProvider<B> bProvider) { return new A(bProvider.getIfUnique()); } } \"]},\"22\":{\"h\":\"条件装配\",\"t\":[\"在我们写Starter的过程中，条件装配也是经常用到的功能\",\"最常用的其实就是@ConditionalOnMissingBean了\",\"我们可以这样用\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean public A a() { return new A(); } } \",\"当Spring发现当前已经存在A对应的实例时，就不会再注入这个配置中的A实例了\",\"一般当我们重写了某个库中的某个组件后，该库中该组件的默认实现就不会生效了，便于我们扩展一些自定义的功能来替换默认实现\",\"但是这个注解如果用不好也可能出现问题\",\"假设现在我们的A有一个扩展类A1\",\"我们来看下面的配置1\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean public A1 a() { return new A1(); } } \",\"@ConditionalOnMissingBean的判断逻辑是：当容器中存在A1类型的对象就不会再注入这个配置中的A1实例\",\"接着我们再看下面的配置2\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean public A a() { return new A1(); } } \",\"@ConditionalOnMissingBean的判断逻辑是：当容器中存在A类型的对象就不会再注入这个配置中的A1实例\",\"如果在这个时候，容器中存在A2(A的另一个扩展类)实例，配置1中的A1还是会被注入，配置2中A1不会被注入\",\"因为@ConditionalOnMissingBean的缺省值是方法的返回类型，所以大家在使用时需要多加注意，保险起见可以指定@ConditionalOnMissingBean中的值，例如：\",\"@Configuration public class AConfiguration { @Bean @ConditionalOnMissingBean(A.class) public A1 a() { return new A1(); } } \"]},\"23\":{\"h\":\"其他常用的条件注解\",\"t\":[\"@ConditionalOnBean 当对应的Bean存在时生效\",\"@ConditionalOnClass 当对应的Class存在时生效\",\"@ConditionalOnMissingClass 当对应的Class不存在时生效\",\"@ConditionalOnProperty 当对应的配置匹配时生效\",\"@ConditionalOnWebApplication 可以指定在Servlet或Reactive环境中生效\"]},\"24\":{\"h\":\"配置顺序\",\"t\":[\"在某些情况下，我们可能会发现一些条件注解不生效\",\"这个时候我们可以尝试指定配置顺序（并不保证能够解决所有的失效问题）\",\"@AutoConfigureBefore 在某个配置之前进行配置\",\"@AutoConfigureAfter 在某个配置之后进行配置\",\"@AutoConfigureOrder 指定配置顺序\",\"不过这里需要注意这几个注解只能对自动配置生效，也就是需要定义在spring.factories中的配置\",\"添加注解的类的可以是任意的配置类，但是注解中指定的类需要是spring.factories中的配置的类\",\"来自：https://juejin.cn/post/7124603507025379365↩︎\"]},\"25\":{\"h\":\"书本\"},\"26\":{\"h\":\"静态资源访问\",\"t\":[\"spring: mvc: static-path-pattern: /static/** web: resources: static-locations: classpath:/static/ \",\"@Configuration public class staticHandles implements WebMvcConfigurer { @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"/static/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); } } \"]},\"27\":{\"h\":\"文件上传\",\"t\":[\" <dependency> <groupId>javax.servlet</groupId> <artifactId>servlet-api</artifactId> <version>2.5</version> <scope>provided</scope> </dependency> \",\" <form action=\\\"/upload\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"> <input type=\\\"file\\\" name=\\\"uploadFile\\\" value=\\\"选择文件\\\"> <input type=\\\"submit\\\" value=\\\"上传\\\"> </form> \",\"@RestController public class FileUploadController { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy/MM/dd\\\"); @PostMapping(\\\"/upload\\\") public String upload(MultipartFile uploadFile, HttpServletRequest req){ // 运行目录下 没有文件夹 就建一个 String realPath = req.getSession().getServletContext().getRealPath(\\\"/uploadFile/\\\"); System.out.println(realPath); String format = sdf.format(new Date()); File folder = new File(realPath + format); if(!folder.isDirectory()){ folder.mkdirs(); } // 重命名 String oldName = uploadFile.getOriginalFilename(); String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(\\\".\\\")); try{ // 保存 uploadFile.transferTo(new File(folder,newName)); // 返回路径 String filePath = req.getScheme() + \\\"://\\\" + req.getServerName() + \\\":\\\" + req.getServerPort() + \\\"/uploadFile/\\\" + format + newName; return filePath; } catch (IOException e) { throw new RuntimeException(e); } } } \",\"相关信息\",\"打包使用\",\"@PostMapping(\\\"/localhost\\\") public String uploadFile(MultipartFile file) { String directoryPath = \\\"static/images/\\\"; String fileName = file.getOriginalFilename(); try { // 获取当前应用程序的根目录 String rootPath = System.getProperty(\\\"user.dir\\\"); // 拼接完整的目录路径 String filePath = rootPath + \\\"/\\\" + directoryPath; // 创建目录 File directory = new File(filePath); if (!directory.exists()) { directory.mkdirs(); } // 创建文件对象 File destFile = new File(directory, fileName); // 保存文件 file.transferTo(destFile); return \\\"上传成功\\\"; } catch (IOException e) { e.printStackTrace(); } return \\\"上传失败\\\"; } \",\"spring: servlet: multipart: # 是否开启上传 enabled: true file-size-threshold: 0 # 保存临时位置 location: E:\\\\\\\\temp # 最大 max-file-size: 10MB # 总大小 max-request-size: 10MB # 是否延迟解析 resolve-lazily: false \"]},\"28\":{\"h\":\"热加载（Hot Swap）\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> \"]},\"29\":{\"h\":\"WebSocket 和 SockJS\",\"t\":[\"应用场景\",\"WebSocket 和 SockJS 两者都应用广泛，具体应该根据实际情况来选择。WebSocket 是 HTML5 的一种新协议，它实现了浏览器与服务器全双工通信，实现了客户端与服务器端的实时通信。而 SockJS 是 WebSocket 的一个 polyfill 实现，即当浏览器不支持 WebSocket 时，SockJS 可以自动降级为支持长轮询等传输方式的 WebSocket 模拟实现，从而使得浏览器与服务器之间的通信始终保持稳定和高效。\",\"WebSocket和SockJS都是在Web应用程序中使用实时通信的协议，它们都有自己的优势和缺点。\"]},\"30\":{\"h\":\"WebSocket的优势：\",\"t\":[\"简单易用：WebSocket是一个非常简单的协议，只需建立连接，就可以进行双向通信。\",\"高效性：WebSocket的头部信息非常小，数据格式紧凑，因此数据传输的效率非常高。\",\"双向通信：WebSocket提供了双向通信的功能，可以同时在客户端和服务器端发送和接收消息。\"]},\"31\":{\"h\":\"WebSocket的缺点：\",\"t\":[\"支持性：WebSocket是HTML5标准的一部分，因此只有在支持HTML5的浏览器中才能使用。对于老的浏览器，需要使用polyfill或其他技术。\",\"长连接：WebSocket在连接建立后会一直保持连接，如果服务器端不能正常关闭连接，可能会导致资源浪费和性能问题。\"]},\"32\":{\"h\":\"SockJS的优势：\",\"t\":[\"跨浏览器：SockJS可以在所有支持JavaScript的浏览器中运行，甚至包括IE6。\",\"支持性：SockJS可以通过polyfill模拟WebSocket的功能，因此在不支持WebSocket的浏览器中也可以使用。\",\"可靠性：SockJS在不支持WebSocket的浏览器中使用的是长轮询技术，可以保证数据的可靠性。\"]},\"33\":{\"h\":\"SockJS的缺点：\",\"t\":[\"头部信息较大：因为SockJS在不支持WebSocket的浏览器中使用的是长轮询技术，因此需要发送大量的头部信息，导致数据传输效率较低。\",\"连接不稳定：由于SockJS在不支持WebSocket的浏览器中使用的是长轮询技术，因此可能会遇到连接不稳定的情况，例如断开连接或网络故障。\"]},\"34\":{\"h\":\"发送邮件\",\"t\":[\"study\",\"application.yml\",\"spring: # 邮件配置 mail: host: smtp.qq.com port: 465 username: totryeverything@qq.com password:<第一步获得的密钥> default-encoding: utf-8 properties: mail: smtp: socketFactory: class: javax.net.ssl.SSLSocketFactory debug: true \",\"pom.xml\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-mail</artifactId> </dependency> \",\"Service\",\" @Service public class MailService { @Autowired JavaMailSender javaMailSender; // 抄送（CC），用户给收件人发出邮件的同时把该邮件抄送给另外的人，在这种抄送方式中，“收件人”知道发件人把该邮件抄送给了另外哪些人。 // 发送者 收件人 抄送人 主题 内容 public void sendSimpleMail(String from,String to, String subject,String content){ SimpleMailMessage msg = new SimpleMailMessage(); msg.setFrom(from); msg.setTo(to); msg.setSubject(subject); msg.setText(content); javaMailSender.send(msg); } // 发送带附件的邮件 public void sendFailMail(String from,String to, String subject,String content, File file) throws MessagingException { MimeMessage msg = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(msg,true); helper.setFrom(from); helper.setTo(to); helper.setText(content); helper.setSubject(subject); helper.addAttachment(file.getName(),file); javaMailSender.send(msg); } // 附带图片 public void sendMailImg(String from,String to, String subject,String content, String[] srcPath, String[] resIds) throws MessagingException { if(srcPath.length!=resIds.length){ System.out.println(\\\"hello world\\\"); return ; } MimeMessage msg = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(msg, true); helper.setFrom(from); helper.setTo(to); helper.setText(content,true);//表示正文是HTML格式 helper.setSubject(subject); for(int i=0;i<srcPath.length;i++){ FileSystemResource res = new FileSystemResource(new File(srcPath[i])); helper.addInline(resIds[i],res); } javaMailSender.send(msg); } } \",\"Test\",\" @Autowired private MailService mailService; @Test void sendSimpleMail() { mailService.sendSimpleMail(\\\"totryeverything@qq.com\\\",\\\"19138084894@163.com\\\", \\\"Test\\\",\\\"这只不过是一个测试而已\\\"); } @Test void sendFailMail() throws MessagingException { mailService.sendFailMail(\\\"totryeverything@qq.com\\\",\\\"19138084894@163.com\\\", \\\"Test\\\",\\\"这只不过是一个测试而已\\\",new File(\\\"E:\\\\\\\\c\\\\\\\\ToTryEveryThing\\\\\\\\README.md\\\")); } @Test void sendImgMail() throws MessagingException { mailService.sendMailImg(\\\"totryeverything@qq.com\\\",\\\"19138084894@163.com\\\", \\\"Test\\\", \\\"这只不过是一个测试而已\\\" + \\\"<img /><img />\\\", new String []{\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Pictures\\\\\\\\47f4c019880711ebb6edd017c2d2eca2.jpg\\\",\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Pictures\\\\\\\\下载 (2).png\\\"}, new String[]{\\\"p1\\\",\\\"p2\\\"} ); } \"]},\"35\":{\"h\":\"定时任务\",\"t\":[\"提示\",\"在Spring Boot应用程序中使用@Scheduled注解标记的定时任务是在应用程序启动时自动启动的。\",\"配置\",\"@Configuration @EnableScheduling public class ScheduledTasksConfig { } \",\"使用\",\"延迟5s启动 然后每隔5s运行一次\",\" @Scheduled(fixedRate = 5000,initialDelay = 5000) public String schedul (){ System.out.println(i++); return String.valueOf(i); } \"]},\"36\":{\"h\":\"@Scheduled(cron = \\\"0 0 12 * * ?\\\"): 使用CRON表达式指定执行时间。\",\"t\":[\"// 每天中午12点执行任务 @Scheduled(cron = \\\"0 0 12 * * ?\\\") public void doTask() { // your task code here } \",\"自启动 通过get方法停止任务\",\"@RestController public class ScheduleController { @Autowired private TaskScheduler taskScheduler; private ScheduledFuture<?> scheduledFuture; @PostConstruct public void start() { scheduledFuture = taskScheduler.scheduleWithFixedDelay(new MyTask(), 5000L);//5000ms } @GetMapping(\\\"/stop\\\") public String stop() { if (scheduledFuture != null) { scheduledFuture.cancel(true); } return \\\"stop\\\"; } private class MyTask implements Runnable { @Override public void run() { System.out.println(\\\"Task executing...\\\"); } } } \"]},\"37\":{\"h\":\"数据校验\",\"t\":[\"https://www.cnblogs.com/54chensongxia/p/14016179.html\",\"依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> \",\"配置 ValidationMessages.properties\",\"user.name.size = name user.address.notnull = adress user.age.size = age user.email.pattern = email \",\"pojo\",\"public class User { @Size(min = 2,max = 10, message = \\\"{user.name.size}\\\") private String name; @NotNull(message = \\\"{user.address.notnull}\\\") private String address; @DecimalMin(value = \\\"1\\\" ,message = \\\"{user.age.size}\\\") @DecimalMax(value = \\\"100\\\" ,message = \\\"{user.age.size}\\\") private Integer age; @Email(message = \\\"{user.email.pattern}\\\") private String email; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } } \",\"controller\",\"@RestController public class UserController { @PostMapping(\\\"/adduser/\\\") public List<String> addUser(@Validated User user, BindingResult bindingResult){ ArrayList<String> error = new ArrayList<>(); if(bindingResult.hasErrors()){ List<ObjectError> allErrors = bindingResult.getAllErrors(); for(ObjectError e : allErrors){ error.add(e.getDefaultMessage()); System.out.println(\\\"e.getDefaultMessage() = \\\" + e.getDefaultMessage()); } } return error; } } \",\"<template> <div> <!-- input 标签用于选择图片 --> <input type=\\\"file\\\" accept=\\\"image/*\\\" @change=\\\"previewImage\\\"> <!-- 预览图片的 img 标签 --> <img ref=\\\"previewImg\\\" style=\\\"max-width: 100%; max-height: 100%;\\\" /> </div> </template> <script> export default { methods: { previewImage(event) { // 获取选择的文件 const file = event.target.files[0]; // 判断是否是图片类型 if (file.type.startsWith('image/')) { // 创建 FileReader 对象 const reader = new FileReader(); // 读取图片文件 reader.readAsDataURL(file); // 在图片文件读取完毕后设置预览图片的 URL reader.onload = () => { this.$refs.previewImg.src = reader.result; }; } }, }, }; </script> \"]},\"38\":{\"h\":\"分布式锁\"},\"39\":{\"h\":\"Redis分布式锁和Redisson分布式锁都是用于实现分布式系统中的分布式锁，但它们之间有以下区别：\",\"t\":[\"Redis分布式锁是基于Redis的SETNX命令实现的，而Redisson分布式锁是基于Redis的Redisson分布式框架实现的。\",\"Redis分布式锁需要手动编写锁逻辑代码，包括锁定、释放锁等。Redisson分布式锁封装了锁逻辑，并提供了API接口，使得锁的使用变得简单。\",\"Redis分布式锁在进行锁定和解锁操作时，需要自己实现保证操作的原子性。Redisson分布式锁内部封装了Redis的单线程模型，保证了锁的操作原子性。\",\"Redis分布式锁在锁定后需要手动维护锁的超时时间。Redisson分布式锁内部封装了锁的自动续期机制，避免了锁过期的问题。\",\"Redis分布式锁在高并发场景下可能存在死锁的问题。Redisson分布式锁使用Redlock算法避免了死锁的问题。\"]},\"40\":{\"h\":\"redis分布式锁\",\"t\":[\"public Result regasdgsdgister(String account, String password) { final String key = account + \\\"-lock\\\"; final String value = System.nanoTime() + \\\" \\\" + UUID.randomUUID(); ValueOperations v = stringRedisTemplate.opsForValue(); Boolean res = v.setIfAbsent(key,value); if(res){ stringRedisTemplate.expire(key,20L, TimeUnit.SECONDS); if(account == null){ return new Result(0,\\\"用户名不能为空\\\"); } if(password.length() == 0){ return new Result(0,\\\"密码不能为空\\\"); } account = account.trim(); if(account.length()==0){ return new Result(0,\\\"用户名不能为空\\\"); } if(password.length()>50){ return new Result(0,\\\"密码长度不能超过50\\\"); } QueryWrapper<web> queryWrapper = new QueryWrapper<web>(); queryWrapper.eq(\\\"account\\\",account); List<web> webs = webMapper.selectList(queryWrapper); if(!webs.isEmpty()){ return new Result(0,\\\"用户名已存在\\\"); } String pass = passwordEncoder.encode(password); String jwt = JwtUtil.createJWT(account); web web1 = new web(); web1.setBackimg(\\\"5\\\"); web1.setList(\\\"[]\\\"); web1.setPassword(pass); web1.setAccount(account); web1.setDate(new Date()); webMapper.insert(web1); String git = \\\"[{\\\\\\\"title\\\\\\\":\\\\\\\"你好\\\\\\\",\\\\\\\"name\\\\\\\":1,\\\\\\\"content\\\\\\\":\\\\\\\"## new content\\\\\\\",\\\\\\\"show\\\\\\\":true}]\\\\n\\\" + \\\"\\\\n\\\"; String title = \\\"[\\\\\\\"你好\\\\\\\"]\\\"; System.out.println(publicMapper.insert(new Public(account, title,git))+999999); System.out.println(new Date()); if(value.equals(v.get(key).toString())){ stringRedisTemplate.delete(key); } return new Result(1,\\\"success\\\",jwt); } return null; } \"]},\"41\":{\"h\":\"Redisson\",\"t\":[\"Redisson学习地址\",\"引入\",\"<!-- redisson--> <dependency> <groupId>org.redisson</groupId> <artifactId>redisson</artifactId> <version>3.6.5</version> </dependency> \",\"RedissonConfig\",\"@Configuration public class RedissonConfig { @Bean RedissonClient redisson() { Config config = new Config(); config.useSingleServer().setAddress(\\\"redis://localhost:6379\\\").setDatabase(0); return Redisson.create(config); } } \",\"使用\",\" @Autowired RedissonClient redissonClient; @Override public Result showbyid(Integer id) { RLock lock = redissonClient.getLock(String.valueOf(id)); lock.lock(); try{ article article = articleMapper.selectById(id); article.setViews(article.getViews()+1); int i = articleMapper.updateById(article); return new Result(1,\\\"success\\\",article); }finally { lock.unlock(); } } \"]},\"42\":{\"h\":\"Swagger\"},\"43\":{\"h\":\"搭建\",\"t\":[\" <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-swagger2</artifactId> <version>3.0.0</version> </dependency> \",\"@Configuration @EnableSwagger2 public class SwaggerConfig { @Bean public Docket productApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) //添加ApiOperiation注解的被扫描 .paths(PathSelectors.any()) .build(); } private ApiInfo apiInfo() { return new ApiInfoBuilder().title(\\\"都是书本上的呀\\\").description(\\\"根本不需要的描述\\\") .version(\\\"1.0\\\").build(); } } \"]},\"44\":{\"h\":\"Git\"},\"45\":{\"h\":\"一、git安装后-指定名称和邮箱\",\"t\":[\"# 全局配置 git config --global user.name \\\"Your Name\\\" git config --global user.email \\\"email@example.com\\\" # 某个项目配置 git config user.name \\\"Your Name\\\" git config user.email \\\"email@example.com\\\" \"]},\"46\":{\"h\":\"二、分支管理\",\"t\":[\"git branch #查看分支 git chenkout xxx #切换为分支xxx git checkout -b xxx #新建分支xxx 并且切换过去 git branch -d xxx # 删除本地分支xxx git branch -D xxx #忽略修改 仍然删除分支xxx git fetch origin xxx #拉取远程分支xxx git push origin yyy # 把新建的分支yyy上传 git checkout -b first origin/first ##新建本地分支 和远程分支连接起来 \"]},\"47\":{\"h\":\"二、创建版本库\",\"t\":[\"$ mkdir learngit //创建 $ cd learngit //使用 $ pwd //查看当前目录 $ git init //初始化，生成.git文件(若该文件隐藏，则使用ls -ah) \"]},\"48\":{\"h\":\"三、把文件添加add和提交commit到版本库\",\"t\":[\"$ git add test.txt //添加 $ git commit -m \\\"wrote a test file\\\" //提交 $ git commit -m \\\"add 3 files.\\\" //一次性提交多个文件 \"]},\"49\":{\"h\":\"四、版本控制\",\"t\":[\"$ git log //查看提交历史记录，从最近到最远，可以看到3次 $ git log --pretty=oneline //加参，简洁查看 $ git reflog //查看每一次修改历史 $ cat test.txt //查看文件内容 $ git status //查看工作区中文件当前状态 $ git reset --hard HEAD^（HEAD~100）（commit id） //回退版本 $ git checkout -- test.txt //丢弃工作区的修改，即撤销修改 $ git reset HEAD test.txt //丢弃暂存区的修改（若已提交，则回退） \"]},\"50\":{\"h\":\"五、删除文件/缓存\",\"t\":[\"清空git缓存 git rm -r --cached . git add . git commit -m 'update .gitignore' $ rm test.txt //直接删除 $ git rm test.txt $ git commit -m \\\"remove test.txt\\\" //删错了，恢复 $ git checkout -- test.txt \"]},\"51\":{\"h\":\"六、远程仓库\",\"t\":[\"$ ssh-keygen -t rsa -C \\\"youremail@example.com\\\" //创建SSH Key $ git remote add origin git@github.com:Daisy/AKgit.git //关联 $ git push -u origin master //将本地内容推送到远程仓库（第一次） $ git push origin master //将本地内容推送到远程仓库（之后） $ git remote -v //查看远程仓库信息 $ git remote rm origin //删除远程仓库（解绑） $ git clone git@github.com: Daisy/AKgit.git //克隆远程仓库 //克隆之后使用和查看 $ cd gitskills $ ls $ git remote //查看远程库的信息 $ git remote -v //查看远程库的详细信息 \"]},\"52\":{\"h\":\"七、批量修改提交人信息\",\"t\":[\"git filter-branch -f --env-filter ' CORRECT_NAME=\\\"mishu\\\" CORRECT_EMAIL=\\\"riceuncle@outlook.com\\\" if [ \\\"$GIT_COMMITTER_EMAIL\\\" != \\\"$CORRECT_EMAIL\\\" ] then export GIT_COMMITTER_NAME=\\\"$CORRECT_NAME\\\" export GIT_COMMITTER_EMAIL=\\\"$CORRECT_EMAIL\\\" fi if [ \\\"$GIT_AUTHOR_EMAIL\\\" != \\\"$CORRECT_EMAIL\\\" ] then export GIT_AUTHOR_NAME=\\\"$CORRECT_NAME\\\" export GIT_AUTHOR_EMAIL=\\\"$CORRECT_EMAIL\\\" fi ' --tag-name-filter cat -- --branches --tags \",\"// 拒绝合并不相关的历史\",\"https://blog.csdn.net/Eternalyii/article/details/119643754\"]},\"53\":{\"h\":\"Linux\"},\"54\":{\"h\":\"查找命令\"},\"55\":{\"h\":\"find\",\"t\":[\"作用: 在指定目录下查找文件 语法: find dirName -option fileName 举例:\",\"find . –name \\\"*.java\\\" 在当前目录及其子目录下查找.java结尾文件\",\"find /itcast -name \\\"*.java\\\" 在/itcast目录及其子目录下查找.java结尾的文\"]},\"56\":{\"h\":\"grep\",\"t\":[\"作用: 从指定文件中查找指定的文本内容 语法: grep word fileName 举例:\",\"grep Hello HelloWorld.java 查找HelloWorld.java文件中出现的Hello字符串的位置\",\"grep hello *.java 查找当前目录中所有.java结尾的文件中包含hello字符串的位置\"]},\"57\":{\"h\":\"docker\"},\"58\":{\"h\":\"数据卷\",\"t\":[\"数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。 以Nginx为例，我们知道Nginx中有两个关键的目录：\",\"html：放置一些静态资源\",\"conf：放置配置文件\",\"提示\",\"如果我们要让Nginx代理我们的静态资源，最好是放到html目录；如果我们要修改Nginx的配置，最好是找到conf下的nginx.conf文件。 但遗憾的是，容器运行的Nginx所有的文件都在容器内部，读写都非常不方便。所以我们通常会利用数据卷将两个目录与宿主机目录关联，\"]},\"59\":{\"h\":\"基本命令\",\"t\":[\"命令\",\"说明\",\"docker volume create\",\"创建数据卷\",\"docker volume ls\",\"查看所有的数据卷\",\"docker volume rm\",\"删除指定的数据卷\",\"docker volume inspect\",\"查看某个数据卷的详情\",\"docker volume prune\",\"清除数据卷\",\"-v html:/usr/share/nignx/html 挂载目录\",\"-v /home/test/mysql/mysql:/usr/mysql/mysql 映射宿主机上\"]},\"60\":{\"h\":\"示例\",\"t\":[\"之后就可以随意修改了\"]},\"61\":{\"h\":\"自定义镜像\",\"t\":[\"docker build -t docker-demo:1.0 . \",\"命令说明：\",\"docker build : 就是构建一个docker镜像\",\"-t docker-demo:1.0 ：-t参数是指定镜像的名称（repository和tag）\",\". : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是.代表当前目录，也可以直接指定Dockerfile目录：\",\"docker build -t docker-demo:1.0 /root/demo \"]},\"62\":{\"h\":\"DockerCompose\",\"t\":[\"xx.yml\",\"version: \\\"3.8\\\" services: mysql: image: mysql:5.7.25 environment: MYSQL_ROOT_PASSWORD: 123 volumes: - \\\"/tmp/mysql/data:/var/lib/mysql\\\" - \\\"/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf\\\" web: build: . ports: - \\\"8090:8090\\\" \",\"基本语法：\",\"docker compose [OPTIONS] [COMMAND] docker compose up -d # 跑起来 \",\"为了避免每次使用docker命令都需要加上sudo权限，可以将当前用户加入安装中自动创建的docker用户组如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose\",\"sudo usermod -aG docker $USER \",\"执行完此操作后，需要退出服务器，再重新登录回来，才可以省去sudo权限。\"]},\"63\":{\"h\":\"基操\"},\"64\":{\"h\":\"镜像（images）\",\"t\":[\"docker pull ubuntu:20.04：拉取一个镜像 docker images：列出本地所有镜像 docker image rm ubuntu:20.04 或 docker rmi ubuntu:20.04：删除镜像ubuntu:20.04 docker [container] commit CONTAINER IMAGE_NAME:TAG：创建某个container的镜像 docker save -o ubuntu_20_04.tar ubuntu:20.04：将镜像ubuntu:20.04导出到本地文件ubuntu_20_04.tar中 docker load -i ubuntu_20_04.tar：将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来 \"]},\"65\":{\"h\":\"容器(container)\",\"t\":[\"docker [container] create -it ubuntu:20.04：利用镜像ubuntu:20.04创建一个容器。 docker ps -a：查看本地的所有容器 docker [container] start CONTAINER：启动容器 docker [container] stop CONTAINER：停止容器 docker [container] restart CONTAINER：重启容器 docker [contaienr] run -itd ubuntu:20.04：创建并启动一个容器 docker [container] attach CONTAINER：进入容器 先按Ctrl-p，再按Ctrl-q可以挂起容器 docker [container] exec CONTAINER COMMAND：在容器中执行命令 docker [container] rm CONTAINER：删除容器 docker container prune：删除所有已停止的容器 docker export -o xxx.tar CONTAINER：将容器CONTAINER导出到本地文件xxx.tar中 docker import xxx.tar image_name:tag：将本地文件xxx.tar导入成镜像，并将镜像命名为image_name:tag docker export/import与docker save/load的区别： export/import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态 save/load会保存完整记录，体积更大 docker top CONTAINER：查看某个容器内的所有进程 docker stats：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息 docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx：在本地和容器间复制文件 docker rename CONTAINER1 CONTAINER2：重命名容器 docker update CONTAINER --memory 500MB：修改容器限制 \"]},\"66\":{\"h\":\"例子\",\"t\":[\"创建 运行镜像 docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0 \"]},\"67\":{\"h\":\"mysql\"},\"68\":{\"h\":\"导出完整数据库\",\"t\":[\"用mysqldump命令导出数据库（此命令的路径即mysql的安装路径） mysqldump -u用户名 -p 数据库名 > 数据库名.sql \",\"例如\",\"/usr/local/mysql/bin mysqldump -uroot -p aaa > aaa.sql \",\"2、只导出表结构 如果只需要导出表结构\",\"mysqldump -u用户名 -p -d 数据库名 > 数据库名.sql \",\"例如\",\"mysqldump -uroot -p -d aaa >aaa.sql 可以使用以下命令找到导出的数据库 find / -name 数据库名.sql \"]},\"69\":{\"h\":\"导入数据库\",\"t\":[\"1、使用mysql命令导入 mysql -u用户名 -p 数据库名 < 数据库名.sql 例如\",\"mysql -uroot -p aaa < aaa.sql \",\"2、使用sources命令导入 先进入到mysql中\",\"mysql> create databases aaa; #创建新的数据库 mysql> use aaa; #使用已创建的数据库 mysql> set names utf-8; #设置编码 mysql> source /aaa.sql #导入sql文件，注意sql的路径 \"]},\"70\":{\"h\":\"vim\",\"t\":[\"(1) i：进入编辑模式 (2) ESC：进入一般命令模式 (3) h 或 左箭头键：光标向左移动一个字符 (4) j 或 向下箭头：光标向下移动一个字符 (5) k 或 向上箭头：光标向上移动一个字符 (6) l 或 向右箭头：光标向右移动一个字符 (7) n<Space>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符 (8) 0 或 功能键[Home]：光标移动到本行开头 (9) $ 或 功能键[End]：光标移动到本行末尾 (10) G：光标移动到最后一行 (11) :n 或 nG：n为数字，光标移动到第n行 (12) gg：光标移动到第一行，相当于1G (13) n<Enter>：n为数字，光标向下移动n行 (14) /word：向光标之下寻找第一个值为word的字符串。 (15) ?word：向光标之上寻找第一个值为word的字符串。 (16) n：重复前一个查找操作 (17) N：反向重复前一个查找操作 (18) :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2 (19) :1,$s/word1/word2/g：将全文的word1替换为word2 (20) :1,$s/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。 (21) v：选中文本 (22) d：删除选中的文本 (23) dd: 删除当前行 (24) y：复制选中的文本 (25) yy: 复制当前行 (26) p: 将复制的数据在光标的下一行/下一个位置粘贴 (27) u：撤销 (28) Ctrl + r：取消撤销 (29) 大于号 >：将选中的文本整体向右缩进一次 (30) 小于号 <：将选中的文本整体向左缩进一次 (31) :w 保存 (32) :w! 强制保存 (33) :q 退出 (34) :q! 强制退出 (35) :wq 保存并退出 (36) :set paste 设置成粘贴模式，取消代码自动缩进 (37) :set nopaste 取消粘贴模式，开启代码自动缩进 (38) :set nu 显示行号 (39) :set nonu 隐藏行号 (40) gg=G：将全文代码格式化 (41) :noh 关闭查找关键词高亮 (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令 \"]},\"71\":{\"h\":\"ssh 免密登录\",\"t\":[\"ssh-keygen 先生成一对密钥 ssh-keygen -R 127.0.0.1 清除公钥信息 ssh-copy-id 127.0.0.1 发送公钥 /.ssh 下创建config文件 Host 别名 Hostname 127.0.0.1 User 登录名 最后即可使用ssh 别名登录 \"]},\"72\":{\"h\":\"Maven\"},\"73\":{\"h\":\"安装\",\"t\":[\"下载地址中央仓库配置本地仓库\"]},\"74\":{\"h\":\"阿里镜像\",\"t\":[\"<mirror> <id>alimaven</id> <mirrorOf>central</mirrorOf> <name>aliyun maven</name> <url>http://maven.aliyun.com/nexus/content/repositories/central/</url> </mirror> \"]},\"75\":{\"h\":\"简单命令\",\"t\":[\"mvn compile ##编译 mvn clean ##清理 mvn test ##测试 mvn package ##打包 mvn install ##安装到本地仓库 \"]},\"76\":{\"h\":\"依赖管理\"},\"77\":{\"h\":\"依赖传递\",\"t\":[\"例如A依赖了B，B依赖了C和D，那么你就可以在A中，像主动依赖了C和D一样使用它们。并且传递的依赖是没有数量和层级的限制的，非常方便。\"]},\"78\":{\"h\":\"可选依赖\",\"t\":[\"当别的项目引用这个jar包，optional为true时不让别人知道自己所用依赖\",\" <dependency> <groupId>joda-time</groupId> <artifactId>joda-time</artifactId> <version>2.9.9</version> // 可选依赖 <optional>true</optional> </dependency> \"]},\"79\":{\"h\":\"排除依赖\",\"t\":[\"加入某个jar包依赖后，不想使用其中的某个依赖，使用坐标主动排除掉\",\"<dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> <version>${struts.version}</version> <exclusions> <exclusion> <!-- we prefer our explicit version, though it should be the same --> <groupId>asm</groupId> <artifactId>asm</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>asm</groupId> <artifactId>asm</artifactId> <version>3.3.1</version> </dependency> \"]},\"80\":{\"h\":\"依赖范围\",\"t\":[\"scope\",\"主代码\",\"测试代码\",\"打包\",\"compile(默认)\",\"Y\",\"Y\",\"Y\",\"test\",\"Y\",\"provided\",\"Y\",\"Y\",\"runtime\",\"Y\"]},\"81\":{\"h\":\"分模块\"},\"82\":{\"h\":\"pom\"},\"83\":{\"h\":\"说明\",\"t\":[\"<dependencies> 是直接依赖,在父工程配置了依赖,子工程会直接继承下来。\",\"<dependencyManagement> 是统一管理依赖版本,不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)\",\"各个模块之间引入坐标即可使用\"]},\"84\":{\"h\":\"多模块打包\"},\"85\":{\"h\":\"正确流程\",\"t\":[\"检查或者是否加了依赖，如有，删除\",\" <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> \",\"找到添加依赖\",\"<build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>17</source> <target>17</target> <encoding>UTF-8</encoding> </configuration> </plugin> </plugins> </build> \",\"找到添加打包依赖\",\"<build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>17</source> <target>17</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> <configuration> <mainClass>com.example.WebControllerApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> \",\"点击父模块的package即可打包\"]},\"86\":{\"h\":\"Nginx\",\"t\":[\"nginx: 下载 (p2hp.com)\",\"docker run -d --name nginx -p 8080:8080 \\\\ -v /home/nginx/html:/etc/nginx/html -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf \\\\ nginx\"]},\"87\":{\"h\":\"正向代理\",\"t\":[\"正向代理是代理客户端的代理服务器，客户端通过正向代理服务器发送请求到目标服务器。\",\"正向代理通常是客户端的代理，客户端通过正向代理访问互联网上的内容。\",\"正向代理可以隐藏客户端的真实IP地址，因为请求是通过代理服务器发出的。\",\"使用场景：访问控制、缓存、过滤等。\",\"代理客户端\"]},\"88\":{\"h\":\"反向代理\",\"t\":[\"反向代理是代理服务器，它接收客户端的请求，然后将请求转发到后端的服务器集群中的一个或多个服务器上。\",\"客户端通常不知道反向代理的存在，它们直接与反向代理通信，而反向代理再将请求转发到后端服务器。\",\"反向代理可以提供负载均衡、SSL终端、缓存、压缩、请求/响应修改等功能。\",\"使用场景：提高网站性能和安全性、隐藏后端服务器的细节、提供负载均衡等。\",\"代理服务端\",\"配置\",\"只需要添加代理地址，当访问localhost:80时，会代理到http://127.0.0.1:9090\",\"在这个过程中，不知道请求被转发到了哪个后端服务器，所有的交互都通过Nginx进行\",\"server { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { proxy_pass http://127.0.0.1:9090; root html; index index.html index.htm; } \"]},\"89\":{\"h\":\"负载均衡\",\"t\":[\"启动两台实例\",\"image-20240820154128449\",\"配置\",\"upstream serverList{ server 127.0.0.1:9090; server 127.0.0.1:9091; } server { listen 80; server_name 127.0.0.1; location / { proxy_pass http://serverList; index index.html index.htm; } \",\"访问 127.0.0.1/test\"]},\"90\":{\"h\":\"nginx.conf\",\"t\":[\"# 定义配置文件的全局块，可以设置一些影响 Nginx 服务器整体运行的指令 user nginx; # 定义运行 Nginx 服务的用户 worker_processes auto; # 定义工作进程数，auto 表示与CPU核心数相同 # 错误日志定义，可以指定日志文件的存放路径和日志级别 error_log /var/log/nginx/error.log warn; # 进程文件，定义了 Nginx 启动时的 PID 文件存放位置 pid /var/run/nginx.pid; # 定义一个 events 块，设置与客户端连接相关的参数 events { worker_connections 1024; # 定义每个工作进程可以同时处理的连接数 } # 定义一个 http 块，设置与 HTTP 服务相关的指令 http { include /etc/nginx/mime.types; # 定义文件扩展名与 MIME 类型映射 default_type application/octet-stream; # 默认的 MIME 类型 # 日志格式定义，可以自定义日志格式 #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; # 定义日志文件的存放路径和使用的日志格式 # access_log /var/log/nginx/access.log main; # 定义发送文件的缓冲区大小 sendfile on; # 开启高效文件传输模式 # tcp_nopush on; # 关闭 TCP 推送，可以提高网络效率 # 定义连接超时时间 keepalive_timeout 65; # 定义 gzip 压缩，提高传输效率 gzip on; gzip_types text/plain application/xml application/xhtml+xml text/css application/javascript application/x-javascript; # 包含其他配置文件，如默认的 server 配置 # include /etc/nginx/conf.d/*.conf; # include /etc/nginx/sites-enabled/*; # 负载均衡列表 upstream serverList{ server 127.0.0.1:9090; server 127.0.0.1:9091; } # 定义一个 server 块，设置与特定虚拟主机相关的指令 server { listen 80; # 监听 80 端口 server_name localhost; # 定义服务器名 # 定义 location 块，设置 URL 匹配规则和处理方式 location / { # 负载均衡 # proxy_pass http://serverList; # 定义服务器的根目录 root /usr/share/nginx/html; index index.html index.htm; } # 定义静态文件的处理规则 location ~* \\\\.(jpg|jpeg|png|gif|ico|css|js)$ { expires 30d; # 设置静态文件的缓存时间 } # 定义错误页面的处理规则 error_page 404 /404.html; location = /404.html { internal; # 定义内部重定向 } } server { listen 443 ssl; # 监听 443 端口，并启用 SSL server_name example.com www.example.com; # 定义服务器名 # SSL 证书和私钥文件路径 ssl_certificate /etc/ssl/certs/nginx.crt; # 证书文件路径 ssl_certificate_key /etc/ssl/private/nginx.key; # 私钥文件路径 # SSL 协议设置 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 启用的 SSL 协议版本 ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:AES128+EECDH:AES256+EECDH'; # 优先使用的加密套件 ssl_prefer_server_ciphers on; # 优先使用服务器端的加密套件 # 其他 SSL 相关设置 ssl_session_cache shared:SSL:10m; # 定义 SSL 会话缓存 ssl_session_timeout 5m; # SSL 会话超时时间 # OCSP Stapling 配置 ssl_stapling on; # 开启 OCSP Stapling ssl_stapling_verify on; # 开启 OCSP Stapling 验证 # 配置 HSTS（HTTP Strict Transport Security） add_header Strict-Transport-Security \\\"max-age=31536000; includeSubDomains\\\" always; # ... 其他配置 ... } } \"]},\"91\":{\"h\":\"文档\"},\"92\":{\"h\":\"xmind\"},\"93\":{\"h\":\"jwt Filter Interceptor\"},\"94\":{\"h\":\"ElasticSearch\",\"t\":[\"old-ElasticSearchbilibilinew-ElasticSearchbilibili\",\"安装报错官方文档基本查询，结果过滤，高级查询，过滤，排序\",\"创建索引 - ElasticSearch (apifox.com)\",\"介绍\",\"Elasticsearch 是一个分布式的、开源的搜索分析引擎，支持各种数据类型，包括文本、数字、地理、结构化、非结构化。\",\"可以很好地存储和查询文档，用于应用程序搜索、企业搜索和网站搜索。\",\"安装\",\"限制内存大小 ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\"\",\"docker pull elasticsearch:7.6.2 docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e \\\"discovery.type=single-node\\\" -e ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\" elasticsearch:7.6.2 \",\"对比数据库\",\"索引（indices）\",\"Databases 数据库\",\"类型（type）\",\"Table 数据表\",\"文档（Document）\",\"Row 行\",\"字段（Field）\",\"Columns 列\"]},\"95\":{\"h\":\"基础操作\"},\"96\":{\"h\":\"_cat\",\"t\":[\"method: GET\",\"/_cat/nodes 查看所有的节点\",\"/_cat/health 健康状态\",\"/_cat/master\",\"/_cat/indices 查看索引 show databases;\"]},\"97\":{\"h\":\"索引\",\"t\":[\"创建索引\",\"PUT /shopping \",\"查看索引\",\"GET /shopping \",\"删除索引\",\"DELETE /shopping \"]},\"98\":{\"h\":\"文档\",\"t\":[\"创建文档(会覆盖原有的数据）\",\"PUT/POST /myindex/_doc/1 { \\\"name\\\": \\\"Tom\\\" } ## 不加id 则会自动生成id POST /myindex/_doc { \\\"name\\\": \\\"Tom\\\" } \",\"修改文档（在原来的数据上修改）\",\"POST /shopping/_update/23 { \\\"doc\\\":{ \\\"school\\\":\\\"666\\\" } } \",\"查询\",\"GET /myindex/_doc/1 \",\"查询索引下所有文档\",\"GET /shopping/_search \",\"删除\",\"DELETE /myindex/_doc/1 \"]},\"99\":{\"h\":\"高级查询\",\"t\":[\"匹配\",\"match_phrase不拆分、 match拆分后模糊查询、match_all查询所有\",\"GET /shopping/_search { \\\"query\\\":{ \\\"match\\\":{ ## 匹配 \\\"name\\\":\\\"Tom\\\" } }, } \",\"分页+排序\",\"GET /shopping/_search { \\\"query\\\":{ \\\"match_all\\\":{ ## 匹配 } }, \\\"from\\\":0, ## 第几条开始 \\\"size\\\":2, ## 一页几条数据 \\\"_source\\\":[\\\"name\\\"], ## 只要的字段 \\\"sort\\\": { ##排序 \\\"name.keyword\\\":{ ##排序的字段 \\\"order\\\":\\\"desc\\\" ## 升降序 } } } \",\"多条件查询\",\"bool把各种其它查询通过must（与）、must_not（非）、should（或）的方式进行组合\",\"GET /shopping/_search { \\\"query\\\":{ \\\"bool\\\":{ ## 多添加查询 \\\"should\\\":[ { \\\"match\\\":{ ##匹配 \\\"name\\\":\\\"Tom\\\" ##name字段 } }, { \\\"match\\\":{ \\\"school\\\":\\\"汤姆\\\" ## school字段 } } ] } } } \",\"范围查询\",\"gt-大于 gte-大于等于 lt-小于 lte`-小于等于\",\"GET /shopping/_search { \\\"query\\\":{ \\\"range\\\": { \\\"amount\\\": { \\\"gt\\\": 12 } } } } \",\"高亮\",\"GET /shopping/_search { \\\"query\\\":{ \\\"match\\\":{ \\\"name\\\":\\\"Tom\\\" } }, \\\"highlight\\\":{ \\\"fields\\\":{ \\\"name\\\":{} } } } \",\"聚合\",\"映射\",\"Mapping（映射）： 是用来定义文档和它所包含的字段是如何被存储和索引的。\",\"PUT /shopping/_mapping { \\\"properties\\\":{ \\\"name\\\" : { ## 字段 \\\"type\\\" : \\\"text\\\", ## 可以被分词查询 \\\"index\\\" : true ## 可以被索引 }, \\\"sex\\\" : { \\\"type\\\" : \\\"text\\\", \\\"index\\\": true }, \\\"tell\\\" : { \\\"type\\\" : \\\"keyword\\\", ## 必须是个完整的词 \\\"index\\\" : false ## 不能被索引 } } } \"]},\"100\":{\"h\":\"springboot\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-elasticsearch</artifactId> <version>2.7.9</version> </dependency> \",\"spring: elasticsearch: uris: 127.0.0.1:9200 \",\"实体类\",\"@Data @AllArgsConstructor @NoArgsConstructor @Document(indexName = \\\"mytest\\\") public class mytest { @Id private Long id; @Field private String name; //不可被索引 不可被分开的词查询 @Field(index = false,type = FieldType.Keyword) private String address; @Field private Integer age; } \"]},\"101\":{\"h\":\"索引\",\"t\":[\" @Test void indexops(){ // 创建索引 es.indexOps(mytest.class).create(); // 删除索引 es.indexOps(mytest.class).delete(); } \"]},\"102\":{\"h\":\"文档\",\"t\":[\" @Test void contextLoads() { mytest mytest = new mytest(102L,\\\"ggg\\\",\\\"gasd\\\",12); // 删除文档 String delete = es.delete(\\\"102\\\", mytest.class); // 添加文档 es.save(mytest); //添加多个 // es.save(List<mytest>) //查询文档 es.get(\\\"101\\\",mytest.getClass()); } \"]},\"103\":{\"h\":\"高级查询\",\"t\":[\"大杂烩\",\"在上述例子中，\\n我们结合使用查询、过滤、分页、高亮、排序和should操作。\\n我们使用QueryBuilders.boolQuery来创建一个布尔查询，使用should操作指定至少满足一个条件的情况：name字段包含搜索词\\\"手机\\\"，或category字段包含搜索词\\\"手机\\\"。\\n然后，我们使用FilterBuilders.boolFilter来创建一个布尔过滤器，使用must操作添加category字段必须等于\\\"电子产品\\\"，price字段必须在1000到5000之间的过滤条件。\\n接着，我们按照前述分页方式和排序方式添加分页和排序信息到查询。通过elasticsearchRestTemplate.search()执行查询，并获取查询结果的SearchHits对象。接着，我们从SearchHits中获取查询结果列表，并遍历每个结果，从高亮结果中获取需要高亮的字段内容，并设置到对应的实体对象中。\\n最后，我们使用PageImpl将结果封装成Page<Product>对象，其中包含了分页信息、查询结果列表和总记录数。\"]},\"104\":{\"h\":\"RabbitMQ\",\"t\":[\"安装地址 Docker安装RabbitMQ详细步骤 - 逊老头 - 博客园 (cnblogs.com) 学习地址 MQ的引言和不同MQ的特点_哔哩哔哩_bilibili\"]},\"105\":{\"h\":\"基础部分\"},\"106\":{\"h\":\"simple简单模式\",\"t\":[\"study\",\"消息产生者将消息放入队列\",\"消息的消费者(consumer) 监听(while) 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除(隐患 消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失)应用场景:聊天(中间有一个过度的服务器;p端,c端)\"]},\"107\":{\"h\":\"生产消息\",\"t\":[\"//生产者 @Test void send() throws IOException, TimeoutException { // 创建MQ的连接工厂对象 ConnectionFactory connectionFactory = new ConnectionFactory(); // 设置连接mq主机 connectionFactory.setHost(\\\"127.0.0.1\\\"); // 端口号 connectionFactory.setPort(5672); // 设置连接哪一个虚拟主机 connectionFactory.setVirtualHost(\\\"/ems\\\"); // 设置用户名和密码 connectionFactory.setUsername(\\\"ems\\\"); connectionFactory.setPassword(\\\"ems\\\"); // 获取连接对象 Connection connection = connectionFactory.newConnection(); // 获取连接中的通道 Channel channel = connection.createChannel(); // 通道绑定对应的消息队列 // s：队列名称 b:队列是否持久化 b1:是否独占队列(其他的连接不可用) // b2: 是否消费结束后自动删除 map: channel.queueDeclare(\\\"hello\\\",false,false,false,null); // 发布消息 // s： 交换机名称 s1:通道名称 b: MessageProperties.MINIMAL_PERSISTENT_BASIC（ 重启消息也在 ) // 最后：内容 channel.basicPublish(\\\"\\\",\\\"hello\\\",null,\\\"hello rabbit\\\".getBytes()); channel.close(); connection.close(); } \"]},\"108\":{\"h\":\"消费消息\",\"t\":[\" // 消费者 @Test void getMessage() throws IOException, TimeoutException { // 创建MQ的连接工厂对象 ConnectionFactory connectionFactory = new ConnectionFactory(); // 设置连接mq主机 connectionFactory.setHost(\\\"127.0.0.1\\\"); // 端口号 connectionFactory.setPort(5672); // 设置连接哪一个虚拟主机 connectionFactory.setVirtualHost(\\\"/ems\\\"); // 设置用户名和密码 connectionFactory.setUsername(\\\"ems\\\"); connectionFactory.setPassword(\\\"ems\\\"); // 获取连接对象 Connection connection = connectionFactory.newConnection(); // 获取连接中的通道 Channel channel = connection.createChannel(); // 通道绑定对应的消息队列 // s：队列名称 b:队列是否持久化 b1:是否独占队列(其他的连接不可用) // b2: 是否消费结束后自动删除 map: channel.queueDeclare(\\\"hello\\\",false,false,false,null); // 消费消息 // s： 交换机名称 s1:开始消息的自动确认机制 最后：消费时的回调接口 channel.basicConsume(\\\"hello\\\",true, new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"new String (body) = \\\" + new String (body)); } }); //不关闭 为了一直消费信息 // channel.close(); // connection.close(); } \"]},\"109\":{\"h\":\"实现工具类\",\"t\":[\"public class RabbitMQConnection { private static ConnectionFactory connectionFactory; //静态代码块 只执行一次 static { connectionFactory = new ConnectionFactory(); connectionFactory.setHost(\\\"127.0.0.1\\\"); // 设置连接mq主机 connectionFactory.setPort(5672);// 端口号 connectionFactory.setVirtualHost(\\\"/ems\\\");// 设置连接哪一个虚拟主机 connectionFactory.setUsername(\\\"ems\\\");// 设置用户名和密码 connectionFactory.setPassword(\\\"ems\\\"); } // 获取 连接对象方法 public static Connection getConnection() throws IOException, TimeoutException { // 获取连接对象 return connectionFactory.newConnection(); } // 关闭通道和连接 public void closeChannelAndConnection(Connection con, Channel channel){ try { if(con!=null)con.close(); if(channel!=null)channel.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } } \"]},\"110\":{\"h\":\"任务模型\",\"t\":[\"study\",\"两个消费者 消费同一个队列 默认会平均分配内容 叫做循环\",\"目前要求能者多劳！！！\",\"设置通道一次只能消费一个消息\",\"关闭消息的自动确认，开始手动确认消息\"]},\"111\":{\"h\":\"Consumer\",\"t\":[\"public class consumer2 { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); channel.queueDeclare(\\\"word\\\",false,false,false,null); channel.basicQos(1);// 每次消费一个 // false 关闭自动确定 channel.basicConsume(\\\"word\\\",false, new DefaultConsumer(channel){ @SneakyThrows @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { Thread.sleep(1000);//模拟执行的漫 System.out.println(\\\"new String (body) = \\\" + new String (body)); /** * 参数 * - 手动确认的表示 * - false 是否开启多个消息同时确认 */ channel.basicAck(envelope.getDeliveryTag(),false); } }); } } \"]},\"112\":{\"h\":\"广播\",\"t\":[\" 流程如下：\",\"有多个消费者\",\"每个消费者有自己的队列\",\"每个队列都绑定了交换机\",\"生产者只能向交换机发送消息，再有交换机发给队列，生产者无权决定\",\"交换机吧消息发给和自己绑定的队列\",\"队列中的消费者都可以拿到消息\"]},\"113\":{\"h\":\"生产者\",\"t\":[\"public class producer { public static void main(String[] args) throws IOException, TimeoutException { // 创建连接对象 Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 将通道声明到交换机 (交换机名称，类型) channel.exchangeDeclare(\\\"one\\\",\\\"fanout\\\"); channel.basicPublish(\\\"one\\\",\\\"\\\",null,\\\"hello world\\\".getBytes()); channel.close(); connection.close(); } } \"]},\"114\":{\"h\":\"消费者\",\"t\":[\"public class consumerOne { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"one\\\",\\\"fanout\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定 channel.queueBind(queue,\\\"one\\\",\\\"\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"new String(body) = \\\" + new String(body)); } }); } } \"]},\"115\":{\"h\":\"路由模型\"},\"116\":{\"h\":\"直连\",\"t\":[\"直连路由\",\"在fanout的模式下，一条消息，会被订阅的队列消费。但有时我们希望不同的消息被不同的队列消费，\",\"此时就用到了 Direct类型的Exchange\",\"队列与交换机绑定，不再是任意绑定了，而是要指定一个RoutingKey(路由key)\",\"消息 的发送方在向exchang发送消息时，也必须要指定一个RoutingKey\",\"Exchange在发送消息时，会根据指定的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会收到消息\"]},\"117\":{\"h\":\"生产者\",\"t\":[\"public class producer { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); channel.exchangeDeclare(\\\"name_direct\\\",\\\"direct\\\"); String RoutingKey = \\\"warn\\\"; channel.basicPublish(\\\"name_direct\\\", RoutingKey,null, \\\"这是direct发布于的\\\".getBytes()); channel.close(); connection.close(); } } \"]},\"118\":{\"h\":\"消费者\",\"t\":[\"public class consumerOne { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"name_direct\\\",\\\"direct\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定和 RoutingKey channel.queueBind(queue,\\\"name_direct\\\",\\\"error\\\"); channel.queueBind(queue,\\\"name_direct\\\",\\\"info\\\"); channel.queueBind(queue,\\\"name_direct\\\",\\\"warn\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"error \\\" + new String(body)); } }); } } \",\"public class consumerTwo { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"name_direct\\\",\\\"direct\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定和 RoutingKey channel.queueBind(queue,\\\"name_direct\\\",\\\"warn\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"info \\\" + new String(body)); } }); } } \"]},\"119\":{\"h\":\"动态\",\"t\":[\"动态路由\",\"Topic类型的Exchange与Direct 相比，都是可以根据Routinghey把消息路由到不同的队列。只不过Topic 类型Exchange可以让队列在绑定Routing key的时候使用通配符!这种模型Routingkey一般都是由一个或多个单词组成，多个单词之间以\\\". \\\"分割，例如:item.insert\",\"* 匹配不多不少恰好一个单词\",\"admin.* --> admin.hh.abc | admin.hh\",\"# 匹配一个或多个单词\",\"admin.# --> admin.hh\"]},\"120\":{\"h\":\"代码\",\"t\":[\"public class producer { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); channel.exchangeDeclare(\\\"name_topic\\\",\\\"topic\\\"); String RoutingKey = \\\"warn.js\\\"; channel.basicPublish(\\\"name_direct\\\", RoutingKey,null, \\\"这是direct发布于的\\\".getBytes()); channel.close(); connection.close(); } } \",\"public class consumerOne { public static void main(String[] args) throws IOException, TimeoutException { Connection connection = RabbitMQConnection.getConnection(); Channel channel = connection.createChannel(); // 通道绑定交换机 channel.exchangeDeclare(\\\"name_topic\\\",\\\"topic\\\"); // 临时队列 String queue = channel.queueDeclare().getQueue(); // 交换机和队列绑定和 RoutingKey channel.queueBind(queue,\\\"name_topic\\\",\\\"error.*\\\"); //error.xxx | error.aaa channel.queueBind(queue,\\\"name_topic\\\",\\\"info.#\\\");//info.gag.agsdga | info.gas.gas.g.asg. channel.queueBind(queue,\\\"name_topic\\\",\\\"warn\\\"); // 消费消息 channel.basicConsume(queue,true,new DefaultConsumer(channel){ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"error \\\" + new String(body)); } }); } } \"]},\"121\":{\"h\":\"spring boot 整合\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \",\"spring: rabbitmq: host: 127.0.0.1 port: 5672 username: ems password: ems virtual-host: /ems \"]},\"122\":{\"h\":\"Test\",\"t\":[\"@SpringBootTest public class rabbitMQTest { @Autowired private RabbitTemplate rabbitTemplate; // hello @Test void test(){ rabbitTemplate.convertAndSend(\\\"hello\\\",\\\"hello world\\\"); } // work @Test void work(){ for (int i = 0; i < 10; i++) { rabbitTemplate.convertAndSend(\\\"work\\\",\\\"hello work\\\"); } } //fanout @Test void fanout(){ rabbitTemplate.convertAndSend(\\\"fanout\\\",\\\"\\\",\\\"hello fanout\\\"); } // route @Test void direct(){ rabbitTemplate.convertAndSend(\\\"direct\\\",\\\"warn\\\",\\\"hello direct\\\"); } // 动态路由 @Test void Topic(){ rabbitTemplate.convertAndSend(\\\"topic\\\",\\\"user.hh.gash\\\",\\\"hello topic\\\"); } } \"]},\"123\":{\"h\":\"简单\",\"t\":[\"@Component //默认队列持久化 非独占 不是autodelete @RabbitListener(queuesToDeclare = @Queue(value = \\\"hello\\\")) public class RabbitMQ { // 第一种模式 @RabbitHandler public void recrive(String message){ System.out.println(\\\"message = \\\" + message); } } \"]},\"124\":{\"h\":\"任务\",\"t\":[\"@Component public class workConsumer { //公平消费 @RabbitListener(queuesToDeclare = @Queue(\\\"work\\\")) public void work1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(queuesToDeclare = @Queue(\\\"work\\\")) public void work2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"125\":{\"h\":\"广播\",\"t\":[\"@Component public class fanoutConsumer { @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"fanout\\\",type = \\\"fanout\\\") ) }) public void fanout1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"fanout\\\",type = \\\"fanout\\\") ) }) public void fanout2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"126\":{\"h\":\"静态路由\",\"t\":[\"@Component public class routeConsumer { @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"direct\\\",type = \\\"direct\\\"), key = {\\\"info\\\",\\\"warn\\\"} ) }) public void route1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"direct\\\",type = \\\"direct\\\"), key = {\\\"warn\\\",\\\"message\\\"} ) }) public void route2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"127\":{\"h\":\"动态路由\",\"t\":[\"@Component public class topicConsumer { @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"topic\\\",type = \\\"topic\\\"), key = {\\\"user.*\\\",\\\"user.#\\\"} ) }) public void topic1(String message){ System.out.println(\\\"message1 = \\\" + message); } @RabbitListener(bindings = { @QueueBinding( value = @Queue, exchange = @Exchange(value = \\\"topic\\\",type = \\\"topic\\\"), key = {\\\"user.*\\\",\\\"message\\\"} ) }) public void topic2(String message){ System.out.println(\\\"message2 = \\\" + message); } } \"]},\"128\":{\"h\":\"高级\",\"t\":[\"这里我们必须尽可能确保MQ消息的可靠性，即：消息应该至少被消费者处理1次 那么问题来了：\",\"我们该如何确保MQ消息的可靠性？\",\"如果真的发送失败，有没有其它的兜底方案？\"]},\"129\":{\"h\":\"1.发送者的可靠性\",\"t\":[\"首先，我们一起分析一下消息丢失的可能性有哪些。 消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：\",\" 消息从生产者到消费者的每一步都可能导致消息丢失：\",\"发送消息时丢失： \",\"生产者发送消息时连接MQ失败\",\"生产者发送消息到达MQ后未找到Exchange\",\"生产者发送消息到达MQ的Exchange后，未找到合适的Queue\",\"消息到达MQ后，处理消息的进程发生异常\",\"MQ导致消息丢失： \",\"消息到达MQ，保存到队列后，尚未消费就突然宕机\",\"消费者处理消息时： \",\"消息接收后尚未处理突然宕机\",\"消息接收后处理过程中抛出异常\",\"综上，我们要解决消息丢失问题，保证MQ的可靠性，就必须从3个方面入手：\",\"确保生产者一定把消息发送到MQ\",\"确保MQ不会将消息弄丢\",\"确保消费者一定要处理消息\",\"这一章我们先来看如何确保生产者一定能把消息发送到MQ。\"]},\"130\":{\"h\":\"1.1.生产者重试机制\",\"t\":[\"首先第一种情况，就是生产者发送消息时，出现了网络故障，导致与MQ的连接中断。\",\"为了解决这个问题，SpringAMQP提供的消息发送时的重试机制。即：当RabbitTemplate与MQ连接超时后，多次重试。\",\"修改publisher模块的application.yaml文件，添加下面的内容：\",\"spring: rabbitmq: connection-timeout: 1s # 设置MQ的连接超时时间 template: retry: enabled: true # 开启超时重试机制 initial-interval: 1000ms # 失败后的初始等待时间 multiplier: 1 # 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier max-attempts: 3 # 最大重试次数 \",\"我们利用命令停掉RabbitMQ服务：\",\"docker stop mq \",\"然后测试发送一条消息，会发现会每隔1秒重试1次，总共重试了3次。消息发送的超时重试机制配置成功了！\",\"注意\",\"注意：当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是阻塞式的重试，也就是说多次重试等待的过程中，当前线程是被阻塞的。 如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。\"]},\"131\":{\"h\":\"1.2.生产者确认机制\",\"t\":[\"一般情况下，只要生产者与MQ之间的网路连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。 不过，在少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：\",\"MQ内部处理消息的进程发生了异常\",\"生产者发送消息到达MQ后未找到Exchange\",\"生产者发送消息到达MQ的Exchange后，未找到合适的Queue，因此无法路由\",\"针对上述情况，RabbitMQ提供了生产者消息确认机制，包括Publisher Confirm和Publisher Return两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的回执。 具体如图所示：\",\"总结如下：\",\"当消息投递到MQ，但是路由失败时，通过Publisher Return返回异常信息，同时返回ack的确认信息，代表投递成功\",\"临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功\",\"持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功\",\"其它情况都会返回NACK，告知投递失败\",\"其中ack和nack属于Publisher Confirm机制，ack是投递成功；nack是投递失败。而return则属于Publisher Return机制。 默认两种机制都是关闭状态，需要通过配置文件来开启。\"]},\"132\":{\"h\":\"2.MQ的可靠性\",\"t\":[\"消息到达MQ以后，如果MQ不能及时保存，也会导致消息丢失，所以MQ的可靠性也非常重要。\"]},\"133\":{\"h\":\"2.1.数据持久化\",\"t\":[\"注意\",\"说明：在开启持久化机制以后，如果同时还开启了生产者确认，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性。 不过出于性能考虑，为了减少IO次数，发送到MQ的消息并不是逐条持久化到数据库的，而是每隔一段时间批量持久化。一般间隔在100毫秒左右，这就会导致ACK有一定的延迟，因此建议生产者确认全部采用异步方式。\"]},\"134\":{\"h\":\"2.2.LazyQueue\",\"t\":[\"在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：\",\"消费者宕机或出现网络故障\",\"消息发送量激增，超过了消费者处理速度\",\"消费者处理业务发生阻塞\",\"一旦出现消息堆积问题，RabbitMQ的内存占用就会越来越高，直到触发内存预警上限。此时RabbitMQ会将内存消息刷到磁盘上，这个行为成为PageOut. PageOut会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞。\",\"为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：\",\"接收到消息后直接存入磁盘而非内存\",\"消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）\",\"支持数百万条的消息存储\",\"而在3.12版本之后，LazyQueue已经成为所有队列的默认格式。因此官方推荐升级MQ为3.12版本或者所有队列都设置为LazyQueue模式。\"]},\"135\":{\"h\":\"2.2.1.控制台配置Lazy模式\",\"t\":[\"在添加队列的时候，添加x-queue-mod=lazy参数即可设置队列为Lazy模式：\"]},\"136\":{\"h\":\"2.2.2.代码配置Lazy模式\",\"t\":[\"在利用SpringAMQP声明队列的时候，添加x-queue-mod=lazy参数也可设置队列为Lazy模式：\",\"@Bean public Queue lazyQueue(){ return QueueBuilder .durable(\\\"lazy.queue\\\") .lazy() // 开启Lazy模式 .build(); } \",\"这里是通过QueueBuilder的lazy()函数配置Lazy模式，底层源码如下：\",\"当然，我们也可以基于注解来声明队列并设置为Lazy模式：\",\"@RabbitListener(queuesToDeclare = @Queue( name = \\\"lazy.queue\\\", durable = \\\"true\\\", arguments = @Argument(name = \\\"x-queue-mode\\\", value = \\\"lazy\\\") )) public void listenLazyQueue(String msg){ log.info(\\\"接收到 lazy.queue的消息：{}\\\", msg); } \"]},\"137\":{\"h\":\"2.2.3.更新已有队列为lazy模式\",\"t\":[\"对于已经存在的队列，也可以配置为lazy模式，但是要通过设置policy实现。 可以基于命令行设置policy：\",\"rabbitmqctl set_policy Lazy \\\"^lazy-queue$\\\" '{\\\"queue-mode\\\":\\\"lazy\\\"}' --apply-to queues \",\"命令解读：\",\"rabbitmqctl ：RabbitMQ的命令行工具\",\"set_policy ：添加一个策略\",\"Lazy ：策略名称，可以自定义\",\"\\\"^lazy-queue$\\\" ：用正则表达式匹配队列的名字\",\"'{\\\"queue-mode\\\":\\\"lazy\\\"}' ：设置队列模式为lazy模式\",\"--apply-to queues：策略的作用对象，是所有的队列\",\"当然，也可以在控制台配置policy，进入在控制台的Admin页面，点击Policies，即可添加配置：\"]},\"138\":{\"h\":\"3.消费者的可靠性\",\"t\":[\"当RabbitMQ向消费者投递消息以后，需要知道消费者的处理状态如何。因为消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：\",\"消息投递的过程中出现了网络故障\",\"消费者接收到消息后突然宕机\",\"消费者接收到消息后，因处理不当导致异常\",\"...\",\"一旦发生上述情况，消息也会丢失。因此，RabbitMQ必须知道消费者的处理状态，一旦消息处理失败才能重新投递消息。 但问题来了：RabbitMQ如何得知消费者的处理状态呢？\",\"本章我们就一起研究一下消费者处理消息时的可靠性解决方案。\"]},\"139\":{\"h\":\"2.1.消费者确认机制\",\"t\":[\"为了确认消费者是否成功处理消息，RabbitMQ提供了消费者确认机制（Consumer Acknowledgement）。即：当消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。回执有三种可选值：\",\"ack：成功处理消息，RabbitMQ从队列中删除该消息\",\"nack：消息处理失败，RabbitMQ需要再次投递消息\",\"reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息\",\"一般reject方式用的较少，除非是消息格式有问题，那就是开发问题了。因此大多数情况下我们需要将消息处理的代码通过try catch机制捕获，消息处理成功时返回ack，处理失败时返回nack.\",\"由于消息回执的处理代码比较统一，因此SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：\",\"**none**：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用\",\"**manual**：手动模式。需要自己在业务代码中调用api，发送ack或reject，存在业务入侵，但更灵活\",\"**auto**：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回ack. 当业务出现异常时，根据异常判断返回不同结果： \",\"如果是业务异常，会自动返回nack；\",\"如果是消息处理或校验异常，自动返回reject;\",\"通过下面的配置可以修改SpringAMQP的ACK处理方式：\",\"spring: rabbitmq: listener: simple: acknowledge-mode: none # 不做处理 \",\"修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理的异常：\",\"@RabbitListener(queues = \\\"simple.queue\\\") public void listenSimpleQueueMessage(String msg) throws InterruptedException { log.info(\\\"spring 消费者接收到消息：【\\\" + msg + \\\"】\\\"); if (true) { throw new MessageConversionException(\\\"故意的\\\"); } log.info(\\\"消息处理完成\\\"); } \",\"测试可以发现：当消息处理发生异常时，消息依然被RabbitMQ删除了。\",\"我们再次把确认机制修改为auto：\",\"spring: rabbitmq: listener: simple: acknowledge-mode: auto # 自动ack \",\"在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为unacked（未确定状态）： 放行以后，由于抛出的是消息转换异常，因此Spring会自动返回reject，所以消息依然会被删除：\",\"我们将异常改为RuntimeException类型：\",\"@RabbitListener(queues = \\\"simple.queue\\\") public void listenSimpleQueueMessage(String msg) throws InterruptedException { log.info(\\\"spring 消费者接收到消息：【\\\" + msg + \\\"】\\\"); if (true) { throw new RuntimeException(\\\"故意的\\\"); } log.info(\\\"消息处理完成\\\"); } \",\"在异常位置打断点，然后再次发送消息测试，程序卡在断点时，可以发现此时消息状态为unacked（未确定状态）：放行以后，由于抛出的是业务异常，所以Spring返回ack，最终消息恢复至Ready状态，并且没有被RabbitMQ删除： 当我们把配置改为auto时，消息处理失败后，会回到RabbitMQ，并重新投递到消费者。\"]},\"140\":{\"h\":\"2.2.失败重试机制\",\"t\":[\"当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。 极端情况就是消费者一直无法执行成功，那么消息requeue就会无限循环，导致mq的消息处理飙升，带来不必要的压力：\",\"当然，上述极端情况发生的概率还是非常低的，不过不怕一万就怕万一。为了应对上述情况Spring又提供了消费者失败重试机制：在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。\",\"修改consumer服务的application.yml文件，添加内容：\",\"spring: rabbitmq: listener: simple: retry: enabled: true # 开启消费者失败重试 initial-interval: 1000ms # 初识的失败等待时长为1秒 multiplier: 1 # 失败的等待时长倍数，下次等待时长 = multiplier * last-interval max-attempts: 3 # 最大重试次数 stateless: true # true无状态；false有状态。如果业务中包含事务，这里改为false \",\"重启consumer服务，重复之前的测试。可以发现：\",\"消费者在失败后消息没有重新回到MQ无限重新投递，而是在本地重试了3次\",\"本地重试3次以后，抛出了AmqpRejectAndDontRequeueException异常。查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是reject\",\"结论：\",\"开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试\",\"重试达到最大次数后，Spring会返回reject，消息会被丢弃\"]},\"141\":{\"h\":\"2.3.失败处理策略\",\"t\":[\"在之前的测试中，本地测试达到最大重试次数后，消息会被丢弃。这在某些对于消息可靠性要求较高的业务场景下，显然不太合适了。 因此Spring允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由MessageRecovery接口来定义的，它有3个不同实现：\",\"RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式\",\"ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队\",\"RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机\",\"比较优雅的一种处理方案是RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。\",\"1）在consumer服务中定义处理失败消息的交换机和队列\",\"@Bean public DirectExchange errorMessageExchange(){ return new DirectExchange(\\\"error.direct\\\"); } @Bean public Queue errorQueue(){ return new Queue(\\\"error.queue\\\", true); } @Bean public Binding errorBinding(Queue errorQueue, DirectExchange errorMessageExchange){ return BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(\\\"error\\\"); } \",\"2）定义一个RepublishMessageRecoverer，关联队列和交换机\",\"@Bean public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate){ return new RepublishMessageRecoverer(rabbitTemplate, \\\"error.direct\\\", \\\"error\\\"); } \",\"完整代码如下：\",\"package com.itheima.consumer.config; import org.springframework.amqp.core.Binding; import org.springframework.amqp.core.BindingBuilder; import org.springframework.amqp.core.DirectExchange; import org.springframework.amqp.core.Queue; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.amqp.rabbit.retry.MessageRecoverer; import org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer; import org.springframework.context.annotation.Bean; @Configuration @ConditionalOnProperty(name = \\\"spring.rabbitmq.listener.simple.retry.enabled\\\", havingValue = \\\"true\\\") public class ErrorMessageConfig { @Bean public DirectExchange errorMessageExchange(){ return new DirectExchange(\\\"error.direct\\\"); } @Bean public Queue errorQueue(){ return new Queue(\\\"error.queue\\\", true); } @Bean public Binding errorBinding(Queue errorQueue, DirectExchange errorMessageExchange){ return BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(\\\"error\\\"); } @Bean public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate){ return new RepublishMessageRecoverer(rabbitTemplate, \\\"error.direct\\\", \\\"error\\\"); } } \"]},\"142\":{\"h\":\"2.4.业务幂等性\",\"t\":[\"何为幂等性？幂等是一个数学概念，用函数表达式来描述是这样的：f(x) = f(f(x))，例如求绝对值函数。 在程序开发中，则是指同一个业务，执行一次或多次对业务状态的影响是一致的。例如：\",\"根据id删除数据\",\"查询数据\",\"新增数据\",\"但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：\",\"取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况\",\"退款业务。重复退款对商家而言会有经济损失。\",\"所以，我们要尽可能避免业务被重复执行。 然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：\",\"页面卡顿时频繁刷新导致表单重复提交\",\"服务间调用的重试\",\"MQ消息的重复投递\",\"我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息重复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。 举例：\",\"假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为已支付状态。\",\"由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后重新投递给交易服务。\",\"但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了已退款状态。\",\"退款完成后，新投递的消息才被消费，那么订单状态会被再次改为已支付。业务异常。\",\"因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：\",\"唯一消息ID\",\"业务状态判断\"]},\"143\":{\"h\":\"2.4.1.唯一消息ID\",\"t\":[\"这个思路非常简单：\",\"每一条消息都生成一个唯一的id，与消息一起投递给消费者。\",\"消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库\",\"如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。\",\"我们该如何给消息添加唯一ID呢？ 其实很简单，SpringAMQP的MessageConverter自带了MessageID的功能，我们只要开启这个功能即可。 以Jackson的消息转换器为例：\",\"@Bean public MessageConverter messageConverter(){ // 1.定义消息转换器 Jackson2JsonMessageConverter jjmc = new Jackson2JsonMessageConverter(); // 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息 jjmc.setCreateMessageIds(true); return jjmc; } \"]},\"144\":{\"h\":\"2.4.2.业务判断\",\"t\":[\"业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。 例如我们当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理。\",\"相比较而言，消息ID的方案需要改造原有的数据库，所以我更推荐使用业务判断的方案。\",\"以支付修改订单的业务为例，我们需要修改OrderServiceImpl中的markOrderPaySuccess方法：\",\" @Override public void markOrderPaySuccess(Long orderId) { // 1.查询订单 Order old = getById(orderId); // 2.判断订单状态 if (old == null || old.getStatus() != 1) { // 订单不存在或者订单状态不是1，放弃处理 return; } // 3.尝试更新订单 Order order = new Order(); order.setId(orderId); order.setStatus(2); order.setPayTime(LocalDateTime.now()); updateById(order); } \",\"上述代码逻辑上符合了幂等判断的需求，但是由于判断和更新是两步动作，因此在极小概率下可能存在线程安全问题。\",\"我们可以合并上述操作为这样：\",\"@Override public void markOrderPaySuccess(Long orderId) { // UPDATE `order` SET status = ? , pay_time = ? WHERE id = ? AND status = 1 lambdaUpdate() .set(Order::getStatus, 2) .set(Order::getPayTime, LocalDateTime.now()) .eq(Order::getId, orderId) .eq(Order::getStatus, 1) .update(); } \",\"注意看，上述代码等同于这样的SQL语句：\",\"UPDATE `order` SET status = ? , pay_time = ? WHERE id = ? AND status = 1 \",\"我们在where条件中除了判断id以外，还加上了status必须为1的条件。如果条件不符（说明订单已支付），则SQL匹配不到数据，根本不会执行。\"]},\"145\":{\"h\":\"2.5.兜底方案\",\"t\":[\"虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息100%的可靠。万一真的MQ通知失败该怎么办呢？ 有没有其它兜底方案，能够确保订单的支付状态一致呢？\",\"其实思想很简单：既然MQ通知不一定发送到交易服务，那么交易服务就必须自己主动去查询支付状态。这样即便支付服务的MQ通知失败，我们依然能通过主动查询来保证订单状态的一致。 流程如下：\",\"图中黄色线圈起来的部分就是MQ通知失败后的兜底处理方案，由交易服务自己主动去查询支付状态。\",\"不过需要注意的是，交易服务并不知道用户会在什么时候支付，如果查询的时机不正确（比如查询的时候用户正在支付中），可能查询到的支付状态也不正确。 那么问题来了，我们到底该在什么时间主动查询支付状态呢？\",\"这个时间是无法确定的，因此，通常我们采取的措施就是利用定时任务定期查询，例如每隔20秒就查询一次，并判断支付状态。如果发现订单已经支付，则立刻更新订单状态为已支付即可。 定时任务大家之前学习过，具体的实现这里就不再赘述了。\",\"至此，消息可靠性的问题已经解决了。\",\"综上，支付服务与交易服务之间的订单状态一致性是如何保证的？\",\"首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。\",\"其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性\",\"最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。\"]},\"146\":{\"h\":\"延迟队列\",\"t\":[\"安装插件以及使用 config\",\"@Configuration public class TestDelayQueueConfig { public static final String DEAD_EXCHANGE = \\\"delay_exchange\\\"; public static final String DEAD_QUEUE = \\\"delay_queue\\\"; public static final String DEAD_ROUTING = \\\"delay_key\\\"; @Bean public CustomExchange delayExchange() { Map<String, Object> args = new HashMap<String, Object>(); args.put(\\\"x-delayed-type\\\", \\\"direct\\\"); return new CustomExchange(DEAD_EXCHANGE, \\\"x-delayed-message\\\", true, false, args); } /** * 延迟消息队列 * @return */ @Bean public Queue delayQueue() { return new Queue(DEAD_QUEUE, true); } @Bean public Binding deplyBinding() { return BindingBuilder .bind(delayQueue()) .to(delayExchange()) .with(DEAD_ROUTING) .noargs(); } } \"]},\"147\":{\"h\":\"生产者\",\"t\":[\"@Component public class DeplyProducer { @Resource RabbitTemplate rabbitTemplate; public void send(String msg, Integer delayTime){ // MessageProperties messageProperties = new MessageProperties(); // messageProperties.setDelay(delayTime); // Message message = new Message(msg.getBytes(), messageProperties); // rabbitTemplate.convertAndSend(DEAD_EXCHANGE, DEAD_ROUTING, message); rabbitTemplate.convertAndSend(DEAD_EXCHANGE, DEAD_ROUTING, msg, message1 -> { message1.getMessageProperties().setDelay(delayTime); return message1;} ); } } \"]},\"148\":{\"h\":\"消费者\",\"t\":[\"@Component public class DeplyConsumer { @RabbitListener(queues = DEAD_QUEUE) public void onMessage(String msg) { System.out.println(\\\"收到信息了 msg = \\\" + msg); } } \"]},\"149\":{\"h\":\"微服务\"},\"150\":{\"h\":\"Redis\",\"t\":[\"Redis详细解释\"]},\"151\":{\"h\":\"安装\",\"t\":[\"sudo apt update sudo apt install redis-server redis-cli 启动命令 \"]},\"152\":{\"h\":\"基本命令\",\"t\":[\"bdsize 当前数据库大小 select 数据库切换 flushdb 清空当前数据库 flushall 清空所有数据库 type name 查看key的类型 \"]},\"153\":{\"h\":\"五大数据类型\",\"t\":[\"Redsi-Key\",\"keys * 打印所有的key set name hhh 设置k-v(\\\"name\\\",\\\"hh\\\") get name 打印name的value exists name 判断key是否存在 move name 1 将name移入到数据库1中 expire name 5 设置name 5s 过期 ttl name 查看name剩余过期时间 \",\"String\",\"append name \\\"world\\\" #value后面增加world strlen name #value的长度 incr age #实现自增 incrby age 20 #增加20 decr age #实现自减 dectby age 20 #减少20 getrange name 0 3 #串的截取 mget mset #批量set或get setnx #如果存在则不创建 getset #找不到就创建 找到就设置 \",\"List\",\"lpush list hello #往list中加入hello lrange list 0 -1 #打印所有 lpop/rpop list #删除左右头部 lindex list 1 # 打印下标1的值 llen list # 长度 lrem list 1 hello # 删除一个hello ltrim list 2 4 # 截取 剩余2-4 lset list 0 hello # 指定下标值替换为hello \",\"set\",\"sadd: 向集合中添加元素。例如：sadd myset \\\"element1\\\" \\\"element2\\\" smembers: 返回集合中所有元素。例如：smembers myset sismember: 判断元素是否在集合中。例如：sismember myset \\\"element1\\\" scard: 返回集合中元素的数量。例如：scard myset srem: 从集合中删除元素。例如：srem myset \\\"element1\\\" spop: 从集合中弹出一个随机元素。例如：spop myset sunion: 返回多个集合的并集。例如：sunion set1 set2 set3 sdiff: 返回多个集合的差集。例如：sdiff set1 set2 set3 sinter: 返回多个集合的交集。例如：sinter set1 set2 set3 srandmember: 随机返回集合中的一个元素。例如：srandmember myset \",\"Hash\",\"hset key field value : 在key对应的hash中设置field对应的value。如果key不存在，则新建一个。 例如:hset user:1 name \\\"tom\\\" hget key field : 获取key对应的hash中field对应的value。 例如: hget user:1 name hgetall key : 获取key对应的hash中所有的键值对。 例如: hgetall user:1 hdel key field [field ...] : 删除key对应的hash中的一个或多个field。 例如: hdel user:1 name hlen key : 获取key对应的hash中field的数量。 例如: hlen user:1 hexists key field : 检查key对应的hash中是否存在field。 例如: hexists user:1 name hkeys key : 获取key对应的hash中所有的field。 例如: hkeys user:1 hvals key : 获取key对应的hash中所有的value。 例如: hvals user:1 这里是一些基本的Redis Hash命令。实际上还有许多其他的命令可供使用，如hincrby、hmset、hmget等。 \",\"Sorted sets\",\"zadd: 向有序集合中添加元素，支持指定分数。例如：zadd mysortedset 1 \\\"element1\\\" 2 \\\"element2\\\" zrange: 返回有序集合中指定范围的元素。例如：zrange mysortedset 0 -1 zrangebyscore: 返回有序集合中指定分数范围的元素。例如：zrangebyscore mysortedset 1 2 zrank: 返回有序集合中指定元素的排名。例如：zrank mysortedset \\\"element1\\\" zrem: 从有序集合中删除元素。例如：zrem mysortedset \\\"element1\\\" zcount: 返回有序集合中指定分数范围的元素数量。例如：zcount mysortedset 1 2 zincrby: 对有序集合中指定元素的分数进行增加/减少操作。例如：zincrby mysortedset 2 \\\"element1\\\" zcard: 返回有序集合中元素的数量。例如：zcard mysortedset zunionstore: 计算多个有序集合的并集，并将结果存储到新的有序集合中。例如：zunionstore new_sortedset 2 sortedset1 sortedset2 zinterstore: 计算多个有序集合的交集，并将结果存储到新的有序集合中。例如：zinterstore new_sortedset 2 sortedset1 sortedset2 \"]},\"154\":{\"h\":\"序列化\",\"t\":[\"Redis是一种内存数据库，为了更有效地使用内存，它需要对存储的数据进行序列化，使数据占用的空间更小。序列化是指将数据结构转换为字节流的过程。\",\"Redis支持多种序列化格式，如二进制协议（Redis默认使用的序列化格式）、JSON、MessagePack等。二进制协议是Redis自定义的序列化格式，它可以最大程度地减少数据占用的空间。JSON和MessagePack是常用的序列化格式，它们可以方便地与其他语言和系统进行交互。\"]},\"155\":{\"h\":\"实现\",\"t\":[\"stu.java\",\"public class stu implements Serializable { private Integer id; private String name; } \",\"RedisConfig.java\",\"@Configuration public class RedisConfig{ @Bean //配置redisTemplate // 默认情况下的模板只能支持 RedisTemplate<String,String>， // 只能存入字符串，很多时候，我们需要自定义 RedisTemplate ，设置序列化器 public RedisTemplate<String,Object> redisTemplate(RedisConnectionFactory factory){ RedisTemplate<String,Object> template = new RedisTemplate <>(); template.setConnectionFactory(factory); Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); // key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer); template.setValueSerializer(stringRedisSerializer); // hash的key也采用String的序列化方式 template.setHashKeySerializer(stringRedisSerializer); // value序列化方式采用jackson template.setValueSerializer(jackson2JsonRedisSerializer); // hash的value序列化方式采用jackson template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; } } \"]},\"156\":{\"h\":\"测试\",\"t\":[\" @Autowired private RedisTemplate redisTemplate; @Test void contextLoads() { stu stu = new stu(1, \\\"liming\\\"); redisTemplate.opsForValue().set(\\\"hh\\\",stu); System.out.println(redisTemplate.opsForValue().get(\\\"hh\\\")); } \"]},\"157\":{\"h\":\"持久化\"},\"158\":{\"h\":\"RDB\",\"t\":[\"RDB 是 Redis Database 文件的缩写，它是 Redis 的默认数据持久化方式。RDB 文件是在指定的时间间隔内（通常是每几秒或几分钟）自动生成的快照文件。这种方式可以在损失一定数据的情况下更快地恢复数据库。\"]},\"159\":{\"h\":\"触发\",\"t\":[\"保存配置：\",\"save：只管保存，其他不管，全部阻塞。\",\"内部触发机制\",\"900s 内有一条数据被修改 则执行bgsave\",\"save 900 1 save 300 10 save 60 10000\",\"save \\\"\\\" # 禁用RDB\",\"bgsave：Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。\",\"lastsave：获取最后一次成功执行快照的时间。\",\"执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义 。\",\"退出的时候也会产生 dump.rdb 文件。\"]},\"160\":{\"h\":\"AOF\",\"t\":[\"AOF 是 Append-Only File 的缩写，它是 Redis 的另一种数据持久化方式。AOF 文件是将 Redis 所有写操作命令追加到文件的过程，因此可以保证数据的完整性。\",\"# 是否以append only模式作为持久化方式，默认使用的是rdb方式持久化，这种方式在许多应用中已经足够用了 appendonly no # appendfilename AOF 文件名称 appendfilename \\\"appendonly.aof\\\" # appendfsync aof持久化策略的配置： # no：不执行fsync，由操作系统保证数据同步到磁盘，速度最快。 # always：每次写入都执行fsync，以保证数据同步到磁盘。 # everysec：每秒执行一次fsync，可能会导致丢失这1s数据。 appendfsync everysec # 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性 No-appendfsync-on-rewrite ## 触发阈值自动重写aof # 设置重写的基准值 Auto-aof-rewrite-min-size 100 # 设置重写的基准值 Auto-aof-rewrite-percentage 64mb \",\"相关信息\",\"由于记录中的很多操作没有意义， 可以执行 bgrewriteaof\",\"可以让aof文件执行重写功能，用最少的命令达到相同的效果\"]},\"161\":{\"h\":\"主从\",\"t\":[\"高级篇-分布式缓存-06-Redis主从-主从集群结构_哔哩哔哩_bilibili\"]},\"162\":{\"h\":\"开启\",\"t\":[\"先配置 三个不同的redis.conf 用来启动不同的端口\",\"默认 从机只读\",\"修改配置文件（永久生效）\",\"下redis.conf 添加一行配置 slaveof ip port\",\"使用redis-cli 客户端连接到redis服务，执行slaveof(重启后失效)\",\"slaveof ip port \"]},\"163\":{\"h\":\"哨兵\",\"t\":[\"用来实现主从集群的自动故障恢复\",\"采用心跳机制 每个1s就会向每个实例发送ping命令\",\"主观下线 如果某实例未在规定时间内 返回相应 ，则主观认为该实例下线。\",\"客观下线 好多个哨兵都认为该实例下线，则该实例客观下线\",\"搭建sentinel集群\",\"需要多个sentinel\",\"# Redis Sentinel configuration file port 27003 # 设置 Sentinel 进程的ID，默认为 sentinel，默认情况下无需修改 #sentinel myid 1 # 配置监控的主节点信息 # 指定主节点的名称、IP地址和端口 sentinel monitor mymaster 127.0.0.1 7001 2 # 设置 Sentinel 进程和主节点失去联系后，判断主节点下线的时间阈值（单位：毫秒） sentinel down-after-milliseconds mymaster 5000 # 设置 Sentinel 进行故障转移的超时时间（单位：毫秒） sentinel failover-timeout mymaster 10000 # 配置日志文件路径和级别 # 默认情况下，日志将输出到控制台 # 可以将日志输出到指定的文件，配置 log-file 参数 # 可以设置日志级别，配置 loglevel 参数，可选值：debug、verbose、notice、warning #sentinel loglevel notice # sentinel logfile \\\"sentinel.log\\\" # 设置 Sentinel 进程的认证密码（如果有密码） # 如果 Redis 主节点设置了密码，则需要配置 sentinel auth-pass 指令来提供密码 # sentinel auth-pass mymaster password # 配置其他 Sentinel 进程信息 # 可以添加更多的 Sentinel 进程信息，用于构建 Sentinel 的多节点部署 # sentinel monitor othermaster 127.0.0.1 6380 2 \",\"启动\",\"redis-sentinel s1/sentinel.conf\"]},\"164\":{\"h\":\"Spring Cloud\",\"t\":[\"飞书bilibili\"]},\"165\":{\"h\":\"服务注册和发现\"},\"166\":{\"h\":\"nacos注册中心\"},\"167\":{\"h\":\"nacos安装\",\"t\":[\"nacos.mysql\",\"... \",\"custom.env\",\"PREFER_HOST_MODE=hostname MODE=standalone MYSQL_SERVICE_HOST=127.0.0.1 MYSQL_SERVICE_DB_NAME=nacos MYSQL_SERVICE_PORT=3306 MYSQL_SERVICE_USER=root MYSQL_SERVICE_PASSWORD=123456 MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai \",\"运行\",\"docker run -d \\\\ --name nacos \\\\ --env-file ./nacos/custom.env \\\\ -p 8848:8848 \\\\ -p 9848:9848 \\\\ -p 9849:9849 \\\\ --restart=always \\\\ nacos/nacos-server:v2.1.0-slim \"]},\"168\":{\"h\":\"服务注册\",\"t\":[\"引入依赖\",\"<!-- nacos 注册与发现--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"配置\",\"spring: application: name: item-service cloud: nacos: discovery: server-addr: 127.0.0.1:8848 \"]},\"169\":{\"h\":\"服务发现\",\"t\":[\"引入依赖\",\"<!-- nacos 注册与发现--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"配置\",\"spring: application: name: item-service cloud: nacos: discovery: server-addr: 127.0.0.1:8848 \",\"使用\",\" private final DiscoveryClient discoveryClient; // 根据服务名称拉取所有的服务 List<ServiceInstance> instances = discoveryClient.getInstances(\\\"item-service\\\"); // 负载均衡，随机给一个 ServiceInstance instancs = instances.get(RandomUtil.randomInt(instances.size())); // 拿到uri (域名 + 端口) URI uri = instancs.getUri(); ResponseEntity<List<ItemDTO>> response = restTemplate.exchange( uri + \\\"/items?ids={ids}\\\", HttpMethod.GET, null, new ParameterizedTypeReference<List<ItemDTO>>() { }, Map.of(\\\"ids\\\", CollUtils.join(itemIds, \\\",\\\")) ); \"]},\"170\":{\"h\":\"OpenFeign\"},\"171\":{\"h\":\"基础使用\",\"t\":[\"上面的代码 太多了，想简单点。。。\",\"帮助我们优雅的发送请求\",\"依赖\",\" <!--openFeign--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <!--负载均衡器--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-loadbalancer</artifactId> </dependency> \",\"开启注解\",\"@EnableFeignClients @SpringBootApplication public class ItemApplication { public static void main(String[] args) { SpringApplication.run(ItemApplication.class, args); } } \",\"编写FeignClient\",\"@FeignClient(\\\"Item-service\\\") public interface ItemClient { @GetMapping(\\\"/items\\\") List<ItemDTO> query(@RequestParam(\\\"ids\\\") Collection<Long> ids); } \",\"使用\",\" private final ItemClient itemClient; // 查询商品 List<ItemDTO> items = itemClient.query(itemIds); \"]},\"172\":{\"h\":\"连接池\",\"t\":[\"默认每次发送，会重新创建请求，加一个连接池，减少创建次数\",\"依赖\",\"<!--OK http 的依赖 --> <dependency> <groupId>io.github.openfeign</groupId> <artifactId>feign-okhttp</artifactId> </dependency> \",\"配置\",\"feign: okhttp: enabled: true \"]},\"173\":{\"h\":\"最佳实践（优化）\",\"t\":[\"额外创建模块 用来写公用的OpenFeign\"]},\"174\":{\"h\":\"日志\"},\"175\":{\"h\":\"网关\",\"t\":[\"请求转发，身份校验。\"]},\"176\":{\"h\":\"启动\",\"t\":[\"依赖\",\" <!--网关--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-gateway</artifactId> </dependency> <!--nacos discovery--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <!--负载均衡--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-loadbalancer</artifactId> </dependency> \",\"配置\",\"server: port: 9090 spring: application: name: gateway cloud: nacos: discovery: server-addr: 127.0.0.1:8848 gateway: routes: - id: item-service uri: lb://item-service predicates: - Path=/items/**,/search/** - id: user-service uri: lb://user-service predicates: - Path=/address/**,/user/** \"]},\"177\":{\"h\":\"路由属性\"},\"178\":{\"h\":\"路由断言\",\"t\":[\"Path - Path=/*/producterone/**\",\"Host - Host=**.ityouknow.com\",\"请求方式 - Method=GET\",\"请求参数 - Query=smile\",\"IP - RemoteAddr=192.168.1.1/24\",\"时间 - After=2018-01-20T06:06:06+08:00[Asia/Shanghai] ,- Before=2017-01-20T17:42:47.789-07:00[America/Denver]\",\"Cookie - Cookie=ityouknow, kee.e\",\"Header - Header=X-Request-Id, \\\\d+\"]},\"179\":{\"h\":\"路由过滤器\",\"t\":[\"filter\"]},\"180\":{\"h\":\"网关登录校验\"},\"181\":{\"h\":\"GlobalFilter\",\"t\":[\"@Component public class MyGlobalFilter implements GlobalFilter , Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { //针对请求的过滤，拿到请求的header、url、参数等 // HttpServletRequest 是web里面的 // ServerHttpRequest 是webFlux里面（响应式） ServerHttpRequest request = exchange.getRequest(); String path = request.getURI().getPath(); System.out.println(\\\"path====\\\" + path); HttpHeaders headers = request.getHeaders(); System.out.println(\\\"headers====\\\" + headers); String methodName = request.getMethod().name(); System.out.println(\\\"methodName====\\\" + methodName); //IPV4、IPV6地址 String hostName = request.getRemoteAddress().getHostName(); System.out.println(\\\"hostName====\\\" + hostName); String ip = request.getHeaders().getHost().getHostString(); System.out.println(\\\"ip====\\\" + ip); return chain.filter(exchange); } /** * 设置权重，优先执行 * @return */ @Override public int getOrder(){ return 0; } } \"]},\"182\":{\"h\":\"登录样例\",\"t\":[\"package com.hmll.gateway.filters; import com.hmll.gateway.config.AuthProperties; import com.hmll.gateway.util.JwtTool; import lombok.RequiredArgsConstructor; import org.apache.http.HttpStatus; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.http.HttpHeaders; import org.springframework.http.server.reactive.ServerHttpRequest; import org.springframework.http.server.reactive.ServerHttpResponse; import org.springframework.stereotype.Component; import org.springframework.util.AntPathMatcher; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; import java.util.List; /** * @author ToTryEveryThing * @date 2023/12/4 16:41 * @Description */ @Component @RequiredArgsConstructor public class AuthGlobalFilter implements GlobalFilter, Ordered { private final AuthProperties authProperties; private final JwtTool jwtTool; private final AntPathMatcher antPathMatcher = new AntPathMatcher(); @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { ServerHttpRequest request = exchange.getRequest(); if(isExclude(request.getPath().toString())){ // 放行 return chain.filter(exchange); } HttpHeaders headers = request.getHeaders(); String token = null; List<String> authorization = headers.get(\\\"authorization\\\"); if(authorization != null && !authorization.isEmpty()){ token = authorization.get(0); } Long userId = null; try { userId = jwtTool.parseToken(token); } catch (Exception e) { ServerHttpResponse response = exchange.getResponse(); response.setStatusCode(org.springframework.http.HttpStatus.valueOf(HttpStatus.SC_UNAUTHORIZED)); return response.setComplete(); } System.out.println(\\\"userId = \\\" + userId); System.out.println(\\\"headers====\\\" + headers); return chain.filter(exchange); } private boolean isExclude(String path) { for (String pathPattern : authProperties.getExcludePaths()) { if(antPathMatcher.match(pathPattern,path)) return true; } return false; } @Override public int getOrder() { return 0; } } \"]},\"183\":{\"h\":\"网关传递信息\",\"t\":[\"网关中拿到啊用户信息，网关可以把信息重新放入请求头中。\",\" String userInfo = userId.toString(); //设置信息 ServerWebExchange build = exchange.mutate() .request(builder -> builder.header(\\\"user-info\\\", userInfo)) .build(); //往后传递 return chain.filter(build); \",\" @GetMapping public List<CartVO> queryMyCarts(@RequestHeader(value = \\\"user-info\\\", required = false) String userinfo){ System.out.println(\\\"userinfo = \\\" + userinfo); return cartService.queryMyCarts(); } \"]},\"184\":{\"h\":\"使用线程存储数据\",\"t\":[\"public class UserContext { private static final ThreadLocal<Long> tl = new ThreadLocal<>(); /** * 保存当前登录用户信息到ThreadLocal * @param userId 用户id */ public static void setUser(Long userId) { tl.set(userId); } /** * 获取当前登录用户信息 * @return 用户id */ public static Long getUser() { return tl.get(); } /** * 移除当前登录用户信息 */ public static void removeUser(){ tl.remove(); } } \"]},\"185\":{\"h\":\"OpenFeign传递\",\"t\":[\"由于 oepnfeign 之间发送请求，不携带请求头，所有后续的微服务中，就没有用户信息\",\"openfiegn 提供了一个拦截器接口，所有的op发起的请求都会先调用拦截器处理请求\",\"public class config { @Bean public RequestInterceptor UserInfo (){ return new RequestInterceptor() { @Override public void apply(RequestTemplate requestTemplate) { requestTemplate.header(\\\"user-info\\\", String.valueOf(UserContext.getUser())); } }; } } \",\"@MapperScan(\\\"com.hmall.trade.mapper\\\") @EnableFeignClients(basePackages = \\\"com.hmall.api.client\\\",defaultConfiguration = config.class) @SpringBootApplication public class TradeApplication { public static void main(String[] args) { SpringApplication.run(TradeApplication.class, args); } } \"]},\"186\":{\"h\":\"共享配置\",\"t\":[\"网关路由在配置文件中写死了，如果变更必须重启微服务\",\"某些业务配置在配置文件中写死了，每次修改都要重启服务\",\"每个微服务都有很多重复的配置，维护成本高\"]},\"187\":{\"h\":\"共享配置\",\"t\":[\"把每个服务中的公共配置抽取出来\",\"在nacos配置管理-配置列表中添加公共配置\",\"spring: datasource: url: jdbc:mysql://${hm.db.host:192.168.150.101}:${hm.db.port:3306}/${hm.db.database} driver-class-name: com.mysql.cj.jdbc.Driver username: ${hm.db.un:root} #没有配置则使用 root password: ${hm.db.pw:123} #没有配置则使用 123 mybatis-plus: configuration: default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler global-config: db-config: update-strategy: not_null id-type: auto \",\"不同的地方还是读取原来服务的application.yaml\",\"引入依赖\",\" <!--nacos配置管理--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <!--读取bootstrap文件--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bootstrap</artifactId> </dependency> \",\"在相应服务中新建bootstrap.yaml\",\"spring: application: name: cart-service # 服务名称 profiles: active: dev cloud: nacos: server-addr: 127.0.0.1:8848 # nacos地址 config: file-extension: yaml # 文件后缀名 shared-configs: # 共享配置 - dataId: shared-jdbc.yaml # 共享mybatis配置 - dataId: shared-log.yaml # 共享日志配置 - dataId: shared-swagger.yaml # 共享日志配置 \",\"重启\"]},\"188\":{\"h\":\"配置热跟新\",\"t\":[\"具体的业务可能需要 随时调整，即不写死\",\"在nacos中添加配置文件\",\"hm: cart: maxItems: 4 \",\"[服务名]-[spring.active.profile].[后缀名] \",\"服务名：我们是购物车服务，所以是cart-service\",\"spring.active.profile：就是spring boot中的spring.active.profile，可以省略，则所有profile共享该配置\",\"后缀名：例如yaml\",\"在服务中添加配置 读取即可\",\"package com.hmall.cart.config; import lombok.Data; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; @Data @Component @ConfigurationProperties(prefix = \\\"hm.cart\\\") public class CartProperties { private Integer maxAmount; } \",\"使用\"]},\"189\":{\"h\":\"服务保护\"},\"190\":{\"h\":\"Sentinel\",\"t\":[\"Github\",\"java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar \",\"java '-Dserver.port=8090' '-Dcsp.sentinel.dashboard.server=localhost:8090' '-Dproject.name=sentinel-dashboard' '-jar' sentinel-dashboard-X.X.X.jar \",\"依赖\",\"<!--sentinel--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId> </dependency> \",\"配置\",\"spring: cloud: sentinel: transport: dashboard: localhost:8090 http-method-specify: true # 开启请求方式前缀 \"]},\"191\":{\"h\":\"请求限流\",\"t\":[\"限制访问次数\"]},\"192\":{\"h\":\"线程隔断\",\"t\":[\"当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。\"]},\"193\":{\"h\":\"服务熔断\",\"t\":[\"当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。\"]},\"194\":{\"h\":\"分布式事务\"},\"195\":{\"h\":\"Mybatis\",\"t\":[\"官网学习地址\",\"依赖\",\"<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.5</version> </dependency> \"]},\"196\":{\"h\":\"XML映射\",\"t\":[\"resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。\",\"sql – 可被其它语句引用的可重用语句块。\",\"insert – 映射插入语句。\",\"update – 映射更新语句。\",\"delete – 映射删除语句。\",\"select – 映射查询语句。\"]},\"197\":{\"h\":\"sql\",\"t\":[\"这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。 参数可以静态地（在加载的时候）确定下来，并且可以在不同的 include 元素中定义不同的参数值。比如：\",\"<sql id=\\\"userColumns\\\"> ${alias}.id,${alias}.username,${alias}.password </sql> \",\"这个 SQL 片段可以在其它语句中使用，例如：\",\"<select id=\\\"selectUsers\\\" resultType=\\\"map\\\"> select <include refid=\\\"userColumns\\\"><property name=\\\"alias\\\" value=\\\"t1\\\"/></include>, <include refid=\\\"userColumns\\\"><property name=\\\"alias\\\" value=\\\"t2\\\"/></include> from some_table t1 cross join some_table t2 </select> \",\"也可以在 include 元素的 refid 属性或内部语句中使用属性值，例如：\",\"<sql id=\\\"sometable\\\"> ${prefix}Table </sql> <sql id=\\\"someinclude\\\"> from <include refid=\\\"${include_target}\\\"/> </sql> <select id=\\\"select\\\" resultType=\\\"map\\\"> select field1, field2, field3 <include refid=\\\"someinclude\\\"> <property name=\\\"prefix\\\" value=\\\"Some\\\"/> <property name=\\\"include_target\\\" value=\\\"sometable\\\"/> </include> </select> \"]},\"198\":{\"h\":\"resultMap\",\"t\":[\" <resultMap id=\\\"BaseResultMap\\\" type=\\\"com.example.mybatis.pojo.Article\\\"> <id property=\\\"id\\\" column=\\\"id\\\" jdbcType=\\\"INTEGER\\\"/> <result property=\\\"title\\\" column=\\\"title\\\" jdbcType=\\\"VARCHAR\\\"/> <result property=\\\"content\\\" column=\\\"content\\\" jdbcType=\\\"VARCHAR\\\"/> <result property=\\\"auther\\\" column=\\\"auther\\\" jdbcType=\\\"VARCHAR\\\"/> <result property=\\\"time\\\" column=\\\"time\\\" jdbcType=\\\"TIMESTAMP\\\"/> </resultMap> \",\"xml配置详解\"]},\"199\":{\"h\":\"属性\"},\"200\":{\"h\":\"传参\"},\"201\":{\"h\":\"匿名参数 顺序传递参数\",\"t\":[\"@ApiOperation(value = \\\"多个参数查询_匿名顺序传参\\\") @GetMapping(\\\"findByParams\\\") public ResultMsg findByParams(Short gender,String age) { List result= employeeMapper.selectByGenderAndAge(gender,age); return ResultMsg.getMsg(result); } \",\"mapper\",\"List<Employee> selectByGenderAndAge(Short gender,String age ); \",\"xml\",\"select id=\\\"selectByGenderAndAge\\\" resultMap=\\\"BaseResultMap\\\" > select * from employee where gender = #{gender} and age = #{age} </select> \",\"警告\",\"注意这里按参数名去引用的话会报如下错误，mybatis错误提示很细致，这里明确给我们提示，匿名参数只能使用\",\"arg1, arg0, param1, param2 类似的形式\",\"这种传参方式的缺点是不够灵活，必须严格按照参数顺序来引用\",\"所以正确的引用方式如下：\",\" <select id=\\\"selectByGenderAndAge\\\" resultMap=\\\"BaseResultMap\\\" > select * from employee where gender = #{param1} and age = #{param2} </select> \"]},\"202\":{\"h\":\"使用@Param注解\",\"t\":[\"controller\",\"@ApiOperation(value = \\\"多个参数查询_注解方式传参\\\") @GetMapping(\\\"findByParams2\\\") public ResultMsg findByParams2(Short gender,String age) { List result= employeeMapper.selectByGenderAndAge2(gender,age); return ResultMsg.getMsg(result); } \",\"mapper\",\"List<Employee> selectByGenderAndAge( @Param(\\\"gender\\\") Short gender,@Param(\\\"age\\\") String age ); \",\"xml\",\"<select id=\\\"selectByGenderAndAge\\\" resultMap=\\\"BaseResultMap\\\" > select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"203\":{\"h\":\"使用Map传递参数\",\"t\":[\"controller\",\"@ApiOperation(value = \\\"多个参数查询\\\") @GetMapping(\\\"findByMapParams\\\") public ResultMsg findByMapParams(Short gender,String age) { Map params = new HashMap<>(); params.put(\\\"gender\\\",gender); params.put(\\\"age\\\",age); List result= employeeMapper.selectByMapParams(params); return ResultMsg.getMsg(result); } \",\"mapper\",\"List<Employee> selectByMapParams(Map params); \",\"xml\",\"<select id=\\\"selectByMapParams\\\" resultMap=\\\"BaseResultMap\\\" parameterType=\\\"map\\\"> select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"204\":{\"h\":\"用过java bean传递多个参数\",\"t\":[\"controller\",\"@ApiOperation(value = \\\"多个参数查询_通过Java Bean传递多个参数\\\") @PostMapping(\\\"findByBeans\\\") public ResultMsg findByBeans(@RequestBody Employee employee) { List result= employeeMapper.selectByBeans(employee); return ResultMsg.getMsg(result); } \",\"List <Employee> selectByBeans(Employee employee); \",\"<select id=\\\"selectByBeans\\\" resultMap=\\\"BaseResultMap\\\" parameterType=\\\"com.wg.demo.po.Employee\\\"> select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"205\":{\"h\":\"直接使用JSON传递参数\",\"t\":[\"@ApiOperation(value = \\\"多个参数查询_通过JSON传递多个参数\\\") @PostMapping(\\\"findByJSONObject\\\") public ResultMsg findByJSONObject(@RequestBody JSONObject params) { List result= employeeMapper.findByJSONObject(params); return ResultMsg.getMsg(result); } \",\"List <Employee> findByJSONObject(JSONObject params); \",\"<select id=\\\"findByJSONObject\\\" resultMap=\\\"BaseResultMap\\\" parameterType=\\\"com.alibaba.fastjson.JSONObject\\\"> select * from employee where gender = #{gender} and age = #{age} </select> \"]},\"206\":{\"h\":\"传递集合类型参数List、Set、Array\",\"t\":[\"@ApiOperation(value = \\\"多个参数查询_通过List、Set、Array传递多个参数\\\") @PostMapping(\\\"findByList\\\") public ResultMsg findByList(@RequestBody List<String> list) { List result= employeeMapper.findByList (list); return ResultMsg.getMsg(result); } \",\"List <Employee> findByList(List list); \",\" <select id=\\\"findByList\\\" resultMap=\\\"BaseResultMap\\\" > SELECT * from employee where age in <foreach collection=\\\"list\\\" open=\\\"(\\\" separator=\\\",\\\" close=\\\")\\\" item=\\\"age\\\"> #{age} </foreach> </select> \",\"来源\"]},\"207\":{\"h\":\"其他\"},\"208\":{\"h\":\"添加-主键返回\",\"t\":[\" mapper.insert(test1); System.out.println(test1.getId()); 可以把id拿出来 \",\" <insert id=\\\"insert\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"> insert into test1 (id, name, views, up) values ( #{id}, #{name}, #{views}, #{up} ); </insert> \"]},\"209\":{\"h\":\"动态条件查询\",\"t\":[\"if\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <if test=\\\"title != null\\\"> AND title like #{title} </if> <if test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </if> </select> \",\"choose\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <choose> <when test=\\\"title != null\\\"> AND title like #{title} </when> <when test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </when> <otherwise> AND featured = 1 </otherwise> </choose> </select> \",\"trim\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE <if test=\\\"state != null\\\"> state = #{state} </if> <if test=\\\"title != null\\\"> AND title like #{title} </if> <if test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </if> </select> \"]},\"210\":{\"h\":\"Mybatis Plus\"},\"211\":{\"h\":\"Mybatis Plus\",\"t\":[\"MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。\",\"【尚硅谷】2022版MyBatisPlus教程（一套玩转mybatis-plus）_哔哩哔哩_bilibili\",\"无侵入、损耗小、强大的CRUD操作\",\"支持Lambda形式调用，支持多种数据库\",\"支持主键自动生成，支持ActiveRecord模式\",\"支持自定义全局通用操作，支持关键词自动转义\",\"内置代码生成器、内置分页插件、内置性能分析插件\",\"内置全局拦截插件、内置SQL注入剥离器\"]},\"212\":{\"h\":\"BaseMapper\",\"t\":[\"public interface BaseMapper<T> extends Mapper<T> { int insert(T entity); int deleteById(Serializable id); int deleteByMap(@Param(\\\"cm\\\") Map<String, Object> columnMap); int delete(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); int deleteBatchIds(@Param(\\\"coll\\\") Collection<? extends Serializable> idList); int updateById(@Param(\\\"et\\\") T entity); int update(@Param(\\\"et\\\") T entity, @Param(\\\"ew\\\") Wrapper<T> updateWrapper); T selectById(Serializable id); List<T> selectBatchIds(@Param(\\\"coll\\\") Collection<? extends Serializable> idList); List<T> selectByMap(@Param(\\\"cm\\\") Map<String, Object> columnMap); T selectOne(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); Integer selectCount(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); List<T> selectList(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); List<Map<String, Object>> selectMaps(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); List<Object> selectObjs(@Param(\\\"ew\\\") Wrapper<T> queryWrapper); <E extends IPage<T>> E selectPage(E page, @Param(\\\"ew\\\") Wrapper<T> queryWrapper); <E extends IPage<Map<String, Object>>> E selectMapsPage(E page, @Param(\\\"ew\\\") Wrapper<T> queryWrapper); } \"]},\"213\":{\"h\":\"CURD\",\"t\":[\"使用mapper继承BaseMapper<T>即可开箱即用\",\" @Test void TestInsert(){ user user = new user(); user.setId(880); user.setAccount(\\\"天天学习\\\"); user.setPassword(\\\"hhh\\\"); int res = UserMapper.insert(user); System.out.println(res); } @Test void TestDelete(){ // 一： // int res = UserMapper.deleteById(1); // System.out.println(res); // 二: // delete from user where account = ? and password = ? // HashMap<String, Object> map = new HashMap<>(); // map.put(\\\"account\\\",\\\"jkl\\\"); // map.put(\\\"password\\\",\\\"123root\\\"); // UserMapper.deleteByMap(map); // 三: // 删除多个 // DELETE FROM user WHERE id IN ( ? , ? ) List<Integer> list = Arrays.asList(80,880); UserMapper.deleteBatchIds(list); } @Test void TestUpdata(){ user user = new user(); user.setAccount(\\\"改了\\\"); UpdateWrapper<user> q = new UpdateWrapper<>(); q.eq(\\\"password\\\",\\\"666\\\"); // 不屑password 不被修改 UserMapper.update(user,q); } @Test void TestSelect(){ // 通过id查询信息 // user user = UserMapper.selectById(2); // System.out.println(user.toString().isEmpty()); // 通过多个id进行查询 // List<Integer> list = Arrays.asList(3,2); // List<user> users = UserMapper.selectBatchIds(list); // users.forEach(System.out::println); // 通过map查询 // HashMap<String, Object> map = new HashMap<>(); // map.put(\\\"account\\\",666); // List<user> users = UserMapper.selectByMap(map); // users.forEach(System.out::println); // 所有的数据 // List<user> users = UserMapper.selectList(null); // users.forEach(System.out::println); } \"]},\"214\":{\"h\":\"wapper条件构造器\",\"t\":[\"Description\"]},\"215\":{\"h\":\"注解说明\",\"t\":[\"@TableName 表名\",\"@TableId 主键\",\"---@TableId(type= IdType.AUTO) 自增\",\"---@TableId(type= IdType.NONE) 雪花算法 赋值\",\"@TableField 把表中字段和实体类对应\",\"---@TableField(value=\\\"name\\\") 映射\",\"---@TableField(exist=false) 不是数据库中字段\",\"---@TableField(select = false) 不会参与查询 返回值为null\"]},\"216\":{\"h\":\"MybatisX\",\"t\":[\"MybatisX\",\"Description\"]},\"217\":{\"h\":\"分页\",\"t\":[\"config\",\"@Configuration public class MybatisConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor(){ MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } \",\"使用\",\" @Override public JSONObject userList(Integer page) { IPage<Record> recordIPage = new Page<>(page,10); QueryWrapper<Record> queryWrapper = new QueryWrapper<>(); queryWrapper.orderByAsc(\\\"id\\\"); List<Record> list = recordMapper.selectPage(recordIPage,queryWrapper).getRecords(); JSONObject resp = new JSONObject(); resp.put(\\\"records\\\",list); resp.put(\\\"count\\\",recordMapper.selectCount(null)); return resp; } \"]},\"218\":{\"h\":\"Mybatis+字段+1\",\"t\":[\" UpdateWrapper<article> updateWrapper = new UpdateWrapper<>(); updateWrapper.setSql(\\\"up = up + 1\\\").eq(\\\"id\\\",21); System.out.println(articleMapper.update(null, updateWrapper)); \",\" LambdaUpdateWrapper<article> q = new LambdaUpdateWrapper<>(); q.setSql(\\\"up = up + 1\\\"); q.setSql(\\\"views = views + 1\\\"); q.eq(article::getId,22); System.out.println(articleMapper.update(null, q)); \"]},\"219\":{\"h\":\"事务\",\"t\":[\"测试时加入@Transactional 不会改变数据，不会污染数据，不管如何都会回滚\",\"事务主要的作用体现在以下几个方面：\",\"数据一致性：事务可以确保多个操作在一个逻辑单元中执行，要么全部执行成功，要么全部失败回滚。在多个操作之间存在依赖关系的情况下，事务可以确保数据的一致性，防止数据冲突和数据丢失等问题。\",\"错误回滚：事务可以在发生错误或异常时回滚到之前的状态，保证数据的完整性。如果在多个操作中发生了错误，事务会自动将所有操作撤消，将数据回滚至操作之前的状态。\",\"并发控制：事务可以解决数据库并发访问的问题。当多个用户同时对同一数据进行操作时，事务可以通过锁机制来控制这些操作的执行顺序，以避免并发访问引起的数据冲突和错误。\",\"提高性能：事务可以优化数据库操作的性能。如果在多个操作中涉及到较多的I/O操作或网络传输，将所有操作合并到一个事务中可以减少I/O操作和网络传输，提高数据库操作的性能。\",\"因此，事务对于确保数据的正确性、完整性和一致性非常重要，是保证数据库安全和稳定运行的基本手段。\",\"默认形况下、只有出现RuntimeException才回滚异常。rollbackFor属性用于控制出现何种异常类型，回滚事务。\",\"@Transactional(rollbackFor = Exception.class)任何异常都回滚\",\"@Service public class UserServiceImpl implements UserService { @Autowired private UserMapper userMapper; @Override @Transactional(rollbackFor = Exception.class) public boolean addUser(User user) { try { // 添加用户 userMapper.insert(user); // 手动抛出异常，模拟事务回滚 throw new RuntimeException(\\\"添加用户时出现异常\\\"); } catch (Exception e) { // 捕获异常，并打印异常信息 e.printStackTrace(); // 抛出运行时异常，使事务回滚 throw new RuntimeException(\\\"添加用户时出现异常\\\"); } } } \"]},\"220\":{\"h\":\"Mysql\",\"t\":[\"哔哩哔哩_bilibili\",\"utf8mb4: 编码格式\"]},\"221\":{\"h\":\"基础语句\"},\"222\":{\"h\":\"insert\",\"t\":[\"给指定字段添加值\",\"insert into 表名 (字段1，字段2..) values(值1，值2..); \",\"给指定字段批量添加值\",\"insert into 表名 (字段1，字段2..) values(值1，值2..),(值1，值2..),(值1，值2..); insert into 表名 values(值1，值2..),(值1，值2..),(值1，值2..); \",\"给全部字段添加值\",\"insert into 表名 values(值1，值2..); \"]},\"223\":{\"h\":\"update\",\"t\":[\"update 表名 set 字段1=值1，字段2=值2... [where 条件]; \",\"不写条件 更新所有\"]},\"224\":{\"h\":\"delete\",\"t\":[\"delete from 表名 [where 条件]; \",\"delete from 表名 删除所有数据\"]},\"225\":{\"h\":\"select\",\"t\":[\"select [字段列表] from [表名列表] where [条件列表] group by [分组字段列表] having [分组后条件列表] order by [排序字段列表] limit [分页] \",\"条件查询(where)、聚合查询(count,max,min,avg,sum)、分组查询(group by)、排序查询(order by)、分页查询(limit)\"]},\"226\":{\"h\":\"基本查询\",\"t\":[\"起别名\",\"select name as '姓名' from 表名; 或者 select name '姓名' from 表名; \",\"不重复\",\"select distinct name from 表名; \"]},\"227\":{\"h\":\"条件查询\",\"t\":[\"比较运算符\",\"功能\",\">\",\">=\",\"<\",\"<=\",\"=\",\"<>或!=\",\"不等于\",\"between...and...\",\"某个范围之内 []\",\"in(..)\",\"列表中的值，多选一\",\"like 占位符\",\"模糊匹配（_单个字符、%任意个字符）\",\"is null\",\"为空\",\"and 或 &&\",\"并且\",\"or或 ||\",\"或者\",\"not 或 ！\",\"非\"]},\"228\":{\"h\":\"聚合函数\",\"t\":[\"null 不参与计算\",\"sum\",\"select sum(*) from 表名; \",\"avg\",\"select agv(age) from 表名; \",\"max | min\",\"select max(age) from 表名; select min(age) from 表名; \"]},\"229\":{\"h\":\"分组查询\",\"t\":[\"分组后的列只有待分组的字段和聚合函数\",\"study\",\"select sex,count(sex) from s group by sex having avg(age) > 50; \"]},\"230\":{\"h\":\"排序查询\",\"t\":[\"ASC 升序（默认）\",\"DESC 降序\",\"多字段排序，先按第一个排序，然后相同的按照第二个方式排序\",\"select * from s order by age asc , id desc; \"]},\"231\":{\"h\":\"分页查询\",\"t\":[\"select * from 表名 limit 起始索引，查询记录数 \",\"起始索引从0开始， 起始索引 = （查询页码-1）* 每页记录数\",\"select * from s limit 0,10; select * from s limit 10,10; \"]},\"232\":{\"h\":\"函数\",\"t\":[\"字符串函数\",\"-- concat select concat(\\\"hello\\\",\\\"world\\\"); -- lower select lower(\\\"HELLO\\\"); -- upper select upper(\\\"hello\\\"); -- trim 去除首尾空格 -- substring 截取 update 表名 set name = upper(name) where id = 51; \",\"数值函数\",\"-- ceil 向上取整 -- floor 向下取整 -- mod(x,y) 返回x/y的模 -- rand() 返回0-1的随机小数 -- round(x,y) 求参数x的四舍五入的值 保留y位小数 select round(5.456871865468,3); --> 5.457 \",\"日期函数\",\"-- curdate() 返回当前日期 -- curtime() 返回当前时间 -- now() 返回当前日期和时间 -- year(date) 获得指定year的年 -- month(date) -- day(date) -- date_add() 返回一个日期加上某个时间后的日期 select date_add(now(),interval 110 day); select date_add(now(),interval 110 year); -- datediff(date1,date2) 时间间隔 \"]},\"233\":{\"h\":\"约束\",\"t\":[\"default: 默认约束\",\"not null: 非空约束\",\"unique: 唯一约束\",\"primary key: 主键约束\",\"foreign key: 外键约束\"]},\"234\":{\"h\":\"外键约束\",\"t\":[\"命令\",\"b为父表 s为子表 s表的字段(b_id)外键到b表的（id） alter table s add constraint fk_s_b_id foreign key (b_id) references b(id); \",\"删除/更新行为 \",\"RESTRICT：父表数据被删除/更新，会阻止删除/更新。默认就是这一项。\",\"NO ACTION：在MySQL中，同RESTRICT。\",\"CASCADE：级联删除/更新。\",\"SET NULL：父表数据被删除/更新，子表数据会设置为NULL。\"]},\"235\":{\"h\":\"多表查询\",\"t\":[\"笛卡尔积：两个表的所有组合 s(5个字段)，b(3个字段) s X b = 15\",\"可以使用两个表之间的联系去除无用数据\",\"内连接\",\"相当与查询A,B交集部分数据\",\"select s.name,b.name from s,b where s.b_id = b.id; 隐式内连接 select s.name,b.name from s inner join b on s.b_id = b.id; 显式内连接 \",\"左外连接\",\"查询左表全部数据，以及两张表交集部分\",\"select s.*,b.name from s left outer join b on s.b_id = b.id; select s.*,b.name from s left join b on s.b_id = b.id; s表的全部 以及b表的name \",\"右外连接\",\"查询右表。。。。\",\"自连接\",\"当前表与自身的连接查询，子链接必须使用表别名\",\"select 字段列表 from 表A 别名a join 表B 别名b on 条件 ...\",\"联合查询\",\"比如要求：将年龄低于50和性别为’男‘的人 全部查出来 就要用到联合查询了\",\"列数必须保持一致，字段类型也一致。\",\"select * from s where age < 50 union all select * from s where sex = '男' ; 不去重 select * from s where age < 50 union select * from s where sex = '男' ; 去重 \",\"子查询\",\"43. 基础-多表查询-子查询介绍_哔哩哔哩_bilibili\"]},\"236\":{\"h\":\"索引\",\"t\":[\"MySQL的索引类型包括FULLTEXT、NORMAL（或称为BTREE）、SPATIAL和UNIQUE。它们具有不同的特点和适用场景：\",\"FULLTEXT索引：用于全文搜索。它适用于对文本内容进行关键词搜索的场景，比如文章标题或描述的搜索。FULLTEXT索引使用特定的搜索算法来提高搜索性能，并支持关键词匹配和排名。它只能应用于MyISAM和InnoDB存储引擎。\",\"NORMAL索引（BTREE索引）：是最常见的索引类型，也是默认的索引类型。它使用B树数据结构来加速对数据的查找。NORMAL索引适用于一般的数据查询，可以加速等值查询、范围查询和排序操作。它可以应用于大多数的数据类型和存储引擎。\",\"SPATIAL索引：用于地理数据的空间索引。它支持对空间数据进行高效的地理位置查询，如点、线、多边形等。SPATIAL索引适用于处理地理信息系统（GIS）相关的数据。它只能应用于支持空间数据类型的存储引擎，如MyISAM和InnoDB。\",\"UNIQUE索引：用于强制保证某列或某组列的唯一性。它确保索引列的值在表中是唯一的，不允许重复值。UNIQUE索引适用于需要唯一性约束的列，比如用户名或身份证号。它可以应用于大多数的数据类型和存储引擎。\",\"当对某一字段增加索引后,会减少查询耗时，空间换时间。\"]},\"237\":{\"h\":\"视图\",\"t\":[\"​ 视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，数据库中只存放了视图的定义，而并没有存放视图中的数据，这些数据存放在原来的表中。使用视图查询数据时，数据库系统会从原来的表中取出对应的数据。因此，视图中的数据是依赖于原来的表中的数据的。一旦表中的数据发生改变，显示在视图中的数据也会发生改变。同样对视图的更新，会影响到原来表的数据。\",\"- 使复杂的sql简单化 - 只能修改查询暴漏出来的字段 \",\"sql 的语句中是无法区分是 表格还是 视图的。视图名和表名无法重复。\",\"[com] 视图名\"]},\"238\":{\"h\":\"创建视图\",\"t\":[\"create view com as select * from js_compet; create view com as select id,cc_name from js_compet where cc_name like '%2%'; # 重命名 create view ali_com(iddd,ccname) as select id,cc_name from js_compet where cc_name like '%2%'; \"]},\"239\":{\"h\":\"修改视图\",\"t\":[\"alert view com as select * from js_compet; \"]},\"240\":{\"h\":\"删除视图\",\"t\":[\"drop view if exists com; #只会删除视图 ， 不影响表格 \"]},\"241\":{\"h\":\"查看\",\"t\":[\"desc com; \"]},\"242\":{\"h\":\"其他\"},\"243\":{\"h\":\"查看curd执行频率\",\"t\":[\"show global status like 'Com_______';\"]},\"244\":{\"h\":\"慢查询日志\",\"t\":[\"MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为 10，意思是运行10秒以上的SQL语句。\",\"由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能 收集超过5秒的sql，结合之前explain进行全面分析。\",\"SHOW VARIABLES LIKE 'long_query_time%'; #查询目前慢日志时间 \",\"修改配置文件my.cnf 永久生效\",\"[mysqld] slow_query_log=1 slow_query_log_file=/var/lib/mysql/atguigu-slow.log long_query_time=3 log_output=FILE \"]},\"245\":{\"h\":\"show profiles\",\"t\":[\"用来查看sql语句性能，等其他\",\"mysql> select @@have_profiling; # 是否支持 +------------------+ | @@have_profiling | +------------------+ | YES | +------------------+ 1 row in set (0.04 sec) mysql> select @@profiling; #是否开启 +-------------+ | @@profiling | +-------------+ | 0 | +-------------+ 1 row in set (0.04 sec) mysql> set profiling=1; ## 开启 Query OK, 0 rows affected (0.00 sec) mysql> select @@profiling; +-------------+ | @@profiling | +-------------+ | 1 | +-------------+ mysql> show profiles; ##查看所有的sql情况 +----------+------------+--------------------+ | Query_ID | Duration | Query | +----------+------------+--------------------+ | 1 | 0.00033425 | select @@profiling | | 2 | 0.00012275 | show profiling | | 3 | 0.00013375 | select * from s | | 4 | 0.00026325 | use text | | 5 | 0.00077300 | select * from s | +----------+------------+--------------------+ show profile for query query_id; #查看某个具体sql \"]},\"246\":{\"h\":\"Quartz\",\"t\":[\"官方文档\",\"Job 表示一个工作，要执行的具体内容\",\"JobDetail 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案略。\",\"Trigger 代表一个调度参数的配置，什么时候去调。\",\"Scheduler 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。\"]},\"247\":{\"h\":\"依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-quartz</artifactId> </dependency> \"]},\"248\":{\"h\":\"步骤\",\"t\":[\"public class FirstJob implements Job { @Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException { System.out.println(\\\"hhhhh\\\"); } } \",\"// 定义作业 绑定到FirstJob.class JobDetail job = JobBuilder.newJob(FirstJob.class) .withIdentity(\\\"first\\\", \\\"fristgroup\\\") .build(); \",\"// 触发器 触发作业立即运行，然后每3秒重复一次 SimpleTrigger trigger = TriggerBuilder.newTrigger() .withIdentity(\\\"first\\\", \\\"first\\\")// name group .startNow()// 立马开始 .withSchedule(SimpleScheduleBuilder.simpleSchedule() .withIntervalInSeconds(3) //每3秒 .repeatForever())// 循环 .build(); \",\"// 创建调度器 Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); scheduler.scheduleJob(job,trigger); //开始 scheduler.start(); //结束 scheduler.shutdown(); \"]},\"249\":{\"h\":\"任务传参\",\"t\":[\"public class FirstJob implements Job { @Override public void execute(JobExecutionContext context) throws JobExecutionException { JobDataMap jobDataMap = context.getJobDetail().getJobDataMap();//Detail JobDataMap jobDataMap1 = context.getTrigger().getJobDataMap();//tTrigger System.out.println(jobDataMap.get(\\\"hello world\\\")); System.out.println(jobDataMap1.get(\\\"key\\\")); } } // 定义作业 绑定到FirstJob.class JobDataMap jobDataMap = new JobDataMap(); jobDataMap.put(\\\"hello\\\",\\\"world\\\"); JobDetail job = JobBuilder.newJob(FirstJob.class) .setJobData(jobDataMap) .withIdentity(\\\"first\\\", \\\"fristgroup\\\") .build(); // 触发器 触发作业立即运行，然后每3秒重复一次 SimpleTrigger trigger = TriggerBuilder.newTrigger() .withIdentity(\\\"first\\\", \\\"first\\\")// name group .startNow()// 立马开始 .withSchedule(SimpleScheduleBuilder.simpleSchedule() .withIntervalInSeconds(10) //每3秒 .repeatForever())// 循环 .build(); trigger.getJobDataMap().put(\\\"key\\\",\\\"触发器的参数\\\"); \"]},\"250\":{\"h\":\"整合spring boot\",\"t\":[\"github\"]},\"251\":{\"h\":\"SSM\"},\"252\":{\"h\":\"Spring SpringMVC\"},\"253\":{\"h\":\"Spring\",\"t\":[\"Spring-01-初识Spring_哔哩哔哩_bilibili\"]},\"254\":{\"h\":\"IoC\",\"t\":[\"Ioc—Inversion of Control\",\"一种思想。 创建对象、管理对象\",\"一般对象都是直接通过new出来 ，交由IoC管理后，IoC容器来控制对象的创建\",\"配置实在是多\",\"pom.xml\",\"<dependency> <!-- 1.导入--> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.23</version> </dependency> \",\"applicationContext.xml\",\"<!-- 2.配置Bean--> <bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"/> <bean id=\\\"bookService\\\" class=\\\"com.beink.service.Impl.bookServiceImpl\\\"/> \",\"Main.java\",\"public class Main { public static void main(String[] args) { // 3.获取容器 ApplicationContext atx = new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); // 4. 获取bean bookDao bookDao = (bookDao) atx.getBean(\\\"bookDao\\\"); bookDao.save(); // 等同于 bookDao bookDao1 = new bookDaoImpl(); bookDao1.save(); } } \"]},\"255\":{\"h\":\"Bean\",\"t\":[\"被构造 调用的是无参构造\",\"生命周期：\",\" public void init(){ System.out.println(\\\"init\\\"); } public void destory(){ System.out.println(\\\"destory\\\"); } \",\"配置\"]},\"256\":{\"h\":\"依赖注入\"},\"257\":{\"h\":\"setter\",\"t\":[\".xml <bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"> <property name=\\\"a\\\" value=\\\"123\\\"/> <property name=\\\"s\\\" value=\\\"true\\\"/> </bean> Impl.java private String s; private int a; \"]},\"258\":{\"h\":\"构造器\",\"t\":[\"<bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"> <constructor-arg name=\\\"a\\\" value=\\\"6\\\"/> <constructor-arg name=\\\"s\\\" value=\\\"true\\\"/> </bean> <bean id=\\\"bookService\\\" class=\\\"com.beink.service.Impl.bookServiceImpl\\\"> <!--red对应ID--> <constructor-arg name=\\\"bookdao\\\" ref=\\\"bookDao\\\"/> </bean> \",\"依赖注入\",\"private bookDao book_dao; public void setBookdao(bookDao bookdao){ this.book_dao = bookdao; } \",\"一般 注入\",\"private String s; private int a; public bookDaoImpl(String s, int a) { this.s = s; this.a = a; } \"]},\"259\":{\"h\":\"集合注入\",\"t\":[\" <bean id=\\\"bookDao\\\" class=\\\"com.beink.dao.Impl.bookDaoImpl\\\"> <property name=\\\"list\\\"> <array> <value>hello </value> <value>world</value> </array> </property> <property name=\\\"map\\\"> <map> <entry key=\\\"hello\\\" value=\\\"world\\\"></entry> </map> </property> </bean> \"]},\"260\":{\"h\":\"注解开发\",\"t\":[\"@Component(\\\"名字\\\") 定义Bean\",\"---@Service\",\"---@Controller(同样效果 只是便于理解)\",\"---@Repository\",\"@Configuration 设置位配置类 类似于applicationContext.xml @ComponentScan(\\\"com.beink\\\") 扫描路径 自动装配到spring的bean @Scope(\\\"singleton\\\") 单例 @PostConstruct 生命周期-初始化 @PreDestroy 生命周期-销毁 @Autowired 自动装配 === private bookDao bookdao = new bookDaoImpl(); @Value(\\\"${name}\\\") 简单类型注入 private String s; @PropertySource(\\\"xxx.yml\\\") 数据源 内容--（name=hello world） \"]},\"261\":{\"h\":\"AOP\",\"t\":[\"不改变原始设计 将功能增强\"]},\"262\":{\"h\":\"举例\",\"t\":[\"@Component @Aspect //这是个aop public class MyAop { // 在哪里执行 @Pointcut(\\\"execution(void com.beink.dao.bookDao.save())\\\") private void ss(){} // 绑定 @AfterReturning(\\\"ss()\\\") public void set(){ System.out.println(\\\"AOP\\\"); } } \"]},\"263\":{\"h\":\"切入点表达式\",\"t\":[\"使用*通配符即可 @Pointcut(\\\"execution( * * com.beink.dao.*)\\\") \"]},\"264\":{\"h\":\"通知类型\",\"t\":[\"public class MyAop { @Pointcut(\\\"execution(void com.beink.dao.bookDao.save())\\\") private void ss(){} @AfterReturning(\\\"ss()\\\") public void set(){ System.out.println(\\\"AOP\\\"); } // 环绕 @Around(\\\"ss()\\\") public void round(ProceedingJoinPoint e) throws Throwable { System.out.println(\\\"qian\\\"); e.proceed();/*调用原始操作*/ System.out.println(\\\"hou\\\"); // 如果有返回值 返回对象必须是Object } // @AfterReturning // @AfterThrowing } \"]},\"265\":{\"h\":\"获取通知数据\",\"t\":[\"public class MyAop { @Pointcut(\\\"execution(void com.beink.dao.bookDao.save(..))\\\") private void ss(){} // 环绕 @Around(\\\"ss()\\\") public Object round(ProceedingJoinPoint e) throws Throwable { Object[] args = e.getArgs(); e.proceed();/*调用原始操作*/ System.out.println(Arrays.toString(args));/*获取参数*/ // 修改参数 args[0] = 666; Object ret = e.proceed(args); return ret; } } \"]},\"266\":{\"h\":\"SpringMVC\",\"t\":[\"SpringMVC-02-SpringMVC入门案例_哔哩哔哩_bilibili\"]},\"267\":{\"h\":\"创建使用\",\"t\":[\"pom.xml\",\" <dependencies> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.23</version> </dependency> </dependencies> \",\"userControler类\",\"@Controller //定义Bean public class userController { // 访问路径 @RequestMapping(\\\"/save\\\") // 返回值类型 @ResponseBody public String save(){ System.out.println(\\\"hhh\\\"); return \\\"hello world\\\"; } } \",\"config类\",\"servletinitConfig.java //定义一个servlet启动配置，在里面加载spring配置 public class servletinitConfig extends AbstractDispatcherServletInitializer { // 加载springMVC配置 @Override protected WebApplicationContext createServletApplicationContext() { AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext(); ctx.register(springMVCConfig.class); return ctx; } //设置那些请求归springMVC处理 @Override protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } //加载spring配置 @Override protected WebApplicationContext createRootApplicationContext() { return null; } } springMVCConfig.java //加载对应的Bean @ComponentScan(\\\"com.beink.controller\\\") //加载配置 @Configuration public class springMVCConfig { } \",\"配置Tomcat启动即可。。\"]},\"268\":{\"h\":\"请求\"},\"269\":{\"h\":\"get\",\"t\":[\"/save?name=name\",\" @RequestMapping(\\\"/save\\\") @ResponseBody public String save(String name){ System.out.println(name); return \\\"hello world\\\"; } \"]},\"270\":{\"h\":\"post\",\"t\":[\" @RequestMapping(\\\"/save\\\") @ResponseBody public String save(String name,String id){ System.out.println(name + id); return \\\"hello world\\\"; } \"]},\"271\":{\"h\":\"post乱码处理\",\"t\":[\"img\"]},\"272\":{\"h\":\"参数类型\",\"t\":[\"SpringMVC-09-json数据传递参数_哔哩哔哩_bilibili\",\" @ResponseBody public String save(@RequestParam(\\\"name\\\") String userName, String id){ // 一： 会把地址中的name映射给userName // 二： save(User user) 当名字一样使 会自动把属性放进去 // 三：Map List.....@RequestParam List<String> // 四：JSON // 五：时间 // 六：。。。 System.out.println(userName + id); return \\\"hello world\\\"; } \"]},\"273\":{\"h\":\"响应\",\"t\":[\" @RequestMapping(\\\"topage\\\") public String toapage(){ // 跳转到index.jsp页面 return \\\"index.jsp\\\"; } @RequestMapping(\\\"ttt\\\") @ResponseBody public String toattpage(){ // 返回一个串“index.jsp” return \\\"index.jsp\\\"; } \"]},\"274\":{\"h\":\"Rest风格\",\"t\":[\"访问形式： /put/5 /get/6\",\"SpringMVC-14-RESTful快速开发_哔哩哔哩_bilibili\",\" @RequestMapping(value = \\\"/put/{id}\\\",method = RequestMethod.PUT) @ResponseBody public void put(@PathVariable String id){ System.out.println(id); } @RequestMapping(value = \\\"/get/{id}\\\",method = RequestMethod.GET) @ResponseBody public void get(@PathVariable String id){ System.out.println(id); } POST DELETE .... \"]},\"275\":{\"h\":\"注解说明\",\"t\":[\"@Controller //定义Bean @RequestMapping(\\\"/save\\\") // 访问路径 @ResponseBody //返回值 @RequestParam //用于接收url地址参数 /get?id=5 @ResponseBody //用于接收JSON数据 @PathVariable //接受url地址参数 /get/ @RestController //= @Controller + @ResponseBody @GetMapping(\\\"/get/{id}\\\") // == @RequestMapping(value = \\\"/get/{id}\\\",method = RequestMethod.GET) \"]},\"276\":{\"h\":\"其他\"},\"277\":{\"h\":\"自定义注解为属性赋值\",\"t\":[\"使用场景： 把用户传过来的token，解析出来用户信息， 为属性赋值。\"]},\"278\":{\"h\":\"1.创建自定义注解\",\"t\":[\"@Target({ElementType.PARAMETER}) @Documented @Retention(RetentionPolicy.RUNTIME) public @interface UserInfo { } \"]},\"279\":{\"h\":\"2.创建拦截器 ,获得token,存入作用域中\",\"t\":[\"public class GlobalInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { String token = request.getHeader(\\\"Authorization\\\").substring(7); request.getSession().setAttribute(\\\"account\\\", JwtUtil.parseJWT(token).getSubject()); return true; } } \"]},\"280\":{\"h\":\"3.配置拦截器\",\"t\":[\"@Configuration public class interceptor extends WebMvcConfigurationSupport { @Override protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) { argumentResolvers.add(new UserInfoImpl()); } @Override protected void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new GlobalInterceptor()).addPathPatterns(\\\"/user/account/color/\\\"); super.addInterceptors(registry); } } \"]},\"281\":{\"h\":\"4.实现自定义注解\",\"t\":[\"public class UserInfoImpl implements HandlerMethodArgumentResolver { @Override public boolean supportsParameter(MethodParameter methodParameter) { return methodParameter.getParameterAnnotation(UserInfo.class)!=null; } @Override public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception { HttpServletRequest nativeRequest = (HttpServletRequest) nativeWebRequest.getNativeRequest(); return nativeRequest.getSession().getAttribute(\\\"account\\\"); } } \"]},\"282\":{\"h\":\"5.使用\",\"t\":[\" @PostMapping(\\\"/user/account/color/\\\") public Result setColor(@UserInfo String account, @RequestParam Map<String,String>map){ String color = map.get(\\\"backImg\\\"); String list = map.get(\\\"list\\\"); return colorService.setColor(account,color,list); } \"]},\"283\":{\"h\":\"拦截器\",\"t\":[\"HttpServletRequest request 发送过来的信息 HttpServletResponse response 发送走的信息\"]},\"284\":{\"h\":\"1.先实现一个拦截对象\",\"t\":[\"@Component public class MyInterceptor implements HandlerInterceptor { // 被拦截的操作之前运行 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"preHandle...\\\"); // true 通行 // false 拦截 return true; } // 被拦截的操作之后运行 @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"postHandle...\\\"); } // 也是后面 也在posthandle之后 @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"afterCompletion...\\\"); } } \"]},\"285\":{\"h\":\"2.配置\",\"t\":[\"@Configuration public class Support extends WebMvcConfigurationSupport { //implements WebMvcConfigurer 也行 // 拦截器对象 @Autowired private MyInterceptor myInterceptor; /** * * @param registry */ @Override protected void addInterceptors(InterceptorRegistry registry) { // 拦截路径 registry.addInterceptor(myInterceptor).addPathPatterns(\\\"/user\\\",\\\"/user*\\\"); } } \"]},\"286\":{\"h\":\"过滤器\"},\"287\":{\"h\":\"枚举\"},\"288\":{\"h\":\"Action\",\"t\":[\"bilibili\",\"将文件推送到新的分支\",\"# 程序名字 name: CI # 触发时机 on: ######### schedule和push只能用一个 # 定时执行 # schedule: # - cron: '0 10 * * *' # main分支变动时 触发 push: branches: - main # 某个文件发生变化 也可以！！ # paths: # - src/* # 里面有多个任务 jobs: # 任务名字 build: # 运行的系统下 runs-on: ubuntu-latest # 步骤 steps: # 拉取代码 # 使用别人现成的action完成需要的操作 - uses: actions/checkout@v3 # 步骤名称 - name: Run a one-line script run: echo Hello, world! # 步骤名称 # Runs a set of commands using the runners shell - name: Run a multi-line script run: | echo Add other actions to build, echo test, and deploy your project. # 步骤名称 - name: metoo run: | echo \\\"\\\\n Hello World\\\" >> ./README.md # 重新提交到githu - name: Push to GitHub uses: EndBug/add-and-commit@v7.2.1 # 携带参数 with: branch: main message: 'Add content' \"]},\"289\":{\"h\":\"cron\",\"t\":[\"在线测试\",\"Cron适用于周期性执行、日常维护、在某时刻需要完成的单次任务等场景。Cron表达式是一个具有时间含义的字符串，字符串以5个空格隔开，分为6个域，格式为X X X X X X。其中X是一个域的占位符。单个域有多个取值时，使用半角逗号,隔开取值。每个域可以是确定的取值，也可以是具有逻辑意义的特殊字符。\",\"秒 分 时 日 月 周\"]},\"290\":{\"h\":\"取值范围\",\"t\":[\"域\",\"是否必需\",\"取值范围\",\"特殊字符\",\"秒\",\"是\",\"[0, 59]\",\"不支持\",\"分钟\",\"是\",\"[0, 59]\",\"对, 和/有限支持（如果使用逗号，数字之间的间隔必须大于等于30分钟；如果使用/ ，/后面的数字必须大于等于30）。\",\"小时\",\"是\",\"[0, 23]\",\"* , - /\",\"日期\",\"是\",\"[1, 31]\",\"* , - / ? L\",\"月份\",\"是\",\"[1, 12]或[JAN, DEC]\",\"* , - /\",\"星期\",\"是\",\"[1, 7]或[SUN, SAT]若您使用[1, 7]表达方式，1代表星期天，2代表星期一。\",\"* , ?\"]},\"291\":{\"h\":\"连接符\",\"t\":[\"【*】：每的意思。在不同的字段上，就代表每秒，每分，每小时等。\",\"【-】：指定值的范围。比如[1-10]，在秒字段里就是每分钟的第1到10秒，在分就是每小时的第1到10分钟，以此类推。\",\"【,】：指定某几个值。比如[2,4,5]，在秒字段里就是每分钟的第2，第4，第5秒，以此类推。\",\"【/】：指定值的起始和增加幅度。比如[3/5]，在秒字段就是每分钟的第3秒开始，每隔5秒生效一次，也就是第3秒、8秒、13秒，以此类推。\",\"【?】：仅用于【日】和【周】字段。因为在指定某日和周几的时候，这两个值实际上是冲突的，所以需要用【?】标识不生效的字段。比如【0 1 * * * ?】就代表每年每月每日每小时的1分0秒触发任务。这里的周就没有效果了。\"]},\"292\":{\"h\":\"示例\",\"t\":[\"示例\",\"说明\",\"0 15 10 ? * *\",\"每天上午10:15执行任务\",\"0 15 10 * * ?\",\"每天上午10:15执行任务\",\"0 0 12 * * ?\",\"每天中午12:00执行任务\",\"0 0 10,14,16 * * ?\",\"每天上午10:00点、下午14:00以及下午16:00执行任务\",\"0 0/40 9-17 * * ?\",\"每天上午09:00到下午17:00时间段内每隔40分钟执行任务\",\"0 0 12 ? * WED\",\"每个星期三中午12:00执行任务\",\"0 15 10 15 * ?\",\"每月15日上午10:15执行任务\",\"0 15 10 L * ?\",\"每月最后一日上午10:15执行任务\",\"0 0,30 14 ? 3 WED\",\"每年3月的每个星期三下午14:00和14:30各执行一次任务\"]},\"293\":{\"h\":\"Jasypt\",\"t\":[\"Jasypt Spring Boot 为 spring boot 应用程序中的属性源提供加密支持，出于安全考虑，Spring boot 配置文件中的敏感信息通常需要对它进行加密/脱敏处理，尽量不使用明文，要实现这一点，办法有很多，自己手动对敏感信息进行加解密也是可以的\",\"依赖\",\" <dependency> <groupId>com.github.ulisesbocchio</groupId> <artifactId>jasypt-spring-boot-starter</artifactId> <version>---</version> </dependency> \",\"简单使用\",\" @Autowired BasicTextEncryptor ba; @Test void SimpleTest() { ba.setPassword(\\\"hh\\\");// 设置密钥 System.out.println(ba.encrypt(\\\"root\\\"));//加密 System.out.println(ba.encrypt(\\\"123456\\\"));//加密 System.out.println(ba.decrypt(\\\"837BpgX2vWwq/Ysmzs6Ucg==\\\"));//解密 } \",\"配置\",\"spring: datasource: name: defaultDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/quartz?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true username: ENC(jzMNMTaZzF0uxnFstWttUg==) password: ENC(aRki+PG956fgx9vyP09p9A==) \",\"解密\",\"配置文件中使用不推荐\",\"jasypt: encryptor: password: hh \",\"环境配置\\njava -jar xxxxx.jar -Djasypt.encryptor.password=hh\"]},\"294\":{\"h\":\"Jenkins\",\"t\":[\"Jenkins\"]},\"295\":{\"h\":\"Puppeteer\"},\"296\":{\"h\":\"API | FAQ | Contributing | Troubleshooting\",\"t\":[\"Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行，但是可以通过修改配置文件运行“有头”模式。\"]},\"297\":{\"h\":\"能做什么?\",\"t\":[\"你可以在浏览器中手动执行的绝大多数操作都可以使用 Puppeteer 来完成！ 下面是一些示例：\",\"生成页面 PDF。\",\"抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。\",\"自动提交表单，进行 UI 测试，键盘输入等。\",\"创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。\",\"捕获网站的 timeline trace，用来帮助分析性能问题。\",\"测试浏览器扩展。\",\"演示地址: https://try-puppeteer.appspot.com/\"]},\"298\":{\"h\":\"开始使用\"},\"299\":{\"h\":\"安装\",\"t\":[\"在项目中使用 Puppeteer：\",\"npm i puppeteer # or \\\"yarn add puppeteer\\\" \",\"Note: 当你安装 Puppeteer 时，它会下载最新版本的Chromium（~170MB Mac，~282MB Linux，~280MB Win），以保证可以使用 API。 如果想要跳过下载，请阅读环境变量。\"]},\"300\":{\"h\":\"puppeteer-core\",\"t\":[\"自 1.7.0 版本以来，我们都会发布一个 puppeteer-core 包，这个包默认不会下载 Chromium。\",\"npm i puppeteer-core # or \\\"yarn add puppeteer-core\\\" \",\"puppeteer-core 是一个的轻量级的 Puppeteer 版本，用于启动现有浏览器安装或连接到远程安装。\",\"具体见 puppeteer vs puppeteer-core.\"]},\"301\":{\"h\":\"使用\",\"t\":[\"Note: Puppeteer 至少需要 Node v6.4.0，下面的示例使用 async / await，它们仅在 Node v7.6.0 或更高版本中被支持。\",\"Puppeteer 使用起来和其他测试框架类似。你需要创建一个 Browser 实例，打开页面，然后使用 Puppeteer 的 API。\",\"Example - 跳转到 https://example.com 并保存截图至 example.png:\",\"文件为 example.js\",\"const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto('https://example.com'); await page.screenshot({path: 'example.png'}); await browser.close(); })(); \",\"在命令行中执行\",\"node example.js \",\"Puppeteer 初始化的屏幕大小默认为 800px x 600px。但是这个尺寸可以通过 Page.setViewport() 设置。\",\"Example - 创建一个 PDF。\",\"文件为 hn.js\",\"const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto('https://news.ycombinator.com', {waitUntil: 'networkidle2'}); await page.pdf({path: 'hn.pdf', format: 'A4'}); await browser.close(); })(); \",\"在命令行中执行\",\"node hn.js \",\"查看 Page.pdf() 了解跟多内容。\",\"Example - 在页面中执行脚本\",\"文件为 get-dimensions.js\",\"const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto('https://example.com'); // Get the \\\"viewport\\\" of the page, as reported by the page. const dimensions = await page.evaluate(() => { return { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, deviceScaleFactor: window.devicePixelRatio }; }); console.log('Dimensions:', dimensions); await browser.close(); })(); \",\"在命令行中执行\",\"node get-dimensions.js \",\"查看 Page.evaluate() 了解更多相关内容，该方法有点类似于 evaluateOnNewDocument and exposeFunction。\"]},\"302\":{\"h\":\"默认设置\",\"t\":[\"1. 使用无头模式\",\"Puppeteer 运行 Chromium 的headless mode。如果想要使用完全版本的 Chromium，设置 'headless' option 即可。\",\"const browser = await puppeteer.launch({headless: false}); // default is true \",\"2. 运行绑定的 Chromium 版本\",\"默认情况下，Puppeteer 下载并使用特定版本的 Chromium 以及其 API 保证开箱即用。 如果要将 Puppeteer 与不同版本的 Chrome 或 Chromium 一起使用，在创建Browser实例时传入 Chromium 可执行文件的路径即可：\",\"const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'}); \",\"具体见：Puppeteer.launch()\",\"看这篇文章了解 Chromium 与 Chrome 的不同。这篇文章 介绍了一些 Linux 用户在使用上的区别。\",\"3. 创建用户配置文件\",\"Puppeteer 会创建自己的 Chromium 用户配置文件，它会在每次运行时清理。\"]},\"303\":{\"h\":\"模板\",\"t\":[\"const puppeteer = require('puppeteer'); const path = require('path'); async function captureScreenshot() { const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] }) const page = await browser.newPage(); await page.setViewport({ width: 1920, height: 1080 }); // 根据需要设置宽度和高度 await page.goto('http://xxxxxxx.com/'); // 替换成你的网站地址 // 获取当前日期 const currentDate = new Date(); const formattedDate = currentDate.toISOString().slice(0, 10); // 格式化日期为 yyyy-MM-dd // 生成截图文件路径和名称 const screenshotPath = path.join(__dirname, `${formattedDate}.png`); // 设置截图选项 const screenshotOptions = { path: screenshotPath, // 保存截图的文件路径和名称 fullPage: false, // 截取整个页面 clip: { x: 0, y: 0, width: 1920, height: 1080 } }; await page.screenshot(screenshotOptions); await browser.close(); } captureScreenshot(); // //可以使用 // const puppeteer = require('puppeteer'); // const path = require('path'); // async function captureScreenshot() { // const browser = await puppeteer.launch(); // const page = await browser.newPage(); // await page.goto('https://beink.cn'); // 替换成你的网站地址 // // 获取当前日期 // const currentDate = new Date(); // const formattedDate = currentDate.toISOString().slice(0, 10); // 格式化日期为 yyyy-MM-dd // // 生成截图文件路径和名称 // const screenshotPath = path.join(__dirname, `${formattedDate}.png`); // await page.screenshot({ path: screenshotPath }); // 保存截图的文件路径和名称 // await browser.close(); // } // captureScreenshot(); \",\"一张图片大概3M\"]},\"304\":{\"h\":\"定时\",\"t\":[\"crontab -e\",\"0 0 12 * * ? cd /www/shot && node shot.js\"]},\"305\":{\"h\":\"Github action\",\"t\":[\"name: main on: push: branches: - main schedule: - cron: '0 */6 * * *' # 每6小时执行一次，可根据需要调整时间 jobs: run-coupons: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '18.16.0' - name: Install Dependencies run: | sudo apt-get install fonts-wqy-zenhei npm install npm install puppeteer - name: Run Script run: node shot.js - name: Create Image Branch run: | git stash git fetch origin git checkout image mkdir -p image mv *.png image/ git pull origin image git config --local user.email \\\"action@github.com\\\" git config --local user.name \\\"GitHub Action\\\" git add . git commit -m \\\"Add downloaded images\\\" git push origin image \"]},\"306\":{\"h\":\"问题\"},\"307\":{\"h\":\"Puppeteer没有自动安装Chromium的解决办法\",\"t\":[\"Puppeteer没有自动安装Chromium的解决办法_亮子AI的博客-CSDN博客安装后再看这\",\"按照官方文档的说法，安装 Puppeteer 时会自动安装 Chromium 浏览器。但是实际安装过程中，会出现不安装 Chromium 的情况，这时需要使用下面的命令来手动安装 Chromium：\",\"node node_modules/puppeteer/install.js\\n这样就能把 Chromium 正确的安装到 node_modules/puppeteer/.local-chromium 目录下。根据操作系统及浏览器版本的不同，浏览器大概占用 200M～400M 的磁盘空间。\"]},\"308\":{\"h\":\"工具\"},\"309\":{\"h\":\"regex\"},\"310\":{\"h\":\"插件\"},\"311\":{\"h\":\"java\"},\"312\":{\"h\":\"元字符\"},\"313\":{\"h\":\"简写字符集\",\"t\":[\"简写\",\"描述\",\".\",\"除换行符外的所有字符\",\"\\\\w\",\"匹配所有字母数字，等同于 [a-zA-Z0-9]\",\"\\\\W\",\"匹配所有非字母数字，即符号，等同于： [^\\\\w]\",\"\\\\d\",\"匹配数字： [0-9]\",\"\\\\D\",\"匹配非数字： [^\\\\d]\",\"\\\\s\",\"匹配所有空格字符，等同于： [\\\\t\\\\n\\\\f\\\\r\\\\p{Z}]\",\"\\\\S\",\"匹配所有非空格字符： [^\\\\s]\",\"\\\\f\",\"匹配一个换页符\",\"\\\\n\",\"匹配一个换行符\",\"\\\\r\",\"匹配一个回车符\",\"\\\\t\",\"匹配一个制表符\",\"\\\\v\",\"匹配一个垂直制表符\",\"\\\\p\",\"匹配 CR/LF（等同于 \\\\r\\\\n），用来匹配 DOS 行终止符\"]},\"314\":{\"h\":\"标志\"},\"315\":{\"h\":\"忽略大小写\",\"t\":[\"修饰语 i 用于忽略大小写。\",\"例如，表达式 /The/gi 表示在全局搜索 The，在后面的 i 将其条件修改为忽略大小写，则变成搜索 the 和 The，g 表示全局搜索。\",\"\\\"/The/gi\\\" => The fat cat sat on the mat.\"]},\"316\":{\"h\":\"全局搜索\",\"t\":[\"修饰符 g 常用于执行一个全局搜索匹配\",\"\\\"/.(at)/g\\\" => The fatcatsat on the mat.\"]},\"317\":{\"h\":\"导出pdf\",\"t\":[\"IText7使用（超详解） - 明小子@ - 博客园 (cnblogs.com)\",\"关于HTML页面转pdf的一点经验_使用 htmlworker 解析html为pdf-CSDN博客\",\"itext5 html转pdf-CSDN博客\"]},\"318\":{\"h\":\"依赖\",\"t\":[\" <!-- 生成pdf--> <dependency> <groupId>com.itextpdf</groupId> <artifactId>itextpdf</artifactId> <version>5.5.13</version> </dependency> <!-- 字体--> <dependency> <groupId>com.itextpdf</groupId> <artifactId>itext-asian</artifactId> <version>5.2.0</version> </dependency> <!-- 工具类--> <dependency> <groupId>com.itextpdf.tool</groupId> <artifactId>xmlworker</artifactId> <version>5.5.13</version> </dependency> \"]},\"319\":{\"h\":\"配置中文字体\",\"t\":[\"/** * @author mishu * @since 2024/7/17 * @description 解决pdf文件中文不显示的问题 */ @Slf4j public class AsianFontProvider extends XMLWorkerFontProvider { public Font getFont(final String fontname, final String encoding, final boolean embedded, final float size, final int style, final BaseColor color) { BaseFont bf = null; try { bf = BaseFont.createFont(\\\"STSong-Light\\\", \\\"UniGB-UCS2-H\\\", BaseFont.NOT_EMBEDDED); } catch (Exception e) { log.error(\\\"生成pdf文件，添加字体失败\\\", e); } Font font = new Font(bf, size, style, color); font.setColor(color); return font; } } \"]},\"320\":{\"h\":\"初始化\",\"t\":[\"@GetMapping(\\\"/downloadPdf\\\") public void downloadPdf(HttpServletResponse response) throws IOException, DocumentException { // 设置响应的内容类型和头部，建议使用PDF的MIME类型 response.setContentType(\\\"application/pdf\\\"); response.setHeader(\\\"Content-Disposition\\\", \\\"attachment; filename=hello-pdf.pdf\\\"); Document document = new Document(); PdfWriter writer = PdfWriter.getInstance(document, response.getOutputStream()); document.open(); // 使用itext-asian库中的中文字体 BaseFont bf = BaseFont.createFont(\\\"STSong-Light\\\", \\\"UniGB-UCS2-H\\\", BaseFont.NOT_EMBEDDED); Font font = new Font(bf, 12, Font.NORMAL); //添加要写入的内容 //。。。。。。 document.close(); writer.close(); } \"]},\"321\":{\"h\":\"Paragraph\",\"t\":[\" // 创建一个段落并添加到文档中 Paragraph paragraph = new Paragraph(\\\"段落\\\", font); //居中 paragraph.setAlignment(Paragraph.ALIGN_CENTER); // 添加到doc中 document.add(paragraph); // 其他 // 。。。 \"]},\"322\":{\"h\":\"Chunk\",\"t\":[\"可以用来设置段落的某些文本样式\",\"// 创建段落 Paragraph paragraph = new Paragraph(); // 创建一个普通的Chunk Chunk simpleChunk = new Chunk(\\\"这是普通的文本。\\\", font); paragraph.add(simpleChunk); // 创建一个带超链接的Chunk Chunk linkChunk = new Chunk(\\\"点击这里访问iText官网\\\", new Font(bf, 12, Font.NORMAL, BaseColor.RED)); linkChunk.setAnchor(\\\"http://itextpdf.com/\\\"); paragraph.add(linkChunk); // 创建带颜色的Chunk Chunk coloredChunk = new Chunk(\\\"这是彩色的文本。\\\", new Font(bf, 12, Font.NORMAL, BaseColor.RED)); paragraph.add(coloredChunk); // 创建带下划线的Chunk Chunk underlineChunk = new Chunk(\\\"这是带下划线的文本。\\\", new Font(bf, 12, Font.UNDERLINE, BaseColor.BLACK)); paragraph.add(underlineChunk); // 创建带删除线的Chunk Chunk strikeChunk = new Chunk(\\\"这是带删除线的文本。\\\", new Font(bf, 12, Font.STRIKETHRU, BaseColor.BLACK)); paragraph.add(strikeChunk); // 创建斜体Chunk Chunk italicChunk = new Chunk(\\\"这是斜体文本。\\\", new Font(bf, 12, Font.ITALIC, BaseColor.BLACK)); paragraph.add(italicChunk); // 创建粗体Chunk Chunk boldChunk = new Chunk(\\\"这是粗体文本。\\\", new Font(bf, 12, Font.BOLD, BaseColor.BLACK)); paragraph.add(boldChunk); // 创建上标Chunk Chunk superscriptChunk = new Chunk(\\\"2\\\", new Font(bf, 12, Font.NORMAL, BaseColor.BLACK)); superscriptChunk.setTextRise(5); // 设置文本上移 paragraph.add(superscriptChunk); // 创建下标Chunk Chunk subscriptChunk = new Chunk(\\\"1\\\", new Font(bf, 12, Font.NORMAL, BaseColor.BLACK)); subscriptChunk.setTextRise(-5); // 设置文本下移 paragraph.add(subscriptChunk); // 将段落添加到文档中 document.add(paragraph); \"]},\"323\":{\"h\":\"Table\",\"t\":[\"// 创建PdfPTable对象，这里创建一个3列的表格 PdfPTable table = new PdfPTable(3); // 设置表格宽度百分比 table.setWidthPercentage(100); // 设置表格的列宽比例 float[] columnWidths = {1f, 2f, 1f}; table.setWidths(columnWidths); // 添加单元格到表格 PdfPCell cell; // 添加一行数据 cell = new PdfPCell(new Phrase(\\\"列1\\\",font)); cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setBorder(PdfPCell.NO_BORDER); // 设置单元格内部没有边框 table.addCell(cell); cell = new PdfPCell(new Phrase(\\\"列2\\\",font)); cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setBorder(PdfPCell.NO_BORDER); // 设置单元格内部没有边框 table.addCell(cell); cell = new PdfPCell(new Phrase(\\\"列3\\\",font)); cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setBorder(PdfPCell.NO_BORDER); // 设置单元格内部没有边框 // 行高 cell.setFixedHeight(30); table.addCell(cell); // 继续添加更多行数据 for (int i = 0; i < 5; i++) { table.addCell(new Paragraph(\\\"行 \\\" + (i + 2) + \\\" 列 1\\\",font)); table.addCell(new Paragraph(\\\"行 \\\" + (i + 2) + \\\" 列 2\\\",font)); table.addCell(new Paragraph(\\\"行 \\\" + (i + 2) + \\\" 列 3\\\",font)); } // 设置表格的样式 table.setSpacingBefore(10); // 设置表格前间距 table.setSpacingAfter(5); // 设置表格后间距 // 将表格添加到文档中 document.add(table); \"]},\"324\":{\"h\":\"Image\",\"t\":[\"图片\",\" String url = \\\"\\\"; Image image = Image.getInstance(url); //位置 image.setAbsolutePosition(380f,460f); //设置图片相对大小 image.scaleAbsolute(90f, 120f); //放入图片带文档中 document.add(image); \"]},\"325\":{\"h\":\"Rectangle\",\"t\":[\"绘制图案\",\" Rectangle rect = new Rectangle(100, 100, 200, 200); PdfContentByte canvas = writer.getDirectContent(); canvas.saveState(); canvas.setColorStroke(BaseColor.BLACK); canvas.rectangle(rect.getLeft(), rect.getBottom(), rect.getRight(), rect.getTop()); canvas.stroke(); canvas.restoreState(); \"]},\"326\":{\"h\":\"开发\"},\"327\":{\"h\":\"解析xml\"},\"328\":{\"h\":\"使用JAXP\",\"t\":[\"public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException { String url = \\\"D:\\\\\\\\test\\\\\\\\test\\\\\\\\pom.xml\\\"; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // 忽略注释 factory.setIgnoringComments(true); // 忽略空白 factory.setIgnoringElementContentWhitespace(true); DocumentBuilder builder = factory.newDocumentBuilder(); Document document = builder.parse(url); NodeList dependency = document.getElementsByTagName(\\\"dependencyManagement\\\"); System.out.println(dependency.item(0).getTextContent()); System.out.println(dependency.getLength()); } \",\"NodeList\",\"获取节点数量：getLength() 方法返回NodeList中的节点数量。\",\"访问节点：item(index) 方法允许你通过索引访问NodeList中的特定节点。索引从0开始。\",\"迭代节点：你可以使用for循环结合getLength()和item()方法来遍历NodeList中的所有节点。\",\"节点类型：NodeList中的每个节点都是Node接口的一个实例，这意味着你可以对它们执行如获取节点名称、节点值等操作。\",\"动态更新：在某些情况下，NodeList可以是动态的，这意味着当底层文档结构发生变化时，NodeList也会相应地更新。\",\"使用XPath表达式：在某些实现中，如使用JDOM或DOM4J等库时，NodeList可以作为XPath查询的结果返回，允许你根据特定的XPath表达式来选择文档中的节点。\",\"循环如此\",\"示例\",\"public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException { String url = \\\"D:\\\\\\\\test\\\\\\\\test\\\\\\\\pom.xml\\\"; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // 忽略注释 factory.setIgnoringComments(true); // 忽略空白 factory.setIgnoringElementContentWhitespace(true); DocumentBuilder builder = factory.newDocumentBuilder(); Document document = builder.parse(url); NodeList dependency = document.getElementsByTagName(\\\"dependency\\\"); for (int i = 0; i < dependency.getLength(); i++) { Node node = dependency.item(i); // 是否为节点 if (node.getNodeType() == Node.ELEMENT_NODE) { Element element = (Element) node; String groupId = element.getElementsByTagName(\\\"groupId\\\").item(0).getTextContent(); String artifactId = element.getElementsByTagName(\\\"artifactId\\\").item(0).getTextContent(); String version = element.getElementsByTagName(\\\"version\\\").item(0).getTextContent(); System.out.println(\\\"groupId = \\\" + groupId); System.out.println(\\\"artifactId = \\\" + artifactId); System.out.println(\\\"version = \\\" + version); System.out.println(\\\"-----------\\\"); } } } \",\"修改原数据\",\" // 将修改后的Document写回到新的XML文件中 TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(); DOMSource source = new DOMSource(document); StreamResult result = new StreamResult( Files.newOutputStream(new File(\\\"pom.xml\\\").toPath())); transformer.transform(source, result); \"]},\"329\":{\"h\":\"Netty-Nio\",\"t\":[\"non-blocking io 非阻塞 IO\"]},\"330\":{\"h\":\"1. 三大组件\"},\"331\":{\"h\":\"1.1 Channel & Buffer\",\"t\":[\"channel 有一点类似于 stream，它就是读写数据的双向通道，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层\",\"常见的 Channel 有\",\"FileChannel\",\"DatagramChannel\",\"SocketChannel\",\"ServerSocketChannel\",\"buffer 则用来缓冲读写数据，常见的 buffer 有\",\"ByteBuffer \",\"MappedByteBuffer\",\"DirectByteBuffer\",\"HeapByteBuffer\",\"ShortBuffer\",\"IntBuffer\",\"LongBuffer\",\"FloatBuffer\",\"DoubleBuffer\",\"CharBuffer\"]},\"332\":{\"h\":\"1.2 Selector\",\"t\":[\"selector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途\"]},\"333\":{\"h\":\"多线程版设计\"},\"334\":{\"h\":\"⚠️ 多线程版缺点\",\"t\":[\"内存占用高\",\"线程上下文切换成本高\",\"只适合连接数少的场景\"]},\"335\":{\"h\":\"线程池版设计\"},\"336\":{\"h\":\"⚠️ 线程池版缺点\",\"t\":[\"阻塞模式下，线程仅能处理一个 socket 连接\",\"仅适合短连接场景\"]},\"337\":{\"h\":\"selector 版设计\",\"t\":[\"selector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）\",\"调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理\"]},\"338\":{\"h\":\"2. ByteBuffer\",\"t\":[\"有一普通文本文件 data.txt，内容为\",\"1234567890abcd \",\"使用 FileChannel 来读取文件内容\",\"@Slf4j public class ChannelDemo1 { public static void main(String[] args) { try (RandomAccessFile file = new RandomAccessFile(\\\"helloword/data.txt\\\", \\\"rw\\\")) { FileChannel channel = file.getChannel(); ByteBuffer buffer = ByteBuffer.allocate(10); do { // 向 buffer 写入 int len = channel.read(buffer); log.debug(\\\"读到字节数：{}\\\", len); if (len == -1) { break; } // 切换 buffer 读模式 buffer.flip(); while(buffer.hasRemaining()) { log.debug(\\\"{}\\\", (char)buffer.get()); } // 切换 buffer 写模式 buffer.clear(); } while (true); } catch (IOException e) { e.printStackTrace(); } } } \",\"输出\",\"10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：10 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 1 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 2 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 3 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 4 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 5 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 6 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 7 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 8 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 9 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 0 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：4 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - a 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - b 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - c 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - d 10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：-1 \"]},\"339\":{\"h\":\"2.1 ByteBuffer 正确使用姿势\",\"t\":[\"向 buffer 写入数据，例如调用 channel.read(buffer)\",\"调用 flip() 切换至读模式\",\"从 buffer 读取数据，例如调用 buffer.get()\",\"调用 clear() 或 compact() 切换至写模式\",\"重复 1~4 步骤\"]},\"340\":{\"h\":\"2.2 ByteBuffer 结构\",\"t\":[\"ByteBuffer 有以下重要属性\",\"capacity\",\"position\",\"limit\",\"一开始\",\"写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态\",\"flip 动作发生后，position 切换为读取位置，limit 切换为读取限制\",\"读取 4 个字节后，状态\",\"clear 动作发生后，状态\",\"compact 方法，是把未读完的部分向前压缩，然后切换至写模式\"]},\"341\":{\"h\":\"💡 调试工具类\",\"t\":[\"public class ByteBufferUtil { private static final char[] BYTE2CHAR = new char[256]; private static final char[] HEXDUMP_TABLE = new char[256 * 4]; private static final String[] HEXPADDING = new String[16]; private static final String[] HEXDUMP_ROWPREFIXES = new String[65536 >>> 4]; private static final String[] BYTE2HEX = new String[256]; private static final String[] BYTEPADDING = new String[16]; static { final char[] DIGITS = \\\"0123456789abcdef\\\".toCharArray(); for (int i = 0; i < 256; i++) { HEXDUMP_TABLE[i << 1] = DIGITS[i >>> 4 & 0x0F]; HEXDUMP_TABLE[(i << 1) + 1] = DIGITS[i & 0x0F]; } int i; // Generate the lookup table for hex dump paddings for (i = 0; i < HEXPADDING.length; i++) { int padding = HEXPADDING.length - i; StringBuilder buf = new StringBuilder(padding * 3); for (int j = 0; j < padding; j++) { buf.append(\\\" \\\"); } HEXPADDING[i] = buf.toString(); } // Generate the lookup table for the start-offset header in each row (up to 64KiB). for (i = 0; i < HEXDUMP_ROWPREFIXES.length; i++) { StringBuilder buf = new StringBuilder(12); buf.append(NEWLINE); buf.append(Long.toHexString(i << 4 & 0xFFFFFFFFL | 0x100000000L)); buf.setCharAt(buf.length() - 9, '|'); buf.append('|'); HEXDUMP_ROWPREFIXES[i] = buf.toString(); } // Generate the lookup table for byte-to-hex-dump conversion for (i = 0; i < BYTE2HEX.length; i++) { BYTE2HEX[i] = ' ' + StringUtil.byteToHexStringPadded(i); } // Generate the lookup table for byte dump paddings for (i = 0; i < BYTEPADDING.length; i++) { int padding = BYTEPADDING.length - i; StringBuilder buf = new StringBuilder(padding); for (int j = 0; j < padding; j++) { buf.append(' '); } BYTEPADDING[i] = buf.toString(); } // Generate the lookup table for byte-to-char conversion for (i = 0; i < BYTE2CHAR.length; i++) { if (i <= 0x1f || i >= 0x7f) { BYTE2CHAR[i] = '.'; } else { BYTE2CHAR[i] = (char) i; } } } /** * 打印所有内容 * @param buffer */ public static void debugAll(ByteBuffer buffer) { int oldlimit = buffer.limit(); buffer.limit(buffer.capacity()); StringBuilder origin = new StringBuilder(256); appendPrettyHexDump(origin, buffer, 0, buffer.capacity()); System.out.println(\\\"+--------+-------------------- all ------------------------+----------------+\\\"); System.out.printf(\\\"position: [%d], limit: [%d]\\\\n\\\", buffer.position(), oldlimit); System.out.println(origin); buffer.limit(oldlimit); } /** * 打印可读取内容 * @param buffer */ public static void debugRead(ByteBuffer buffer) { StringBuilder builder = new StringBuilder(256); appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position()); System.out.println(\\\"+--------+-------------------- read -----------------------+----------------+\\\"); System.out.printf(\\\"position: [%d], limit: [%d]\\\\n\\\", buffer.position(), buffer.limit()); System.out.println(builder); } private static void appendPrettyHexDump(StringBuilder dump, ByteBuffer buf, int offset, int length) { if (isOutOfBounds(offset, length, buf.capacity())) { throw new IndexOutOfBoundsException( \\\"expected: \\\" + \\\"0 <= offset(\\\" + offset + \\\") <= offset + length(\\\" + length + \\\") <= \\\" + \\\"buf.capacity(\\\" + buf.capacity() + ')'); } if (length == 0) { return; } dump.append( \\\" +-------------------------------------------------+\\\" + NEWLINE + \\\" | 0 1 2 3 4 5 6 7 8 9 a b c d e f |\\\" + NEWLINE + \\\"+--------+-------------------------------------------------+----------------+\\\"); final int startIndex = offset; final int fullRows = length >>> 4; final int remainder = length & 0xF; // Dump the rows which have 16 bytes. for (int row = 0; row < fullRows; row++) { int rowStartIndex = (row << 4) + startIndex; // Per-row prefix. appendHexDumpRowPrefix(dump, row, rowStartIndex); // Hex dump int rowEndIndex = rowStartIndex + 16; for (int j = rowStartIndex; j < rowEndIndex; j++) { dump.append(BYTE2HEX[getUnsignedByte(buf, j)]); } dump.append(\\\" |\\\"); // ASCII dump for (int j = rowStartIndex; j < rowEndIndex; j++) { dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]); } dump.append('|'); } // Dump the last row which has less than 16 bytes. if (remainder != 0) { int rowStartIndex = (fullRows << 4) + startIndex; appendHexDumpRowPrefix(dump, fullRows, rowStartIndex); // Hex dump int rowEndIndex = rowStartIndex + remainder; for (int j = rowStartIndex; j < rowEndIndex; j++) { dump.append(BYTE2HEX[getUnsignedByte(buf, j)]); } dump.append(HEXPADDING[remainder]); dump.append(\\\" |\\\"); // Ascii dump for (int j = rowStartIndex; j < rowEndIndex; j++) { dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]); } dump.append(BYTEPADDING[remainder]); dump.append('|'); } dump.append(NEWLINE + \\\"+--------+-------------------------------------------------+----------------+\\\"); } private static void appendHexDumpRowPrefix(StringBuilder dump, int row, int rowStartIndex) { if (row < HEXDUMP_ROWPREFIXES.length) { dump.append(HEXDUMP_ROWPREFIXES[row]); } else { dump.append(NEWLINE); dump.append(Long.toHexString(rowStartIndex & 0xFFFFFFFFL | 0x100000000L)); dump.setCharAt(dump.length() - 9, '|'); dump.append('|'); } } public static short getUnsignedByte(ByteBuffer buffer, int index) { return (short) (buffer.get(index) & 0xFF); } } \"]},\"342\":{\"h\":\"2.3 ByteBuffer 常见方法\"},\"343\":{\"h\":\"分配空间\",\"t\":[\"可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法\",\"Bytebuffer buf = ByteBuffer.allocate(16); \"]},\"344\":{\"h\":\"向 buffer 写入数据\",\"t\":[\"有两种办法\",\"调用 channel 的 read 方法\",\"调用 buffer 自己的 put 方法\",\"int readBytes = channel.read(buf); \",\"和\",\"buf.put((byte)127); \"]},\"345\":{\"h\":\"从 buffer 读取数据\",\"t\":[\"同样有两种办法\",\"调用 channel 的 write 方法\",\"调用 buffer 自己的 get 方法\",\"int writeBytes = channel.write(buf); \",\"和\",\"byte b = buf.get(); \",\"get 方法会让 position 读指针向后走，如果想重复读取数据\",\"可以调用 rewind 方法将 position 重新置为 0\",\"或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针\"]},\"346\":{\"h\":\"mark 和 reset\",\"t\":[\"mark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置\",\"注意\",\"rewind 和 flip 都会清除 mark 位置\"]},\"347\":{\"h\":\"字符串与 ByteBuffer 互转\",\"t\":[\"ByteBuffer buffer1 = StandardCharsets.UTF_8.encode(\\\"你好\\\"); ByteBuffer buffer2 = Charset.forName(\\\"utf-8\\\").encode(\\\"你好\\\"); debug(buffer1); debug(buffer2); CharBuffer buffer3 = StandardCharsets.UTF_8.decode(buffer1); System.out.println(buffer3.getClass()); System.out.println(buffer3.toString()); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| e4 bd a0 e5 a5 bd |...... | +--------+-------------------------------------------------+----------------+ +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| e4 bd a0 e5 a5 bd |...... | +--------+-------------------------------------------------+----------------+ class java.nio.HeapCharBuffer 你好 \"]},\"348\":{\"h\":\"⚠️ Buffer 的线程安全\",\"t\":[\"Buffer 是非线程安全的\"]},\"349\":{\"h\":\"2.4 Scattering Reads\",\"t\":[\"分散读取，有一个文本文件 3parts.txt\",\"onetwothree \",\"使用如下方式读取，可以将数据填充至多个 buffer\",\"try (RandomAccessFile file = new RandomAccessFile(\\\"helloword/3parts.txt\\\", \\\"rw\\\")) { FileChannel channel = file.getChannel(); ByteBuffer a = ByteBuffer.allocate(3); ByteBuffer b = ByteBuffer.allocate(3); ByteBuffer c = ByteBuffer.allocate(5); channel.read(new ByteBuffer[]{a, b, c}); a.flip(); b.flip(); c.flip(); debug(a); debug(b); debug(c); } catch (IOException e) { e.printStackTrace(); } \",\"结果\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 6f 6e 65 |one | +--------+-------------------------------------------------+----------------+ +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 74 77 6f |two | +--------+-------------------------------------------------+----------------+ +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 74 68 72 65 65 |three | +--------+-------------------------------------------------+----------------+ \"]},\"350\":{\"h\":\"2.5 Gathering Writes\",\"t\":[\"使用如下方式写入，可以将多个 buffer 的数据填充至 channel\",\"try (RandomAccessFile file = new RandomAccessFile(\\\"helloword/3parts.txt\\\", \\\"rw\\\")) { FileChannel channel = file.getChannel(); ByteBuffer d = ByteBuffer.allocate(4); ByteBuffer e = ByteBuffer.allocate(4); channel.position(11); d.put(new byte[]{'f', 'o', 'u', 'r'}); e.put(new byte[]{'f', 'i', 'v', 'e'}); d.flip(); e.flip(); debug(d); debug(e); channel.write(new ByteBuffer[]{d, e}); } catch (IOException e) { e.printStackTrace(); } \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 66 6f 75 72 |four | +--------+-------------------------------------------------+----------------+ +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 66 69 76 65 |five | +--------+-------------------------------------------------+----------------+ \",\"文件内容\",\"onetwothreefourfive \"]},\"351\":{\"h\":\"2.6 练习\",\"t\":[\"网络上有多条数据发送给服务端，数据之间使用 \\\\n 进行分隔 但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为\",\"Hello,world\\\\n\",\"I'm zhangsan\\\\n\",\"How are you?\\\\n\",\"变成了下面的两个 byteBuffer (黏包，半包)\",\"Hello,world\\\\nI'm zhangsan\\\\nHo\",\"w are you?\\\\n\",\"现在要求你编写程序，将错乱的数据恢复成原始的按 \\\\n 分隔的数据\",\"public static void main(String[] args) { ByteBuffer source = ByteBuffer.allocate(32); // 11 24 source.put(\\\"Hello,world\\\\nI'm zhangsan\\\\nHo\\\".getBytes()); split(source); source.put(\\\"w are you?\\\\nhaha!\\\\n\\\".getBytes()); split(source); } private static void split(ByteBuffer source) { source.flip(); int oldLimit = source.limit(); for (int i = 0; i < oldLimit; i++) { if (source.get(i) == '\\\\n') { System.out.println(i); ByteBuffer target = ByteBuffer.allocate(i + 1 - source.position()); // 0 ~ limit source.limit(i + 1); target.put(source); // 从source 读，向 target 写 debugAll(target); source.limit(oldLimit); } } source.compact(); } \"]},\"352\":{\"h\":\"3. 文件编程\"},\"353\":{\"h\":\"3.1 FileChannel\"},\"354\":{\"h\":\"⚠️ FileChannel 工作模式\",\"t\":[\"FileChannel 只能工作在阻塞模式下\"]},\"355\":{\"h\":\"获取\",\"t\":[\"不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法\",\"通过 FileInputStream 获取的 channel 只能读\",\"通过 FileOutputStream 获取的 channel 只能写\",\"通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定\"]},\"356\":{\"h\":\"读取\",\"t\":[\"会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾\",\"int readBytes = channel.read(buffer); \"]},\"357\":{\"h\":\"写入\",\"t\":[\"写入的正确姿势如下， SocketChannel\",\"ByteBuffer buffer = ...; buffer.put(...); // 存入数据 buffer.flip(); // 切换读模式 while(buffer.hasRemaining()) { channel.write(buffer); } \",\"在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel\"]},\"358\":{\"h\":\"关闭\",\"t\":[\"channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法\"]},\"359\":{\"h\":\"位置\",\"t\":[\"获取当前位置\",\"long pos = channel.position(); \",\"设置当前位置\",\"long newPos = ...; channel.position(newPos); \",\"设置当前位置时，如果设置为文件的末尾\",\"这时读取会返回 -1\",\"这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）\"]},\"360\":{\"h\":\"大小\",\"t\":[\"使用 size 方法获取文件的大小\"]},\"361\":{\"h\":\"强制写入\",\"t\":[\"操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true) 方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘\"]},\"362\":{\"h\":\"3.2 两个 Channel 传输数据\",\"t\":[\"String FROM = \\\"helloword/data.txt\\\"; String TO = \\\"helloword/to.txt\\\"; long start = System.nanoTime(); try (FileChannel from = new FileInputStream(FROM).getChannel(); FileChannel to = new FileOutputStream(TO).getChannel(); ) { from.transferTo(0, from.size(), to); } catch (IOException e) { e.printStackTrace(); } long end = System.nanoTime(); System.out.println(\\\"transferTo 用时：\\\" + (end - start) / 1000_000.0); \",\"输出\",\"transferTo 用时：8.2011 \",\"超过 2g 大小的文件传输\",\"public class TestFileChannelTransferTo { public static void main(String[] args) { try ( FileChannel from = new FileInputStream(\\\"data.txt\\\").getChannel(); FileChannel to = new FileOutputStream(\\\"to.txt\\\").getChannel(); ) { // 效率高，底层会利用操作系统的零拷贝进行优化 long size = from.size(); // left 变量代表还剩余多少字节 for (long left = size; left > 0; ) { System.out.println(\\\"position:\\\" + (size - left) + \\\" left:\\\" + left); left -= from.transferTo((size - left), left, to); } } catch (IOException e) { e.printStackTrace(); } } } \",\"实际传输一个超大文件\",\"position:0 left:7769948160 position:2147483647 left:5622464513 position:4294967294 left:3474980866 position:6442450941 left:1327497219 \"]},\"363\":{\"h\":\"3.3 Path\",\"t\":[\"jdk7 引入了 Path 和 Paths 类\",\"Path 用来表示文件路径\",\"Paths 是工具类，用来获取 Path 实例\",\"Path source = Paths.get(\\\"1.txt\\\"); // 相对路径 使用 user.dir 环境变量来定位 1.txt Path source = Paths.get(\\\"d:\\\\\\\\1.txt\\\"); // 绝对路径 代表了 d:\\\\1.txt Path source = Paths.get(\\\"d:/1.txt\\\"); // 绝对路径 同样代表了 d:\\\\1.txt Path projects = Paths.get(\\\"d:\\\\\\\\data\\\", \\\"projects\\\"); // 代表了 d:\\\\data\\\\projects \",\". 代表了当前路径\",\".. 代表了上一级路径\",\"例如目录结构如下\",\"d: |- data |- projects |- a |- b \",\"代码\",\"Path path = Paths.get(\\\"d:\\\\\\\\data\\\\\\\\projects\\\\\\\\a\\\\\\\\..\\\\\\\\b\\\"); System.out.println(path); System.out.println(path.normalize()); // 正常化路径 \",\"会输出\",\"d:\\\\data\\\\projects\\\\a\\\\..\\\\b d:\\\\data\\\\projects\\\\b \"]},\"364\":{\"h\":\"3.4 Files\",\"t\":[\"检查文件是否存在\",\"Path path = Paths.get(\\\"helloword/data.txt\\\"); System.out.println(Files.exists(path)); \",\"创建一级目录\",\"Path path = Paths.get(\\\"helloword/d1\\\"); Files.createDirectory(path); \",\"如果目录已存在，会抛异常 FileAlreadyExistsException\",\"不能一次创建多级目录，否则会抛异常 NoSuchFileException\",\"创建多级目录用\",\"Path path = Paths.get(\\\"helloword/d1/d2\\\"); Files.createDirectories(path); \",\"拷贝文件\",\"Path source = Paths.get(\\\"helloword/data.txt\\\"); Path target = Paths.get(\\\"helloword/target.txt\\\"); Files.copy(source, target); \",\"如果文件已存在，会抛异常 FileAlreadyExistsException\",\"如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制\",\"Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING); \",\"移动文件\",\"Path source = Paths.get(\\\"helloword/data.txt\\\"); Path target = Paths.get(\\\"helloword/data.txt\\\"); Files.move(source, target, StandardCopyOption.ATOMIC_MOVE); \",\"StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性\",\"删除文件\",\"Path target = Paths.get(\\\"helloword/target.txt\\\"); Files.delete(target); \",\"如果文件不存在，会抛异常 NoSuchFileException\",\"删除目录\",\"Path target = Paths.get(\\\"helloword/d1\\\"); Files.delete(target); \",\"如果目录还有内容，会抛异常 DirectoryNotEmptyException\",\"遍历目录文件\",\"public static void main(String[] args) throws IOException { Path path = Paths.get(\\\"C:\\\\\\\\Program Files\\\\\\\\Java\\\\\\\\jdk1.8.0_91\\\"); AtomicInteger dirCount = new AtomicInteger(); AtomicInteger fileCount = new AtomicInteger(); Files.walkFileTree(path, new SimpleFileVisitor<Path>(){ @Override public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException { System.out.println(dir); dirCount.incrementAndGet(); return super.preVisitDirectory(dir, attrs); } @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { System.out.println(file); fileCount.incrementAndGet(); return super.visitFile(file, attrs); } }); System.out.println(dirCount); // 133 System.out.println(fileCount); // 1479 } \",\"统计 jar 的数目\",\"Path path = Paths.get(\\\"C:\\\\\\\\Program Files\\\\\\\\Java\\\\\\\\jdk1.8.0_91\\\"); AtomicInteger fileCount = new AtomicInteger(); Files.walkFileTree(path, new SimpleFileVisitor<Path>(){ @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { if (file.toFile().getName().endsWith(\\\".jar\\\")) { fileCount.incrementAndGet(); } return super.visitFile(file, attrs); } }); System.out.println(fileCount); // 724 \",\"删除多级目录\",\"Path path = Paths.get(\\\"d:\\\\\\\\a\\\"); Files.walkFileTree(path, new SimpleFileVisitor<Path>(){ @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); return super.visitFile(file, attrs); } @Override public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException { Files.delete(dir); return super.postVisitDirectory(dir, exc); } }); \"]},\"365\":{\"h\":\"⚠️ 删除很危险\",\"t\":[\"删除是危险操作，确保要递归删除的文件夹没有重要内容\",\"拷贝多级目录\",\"long start = System.currentTimeMillis(); String source = \\\"D:\\\\\\\\Snipaste-1.16.2-x64\\\"; String target = \\\"D:\\\\\\\\Snipaste-1.16.2-x64aaa\\\"; Files.walk(Paths.get(source)).forEach(path -> { try { String targetName = path.toString().replace(source, target); // 是目录 if (Files.isDirectory(path)) { Files.createDirectory(Paths.get(targetName)); } // 是普通文件 else if (Files.isRegularFile(path)) { Files.copy(path, Paths.get(targetName)); } } catch (IOException e) { e.printStackTrace(); } }); long end = System.currentTimeMillis(); System.out.println(end - start); \"]},\"366\":{\"h\":\"4. 网络编程\"},\"367\":{\"h\":\"4.1 非阻塞 vs 阻塞\"},\"368\":{\"h\":\"阻塞\",\"t\":[\"阻塞模式下，相关方法都会导致线程暂停 \",\"ServerSocketChannel.accept 会在没有连接建立时让线程暂停\",\"SocketChannel.read 会在没有数据可读时让线程暂停\",\"阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置\",\"单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持\",\"但多线程下，有新的问题，体现在以下方面 \",\"32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低\",\"可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接\",\"服务器端\",\"// 使用 nio 来理解阻塞模式, 单线程 // 0. ByteBuffer ByteBuffer buffer = ByteBuffer.allocate(16); // 1. 创建了服务器 ServerSocketChannel ssc = ServerSocketChannel.open(); // 2. 绑定监听端口 ssc.bind(new InetSocketAddress(8080)); // 3. 连接集合 List<SocketChannel> channels = new ArrayList<>(); while (true) { // 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信 log.debug(\\\"connecting...\\\"); SocketChannel sc = ssc.accept(); // 阻塞方法，线程停止运行 log.debug(\\\"connected... {}\\\", sc); channels.add(sc); for (SocketChannel channel : channels) { // 5. 接收客户端发送的数据 log.debug(\\\"before read... {}\\\", channel); channel.read(buffer); // 阻塞方法，线程停止运行 buffer.flip(); debugRead(buffer); buffer.clear(); log.debug(\\\"after read...{}\\\", channel); } } \",\"客户端\",\"SocketChannel sc = SocketChannel.open(); sc.connect(new InetSocketAddress(\\\"localhost\\\", 8080)); System.out.println(\\\"waiting...\\\"); \"]},\"369\":{\"h\":\"非阻塞\",\"t\":[\"非阻塞模式下，相关方法都会不会让线程暂停 \",\"在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行\",\"SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept\",\"写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去\",\"但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu\",\"数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）\",\"服务器端，客户端代码不变\",\"// 使用 nio 来理解非阻塞模式, 单线程 // 0. ByteBuffer ByteBuffer buffer = ByteBuffer.allocate(16); // 1. 创建了服务器 ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); // 非阻塞模式 // 2. 绑定监听端口 ssc.bind(new InetSocketAddress(8080)); // 3. 连接集合 List<SocketChannel> channels = new ArrayList<>(); while (true) { // 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信 SocketChannel sc = ssc.accept(); // 非阻塞，线程还会继续运行，如果没有连接建立，但sc是null if (sc != null) { log.debug(\\\"connected... {}\\\", sc); sc.configureBlocking(false); // 非阻塞模式 channels.add(sc); } for (SocketChannel channel : channels) { // 5. 接收客户端发送的数据 int read = channel.read(buffer);// 非阻塞，线程仍然会继续运行，如果没有读到数据，read 返回 0 if (read > 0) { buffer.flip(); debugRead(buffer); buffer.clear(); log.debug(\\\"after read...{}\\\", channel); } } } \"]},\"370\":{\"h\":\"多路复用\",\"t\":[\"单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用\",\"多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用\",\"如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证 \",\"有可连接事件时才去连接\",\"有可读事件才去读取\",\"有可写事件才去写入 \",\"限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件\"]},\"371\":{\"h\":\"4.2 Selector\",\"t\":[\"好处\",\"一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功\",\"让这个线程能够被充分利用\",\"节约了线程的数量\",\"减少了线程上下文切换\"]},\"372\":{\"h\":\"创建\",\"t\":[\"Selector selector = Selector.open(); \"]},\"373\":{\"h\":\"绑定 Channel 事件\",\"t\":[\"也称之为注册事件，绑定的事件 selector 才会关心\",\"channel.configureBlocking(false); SelectionKey key = channel.register(selector, 绑定事件); \",\"channel 必须工作在非阻塞模式\",\"FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用\",\"绑定的事件类型可以有 \",\"connect - 客户端连接成功时触发\",\"accept - 服务器端成功接受连接时触发\",\"read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况\",\"write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况\"]},\"374\":{\"h\":\"监听 Channel 事件\",\"t\":[\"可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件\",\"方法1，阻塞直到绑定事件发生\",\"int count = selector.select(); \",\"方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）\",\"int count = selector.select(long timeout); \",\"方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件\",\"int count = selector.selectNow(); \"]},\"375\":{\"h\":\"💡 select 何时不阻塞\",\"t\":[\"事件发生时 \",\"客户端发起连接请求，会触发 accept 事件\",\"客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件\",\"channel 可写，会触发 write 事件\",\"在 linux 下 nio bug 发生时\",\"调用 selector.wakeup()\",\"调用 selector.close()\",\"selector 所在线程 interrupt\"]},\"376\":{\"h\":\"4.3 处理 accept 事件\",\"t\":[\"客户端代码为\",\"public class Client { public static void main(String[] args) { try (Socket socket = new Socket(\\\"localhost\\\", 8080)) { System.out.println(socket); socket.getOutputStream().write(\\\"world\\\".getBytes()); System.in.read(); } catch (IOException e) { e.printStackTrace(); } } } \",\"服务器端代码为\",\"@Slf4j public class ChannelDemo6 { public static void main(String[] args) { try (ServerSocketChannel channel = ServerSocketChannel.open()) { channel.bind(new InetSocketAddress(8080)); System.out.println(channel); Selector selector = Selector.open(); channel.configureBlocking(false); channel.register(selector, SelectionKey.OP_ACCEPT); while (true) { int count = selector.select(); // int count = selector.selectNow(); log.debug(\\\"select count: {}\\\", count); // if(count <= 0) { // continue; // } // 获取所有事件 Set<SelectionKey> keys = selector.selectedKeys(); // 遍历所有事件，逐一处理 Iterator<SelectionKey> iter = keys.iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); // 判断事件类型 if (key.isAcceptable()) { ServerSocketChannel c = (ServerSocketChannel) key.channel(); // 必须处理 SocketChannel sc = c.accept(); log.debug(\\\"{}\\\", sc); } // 处理完毕，必须将事件移除 iter.remove(); } } } catch (IOException e) { e.printStackTrace(); } } } \"]},\"377\":{\"h\":\"💡 事件发生后能否不处理\",\"t\":[\"事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发\"]},\"378\":{\"h\":\"4.4 处理 read 事件\",\"t\":[\"@Slf4j public class ChannelDemo6 { public static void main(String[] args) { try (ServerSocketChannel channel = ServerSocketChannel.open()) { channel.bind(new InetSocketAddress(8080)); System.out.println(channel); Selector selector = Selector.open(); channel.configureBlocking(false); channel.register(selector, SelectionKey.OP_ACCEPT); while (true) { int count = selector.select(); // int count = selector.selectNow(); log.debug(\\\"select count: {}\\\", count); // if(count <= 0) { // continue; // } // 获取所有事件 Set<SelectionKey> keys = selector.selectedKeys(); // 遍历所有事件，逐一处理 Iterator<SelectionKey> iter = keys.iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); // 判断事件类型 if (key.isAcceptable()) { ServerSocketChannel c = (ServerSocketChannel) key.channel(); // 必须处理 SocketChannel sc = c.accept(); sc.configureBlocking(false); sc.register(selector, SelectionKey.OP_READ); log.debug(\\\"连接已建立: {}\\\", sc); } else if (key.isReadable()) { SocketChannel sc = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(128); int read = sc.read(buffer); if(read == -1) { key.cancel(); sc.close(); } else { buffer.flip(); debug(buffer); } } // 处理完毕，必须将事件移除 iter.remove(); } } } catch (IOException e) { e.printStackTrace(); } } } \",\"开启两个客户端，修改一下发送文字，输出\",\"sun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080] 21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1 21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367] 21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 68 65 6c 6c 6f |hello | +--------+-------------------------------------------------+----------------+ 21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1 21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378] 21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 77 6f 72 6c 64 |world | +--------+-------------------------------------------------+----------------+ \"]},\"379\":{\"h\":\"💡 为何要 iter.remove()\",\"t\":[\"因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如\",\"第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey\",\"第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常\"]},\"380\":{\"h\":\"💡 cancel 的作用\",\"t\":[\"cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件\"]},\"381\":{\"h\":\"⚠️ 不处理边界的问题\",\"t\":[\"以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的\",\"public class Server { public static void main(String[] args) throws IOException { ServerSocket ss=new ServerSocket(9000); while (true) { Socket s = ss.accept(); InputStream in = s.getInputStream(); // 这里这么写，有没有问题 byte[] arr = new byte[4]; while(true) { int read = in.read(arr); // 这里这么写，有没有问题 if(read == -1) { break; } System.out.println(new String(arr, 0, read)); } } } } \",\"客户端\",\"public class Client { public static void main(String[] args) throws IOException { Socket max = new Socket(\\\"localhost\\\", 9000); OutputStream out = max.getOutputStream(); out.write(\\\"hello\\\".getBytes()); out.write(\\\"world\\\".getBytes()); out.write(\\\"你好\\\".getBytes()); max.close(); } } \",\"输出\",\"hell owor ld� �好 \",\"为什么？\"]},\"382\":{\"h\":\"处理消息的边界\",\"t\":[\"一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽\",\"另一种思路是按分隔符拆分，缺点是效率低\",\"TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量 \",\"Http 1.1 是 TLV 格式\",\"Http 2.0 是 LTV 格式\",\"服务器端\",\"private static void split(ByteBuffer source) { source.flip(); for (int i = 0; i < source.limit(); i++) { // 找到一条完整消息 if (source.get(i) == '\\\\n') { int length = i + 1 - source.position(); // 把这条完整消息存入新的 ByteBuffer ByteBuffer target = ByteBuffer.allocate(length); // 从 source 读，向 target 写 for (int j = 0; j < length; j++) { target.put(source.get()); } debugAll(target); } } source.compact(); // 0123456789abcdef position 16 limit 16 } public static void main(String[] args) throws IOException { // 1. 创建 selector, 管理多个 channel Selector selector = Selector.open(); ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); // 2. 建立 selector 和 channel 的联系（注册） // SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件 SelectionKey sscKey = ssc.register(selector, 0, null); // key 只关注 accept 事件 sscKey.interestOps(SelectionKey.OP_ACCEPT); log.debug(\\\"sscKey:{}\\\", sscKey); ssc.bind(new InetSocketAddress(8080)); while (true) { // 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行 // select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理 selector.select(); // 4. 处理事件, selectedKeys 内部包含了所有发生的事件 Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); // accept, read while (iter.hasNext()) { SelectionKey key = iter.next(); // 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题 iter.remove(); log.debug(\\\"key: {}\\\", key); // 5. 区分事件类型 if (key.isAcceptable()) { // 如果是 accept ServerSocketChannel channel = (ServerSocketChannel) key.channel(); SocketChannel sc = channel.accept(); sc.configureBlocking(false); ByteBuffer buffer = ByteBuffer.allocate(16); // attachment // 将一个 byteBuffer 作为附件关联到 selectionKey 上 SelectionKey scKey = sc.register(selector, 0, buffer); scKey.interestOps(SelectionKey.OP_READ); log.debug(\\\"{}\\\", sc); log.debug(\\\"scKey:{}\\\", scKey); } else if (key.isReadable()) { // 如果是 read try { SocketChannel channel = (SocketChannel) key.channel(); // 拿到触发事件的channel // 获取 selectionKey 上关联的附件 ByteBuffer buffer = (ByteBuffer) key.attachment(); int read = channel.read(buffer); // 如果是正常断开，read 的方法的返回值是 -1 if(read == -1) { key.cancel(); } else { split(buffer); // 需要扩容 if (buffer.position() == buffer.limit()) { ByteBuffer newBuffer = ByteBuffer.allocate(buffer.capacity() * 2); buffer.flip(); newBuffer.put(buffer); // 0123456789abcdef3333\\\\n key.attach(newBuffer); } } } catch (IOException e) { e.printStackTrace(); key.cancel(); // 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key） } } } } } \",\"客户端\",\"SocketChannel sc = SocketChannel.open(); sc.connect(new InetSocketAddress(\\\"localhost\\\", 8080)); SocketAddress address = sc.getLocalAddress(); // sc.write(Charset.defaultCharset().encode(\\\"hello\\\\nworld\\\\n\\\")); sc.write(Charset.defaultCharset().encode(\\\"0123\\\\n456789abcdef\\\")); sc.write(Charset.defaultCharset().encode(\\\"0123456789abcdef3333\\\\n\\\")); System.in.read(); \"]},\"383\":{\"h\":\"ByteBuffer 大小分配\",\"t\":[\"每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer\",\"ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer \",\"一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 http://tutorials.jenkov.com/java-performance/resizable-array.html\",\"另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗\"]},\"384\":{\"h\":\"4.5 处理 write 事件\"},\"385\":{\"h\":\"一次无法写完例子\",\"t\":[\"非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）\",\"用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略 \",\"当消息处理器第一次写入消息时，才将 channel 注册到 selector 上\",\"selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册\",\"如果不取消，会每次可写均会触发 write 事件\",\"public class WriteServer { public static void main(String[] args) throws IOException { ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); ssc.bind(new InetSocketAddress(8080)); Selector selector = Selector.open(); ssc.register(selector, SelectionKey.OP_ACCEPT); while(true) { selector.select(); Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); iter.remove(); if (key.isAcceptable()) { SocketChannel sc = ssc.accept(); sc.configureBlocking(false); SelectionKey sckey = sc.register(selector, SelectionKey.OP_READ); // 1. 向客户端发送内容 StringBuilder sb = new StringBuilder(); for (int i = 0; i < 3000000; i++) { sb.append(\\\"a\\\"); } ByteBuffer buffer = Charset.defaultCharset().encode(sb.toString()); int write = sc.write(buffer); // 3. write 表示实际写了多少字节 System.out.println(\\\"实际写入字节:\\\" + write); // 4. 如果有剩余未读字节，才需要关注写事件 if (buffer.hasRemaining()) { // read 1 write 4 // 在原有关注事件的基础上，多关注 写事件 sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE); // 把 buffer 作为附件加入 sckey sckey.attach(buffer); } } else if (key.isWritable()) { ByteBuffer buffer = (ByteBuffer) key.attachment(); SocketChannel sc = (SocketChannel) key.channel(); int write = sc.write(buffer); System.out.println(\\\"实际写入字节:\\\" + write); if (!buffer.hasRemaining()) { // 写完了 key.interestOps(key.interestOps() - SelectionKey.OP_WRITE); key.attach(null); } } } } } } \",\"客户端\",\"public class WriteClient { public static void main(String[] args) throws IOException { Selector selector = Selector.open(); SocketChannel sc = SocketChannel.open(); sc.configureBlocking(false); sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ); sc.connect(new InetSocketAddress(\\\"localhost\\\", 8080)); int count = 0; while (true) { selector.select(); Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); iter.remove(); if (key.isConnectable()) { System.out.println(sc.finishConnect()); } else if (key.isReadable()) { ByteBuffer buffer = ByteBuffer.allocate(1024 * 1024); count += sc.read(buffer); buffer.clear(); System.out.println(count); } } } } } \"]},\"386\":{\"h\":\"💡 write 为何要取消\",\"t\":[\"只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注\"]},\"387\":{\"h\":\"4.6 更进一步\"},\"388\":{\"h\":\"💡 利用多线程优化\",\"t\":[\"现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费\",\"前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？\",\"分两组选择器\",\"单线程配一个选择器，专门处理 accept 事件\",\"创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件\",\"public class ChannelDemo7 { public static void main(String[] args) throws IOException { new BossEventLoop().register(); } @Slf4j static class BossEventLoop implements Runnable { private Selector boss; private WorkerEventLoop[] workers; private volatile boolean start = false; AtomicInteger index = new AtomicInteger(); public void register() throws IOException { if (!start) { ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.bind(new InetSocketAddress(8080)); ssc.configureBlocking(false); boss = Selector.open(); SelectionKey ssckey = ssc.register(boss, 0, null); ssckey.interestOps(SelectionKey.OP_ACCEPT); workers = initEventLoops(); new Thread(this, \\\"boss\\\").start(); log.debug(\\\"boss start...\\\"); start = true; } } public WorkerEventLoop[] initEventLoops() { // EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()]; WorkerEventLoop[] workerEventLoops = new WorkerEventLoop[2]; for (int i = 0; i < workerEventLoops.length; i++) { workerEventLoops[i] = new WorkerEventLoop(i); } return workerEventLoops; } @Override public void run() { while (true) { try { boss.select(); Iterator<SelectionKey> iter = boss.selectedKeys().iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); iter.remove(); if (key.isAcceptable()) { ServerSocketChannel c = (ServerSocketChannel) key.channel(); SocketChannel sc = c.accept(); sc.configureBlocking(false); log.debug(\\\"{} connected\\\", sc.getRemoteAddress()); workers[index.getAndIncrement() % workers.length].register(sc); } } } catch (IOException e) { e.printStackTrace(); } } } } @Slf4j static class WorkerEventLoop implements Runnable { private Selector worker; private volatile boolean start = false; private int index; private final ConcurrentLinkedQueue<Runnable> tasks = new ConcurrentLinkedQueue<>(); public WorkerEventLoop(int index) { this.index = index; } public void register(SocketChannel sc) throws IOException { if (!start) { worker = Selector.open(); new Thread(this, \\\"worker-\\\" + index).start(); start = true; } tasks.add(() -> { try { SelectionKey sckey = sc.register(worker, 0, null); sckey.interestOps(SelectionKey.OP_READ); worker.selectNow(); } catch (IOException e) { e.printStackTrace(); } }); worker.wakeup(); } @Override public void run() { while (true) { try { worker.select(); Runnable task = tasks.poll(); if (task != null) { task.run(); } Set<SelectionKey> keys = worker.selectedKeys(); Iterator<SelectionKey> iter = keys.iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); if (key.isReadable()) { SocketChannel sc = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(128); try { int read = sc.read(buffer); if (read == -1) { key.cancel(); sc.close(); } else { buffer.flip(); log.debug(\\\"{} message:\\\", sc.getRemoteAddress()); debugAll(buffer); } } catch (IOException e) { e.printStackTrace(); key.cancel(); sc.close(); } } iter.remove(); } } catch (IOException e) { e.printStackTrace(); } } } } } \"]},\"389\":{\"h\":\"💡 如何拿到 cpu 个数\",\"t\":[\"Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数\",\"这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启\"]},\"390\":{\"h\":\"4.7 UDP\",\"t\":[\"UDP 是无连接的，client 发送数据不会管 server 是否开启\",\"server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃\",\"首先启动服务器端\",\"public class UdpServer { public static void main(String[] args) { try (DatagramChannel channel = DatagramChannel.open()) { channel.socket().bind(new InetSocketAddress(9999)); System.out.println(\\\"waiting...\\\"); ByteBuffer buffer = ByteBuffer.allocate(32); channel.receive(buffer); buffer.flip(); debug(buffer); } catch (IOException e) { e.printStackTrace(); } } } \",\"输出\",\"waiting... \",\"运行客户端\",\"public class UdpClient { public static void main(String[] args) { try (DatagramChannel channel = DatagramChannel.open()) { ByteBuffer buffer = StandardCharsets.UTF_8.encode(\\\"hello\\\"); InetSocketAddress address = new InetSocketAddress(\\\"localhost\\\", 9999); channel.send(buffer, address); } catch (Exception e) { e.printStackTrace(); } } } \",\"接下来服务器端输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 68 65 6c 6c 6f |hello | +--------+-------------------------------------------------+----------------+ \"]},\"391\":{\"h\":\"5. NIO vs BIO\"},\"392\":{\"h\":\"5.1 stream vs channel\",\"t\":[\"stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）\",\"stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用\",\"二者均为全双工，即读写可以同时进行\"]},\"393\":{\"h\":\"5.2 IO 模型\",\"t\":[\"同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞\",\"同步：线程自己去获取结果（一个线程）\",\"异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）\",\"当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：\",\"等待数据阶段\",\"复制数据阶段\",\"阻塞 IO\",\"非阻塞 IO\",\"多路复用\",\"信号驱动\",\"异步 IO\",\"阻塞 IO vs 多路复用\"]},\"394\":{\"h\":\"🔖 参考\",\"t\":[\"UNIX 网络编程 - 卷 I\"]},\"395\":{\"h\":\"5.3 零拷贝\"},\"396\":{\"h\":\"传统 IO 问题\",\"t\":[\"传统的 IO 将一个文件通过 socket 写出\",\"File f = new File(\\\"helloword/data.txt\\\"); RandomAccessFile file = new RandomAccessFile(file, \\\"r\\\"); byte[] buf = new byte[(int)f.length()]; file.read(buf); Socket socket = ...; socket.getOutputStream().write(buf); \",\"内部工作流程是这样的：\",\"java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的用户态切换至内核态，去调用操作系统（Kernel）的读能力，将数据读入内核缓冲区。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu\",\"DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO\",\"从内核态切换回用户态，将数据从内核缓冲区读入用户缓冲区（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA\",\"调用 write 方法，这时将数据从用户缓冲区（byte[] buf）写入 socket 缓冲区，cpu 会参与拷贝\",\"接下来要向网卡写数据，这项能力 java 又不具备，因此又得从用户态切换至内核态，调用操作系统的写能力，使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 cpu\",\"可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的\",\"用户态与内核态的切换发生了 3 次，这个操作比较重量级\",\"数据拷贝了共 4 次\"]},\"397\":{\"h\":\"NIO 优化\",\"t\":[\"通过 DirectByteBuf\",\"ByteBuffer.allocate(10) HeapByteBuffer 使用的还是 java 内存\",\"ByteBuffer.allocateDirect(10) DirectByteBuffer 使用的是操作系统内存\",\"大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用\",\"这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写\",\"java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步 \",\"DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列\",\"通过专门线程访问引用队列，根据虚引用释放堆外内存\",\"减少了一次数据拷贝，用户态与内核态的切换次数没有减少\",\"进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据\",\"java 调用 transferTo 方法后，要从 java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不会使用 cpu\",\"数据从内核缓冲区传输到 socket 缓冲区，cpu 会参与拷贝\",\"最后使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 cpu\",\"可以看到\",\"只发生了一次用户态与内核态的切换\",\"数据拷贝了 3 次\",\"进一步优化（linux 2.4）\",\"java 调用 transferTo 方法后，要从 java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不会使用 cpu\",\"只会将一些 offset 和 length 信息拷入 socket 缓冲区，几乎无消耗\",\"使用 DMA 将 内核缓冲区的数据写入网卡，不会使用 cpu\",\"整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有\",\"更少的用户态与内核态的切换\",\"不利用 cpu 计算，减少 cpu 缓存伪共享\",\"零拷贝适合小文件传输\"]},\"398\":{\"h\":\"5.3 AIO\",\"t\":[\"AIO 用来解决数据复制阶段的阻塞问题\",\"同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置\",\"异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果\",\"异步模型需要底层操作系统（Kernel）提供支持\",\"Windows 系统通过 IOCP 实现了真正的异步 IO\",\"Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势\"]},\"399\":{\"h\":\"文件 AIO\",\"t\":[\"先来看看 AsynchronousFileChannel\",\"@Slf4j public class AioDemo1 { public static void main(String[] args) throws IOException { try{ AsynchronousFileChannel s = AsynchronousFileChannel.open( Paths.get(\\\"1.txt\\\"), StandardOpenOption.READ); ByteBuffer buffer = ByteBuffer.allocate(2); log.debug(\\\"begin...\\\"); s.read(buffer, 0, null, new CompletionHandler<Integer, ByteBuffer>() { @Override public void completed(Integer result, ByteBuffer attachment) { log.debug(\\\"read completed...{}\\\", result); buffer.flip(); debug(buffer); } @Override public void failed(Throwable exc, ByteBuffer attachment) { log.debug(\\\"read failed...\\\"); } }); } catch (IOException e) { e.printStackTrace(); } log.debug(\\\"do other things...\\\"); System.in.read(); } } \",\"输出\",\"13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin... 13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things... 13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 61 0d |a. | +--------+-------------------------------------------------+----------------+ \",\"可以看到\",\"响应文件读取成功的是另一个线程 Thread-5\",\"主线程并没有 IO 操作阻塞\"]},\"400\":{\"h\":\"💡 守护线程\",\"t\":[\"默认文件 AIO 使用的线程都是守护线程，所以最后要执行 System.in.read() 以避免守护线程意外结束\"]},\"401\":{\"h\":\"网络 AIO\",\"t\":[\"public class AioServer { public static void main(String[] args) throws IOException { AsynchronousServerSocketChannel ssc = AsynchronousServerSocketChannel.open(); ssc.bind(new InetSocketAddress(8080)); ssc.accept(null, new AcceptHandler(ssc)); System.in.read(); } private static void closeChannel(AsynchronousSocketChannel sc) { try { System.out.printf(\\\"[%s] %s close\\\\n\\\", Thread.currentThread().getName(), sc.getRemoteAddress()); sc.close(); } catch (IOException e) { e.printStackTrace(); } } private static class ReadHandler implements CompletionHandler<Integer, ByteBuffer> { private final AsynchronousSocketChannel sc; public ReadHandler(AsynchronousSocketChannel sc) { this.sc = sc; } @Override public void completed(Integer result, ByteBuffer attachment) { try { if (result == -1) { closeChannel(sc); return; } System.out.printf(\\\"[%s] %s read\\\\n\\\", Thread.currentThread().getName(), sc.getRemoteAddress()); attachment.flip(); System.out.println(Charset.defaultCharset().decode(attachment)); attachment.clear(); // 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件 sc.read(attachment, attachment, this); } catch (IOException e) { e.printStackTrace(); } } @Override public void failed(Throwable exc, ByteBuffer attachment) { closeChannel(sc); exc.printStackTrace(); } } private static class WriteHandler implements CompletionHandler<Integer, ByteBuffer> { private final AsynchronousSocketChannel sc; private WriteHandler(AsynchronousSocketChannel sc) { this.sc = sc; } @Override public void completed(Integer result, ByteBuffer attachment) { // 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容 if (attachment.hasRemaining()) { sc.write(attachment); } } @Override public void failed(Throwable exc, ByteBuffer attachment) { exc.printStackTrace(); closeChannel(sc); } } private static class AcceptHandler implements CompletionHandler<AsynchronousSocketChannel, Object> { private final AsynchronousServerSocketChannel ssc; public AcceptHandler(AsynchronousServerSocketChannel ssc) { this.ssc = ssc; } @Override public void completed(AsynchronousSocketChannel sc, Object attachment) { try { System.out.printf(\\\"[%s] %s connected\\\\n\\\", Thread.currentThread().getName(), sc.getRemoteAddress()); } catch (IOException e) { e.printStackTrace(); } ByteBuffer buffer = ByteBuffer.allocate(16); // 读事件由 ReadHandler 处理 sc.read(buffer, buffer, new ReadHandler(sc)); // 写事件由 WriteHandler 处理 sc.write(Charset.defaultCharset().encode(\\\"server hello!\\\"), ByteBuffer.allocate(16), new WriteHandler(sc)); // 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件 ssc.accept(null, this); } @Override public void failed(Throwable exc, Object attachment) { exc.printStackTrace(); } } } \"]},\"402\":{\"h\":\"Netty 入门\"},\"403\":{\"h\":\"1. 概述\"},\"404\":{\"h\":\"1.1 Netty 是什么？\",\"t\":[\"Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. \",\"Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\"]},\"405\":{\"h\":\"1.2 Netty 的作者\",\"t\":[\"他还是另一个著名网络应用框架 Mina 的重要贡献者\"]},\"406\":{\"h\":\"1.3 Netty 的地位\",\"t\":[\"Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\",\"以下的框架都使用了 Netty，因为它们有网络通信需求！\",\"Cassandra - nosql 数据库\",\"Spark - 大数据分布式计算框架\",\"Hadoop - 大数据分布式存储框架\",\"RocketMQ - ali 开源的消息队列\",\"ElasticSearch - 搜索引擎\",\"gRPC - rpc 框架\",\"Dubbo - rpc 框架\",\"Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\",\"Zookeeper - 分布式协调框架\"]},\"407\":{\"h\":\"1.4 Netty 的优势\",\"t\":[\"Netty vs NIO，工作量大，bug 多 \",\"需要自己构建协议\",\"解决 TCP 传输问题，如粘包、半包\",\"epoll 空轮询导致 CPU 100%\",\"对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\",\"Netty vs 其它网络应用框架 \",\"Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\",\"久经考验，16年，Netty 版本 \",\"2.x 2004\",\"3.x 2008\",\"4.x 2013\",\"5.x 已废弃（没有明显的性能提升，维护成本高）\"]},\"408\":{\"h\":\"2. Hello World\"},\"409\":{\"h\":\"2.1 目标\",\"t\":[\"开发一个简单的服务器端和客户端\",\"客户端向服务器端发送 hello, world\",\"服务器仅接收，不返回\",\"加入依赖\",\"<dependency> <groupId>io.netty</groupId> <artifactId>netty-all</artifactId> <version>4.1.39.Final</version> </dependency> \"]},\"410\":{\"h\":\"2.2 服务器端\",\"t\":[\"new ServerBootstrap() .group(new NioEventLoopGroup()) // 1 .channel(NioServerSocketChannel.class) // 2 .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3 protected void initChannel(NioSocketChannel ch) { ch.pipeline().addLast(new StringDecoder()); // 5 ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6 @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) { System.out.println(msg); } }); } }) .bind(8080); // 4 \",\"代码解读\",\"1 处，创建 NioEventLoopGroup，可以简单理解为 线程池 + Selector 后面会详细展开\",\"2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有\",\"3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\",\"4 处，ServerSocketChannel 绑定的监听端口\",\"5 处，SocketChannel 的处理器，解码 ByteBuf => String\",\"6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果\"]},\"411\":{\"h\":\"2.3 客户端\",\"t\":[\"new Bootstrap() .group(new NioEventLoopGroup()) // 1 .channel(NioSocketChannel.class) // 2 .handler(new ChannelInitializer<Channel>() { // 3 @Override protected void initChannel(Channel ch) { ch.pipeline().addLast(new StringEncoder()); // 8 } }) .connect(\\\"127.0.0.1\\\", 8080) // 4 .sync() // 5 .channel() // 6 .writeAndFlush(new Date() + \\\": hello world!\\\"); // 7 \",\"代码解读\",\"1 处，创建 NioEventLoopGroup，同 Server\",\"2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有\",\"3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\",\"4 处，指定要连接的服务器和端口\",\"5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕\",\"6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作\",\"7 处，写入消息并清空缓冲区\",\"8 处，消息会经过通道 handler 处理，这里是将 String => ByteBuf 发出\",\"数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程\"]},\"412\":{\"h\":\"2.4 流程梳理\"},\"413\":{\"h\":\"💡 提示\",\"t\":[\"一开始需要树立正确的观念\",\"把 channel 理解为数据的通道\",\"把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf\",\"把 handler 理解为数据的处理工序 \",\"工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成...）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）\",\"handler 分 Inbound 和 Outbound 两类\",\"把 eventLoop 理解为处理数据的工人 \",\"工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）\",\"工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务\",\"工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人\"]},\"414\":{\"h\":\"3. 组件\"},\"415\":{\"h\":\"3.1 EventLoop\",\"t\":[\"事件循环对象\",\"EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。\",\"它的继承关系比较复杂\",\"一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法\",\"另一条线是继承自 netty 自己的 OrderedEventExecutor， \",\"提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop\",\"提供了 parent 方法来看看自己属于哪个 EventLoopGroup\",\"事件循环组\",\"EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）\",\"继承自 netty 自己的 EventExecutorGroup \",\"实现了 Iterable 接口提供遍历 EventLoop 的能力\",\"另有 next 方法获取集合中下一个 EventLoop\",\"以一个简单的实现为例：\",\"// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程 DefaultEventLoopGroup group = new DefaultEventLoopGroup(2); System.out.println(group.next()); System.out.println(group.next()); System.out.println(group.next()); \",\"输出\",\"io.netty.channel.DefaultEventLoop@60f82f98 io.netty.channel.DefaultEventLoop@35f983a6 io.netty.channel.DefaultEventLoop@60f82f98 \",\"也可以使用 for 循环\",\"DefaultEventLoopGroup group = new DefaultEventLoopGroup(2); for (EventExecutor eventLoop : group) { System.out.println(eventLoop); } \",\"输出\",\"io.netty.channel.DefaultEventLoop@60f82f98 io.netty.channel.DefaultEventLoop@35f983a6 \"]},\"416\":{\"h\":\"💡 优雅关闭\",\"t\":[\"优雅关闭 shutdownGracefully 方法。该方法会首先切换 EventLoopGroup 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的\"]},\"417\":{\"h\":\"演示 NioEventLoop 处理 io 事件\",\"t\":[\"服务器端两个 nio worker 工人\",\"new ServerBootstrap() .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2)) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<NioSocketChannel>() { @Override protected void initChannel(NioSocketChannel ch) { ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null; if (byteBuf != null) { byte[] buf = new byte[16]; ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes()); log.debug(new String(buf)); } } }); } }).bind(8080).sync(); \",\"客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\",\"public static void main(String[] args) throws InterruptedException { Channel channel = new Bootstrap() .group(new NioEventLoopGroup(1)) .handler(new ChannelInitializer<NioSocketChannel>() { @Override protected void initChannel(NioSocketChannel ch) throws Exception { System.out.println(\\\"init...\\\"); ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); } }) .channel(NioSocketChannel.class).connect(\\\"localhost\\\", 8080) .sync() .channel(); channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\\\"wangwu\\\".getBytes())); Thread.sleep(2000); channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\\\"wangwu\\\".getBytes())); \",\"最后输出\",\"22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan 22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan 22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi 22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi 22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu 22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu \",\"可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定\",\"再增加两个非 nio 工人\",\"DefaultEventLoopGroup normalWorkers = new DefaultEventLoopGroup(2); new ServerBootstrap() .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2)) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<NioSocketChannel>() { @Override protected void initChannel(NioSocketChannel ch) { ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(normalWorkers,\\\"myhandler\\\", new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null; if (byteBuf != null) { byte[] buf = new byte[16]; ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes()); log.debug(new String(buf)); } } }); } }).bind(8080).sync(); \",\"客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\",\"输出\",\"22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED 22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE 22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 7a 68 61 6e 67 73 61 6e |zhangsan | +--------+-------------------------------------------------+----------------+ 22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE 22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan 22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 7a 68 61 6e 67 73 61 6e |zhangsan | +--------+-------------------------------------------------+----------------+ 22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE 22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan 22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED 22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE 22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 6c 69 73 69 |lisi | +--------+-------------------------------------------------+----------------+ 22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE 22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi 22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 6c 69 73 69 |lisi | +--------+-------------------------------------------------+----------------+ 22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE 22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi 22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED 22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE 22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 77 61 6e 67 77 75 |wangwu | +--------+-------------------------------------------------+----------------+ 22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE 22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu 22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 77 61 6e 67 77 75 |wangwu | +--------+-------------------------------------------------+----------------+ 22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE 22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu \",\"可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）\"]},\"418\":{\"h\":\"💡 handler 执行中如何换人？\",\"t\":[\"关键代码 io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()\",\"static void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) { final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \\\"msg\\\"), next); // 下一个 handler 的事件循环是否与当前的事件循环是同一个线程 EventExecutor executor = next.executor(); // 是，直接调用 if (executor.inEventLoop()) { next.invokeChannelRead(m); } // 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人） else { executor.execute(new Runnable() { @Override public void run() { next.invokeChannelRead(m); } }); } } \",\"如果两个 handler 绑定的是同一个线程，那么就直接调用\",\"否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用\"]},\"419\":{\"h\":\"演示 NioEventLoop 处理普通任务\",\"t\":[\"NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务\",\"NioEventLoopGroup nioWorkers = new NioEventLoopGroup(2); log.debug(\\\"server start...\\\"); Thread.sleep(2000); nioWorkers.execute(()->{ log.debug(\\\"normal task...\\\"); }); \",\"输出\",\"22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start... 22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task... \",\"可以用来执行耗时较长的任务\"]},\"420\":{\"h\":\"演示 NioEventLoop 处理定时任务\",\"t\":[\"NioEventLoopGroup nioWorkers = new NioEventLoopGroup(2); log.debug(\\\"server start...\\\"); Thread.sleep(2000); nioWorkers.scheduleAtFixedRate(() -> { log.debug(\\\"running...\\\"); }, 0, 1, TimeUnit.SECONDS); \",\"输出\",\"22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start... 22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running... 22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running... 22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running... 22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running... ... \",\"可以用来执行定时任务\"]},\"421\":{\"h\":\"3.2 Channel\",\"t\":[\"channel 的主要作用\",\"close() 可以用来关闭 channel\",\"closeFuture() 用来处理 channel 的关闭 \",\"sync 方法作用是同步等待 channel 关闭\",\"而 addListener 方法是异步等待 channel 关闭\",\"pipeline() 方法添加处理器\",\"write() 方法将数据写入\",\"writeAndFlush() 方法将数据写入并刷出\"]},\"422\":{\"h\":\"ChannelFuture\",\"t\":[\"这时刚才的客户端代码\",\"new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<Channel>() { @Override protected void initChannel(Channel ch) { ch.pipeline().addLast(new StringEncoder()); } }) .connect(\\\"127.0.0.1\\\", 8080) .sync() .channel() .writeAndFlush(new Date() + \\\": hello world!\\\"); \",\"现在把它拆开来看\",\"ChannelFuture channelFuture = new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<Channel>() { @Override protected void initChannel(Channel ch) { ch.pipeline().addLast(new StringEncoder()); } }) .connect(\\\"127.0.0.1\\\", 8080); // 1 channelFuture.sync().channel().writeAndFlush(new Date() + \\\": hello world!\\\"); \",\"1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象\",\"注意 connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象\",\"实验如下：\",\"ChannelFuture channelFuture = new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<Channel>() { @Override protected void initChannel(Channel ch) { ch.pipeline().addLast(new StringEncoder()); } }) .connect(\\\"127.0.0.1\\\", 8080); System.out.println(channelFuture.channel()); // 1 channelFuture.sync(); // 2 System.out.println(channelFuture.channel()); // 3 \",\"执行到 1 时，连接未建立，打印 [id: 0x2e1884dd]\",\"执行到 2 时，sync 方法是同步等待连接建立完成\",\"执行到 3 时，连接肯定建立了，打印 [id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]\",\"除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：\",\"ChannelFuture channelFuture = new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<Channel>() { @Override protected void initChannel(Channel ch) { ch.pipeline().addLast(new StringEncoder()); } }) .connect(\\\"127.0.0.1\\\", 8080); System.out.println(channelFuture.channel()); // 1 channelFuture.addListener((ChannelFutureListener) future -> { System.out.println(future.channel()); // 2 }); \",\"执行到 1 时，连接未建立，打印 [id: 0x749124ba]\",\"ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 [id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]\"]},\"423\":{\"h\":\"CloseFuture\",\"t\":[\"@Slf4j public class CloseFutureClient { public static void main(String[] args) throws InterruptedException { NioEventLoopGroup group new NioEventLoopGroup(); ChannelFuture channelFuture = new Bootstrap() .group(group) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<NioSocketChannel>() { @Override // 在连接建立后被调用 protected void initChannel(NioSocketChannel ch) throws Exception { ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new StringEncoder()); } }) .connect(new InetSocketAddress(\\\"localhost\\\", 8080)); Channel channel = channelFuture.sync().channel(); log.debug(\\\"{}\\\", channel); new Thread(()->{ Scanner scanner = new Scanner(System.in); while (true) { String line = scanner.nextLine(); if (\\\"q\\\".equals(line)) { channel.close(); // close 异步操作 1s 之后 // log.debug(\\\"处理关闭之后的操作\\\"); // 不能在这里善后 break; } channel.writeAndFlush(line); } }, \\\"input\\\").start(); // 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭 ChannelFuture closeFuture = channel.closeFuture(); /*log.debug(\\\"waiting close...\\\"); closeFuture.sync(); log.debug(\\\"处理关闭之后的操作\\\");*/ closeFuture.addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { log.debug(\\\"处理关闭之后的操作\\\"); group.shutdownGracefully(); } }); } } \"]},\"424\":{\"h\":\"💡 异步提升的是什么\",\"t\":[\"有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接\",\"还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的\",\"思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：4 * 8 * 3 = 96\",\"经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下\",\"因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 4 * 8 * 12 效率几乎是原来的四倍\",\"要点\",\"单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势\",\"异步并没有缩短响应时间，反而有所增加\",\"合理进行任务拆分，也是利用异步的关键\"]},\"425\":{\"h\":\"3.3 Future & Promise\",\"t\":[\"在异步处理时，经常用到这两个接口\",\"首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展\",\"jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果\",\"netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束\",\"netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器\",\"功能/名称\",\"jdk Future\",\"netty Future\",\"Promise\",\"cancel\",\"取消任务\",\"-\",\"-\",\"isCanceled\",\"任务是否取消\",\"-\",\"-\",\"isDone\",\"任务是否完成，不能区分成功失败\",\"-\",\"-\",\"get\",\"获取任务结果，阻塞等待\",\"-\",\"-\",\"getNow\",\"-\",\"获取任务结果，非阻塞，还未产生结果时返回 null\",\"-\",\"await\",\"-\",\"等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断\",\"-\",\"sync\",\"-\",\"等待任务结束，如果任务失败，抛出异常\",\"-\",\"isSuccess\",\"-\",\"判断任务是否成功\",\"-\",\"cause\",\"-\",\"获取失败信息，非阻塞，如果没有失败，返回null\",\"-\",\"addLinstener\",\"-\",\"添加回调，异步接收结果\",\"-\",\"setSuccess\",\"-\",\"-\",\"设置成功结果\",\"setFailure\",\"-\",\"-\",\"设置失败结果\"]},\"426\":{\"h\":\"例1\",\"t\":[\"同步处理任务成功\",\"DefaultEventLoop eventExecutors = new DefaultEventLoop(); DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors); eventExecutors.execute(()->{ try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } log.debug(\\\"set success, {}\\\",10); promise.setSuccess(10); }); log.debug(\\\"start...\\\"); log.debug(\\\"{}\\\",promise.getNow()); // 还没有结果 log.debug(\\\"{}\\\",promise.get()); \",\"输出\",\"11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start... 11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null 11:51:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10 11:51:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - 10 \"]},\"427\":{\"h\":\"例2\",\"t\":[\"异步处理任务成功\",\"DefaultEventLoop eventExecutors = new DefaultEventLoop(); DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors); // 设置回调，异步接收结果 promise.addListener(future -> { // 这里的 future 就是上面的 promise log.debug(\\\"{}\\\",future.getNow()); }); // 等待 1000 后设置成功结果 eventExecutors.execute(()->{ try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } log.debug(\\\"set success, {}\\\",10); promise.setSuccess(10); }); log.debug(\\\"start...\\\"); \",\"输出\",\"11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start... 11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10 11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10 \"]},\"428\":{\"h\":\"例3\",\"t\":[\"同步处理任务失败 - sync & get\",\"DefaultEventLoop eventExecutors = new DefaultEventLoop(); DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors); eventExecutors.execute(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } RuntimeException e = new RuntimeException(\\\"error...\\\"); log.debug(\\\"set failure, {}\\\", e.toString()); promise.setFailure(e); }); log.debug(\\\"start...\\\"); log.debug(\\\"{}\\\", promise.getNow()); promise.get(); // sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常 \",\"输出\",\"12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start... 12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null 12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error... Exception in thread \\\"main\\\" java.util.concurrent.ExecutionException: java.lang.RuntimeException: error... at io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41) at com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34) Caused by: java.lang.RuntimeException: error... at com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27) at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:745) \"]},\"429\":{\"h\":\"例4\",\"t\":[\"同步处理任务失败 - await\",\"DefaultEventLoop eventExecutors = new DefaultEventLoop(); DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors); eventExecutors.execute(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } RuntimeException e = new RuntimeException(\\\"error...\\\"); log.debug(\\\"set failure, {}\\\", e.toString()); promise.setFailure(e); }); log.debug(\\\"start...\\\"); log.debug(\\\"{}\\\", promise.getNow()); promise.await(); // 与 sync 和 get 区别在于，不会抛异常 log.debug(\\\"result {}\\\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString()); \",\"输出\",\"12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start... 12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null 12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error... 12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error... \"]},\"430\":{\"h\":\"例5\",\"t\":[\"异步处理任务失败\",\"DefaultEventLoop eventExecutors = new DefaultEventLoop(); DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors); promise.addListener(future -> { log.debug(\\\"result {}\\\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString()); }); eventExecutors.execute(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } RuntimeException e = new RuntimeException(\\\"error...\\\"); log.debug(\\\"set failure, {}\\\", e.toString()); promise.setFailure(e); }); log.debug(\\\"start...\\\"); \",\"输出\",\"12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start... 12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error... 12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error... \"]},\"431\":{\"h\":\"例6\",\"t\":[\"await 死锁检查\",\"DefaultEventLoop eventExecutors = new DefaultEventLoop(); DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors); eventExecutors.submit(()->{ System.out.println(\\\"1\\\"); try { promise.await(); // 注意不能仅捕获 InterruptedException 异常 // 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播 // 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出 } catch (Exception e) { e.printStackTrace(); } System.out.println(\\\"2\\\"); }); eventExecutors.submit(()->{ System.out.println(\\\"3\\\"); try { promise.await(); } catch (Exception e) { e.printStackTrace(); } System.out.println(\\\"4\\\"); }); \",\"输出\",\"1 2 3 4 io.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete) at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384) at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212) at com.itcast.oio.DefaultPromiseTest.lambda$main$0(DefaultPromiseTest.java:27) at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38) at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73) at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:745) io.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete) at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384) at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212) at com.itcast.oio.DefaultPromiseTest.lambda$main$1(DefaultPromiseTest.java:36) at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38) at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73) at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:745) \"]},\"432\":{\"h\":\"3.4 Handler & Pipeline\",\"t\":[\"ChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline\",\"入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果\",\"出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工\",\"打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品\",\"先搞清楚顺序，服务端\",\"new ServerBootstrap() .group(new NioEventLoopGroup()) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<NioSocketChannel>() { protected void initChannel(NioSocketChannel ch) { ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(1); ctx.fireChannelRead(msg); // 1 } }); ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(2); ctx.fireChannelRead(msg); // 2 } }); ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(3); ctx.channel().write(msg); // 3 } }); ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){ @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) { System.out.println(4); ctx.write(msg, promise); // 4 } }); ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){ @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) { System.out.println(5); ctx.write(msg, promise); // 5 } }); ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){ @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) { System.out.println(6); ctx.write(msg, promise); // 6 } }); } }) .bind(8080); \",\"客户端\",\"new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<Channel>() { @Override protected void initChannel(Channel ch) { ch.pipeline().addLast(new StringEncoder()); } }) .connect(\\\"127.0.0.1\\\", 8080) .addListener((ChannelFutureListener) future -> { future.channel().writeAndFlush(\\\"hello,world\\\"); }); \",\"服务器端打印：\",\"1 2 3 6 5 4 \",\"可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表\",\"入站处理器中，ctx.fireChannelRead(msg) 是 调用下一个入站处理器\",\"如果注释掉 1 处代码，则仅会打印 1\",\"如果注释掉 2 处代码，则仅会打印 1 2\",\"3 处的 ctx.channel().write(msg) 会 从尾部开始触发 后续出站处理器的执行 \",\"如果注释掉 3 处代码，则仅会打印 1 2 3\",\"类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 触发上一个出站处理器\",\"如果注释掉 6 处代码，则仅会打印 1 2 3 6\",\"ctx.channel().write(msg) vs ctx.write(msg) \",\"都是触发出站处理器的执行\",\"ctx.channel().write(msg) 从尾部开始查找出站处理器\",\"ctx.write(msg) 是从当前节点找上一个出站处理器\",\"3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了\",\"6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6... 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己\",\"图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序\"]},\"433\":{\"h\":\"3.5 ByteBuf\",\"t\":[\"是对字节数据的封装\"]},\"434\":{\"h\":\"1）创建\",\"t\":[\"ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(10); log(buffer); \",\"上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10\",\"输出\",\"read index:0 write index:0 capacity:10 \",\"其中 log 方法参考如下\",\"private static void log(ByteBuf buffer) { int length = buffer.readableBytes(); int rows = length / 16 + (length % 15 == 0 ? 0 : 1) + 4; StringBuilder buf = new StringBuilder(rows * 80 * 2) .append(\\\"read index:\\\").append(buffer.readerIndex()) .append(\\\" write index:\\\").append(buffer.writerIndex()) .append(\\\" capacity:\\\").append(buffer.capacity()) .append(NEWLINE); appendPrettyHexDump(buf, buffer); System.out.println(buf.toString()); } \"]},\"435\":{\"h\":\"2）直接内存 vs 堆内存\",\"t\":[\"可以使用下面的代码来创建池化基于堆的 ByteBuf\",\"ByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer(10); \",\"也可以使用下面的代码来创建池化基于直接内存的 ByteBuf\",\"ByteBuf buffer = ByteBufAllocator.DEFAULT.directBuffer(10); \",\"直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用\",\"直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放\"]},\"436\":{\"h\":\"3）池化 vs 非池化\",\"t\":[\"池化的最大意义在于可以重用 ByteBuf，优点有\",\"没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力\",\"有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率\",\"高并发时，池化功能更节约内存，减少内存溢出的可能\",\"池化功能是否开启，可以通过下面的系统环境变量来设置\",\"-Dio.netty.allocator.type={unpooled|pooled} \",\"4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现\",\"4.1 之前，池化功能还不成熟，默认是非池化实现\"]},\"437\":{\"h\":\"4）组成\",\"t\":[\"ByteBuf 由四部分组成\",\"最开始读写指针都在 0 位置\"]},\"438\":{\"h\":\"5）写入\",\"t\":[\"方法列表，省略一些不重要的方法\",\"方法签名\",\"含义\",\"备注\",\"writeBoolean(boolean value)\",\"写入 boolean 值\",\"用一字节 01|00 代表 true|false\",\"writeByte(int value)\",\"写入 byte 值\",\"writeShort(int value)\",\"写入 short 值\",\"writeInt(int value)\",\"写入 int 值\",\"Big Endian，即 0x250，写入后 00 00 02 50\",\"writeIntLE(int value)\",\"写入 int 值\",\"Little Endian，即 0x250，写入后 50 02 00 00\",\"writeLong(long value)\",\"写入 long 值\",\"writeChar(int value)\",\"写入 char 值\",\"writeFloat(float value)\",\"写入 float 值\",\"writeDouble(double value)\",\"写入 double 值\",\"writeBytes(ByteBuf src)\",\"写入 netty 的 ByteBuf\",\"writeBytes(byte[] src)\",\"写入 byte[]\",\"writeBytes(ByteBuffer src)\",\"写入 nio 的 ByteBuffer\",\"int writeCharSequence(CharSequence sequence, Charset charset)\",\"写入字符串\",\"注意\",\"这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用\",\"网络传输，默认习惯是 Big Endian\",\"先写入 4 个字节\",\"buffer.writeBytes(new byte[]{1, 2, 3, 4}); log(buffer); \",\"结果是\",\"read index:0 write index:4 capacity:10 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 |.... | +--------+-------------------------------------------------+----------------+ \",\"再写入一个 int 整数，也是 4 个字节\",\"buffer.writeInt(5); log(buffer); \",\"结果是\",\"read index:0 write index:8 capacity:10 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 00 00 00 05 |........ | +--------+-------------------------------------------------+----------------+ \",\"还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置\"]},\"439\":{\"h\":\"6）扩容\",\"t\":[\"再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容\",\"buffer.writeInt(6); log(buffer); \",\"扩容规则是\",\"如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16\",\"如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10=1024（2^9=512 已经不够了）\",\"扩容不能超过 max capacity 会报错\",\"结果是\",\"read index:0 write index:12 capacity:16 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 00 00 00 05 00 00 00 06 |............ | +--------+-------------------------------------------------+----------------+ \"]},\"440\":{\"h\":\"7）读取\",\"t\":[\"例如读了 4 次，每次一个字节\",\"System.out.println(buffer.readByte()); System.out.println(buffer.readByte()); System.out.println(buffer.readByte()); System.out.println(buffer.readByte()); log(buffer); \",\"读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分\",\"1 2 3 4 read index:4 write index:12 capacity:16 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 00 00 00 05 00 00 00 06 |........ | +--------+-------------------------------------------------+----------------+ \",\"如果需要重复读取 int 整数 5，怎么办？\",\"可以在 read 前先做个标记 mark\",\"buffer.markReaderIndex(); System.out.println(buffer.readInt()); log(buffer); \",\"结果\",\"5 read index:8 write index:12 capacity:16 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 00 00 00 06 |.... | +--------+-------------------------------------------------+----------------+ \",\"这时要重复读取的话，重置到标记位置 reset\",\"buffer.resetReaderIndex(); log(buffer); \",\"这时\",\"read index:4 write index:12 capacity:16 +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 00 00 00 05 00 00 00 06 |........ | +--------+-------------------------------------------------+----------------+ \",\"还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index\"]},\"441\":{\"h\":\"8）retain & release\",\"t\":[\"由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。\",\"UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可\",\"UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存\",\"PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存\",\"回收内存的源码实现，请关注下面方法的不同实现\",\"protected abstract void deallocate()\",\"Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口\",\"每个 ByteBuf 对象的初始计数为 1\",\"调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收\",\"调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收\",\"当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用\",\"谁来负责 release 呢？\",\"不是我们想象的（一般情况下）\",\"ByteBuf buf = ... try { ... } finally { buf.release(); } \",\"请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）\",\"基本规则是，谁是最后使用者，谁负责 release，详细分析如下\",\"起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）\",\"入站 ByteBuf 处理原则 \",\"对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release\",\"将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release\",\"如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release\",\"注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release\",\"假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）\",\"出站 ByteBuf 处理原则 \",\"出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release\",\"异常处理原则 \",\"有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true\",\"TailContext 释放未处理消息逻辑\",\"// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object) protected void onUnhandledInboundMessage(Object msg) { try { logger.debug( \\\"Discarded inbound message {} that reached at the tail of the pipeline. \\\" + \\\"Please check your pipeline configuration.\\\", msg); } finally { ReferenceCountUtil.release(msg); } } \",\"具体代码\",\"// io.netty.util.ReferenceCountUtil#release(java.lang.Object) public static boolean release(Object msg) { if (msg instanceof ReferenceCounted) { return ((ReferenceCounted) msg).release(); } return false; } \"]},\"442\":{\"h\":\"9）slice\",\"t\":[\"【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针\",\"例，原始 ByteBuf 进行一些初始操作\",\"ByteBuf origin = ByteBufAllocator.DEFAULT.buffer(10); origin.writeBytes(new byte[]{1, 2, 3, 4}); origin.readByte(); System.out.println(ByteBufUtil.prettyHexDump(origin)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 02 03 04 |... | +--------+-------------------------------------------------+----------------+ \",\"这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write\",\"ByteBuf slice = origin.slice(); System.out.println(ByteBufUtil.prettyHexDump(slice)); // slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常 \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 02 03 04 |... | +--------+-------------------------------------------------+----------------+ \",\"如果原始 ByteBuf 再次读操作（又读了一个字节）\",\"origin.readByte(); System.out.println(ByteBufUtil.prettyHexDump(origin)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 03 04 |.. | +--------+-------------------------------------------------+----------------+ \",\"这时的 slice 不受影响，因为它有独立的读写指针\",\"System.out.println(ByteBufUtil.prettyHexDump(slice)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 02 03 04 |... | +--------+-------------------------------------------------+----------------+ \",\"如果 slice 的内容发生了更改\",\"slice.setByte(2, 5); System.out.println(ByteBufUtil.prettyHexDump(slice)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 02 03 05 |... | +--------+-------------------------------------------------+----------------+ \",\"这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存\",\"System.out.println(ByteBufUtil.prettyHexDump(origin)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 03 05 |.. | +--------+-------------------------------------------------+----------------+ \"]},\"443\":{\"h\":\"10）duplicate\",\"t\":[\"【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的\"]},\"444\":{\"h\":\"11）copy\",\"t\":[\"会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关\"]},\"445\":{\"h\":\"12）CompositeByteBuf\",\"t\":[\"【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝\",\"有两个 ByteBuf 如下\",\"ByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5); buf1.writeBytes(new byte[]{1, 2, 3, 4, 5}); ByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5); buf2.writeBytes(new byte[]{6, 7, 8, 9, 10}); System.out.println(ByteBufUtil.prettyHexDump(buf1)); System.out.println(ByteBufUtil.prettyHexDump(buf2)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 05 |..... | +--------+-------------------------------------------------+----------------+ +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 06 07 08 09 0a |..... | +--------+-------------------------------------------------+----------------+ \",\"现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？\",\"方法1：\",\"ByteBuf buf3 = ByteBufAllocator.DEFAULT .buffer(buf1.readableBytes()+buf2.readableBytes()); buf3.writeBytes(buf1); buf3.writeBytes(buf2); System.out.println(ByteBufUtil.prettyHexDump(buf3)); \",\"结果\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 05 06 07 08 09 0a |.......... | +--------+-------------------------------------------------+----------------+ \",\"这种方法好不好？回答是不太好，因为进行了数据的内存复制操作\",\"方法2：\",\"CompositeByteBuf buf3 = ByteBufAllocator.DEFAULT.compositeBuffer(); // true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0 buf3.addComponents(true, buf1, buf2); \",\"结果是一样的\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 05 06 07 08 09 0a |.......... | +--------+-------------------------------------------------+----------------+ \",\"CompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。\",\"优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制\",\"缺点，复杂了很多，多次操作会带来性能的损耗\"]},\"446\":{\"h\":\"13）Unpooled\",\"t\":[\"Unpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作\",\"这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf\",\"ByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5); buf1.writeBytes(new byte[]{1, 2, 3, 4, 5}); ByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5); buf2.writeBytes(new byte[]{6, 7, 8, 9, 10}); // 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf ByteBuf buf3 = Unpooled.wrappedBuffer(buf1, buf2); System.out.println(ByteBufUtil.prettyHexDump(buf3)); \",\"输出\",\" +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 05 06 07 08 09 0a |.......... | +--------+-------------------------------------------------+----------------+ \",\"也可以用来包装普通字节数组，底层也不会有拷贝操作\",\"ByteBuf buf4 = Unpooled.wrappedBuffer(new byte[]{1, 2, 3}, new byte[]{4, 5, 6}); System.out.println(buf4.getClass()); System.out.println(ByteBufUtil.prettyHexDump(buf4)); \",\"输出\",\"class io.netty.buffer.CompositeByteBuf +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 01 02 03 04 05 06 |...... | +--------+-------------------------------------------------+----------------+ \"]},\"447\":{\"h\":\"💡 ByteBuf 优势\",\"t\":[\"池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能\",\"读写指针分离，不需要像 ByteBuffer 一样切换读写模式\",\"可以自动扩容\",\"支持链式调用，使用更流畅\",\"很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf\"]},\"448\":{\"h\":\"4. 双向通信\"},\"449\":{\"h\":\"4.1 练习\",\"t\":[\"实现一个 echo server\",\"编写 server\",\"new ServerBootstrap() .group(new NioEventLoopGroup()) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<NioSocketChannel>() { @Override protected void initChannel(NioSocketChannel ch) { ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf buffer = (ByteBuf) msg; System.out.println(buffer.toString(Charset.defaultCharset())); // 建议使用 ctx.alloc() 创建 ByteBuf ByteBuf response = ctx.alloc().buffer(); response.writeBytes(buffer); ctx.writeAndFlush(response); // 思考：需要释放 buffer 吗 // 思考：需要释放 response 吗 } }); } }).bind(8080); \",\"编写 client\",\"NioEventLoopGroup group = new NioEventLoopGroup(); Channel channel = new Bootstrap() .group(group) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<NioSocketChannel>() { @Override protected void initChannel(NioSocketChannel ch) throws Exception { ch.pipeline().addLast(new StringEncoder()); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf buffer = (ByteBuf) msg; System.out.println(buffer.toString(Charset.defaultCharset())); // 思考：需要释放 buffer 吗 } }); } }).connect(\\\"127.0.0.1\\\", 8080).sync().channel(); channel.closeFuture().addListener(future -> { group.shutdownGracefully(); }); new Thread(() -> { Scanner scanner = new Scanner(System.in); while (true) { String line = scanner.nextLine(); if (\\\"q\\\".equals(line)) { channel.close(); break; } channel.writeAndFlush(line); } }).start(); \"]},\"450\":{\"h\":\"💡 读和写的误解\",\"t\":[\"我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在A 到 B 和 B 到 A 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读\",\"例如\",\"public class TestServer { public static void main(String[] args) throws IOException { ServerSocket ss = new ServerSocket(8888); Socket s = ss.accept(); new Thread(() -> { try { BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream())); while (true) { System.out.println(reader.readLine()); } } catch (IOException e) { e.printStackTrace(); } }).start(); new Thread(() -> { try { BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream())); // 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据 for (int i = 0; i < 100; i++) { writer.write(String.valueOf(i)); writer.newLine(); writer.flush(); } } catch (IOException e) { e.printStackTrace(); } }).start(); } } \",\"客户端\",\"public class TestClient { public static void main(String[] args) throws IOException { Socket s = new Socket(\\\"localhost\\\", 8888); new Thread(() -> { try { BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream())); while (true) { System.out.println(reader.readLine()); } } catch (IOException e) { e.printStackTrace(); } }).start(); new Thread(() -> { try { BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream())); for (int i = 0; i < 100; i++) { writer.write(String.valueOf(i)); writer.newLine(); writer.flush(); } } catch (IOException e) { e.printStackTrace(); } }).start(); } } \"]},\"451\":{\"h\":\"Netty 进阶\",\"t\":[\"bilibili\"]},\"452\":{\"h\":\"1. 粘包与半包\"},\"453\":{\"h\":\"1.1 粘包现象\",\"t\":[\"服务端代码\",\"public class HelloWorldServer { static final Logger log = LoggerFactory.getLogger(HelloWorldServer.class); void start() { NioEventLoopGroup boss = new NioEventLoopGroup(1); NioEventLoopGroup worker = new NioEventLoopGroup(); try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.channel(NioServerSocketChannel.class); serverBootstrap.group(boss, worker); serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"connected {}\\\", ctx.channel()); super.channelActive(ctx); } @Override public void channelInactive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"disconnect {}\\\", ctx.channel()); super.channelInactive(ctx); } }); } }); ChannelFuture channelFuture = serverBootstrap.bind(8080); log.debug(\\\"{} binding...\\\", channelFuture.channel()); channelFuture.sync(); log.debug(\\\"{} bound...\\\", channelFuture.channel()); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"server error\\\", e); } finally { boss.shutdownGracefully(); worker.shutdownGracefully(); log.debug(\\\"stoped\\\"); } } public static void main(String[] args) { new HelloWorldServer().start(); } } \",\"客户端代码希望发送 10 个消息，每个消息是 16 字节\",\"public class HelloWorldClient { static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class); public static void main(String[] args) { NioEventLoopGroup worker = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(worker); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { log.debug(\\\"connetted...\\\"); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"sending...\\\"); Random r = new Random(); char c = 'a'; for (int i = 0; i < 10; i++) { ByteBuf buffer = ctx.alloc().buffer(); buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}); ctx.writeAndFlush(buffer); } } }); } }); ChannelFuture channelFuture = bootstrap.connect(\\\"127.0.0.1\\\", 8080).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"client error\\\", e); } finally { worker.shutdownGracefully(); } } } \",\"服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收\",\"08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding... 08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound... 08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED 08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE 08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] 08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000010| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000020| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000030| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000040| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000050| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000060| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000070| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000080| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000090| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| +--------+-------------------------------------------------+----------------+ 08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE \"]},\"454\":{\"h\":\"1.2 半包现象\",\"t\":[\"客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为\",\"ByteBuf buffer = ctx.alloc().buffer(); for (int i = 0; i < 10; i++) { buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}); } ctx.writeAndFlush(buffer); \",\"为现象明显，服务端修改一下接收缓冲区，其它代码不变\",\"serverBootstrap.option(ChannelOption.SO_RCVBUF, 10); \",\"服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节\",\"08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding... 08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound... 08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED 08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE 08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] 08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................| |00000010| 00 01 02 03 |.... | +--------+-------------------------------------------------+----------------+ 08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE 08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000010| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000020| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000030| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000040| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000050| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000060| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000070| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................| |00000080| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |............ | +--------+-------------------------------------------------+----------------+ 08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE \",\"注意\",\"serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍\"]},\"455\":{\"h\":\"1.3 现象分析\",\"t\":[\"粘包\",\"现象，发送 abc def，接收 abcdef\",\"原因 \",\"应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）\",\"滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包\",\"Nagle 算法：会造成粘包\",\"半包\",\"现象，发送 abcdef，接收 abc def\",\"原因 \",\"应用层：接收方 ByteBuf 小于实际发送数据量\",\"滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包\",\"MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包\",\"本质是因为 TCP 是流式协议，消息无边界\",\"滑动窗口\",\"TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差\",\"为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值\",\"窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用\",\"图中深色的部分即要发送的数据，高亮的部分即窗口\",\"窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动\",\"如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动\",\"接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收\",\"MSS 限制\",\"链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如\",\"以太网的 MTU 是 1500\",\"FDDI（光纤分布式数据接口）的 MTU 是 4352\",\"本地回环地址的 MTU 是 65535 - 本地测试不走网卡\",\"MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数\",\"ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 = 1460\",\"TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送\",\"MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS\",\"<./../../../.vuepress/public/assets/img src=\\\"./../../../.vuepress/public/assets/img/0031.jpg\\\" style=\\\"zoom:50%;\\\" />\",\"Nagle 算法\",\"即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由\",\"该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送 \",\"如果 SO_SNDBUF 的数据达到 MSS，则需要发送\",\"如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭\",\"如果 TCP_NODELAY = true，则需要发送\",\"已发送的数据都收到 ack 时，则需要发送\",\"上述条件不满足，但发生超时（一般为 200ms）则需要发送\",\"除上述情况，延迟发送\"]},\"456\":{\"h\":\"1.4 解决方案\",\"t\":[\"短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低\",\"每一条消息采用固定长度，缺点浪费空间\",\"每一条消息采用分隔符，例如 \\\\n，缺点需要转义\",\"每一条消息分为 head 和 body，head 中包含 body 的长度\"]},\"457\":{\"h\":\"方法1，短链接\",\"t\":[\"以解决粘包为例\",\"public class HelloWorldClient { static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class); public static void main(String[] args) { // 分 10 次发送 for (int i = 0; i < 10; i++) { send(); } } private static void send() { NioEventLoopGroup worker = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(worker); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { log.debug(\\\"conneted...\\\"); ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"sending...\\\"); ByteBuf buffer = ctx.alloc().buffer(); buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}); ctx.writeAndFlush(buffer); // 发完即关 ctx.close(); } }); } }); ChannelFuture channelFuture = bootstrap.connect(\\\"localhost\\\", 8080).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"client error\\\", e); } finally { worker.shutdownGracefully(); } } } \",\"输出，略\",\"半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的\"]},\"458\":{\"h\":\"方法2，固定长度\",\"t\":[\"让所有数据包长度固定（假设长度为 8 字节），服务器端加入\",\"ch.pipeline().addLast(new FixedLengthFrameDecoder(8)); \",\"客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以\",\"public class HelloWorldClient { static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class); public static void main(String[] args) { NioEventLoopGroup worker = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(worker); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { log.debug(\\\"connetted...\\\"); ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"sending...\\\"); // 发送内容随机的数据包 Random r = new Random(); char c = 'a'; ByteBuf buffer = ctx.alloc().buffer(); for (int i = 0; i < 10; i++) { byte[] bytes = new byte[8]; for (int j = 0; j < r.nextInt(8); j++) { bytes[j] = (byte) c; } c++; buffer.writeBytes(bytes); } ctx.writeAndFlush(buffer); } }); } }); ChannelFuture channelFuture = bootstrap.connect(\\\"192.168.0.103\\\", 9090).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"client error\\\", e); } finally { worker.shutdownGracefully(); } } } \",\"客户端输出\",\"12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted... 12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED 12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090 12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE 12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending... 12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 61 61 61 61 00 00 00 00 62 00 00 00 00 00 00 00 |aaaa....b.......| |00000010| 63 63 00 00 00 00 00 00 64 00 00 00 00 00 00 00 |cc......d.......| |00000020| 00 00 00 00 00 00 00 00 66 66 66 66 00 00 00 00 |........ffff....| |00000030| 67 67 67 00 00 00 00 00 68 00 00 00 00 00 00 00 |ggg.....h.......| |00000040| 69 69 69 69 69 00 00 00 6a 6a 6a 6a 00 00 00 00 |iiiii...jjjj....| +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH \",\"服务端输出\",\"12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding... 12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound... 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 61 61 61 61 00 00 00 00 |aaaa.... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 62 00 00 00 00 00 00 00 |b....... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 63 63 00 00 00 00 00 00 |cc...... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 64 00 00 00 00 00 00 00 |d....... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 00 00 00 00 00 00 00 00 |........ | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 66 66 66 66 00 00 00 00 |ffff.... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 67 67 67 00 00 00 00 00 |ggg..... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 68 00 00 00 00 00 00 00 |h....... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 69 69 69 69 69 00 00 00 |iiiii... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 6a 6a 6a 6a 00 00 00 00 |jjjj.... | +--------+-------------------------------------------------+----------------+ 12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE \",\"缺点是，数据包的大小不好把握\",\"长度定的太大，浪费\",\"长度定的太小，对某些数据包又显得不够\"]},\"459\":{\"h\":\"方法3，固定分隔符\",\"t\":[\"服务端加入，默认以 \\\\n 或 \\\\r\\\\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常\",\"ch.pipeline().addLast(new LineBasedFrameDecoder(1024)); \",\"客户端在每条消息之后，加入 \\\\n 分隔符\",\"public class HelloWorldClient { static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class); public static void main(String[] args) { NioEventLoopGroup worker = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(worker); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { log.debug(\\\"connetted...\\\"); ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"sending...\\\"); Random r = new Random(); char c = 'a'; ByteBuf buffer = ctx.alloc().buffer(); for (int i = 0; i < 10; i++) { for (int j = 1; j <= r.nextInt(16)+1; j++) { buffer.writeByte((byte) c); } buffer.writeByte(10); c++; } ctx.writeAndFlush(buffer); } }); } }); ChannelFuture channelFuture = bootstrap.connect(\\\"192.168.0.103\\\", 9090).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"client error\\\", e); } finally { worker.shutdownGracefully(); } } } \",\"客户端输出\",\"14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted... 14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED 14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090 14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE 14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending... 14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 61 0a 62 62 62 0a 63 63 63 0a 64 64 0a 65 65 65 |a.bbb.ccc.dd.eee| |00000010| 65 65 65 65 65 65 65 0a 66 66 0a 67 67 67 67 67 |eeeeeee.ff.ggggg| |00000020| 67 67 0a 68 68 68 68 0a 69 69 69 69 69 69 69 0a |gg.hhhh.iiiiiii.| |00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a |jjjjjjjjjjj. | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH \",\"服务端输出\",\"14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 61 |a | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 62 62 62 |bbb | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 63 63 63 |ccc | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 64 64 |dd | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 65 65 65 65 65 65 65 65 65 65 |eeeeeeeeee | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 66 66 |ff | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 67 67 67 67 67 67 67 |ggggggg | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 68 68 68 68 |hhhh | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 69 69 69 69 69 69 69 |iiiiiii | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a |jjjjjjjjjjj | +--------+-------------------------------------------------+----------------+ 14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE \",\"缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误\"]},\"460\":{\"h\":\"方法4，预设长度\",\"t\":[\"在发送消息前，先约定用定长字节表示接下来数据的长度\",\"// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数 ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(1024, 0, 1, 0, 1)); \",\"客户端代码\",\"public class HelloWorldClient { static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class); public static void main(String[] args) { NioEventLoopGroup worker = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(worker); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { log.debug(\\\"connetted...\\\"); ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { log.debug(\\\"sending...\\\"); Random r = new Random(); char c = 'a'; ByteBuf buffer = ctx.alloc().buffer(); for (int i = 0; i < 10; i++) { byte length = (byte) (r.nextInt(16) + 1); // 先写入长度 buffer.writeByte(length); // 再 for (int j = 1; j <= length; j++) { buffer.writeByte((byte) c); } c++; } ctx.writeAndFlush(buffer); } }); } }); ChannelFuture channelFuture = bootstrap.connect(\\\"192.168.0.103\\\", 9090).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"client error\\\", e); } finally { worker.shutdownGracefully(); } } } \",\"客户端输出\",\"14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted... 14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] REGISTERED 14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] CONNECT: /192.168.0.103:9090 14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] ACTIVE 14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending... 14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] WRITE: 97B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 09 61 61 61 61 61 61 61 61 61 09 62 62 62 62 62 |.aaaaaaaaa.bbbbb| |00000010| 62 62 62 62 06 63 63 63 63 63 63 08 64 64 64 64 |bbbb.cccccc.dddd| |00000020| 64 64 64 64 0f 65 65 65 65 65 65 65 65 65 65 65 |dddd.eeeeeeeeeee| |00000030| 65 65 65 65 0d 66 66 66 66 66 66 66 66 66 66 66 |eeee.fffffffffff| |00000040| 66 66 02 67 67 02 68 68 0e 69 69 69 69 69 69 69 |ff.gg.hh.iiiiiii| |00000050| 69 69 69 69 69 69 69 09 6a 6a 6a 6a 6a 6a 6a 6a |iiiiiii.jjjjjjjj| |00000060| 6a |j | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] FLUSH \",\"服务端输出\",\"14:36:50 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3] binding... 14:36:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3, L:/192.168.0.103:9090] bound... 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] REGISTERED 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] ACTIVE 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 61 61 61 61 61 61 61 61 61 |aaaaaaaaa | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 62 62 62 62 62 62 62 62 62 |bbbbbbbbb | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 6B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 63 63 63 63 63 63 |cccccc | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 8B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 64 64 64 64 64 64 64 64 |dddddddd | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 15B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 |eeeeeeeeeeeeeee | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 13B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 66 66 66 66 66 66 66 66 66 66 66 66 66 |fffffffffffff | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 67 67 |gg | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 68 68 |hh | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 14B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 69 69 69 69 69 69 69 69 69 69 69 69 69 69 |iiiiiiiiiiiiii | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B +-------------------------------------------------+ | 0 1 2 3 4 5 6 7 8 9 a b c d e f | +--------+-------------------------------------------------+----------------+ |00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a |jjjjjjjjj | +--------+-------------------------------------------------+----------------+ 14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ COMPLETE \"]},\"461\":{\"h\":\"2. 协议设计与解析\"},\"462\":{\"h\":\"2.1 为什么需要协议？\",\"t\":[\"TCP/IP 中消息传输基于流的方式，没有边界。\",\"协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则\",\"例如：在网络上传输\",\"下雨天留客天留我不留 \",\"是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性\",\"一种解读\",\"下雨天留客，天留，我不留 \",\"另一种解读\",\"下雨天，留客天，留我不？留 \",\"如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用\",\"定长字节表示内容长度 + 实际内容 \",\"例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了\",\"0f下雨天留客06天留09我不留 \",\"小故事\",\"很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。\",\"年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”\",\"私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”\",\"双方唇枪舌战，你来我往，真个是不亦乐乎！\",\"这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬\"]},\"463\":{\"h\":\"2.2 redis 协议举例\",\"t\":[\"NioEventLoopGroup worker = new NioEventLoopGroup(); byte[] LINE = {13, 10}; try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(worker); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ch.pipeline().addLast(new LoggingHandler()); ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { // 会在连接 channel 建立成功后，会触发 active 事件 @Override public void channelActive(ChannelHandlerContext ctx) { set(ctx); get(ctx); } private void get(ChannelHandlerContext ctx) { ByteBuf buf = ctx.alloc().buffer(); buf.writeBytes(\\\"*2\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"get\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"aaa\\\".getBytes()); buf.writeBytes(LINE); ctx.writeAndFlush(buf); } private void set(ChannelHandlerContext ctx) { ByteBuf buf = ctx.alloc().buffer(); buf.writeBytes(\\\"*3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"set\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"aaa\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"bbb\\\".getBytes()); buf.writeBytes(LINE); ctx.writeAndFlush(buf); } @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { ByteBuf buf = (ByteBuf) msg; System.out.println(buf.toString(Charset.defaultCharset())); } }); } }); ChannelFuture channelFuture = bootstrap.connect(\\\"localhost\\\", 6379).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"client error\\\", e); } finally { worker.shutdownGracefully(); } \"]},\"464\":{\"h\":\"2.3 http 协议举例\",\"t\":[\"NioEventLoopGroup boss = new NioEventLoopGroup(); NioEventLoopGroup worker = new NioEventLoopGroup(); try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.channel(NioServerSocketChannel.class); serverBootstrap.group(boss, worker); serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new HttpServerCodec()); ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpRequest>() { @Override protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception { // 获取请求 log.debug(msg.uri()); // 返回响应 DefaultFullHttpResponse response = new DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK); byte[] bytes = \\\"<h1>Hello, world!</h1>\\\".getBytes(); response.headers().setInt(CONTENT_LENGTH, bytes.length); response.content().writeBytes(bytes); // 写回响应 ctx.writeAndFlush(response); } }); /*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(\\\"{}\\\", msg.getClass()); if (msg instanceof HttpRequest) { // 请求行，请求头 } else if (msg instanceof HttpContent) { //请求体 } } });*/ } }); ChannelFuture channelFuture = serverBootstrap.bind(8080).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"server error\\\", e); } finally { boss.shutdownGracefully(); worker.shutdownGracefully(); } \"]},\"465\":{\"h\":\"2.4 自定义协议要素\",\"t\":[\"魔数，用来在第一时间判定是否是无效数据包\",\"版本号，可以支持协议的升级\",\"序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk\",\"指令类型，是登录、注册、单聊、群聊... 跟业务相关\",\"请求序号，为了双工通信，提供异步能力\",\"正文长度\",\"消息正文\"]},\"466\":{\"h\":\"编解码器\",\"t\":[\"根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发\",\"@Slf4j public class MessageCodec extends ByteToMessageCodec<Message> { @Override protected void encode(ChannelHandlerContext ctx, Message msg, ByteBuf out) throws Exception { // 1. 4 字节的魔数 out.writeBytes(new byte[]{1, 2, 3, 4}); // 2. 1 字节的版本, out.writeByte(1); // 3. 1 字节的序列化方式 jdk 0 , json 1 out.writeByte(0); // 4. 1 字节的指令类型 out.writeByte(msg.getMessageType()); // 5. 4 个字节 out.writeInt(msg.getSequenceId()); // 无意义，对齐填充 out.writeByte(0xff); // 6. 获取内容的字节数组 ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(msg); byte[] bytes = bos.toByteArray(); // 7. 长度 out.writeInt(bytes.length); // 8. 写入内容 out.writeBytes(bytes); } @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { int magicNum = in.readInt(); byte version = in.readByte(); byte serializerType = in.readByte(); byte messageType = in.readByte(); int sequenceId = in.readInt(); in.readByte(); int length = in.readInt(); byte[] bytes = new byte[length]; in.readBytes(bytes, 0, length); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes)); Message message = (Message) ois.readObject(); log.debug(\\\"{}, {}, {}, {}, {}, {}\\\", magicNum, version, serializerType, messageType, sequenceId, length); log.debug(\\\"{}\\\", message); out.add(message); } } \",\"测试\",\"EmbeddedChannel channel = new EmbeddedChannel( new LoggingHandler(), new LengthFieldBasedFrameDecoder( 1024, 12, 4, 0, 0), new MessageCodec() ); // encode LoginRequestMessage message = new LoginRequestMessage(\\\"zhangsan\\\", \\\"123\\\", \\\"张三\\\"); // channel.writeOutbound(message); // decode ByteBuf buf = ByteBufAllocator.DEFAULT.buffer(); new MessageCodec().encode(null, message, buf); ByteBuf s1 = buf.slice(0, 100); ByteBuf s2 = buf.slice(100, buf.readableBytes() - 100); s1.retain(); // 引用计数 2 channel.writeInbound(s1); // release 1 channel.writeInbound(s2); \",\"解读\"]},\"467\":{\"h\":\"💡 什么时候可以加 @Sharable\",\"t\":[\"当 handler 不保存状态时，就可以安全地在多线程下被共享\",\"但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制\",\"如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类\",\"@Slf4j @ChannelHandler.Sharable /** * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的 */ public class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> { @Override protected void encode(ChannelHandlerContext ctx, Message msg, List<Object> outList) throws Exception { ByteBuf out = ctx.alloc().buffer(); // 1. 4 字节的魔数 out.writeBytes(new byte[]{1, 2, 3, 4}); // 2. 1 字节的版本, out.writeByte(1); // 3. 1 字节的序列化方式 jdk 0 , json 1 out.writeByte(0); // 4. 1 字节的指令类型 out.writeByte(msg.getMessageType()); // 5. 4 个字节 out.writeInt(msg.getSequenceId()); // 无意义，对齐填充 out.writeByte(0xff); // 6. 获取内容的字节数组 ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(msg); byte[] bytes = bos.toByteArray(); // 7. 长度 out.writeInt(bytes.length); // 8. 写入内容 out.writeBytes(bytes); outList.add(out); } @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { int magicNum = in.readInt(); byte version = in.readByte(); byte serializerType = in.readByte(); byte messageType = in.readByte(); int sequenceId = in.readInt(); in.readByte(); int length = in.readInt(); byte[] bytes = new byte[length]; in.readBytes(bytes, 0, length); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes)); Message message = (Message) ois.readObject(); log.debug(\\\"{}, {}, {}, {}, {}, {}\\\", magicNum, version, serializerType, messageType, sequenceId, length); log.debug(\\\"{}\\\", message); out.add(message); } } \"]},\"468\":{\"h\":\"3. 聊天室案例\"},\"469\":{\"h\":\"3.1 聊天室业务介绍\",\"t\":[\"/** * 用户管理接口 */ public interface UserService { /** * 登录 * @param username 用户名 * @param password 密码 * @return 登录成功返回 true, 否则返回 false */ boolean login(String username, String password); } \",\"/** * 会话管理接口 */ public interface Session { /** * 绑定会话 * @param channel 哪个 channel 要绑定会话 * @param username 会话绑定用户 */ void bind(Channel channel, String username); /** * 解绑会话 * @param channel 哪个 channel 要解绑会话 */ void unbind(Channel channel); /** * 获取属性 * @param channel 哪个 channel * @param name 属性名 * @return 属性值 */ Object getAttribute(Channel channel, String name); /** * 设置属性 * @param channel 哪个 channel * @param name 属性名 * @param value 属性值 */ void setAttribute(Channel channel, String name, Object value); /** * 根据用户名获取 channel * @param username 用户名 * @return channel */ Channel getChannel(String username); } \",\"/** * 聊天组会话管理接口 */ public interface GroupSession { /** * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null * @param name 组名 * @param members 成员 * @return 成功时返回组对象, 失败返回 null */ Group createGroup(String name, Set<String> members); /** * 加入聊天组 * @param name 组名 * @param member 成员名 * @return 如果组不存在返回 null, 否则返回组对象 */ Group joinMember(String name, String member); /** * 移除组成员 * @param name 组名 * @param member 成员名 * @return 如果组不存在返回 null, 否则返回组对象 */ Group removeMember(String name, String member); /** * 移除聊天组 * @param name 组名 * @return 如果组不存在返回 null, 否则返回组对象 */ Group removeGroup(String name); /** * 获取组成员 * @param name 组名 * @return 成员集合, 没有成员会返回 empty set */ Set<String> getMembers(String name); /** * 获取组成员的 channel 集合, 只有在线的 channel 才会返回 * @param name 组名 * @return 成员 channel 集合 */ List<Channel> getMembersChannel(String name); } \"]},\"470\":{\"h\":\"3.2 聊天室业务-登录\",\"t\":[\"@Slf4j public class ChatServer { public static void main(String[] args) { NioEventLoopGroup boss = new NioEventLoopGroup(); NioEventLoopGroup worker = new NioEventLoopGroup(); LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG); MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable(); try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.channel(NioServerSocketChannel.class); serverBootstrap.group(boss, worker); serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new ProcotolFrameDecoder()); ch.pipeline().addLast(LOGGING_HANDLER); ch.pipeline().addLast(MESSAGE_CODEC); ch.pipeline().addLast(new SimpleChannelInboundHandler<LoginRequestMessage>() { @Override protected void channelRead0(ChannelHandlerContext ctx, LoginRequestMessage msg) throws Exception { String username = msg.getUsername(); String password = msg.getPassword(); boolean login = UserServiceFactory.getUserService().login(username, password); LoginResponseMessage message; if(login) { message = new LoginResponseMessage(true, \\\"登录成功\\\"); } else { message = new LoginResponseMessage(false, \\\"用户名或密码不正确\\\"); } ctx.writeAndFlush(message); } }); } }); Channel channel = serverBootstrap.bind(8080).sync().channel(); channel.closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"server error\\\", e); } finally { boss.shutdownGracefully(); worker.shutdownGracefully(); } } } \",\"@Slf4j public class ChatClient { public static void main(String[] args) { NioEventLoopGroup group = new NioEventLoopGroup(); LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG); MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable(); CountDownLatch WAIT_FOR_LOGIN = new CountDownLatch(1); AtomicBoolean LOGIN = new AtomicBoolean(false); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(group); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new ProcotolFrameDecoder()); // ch.pipeline().addLast(LOGGING_HANDLER); ch.pipeline().addLast(MESSAGE_CODEC); ch.pipeline().addLast(\\\"client handler\\\", new ChannelInboundHandlerAdapter() { // 接收响应消息 @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(\\\"msg: {}\\\", msg); if ((msg instanceof LoginResponseMessage)) { LoginResponseMessage response = (LoginResponseMessage) msg; if (response.isSuccess()) { // 如果登录成功 LOGIN.set(true); } // 唤醒 system in 线程 WAIT_FOR_LOGIN.countDown(); } } // 在连接建立后触发 active 事件 @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { // 负责接收用户在控制台的输入，负责向服务器发送各种消息 new Thread(() -> { Scanner scanner = new Scanner(System.in); System.out.println(\\\"请输入用户名:\\\"); String username = scanner.nextLine(); System.out.println(\\\"请输入密码:\\\"); String password = scanner.nextLine(); // 构造消息对象 LoginRequestMessage message = new LoginRequestMessage(username, password); // 发送消息 ctx.writeAndFlush(message); System.out.println(\\\"等待后续操作...\\\"); try { WAIT_FOR_LOGIN.await(); } catch (InterruptedException e) { e.printStackTrace(); } // 如果登录失败 if (!LOGIN.get()) { ctx.channel().close(); return; } while (true) { System.out.println(\\\"==================================\\\"); System.out.println(\\\"send [username] [content]\\\"); System.out.println(\\\"gsend [group name] [content]\\\"); System.out.println(\\\"gcreate [group name] [m1,m2,m3...]\\\"); System.out.println(\\\"gmembers [group name]\\\"); System.out.println(\\\"gjoin [group name]\\\"); System.out.println(\\\"gquit [group name]\\\"); System.out.println(\\\"quit\\\"); System.out.println(\\\"==================================\\\"); String command = scanner.nextLine(); String[] s = command.split(\\\" \\\"); switch (s[0]){ case \\\"send\\\": ctx.writeAndFlush(new ChatRequestMessage(username, s[1], s[2])); break; case \\\"gsend\\\": ctx.writeAndFlush(new GroupChatRequestMessage(username, s[1], s[2])); break; case \\\"gcreate\\\": Set<String> set = new HashSet<>(Arrays.asList(s[2].split(\\\",\\\"))); set.add(username); // 加入自己 ctx.writeAndFlush(new GroupCreateRequestMessage(s[1], set)); break; case \\\"gmembers\\\": ctx.writeAndFlush(new GroupMembersRequestMessage(s[1])); break; case \\\"gjoin\\\": ctx.writeAndFlush(new GroupJoinRequestMessage(username, s[1])); break; case \\\"gquit\\\": ctx.writeAndFlush(new GroupQuitRequestMessage(username, s[1])); break; case \\\"quit\\\": ctx.channel().close(); return; } } }, \\\"system in\\\").start(); } }); } }); Channel channel = bootstrap.connect(\\\"localhost\\\", 8080).sync().channel(); channel.closeFuture().sync(); } catch (Exception e) { log.error(\\\"client error\\\", e); } finally { group.shutdownGracefully(); } } } \"]},\"471\":{\"h\":\"3.3 聊天室业务-单聊\",\"t\":[\"服务器端将 handler 独立出来\",\"登录 handler\",\"@ChannelHandler.Sharable public class LoginRequestMessageHandler extends SimpleChannelInboundHandler<LoginRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, LoginRequestMessage msg) throws Exception { String username = msg.getUsername(); String password = msg.getPassword(); boolean login = UserServiceFactory.getUserService().login(username, password); LoginResponseMessage message; if(login) { SessionFactory.getSession().bind(ctx.channel(), username); message = new LoginResponseMessage(true, \\\"登录成功\\\"); } else { message = new LoginResponseMessage(false, \\\"用户名或密码不正确\\\"); } ctx.writeAndFlush(message); } } \",\"单聊 handler\",\"@ChannelHandler.Sharable public class ChatRequestMessageHandler extends SimpleChannelInboundHandler<ChatRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, ChatRequestMessage msg) throws Exception { String to = msg.getTo(); Channel channel = SessionFactory.getSession().getChannel(to); // 在线 if(channel != null) { channel.writeAndFlush(new ChatResponseMessage(msg.getFrom(), msg.getContent())); } // 不在线 else { ctx.writeAndFlush(new ChatResponseMessage(false, \\\"对方用户不存在或者不在线\\\")); } } } \"]},\"472\":{\"h\":\"3.4 聊天室业务-群聊\",\"t\":[\"创建群聊\",\"@ChannelHandler.Sharable public class GroupCreateRequestMessageHandler extends SimpleChannelInboundHandler<GroupCreateRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, GroupCreateRequestMessage msg) throws Exception { String groupName = msg.getGroupName(); Set<String> members = msg.getMembers(); // 群管理器 GroupSession groupSession = GroupSessionFactory.getGroupSession(); Group group = groupSession.createGroup(groupName, members); if (group == null) { // 发生成功消息 ctx.writeAndFlush(new GroupCreateResponseMessage(true, groupName + \\\"创建成功\\\")); // 发送拉群消息 List<Channel> channels = groupSession.getMembersChannel(groupName); for (Channel channel : channels) { channel.writeAndFlush(new GroupCreateResponseMessage(true, \\\"您已被拉入\\\" + groupName)); } } else { ctx.writeAndFlush(new GroupCreateResponseMessage(false, groupName + \\\"已经存在\\\")); } } } \",\"群聊\",\"@ChannelHandler.Sharable public class GroupChatRequestMessageHandler extends SimpleChannelInboundHandler<GroupChatRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, GroupChatRequestMessage msg) throws Exception { List<Channel> channels = GroupSessionFactory.getGroupSession() .getMembersChannel(msg.getGroupName()); for (Channel channel : channels) { channel.writeAndFlush(new GroupChatResponseMessage(msg.getFrom(), msg.getContent())); } } } \",\"加入群聊\",\"@ChannelHandler.Sharable public class GroupJoinRequestMessageHandler extends SimpleChannelInboundHandler<GroupJoinRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, GroupJoinRequestMessage msg) throws Exception { Group group = GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername()); if (group != null) { ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \\\"群加入成功\\\")); } else { ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \\\"群不存在\\\")); } } } \",\"退出群聊\",\"@ChannelHandler.Sharable public class GroupQuitRequestMessageHandler extends SimpleChannelInboundHandler<GroupQuitRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, GroupQuitRequestMessage msg) throws Exception { Group group = GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername()); if (group != null) { ctx.writeAndFlush(new GroupJoinResponseMessage(true, \\\"已退出群\\\" + msg.getGroupName())); } else { ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \\\"群不存在\\\")); } } } \",\"查看成员\",\"@ChannelHandler.Sharable public class GroupMembersRequestMessageHandler extends SimpleChannelInboundHandler<GroupMembersRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, GroupMembersRequestMessage msg) throws Exception { Set<String> members = GroupSessionFactory.getGroupSession() .getMembers(msg.getGroupName()); ctx.writeAndFlush(new GroupMembersResponseMessage(members)); } } \"]},\"473\":{\"h\":\"3.5 聊天室业务-退出\",\"t\":[\"@Slf4j @ChannelHandler.Sharable public class QuitHandler extends ChannelInboundHandlerAdapter { // 当连接断开时触发 inactive 事件 @Override public void channelInactive(ChannelHandlerContext ctx) throws Exception { SessionFactory.getSession().unbind(ctx.channel()); log.debug(\\\"{} 已经断开\\\", ctx.channel()); } // 当出现异常时触发 @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { SessionFactory.getSession().unbind(ctx.channel()); log.debug(\\\"{} 已经异常断开 异常是{}\\\", ctx.channel(), cause.getMessage()); } } \"]},\"474\":{\"h\":\"3.6 聊天室业务-空闲检测\"},\"475\":{\"h\":\"连接假死\",\"t\":[\"原因\",\"网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。\",\"公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着\",\"应用程序线程阻塞，无法进行数据读写\",\"问题\",\"假死的连接占用的资源不能自动释放\",\"向假死的连接发送数据，得到的反馈是发送超时\",\"服务器端解决\",\"怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死\",\"// 用来判断是不是 读空闲时间过长，或 写空闲时间过长 // 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件 ch.pipeline().addLast(new IdleStateHandler(5, 0, 0)); // ChannelDuplexHandler 可以同时作为入站和出站处理器 ch.pipeline().addLast(new ChannelDuplexHandler() { // 用来触发特殊事件 @Override public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception{ IdleStateEvent event = (IdleStateEvent) evt; // 触发了读空闲事件 if (event.state() == IdleState.READER_IDLE) { log.debug(\\\"已经 5s 没有读到数据了\\\"); ctx.channel().close(); } } }); \",\"客户端定时心跳\",\"客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器\",\"// 用来判断是不是 读空闲时间过长，或 写空闲时间过长 // 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件 ch.pipeline().addLast(new IdleStateHandler(0, 3, 0)); // ChannelDuplexHandler 可以同时作为入站和出站处理器 ch.pipeline().addLast(new ChannelDuplexHandler() { // 用来触发特殊事件 @Override public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception{ IdleStateEvent event = (IdleStateEvent) evt; // 触发了写空闲事件 if (event.state() == IdleState.WRITER_IDLE) { // log.debug(\\\"3s 没有写数据了，发送一个心跳包\\\"); ctx.writeAndFlush(new PingMessage()); } } }); \"]},\"476\":{\"h\":\"优化与源码\"},\"477\":{\"h\":\"1. 优化\"},\"478\":{\"h\":\"1.1 扩展序列化算法\",\"t\":[\"序列化，反序列化主要用在消息正文的转换上\",\"序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）\",\"反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理\",\"目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下\",\"// 反序列化 byte[] body = new byte[bodyLength]; byteByf.readBytes(body); ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(body)); Message message = (Message) in.readObject(); message.setSequenceId(sequenceId); // 序列化 ByteArrayOutputStream out = new ByteArrayOutputStream(); new ObjectOutputStream(out).writeObject(message); byte[] bytes = out.toByteArray(); \",\"为了支持更多序列化算法，抽象一个 Serializer 接口\",\"public interface Serializer { // 反序列化方法 <T> T deserialize(Class<T> clazz, byte[] bytes); // 序列化方法 <T> byte[] serialize(T object); } \",\"提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中\",\"enum SerializerAlgorithm implements Serializer { // Java 实现 Java { @Override public <T> T deserialize(Class<T> clazz, byte[] bytes) { try { ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes)); Object object = in.readObject(); return (T) object; } catch (IOException | ClassNotFoundException e) { throw new RuntimeException(\\\"SerializerAlgorithm.Java 反序列化错误\\\", e); } } @Override public <T> byte[] serialize(T object) { try { ByteArrayOutputStream out = new ByteArrayOutputStream(); new ObjectOutputStream(out).writeObject(object); return out.toByteArray(); } catch (IOException e) { throw new RuntimeException(\\\"SerializerAlgorithm.Java 序列化错误\\\", e); } } }, // Json 实现(引入了 Gson 依赖) Json { @Override public <T> T deserialize(Class<T> clazz, byte[] bytes) { return new Gson().fromJson(new String(bytes, StandardCharsets.UTF_8), clazz); } @Override public <T> byte[] serialize(T object) { return new Gson().toJson(object).getBytes(StandardCharsets.UTF_8); } }; // 需要从协议的字节中得到是哪种序列化算法 public static SerializerAlgorithm getByInt(int type) { SerializerAlgorithm[] array = SerializerAlgorithm.values(); if (type < 0 || type > array.length - 1) { throw new IllegalArgumentException(\\\"超过 SerializerAlgorithm 范围\\\"); } return array[type]; } } \",\"增加配置类和配置文件\",\"public abstract class Config { static Properties properties; static { try (InputStream in = Config.class.getResourceAsStream(\\\"/application.properties\\\")) { properties = new Properties(); properties.load(in); } catch (IOException e) { throw new ExceptionInInitializerError(e); } } public static int getServerPort() { String value = properties.getProperty(\\\"server.port\\\"); if(value == null) { return 8080; } else { return Integer.parseInt(value); } } public static Serializer.Algorithm getSerializerAlgorithm() { String value = properties.getProperty(\\\"serializer.algorithm\\\"); if(value == null) { return Serializer.Algorithm.Java; } else { return Serializer.Algorithm.valueOf(value); } } } \",\"配置文件\",\"serializer.algorithm=Json \",\"修改编解码器\",\"/** * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的 */ public class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> { @Override public void encode(ChannelHandlerContext ctx, Message msg, List<Object> outList) throws Exception { ByteBuf out = ctx.alloc().buffer(); // 1. 4 字节的魔数 out.writeBytes(new byte[]{1, 2, 3, 4}); // 2. 1 字节的版本, out.writeByte(1); // 3. 1 字节的序列化方式 jdk 0 , json 1 out.writeByte(Config.getSerializerAlgorithm().ordinal()); // 4. 1 字节的指令类型 out.writeByte(msg.getMessageType()); // 5. 4 个字节 out.writeInt(msg.getSequenceId()); // 无意义，对齐填充 out.writeByte(0xff); // 6. 获取内容的字节数组 byte[] bytes = Config.getSerializerAlgorithm().serialize(msg); // 7. 长度 out.writeInt(bytes.length); // 8. 写入内容 out.writeBytes(bytes); outList.add(out); } @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { int magicNum = in.readInt(); byte version = in.readByte(); byte serializerAlgorithm = in.readByte(); // 0 或 1 byte messageType = in.readByte(); // 0,1,2... int sequenceId = in.readInt(); in.readByte(); int length = in.readInt(); byte[] bytes = new byte[length]; in.readBytes(bytes, 0, length); // 找到反序列化算法 Serializer.Algorithm algorithm = Serializer.Algorithm.values()[serializerAlgorithm]; // 确定具体消息类型 Class<? extends Message> messageClass = Message.getMessageClass(messageType); Message message = algorithm.deserialize(messageClass, bytes); // log.debug(\\\"{}, {}, {}, {}, {}, {}\\\", magicNum, version, serializerType, messageType, sequenceId, length); // log.debug(\\\"{}\\\", message); out.add(message); } } \",\"其中确定具体消息类型，可以根据 消息类型字节 获取到对应的 消息 class\",\"@Data public abstract class Message implements Serializable { /** * 根据消息类型字节，获得对应的消息 class * @param messageType 消息类型字节 * @return 消息 class */ public static Class<? extends Message> getMessageClass(int messageType) { return messageClasses.get(messageType); } private int sequenceId; private int messageType; public abstract int getMessageType(); public static final int LoginRequestMessage = 0; public static final int LoginResponseMessage = 1; public static final int ChatRequestMessage = 2; public static final int ChatResponseMessage = 3; public static final int GroupCreateRequestMessage = 4; public static final int GroupCreateResponseMessage = 5; public static final int GroupJoinRequestMessage = 6; public static final int GroupJoinResponseMessage = 7; public static final int GroupQuitRequestMessage = 8; public static final int GroupQuitResponseMessage = 9; public static final int GroupChatRequestMessage = 10; public static final int GroupChatResponseMessage = 11; public static final int GroupMembersRequestMessage = 12; public static final int GroupMembersResponseMessage = 13; public static final int PingMessage = 14; public static final int PongMessage = 15; private static final Map<Integer, Class<? extends Message>> messageClasses = new HashMap<>(); static { messageClasses.put(LoginRequestMessage, LoginRequestMessage.class); messageClasses.put(LoginResponseMessage, LoginResponseMessage.class); messageClasses.put(ChatRequestMessage, ChatRequestMessage.class); messageClasses.put(ChatResponseMessage, ChatResponseMessage.class); messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class); messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class); messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class); messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class); messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class); messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class); messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class); messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class); messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class); messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class); } } \"]},\"479\":{\"h\":\"1.2 参数调优\"},\"480\":{\"h\":\"1）CONNECT_TIMEOUT_MILLIS\",\"t\":[\"属于 SocketChannal 参数\",\"用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常\",\"SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间\",\"@Slf4j public class TestConnectionTimeout { public static void main(String[] args) { NioEventLoopGroup group = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap() .group(group) .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 300) .channel(NioSocketChannel.class) .handler(new LoggingHandler()); ChannelFuture future = bootstrap.connect(\\\"127.0.0.1\\\", 8080); future.sync().channel().closeFuture().sync(); // 断点1 } catch (Exception e) { e.printStackTrace(); log.debug(\\\"timeout\\\"); } finally { group.shutdownGracefully(); } } } \",\"另外源码部分 io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect\",\"@Override public final void connect( final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise promise) { // ... // Schedule connect timeout. int connectTimeoutMillis = config().getConnectTimeoutMillis(); if (connectTimeoutMillis > 0) { connectTimeoutFuture = eventLoop().schedule(new Runnable() { @Override public void run() { ChannelPromise connectPromise = AbstractNioChannel.this.connectPromise; ConnectTimeoutException cause = new ConnectTimeoutException(\\\"connection timed out: \\\" + remoteAddress); // 断点2 if (connectPromise != null && connectPromise.tryFailure(cause)) { close(voidPromise()); } } }, connectTimeoutMillis, TimeUnit.MILLISECONDS); } // ... } \"]},\"481\":{\"h\":\"2）SO_BACKLOG\",\"t\":[\"属于 ServerSocketChannal 参数\",\"第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列\",\"第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server\",\"第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue\",\"其中\",\"在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制\",\"sync queue - 半连接队列\",\"大小通过 /proc/sys/net/ipv4/tcp_max_syn_backlog 指定，在 syncookies 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略\",\"accept queue - 全连接队列\",\"其大小通过 /proc/sys/net/core/somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值\",\"如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client\",\"netty 中\",\"可以通过 option(ChannelOption.SO_BACKLOG, 值) 来设置大小\",\"可以通过下面源码查看默认大小\",\"public class DefaultServerSocketChannelConfig extends DefaultChannelConfig implements ServerSocketChannelConfig { private volatile int backlog = NetUtil.SOMAXCONN; // ... } \",\"课堂调试关键断点为：io.netty.channel.nio.NioEventLoop#processSelectedKey\",\"oio 中更容易说明，不用 debug 模式\",\"public class Server { public static void main(String[] args) throws IOException { ServerSocket ss = new ServerSocket(8888, 2); Socket accept = ss.accept(); System.out.println(accept); System.in.read(); } } \",\"客户端启动 4 个\",\"public class Client { public static void main(String[] args) throws IOException { try { Socket s = new Socket(); System.out.println(new Date()+\\\" connecting...\\\"); s.connect(new InetSocketAddress(\\\"localhost\\\", 8888),1000); System.out.println(new Date()+\\\" connected...\\\"); s.getOutputStream().write(1); System.in.read(); } catch (IOException e) { System.out.println(new Date()+\\\" connecting timeout...\\\"); e.printStackTrace(); } } } \",\"第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中\",\"Tue Apr 21 20:30:28 CST 2020 connecting... Tue Apr 21 20:30:28 CST 2020 connected... \",\"第 4 个客户端连接时\",\"Tue Apr 21 20:53:58 CST 2020 connecting... Tue Apr 21 20:53:59 CST 2020 connecting timeout... java.net.SocketTimeoutException: connect timed out \"]},\"482\":{\"h\":\"3）ulimit -n\",\"t\":[\"属于操作系统参数\"]},\"483\":{\"h\":\"4）TCP_NODELAY\",\"t\":[\"属于 SocketChannal 参数\"]},\"484\":{\"h\":\"5）SO_SNDBUF & SO_RCVBUF\",\"t\":[\"SO_SNDBUF 属于 SocketChannal 参数\",\"SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）\"]},\"485\":{\"h\":\"6）ALLOCATOR\",\"t\":[\"属于 SocketChannal 参数\",\"用来分配 ByteBuf， ctx.alloc()\"]},\"486\":{\"h\":\"7）RCVBUF_ALLOCATOR\",\"t\":[\"属于 SocketChannal 参数\",\"控制 netty 接收缓冲区大小\",\"负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定\"]},\"487\":{\"h\":\"1.3 RPC 框架\"},\"488\":{\"h\":\"1）准备工作\",\"t\":[\"这些代码可以认为是现成的，无需从头编写练习\",\"为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息\",\"@Data public abstract class Message implements Serializable { // 省略旧的代码 public static final int RPC_MESSAGE_TYPE_REQUEST = 101; public static final int RPC_MESSAGE_TYPE_RESPONSE = 102; static { // ... messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class); messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class); } } \",\"请求消息\",\"@Getter @ToString(callSuper = true) public class RpcRequestMessage extends Message { /** * 调用的接口全限定名，服务端根据它找到实现 */ private String interfaceName; /** * 调用接口中的方法名 */ private String methodName; /** * 方法返回类型 */ private Class<?> returnType; /** * 方法参数类型数组 */ private Class[] parameterTypes; /** * 方法参数值数组 */ private Object[] parameterValue; public RpcRequestMessage(int sequenceId, String interfaceName, String methodName, Class<?> returnType, Class[] parameterTypes, Object[] parameterValue) { super.setSequenceId(sequenceId); this.interfaceName = interfaceName; this.methodName = methodName; this.returnType = returnType; this.parameterTypes = parameterTypes; this.parameterValue = parameterValue; } @Override public int getMessageType() { return RPC_MESSAGE_TYPE_REQUEST; } } \",\"响应消息\",\"@Data @ToString(callSuper = true) public class RpcResponseMessage extends Message { /** * 返回值 */ private Object returnValue; /** * 异常值 */ private Exception exceptionValue; @Override public int getMessageType() { return RPC_MESSAGE_TYPE_RESPONSE; } } \",\"服务器架子\",\"@Slf4j public class RpcServer { public static void main(String[] args) { NioEventLoopGroup boss = new NioEventLoopGroup(); NioEventLoopGroup worker = new NioEventLoopGroup(); LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG); MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable(); // rpc 请求消息处理器，待实现 RpcRequestMessageHandler RPC_HANDLER = new RpcRequestMessageHandler(); try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.channel(NioServerSocketChannel.class); serverBootstrap.group(boss, worker); serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new ProcotolFrameDecoder()); ch.pipeline().addLast(LOGGING_HANDLER); ch.pipeline().addLast(MESSAGE_CODEC); ch.pipeline().addLast(RPC_HANDLER); } }); Channel channel = serverBootstrap.bind(8080).sync().channel(); channel.closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"server error\\\", e); } finally { boss.shutdownGracefully(); worker.shutdownGracefully(); } } } \",\"客户端架子\",\"public class RpcClient { public static void main(String[] args) { NioEventLoopGroup group = new NioEventLoopGroup(); LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG); MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable(); // rpc 响应消息处理器，待实现 RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(group); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new ProcotolFrameDecoder()); ch.pipeline().addLast(LOGGING_HANDLER); ch.pipeline().addLast(MESSAGE_CODEC); ch.pipeline().addLast(RPC_HANDLER); } }); Channel channel = bootstrap.connect(\\\"localhost\\\", 8080).sync().channel(); channel.closeFuture().sync(); } catch (Exception e) { log.error(\\\"client error\\\", e); } finally { group.shutdownGracefully(); } } } \",\"服务器端的 service 获取\",\"public class ServicesFactory { static Properties properties; static Map<Class<?>, Object> map = new ConcurrentHashMap<>(); static { try (InputStream in = Config.class.getResourceAsStream(\\\"/application.properties\\\")) { properties = new Properties(); properties.load(in); Set<String> names = properties.stringPropertyNames(); for (String name : names) { if (name.endsWith(\\\"Service\\\")) { Class<?> interfaceClass = Class.forName(name); Class<?> instanceClass = Class.forName(properties.getProperty(name)); map.put(interfaceClass, instanceClass.newInstance()); } } } catch (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) { throw new ExceptionInInitializerError(e); } } public static <T> T getService(Class<T> interfaceClass) { return (T) map.get(interfaceClass); } } \",\"相关配置 application.properties\",\"serializer.algorithm=Json cn.itcast.server.service.HelloService=cn.itcast.server.service.HelloServiceImpl \"]},\"489\":{\"h\":\"2）服务器 handler\",\"t\":[\"@Slf4j @ChannelHandler.Sharable public class RpcRequestMessageHandler extends SimpleChannelInboundHandler<RpcRequestMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, RpcRequestMessage message) { RpcResponseMessage response = new RpcResponseMessage(); response.setSequenceId(message.getSequenceId()); try { // 获取真正的实现对象 HelloService service = (HelloService) ServicesFactory.getService(Class.forName(message.getInterfaceName())); // 获取要调用的方法 Method method = service.getClass().getMethod(message.getMethodName(), message.getParameterTypes()); // 调用方法 Object invoke = method.invoke(service, message.getParameterValue()); // 调用成功 response.setReturnValue(invoke); } catch (Exception e) { e.printStackTrace(); // 调用异常 response.setExceptionValue(e); } // 返回结果 ctx.writeAndFlush(response); } } \"]},\"490\":{\"h\":\"3）客户端代码第一版\",\"t\":[\"只发消息\",\"@Slf4j public class RpcClient { public static void main(String[] args) { NioEventLoopGroup group = new NioEventLoopGroup(); LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG); MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable(); RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(group); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new ProcotolFrameDecoder()); ch.pipeline().addLast(LOGGING_HANDLER); ch.pipeline().addLast(MESSAGE_CODEC); ch.pipeline().addLast(RPC_HANDLER); } }); Channel channel = bootstrap.connect(\\\"localhost\\\", 8080).sync().channel(); ChannelFuture future = channel.writeAndFlush(new RpcRequestMessage( 1, \\\"cn.itcast.server.service.HelloService\\\", \\\"sayHello\\\", String.class, new Class[]{String.class}, new Object[]{\\\"张三\\\"} )).addListener(promise -> { if (!promise.isSuccess()) { Throwable cause = promise.cause(); log.error(\\\"error\\\", cause); } }); channel.closeFuture().sync(); } catch (Exception e) { log.error(\\\"client error\\\", e); } finally { group.shutdownGracefully(); } } } \"]},\"491\":{\"h\":\"4）客户端 handler 第一版\",\"t\":[\"@Slf4j @ChannelHandler.Sharable public class RpcResponseMessageHandler extends SimpleChannelInboundHandler<RpcResponseMessage> { @Override protected void channelRead0(ChannelHandlerContext ctx, RpcResponseMessage msg) throws Exception { log.debug(\\\"{}\\\", msg); } } \"]},\"492\":{\"h\":\"5）客户端代码 第二版\",\"t\":[\"包括 channel 管理，代理，接收结果\",\"@Slf4j public class RpcClientManager { public static void main(String[] args) { HelloService service = getProxyService(HelloService.class); System.out.println(service.sayHello(\\\"zhangsan\\\")); // System.out.println(service.sayHello(\\\"lisi\\\")); // System.out.println(service.sayHello(\\\"wangwu\\\")); } // 创建代理类 public static <T> T getProxyService(Class<T> serviceClass) { ClassLoader loader = serviceClass.getClassLoader(); Class<?>[] interfaces = new Class[]{serviceClass}; // sayHello \\\"张三\\\" Object o = Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -> { // 1. 将方法调用转换为 消息对象 int sequenceId = SequenceIdGenerator.nextId(); RpcRequestMessage msg = new RpcRequestMessage( sequenceId, serviceClass.getName(), method.getName(), method.getReturnType(), method.getParameterTypes(), args ); // 2. 将消息对象发送出去 getChannel().writeAndFlush(msg); // 3. 准备一个空 Promise 对象，来接收结果 指定 promise 对象异步接收结果线程 DefaultPromise<Object> promise = new DefaultPromise<>(getChannel().eventLoop()); RpcResponseMessageHandler.PROMISES.put(sequenceId, promise); // promise.addListener(future -> { // // 线程 // }); // 4. 等待 promise 结果 promise.await(); if(promise.isSuccess()) { // 调用正常 return promise.getNow(); } else { // 调用失败 throw new RuntimeException(promise.cause()); } }); return (T) o; } private static Channel channel = null; private static final Object LOCK = new Object(); // 获取唯一的 channel 对象 public static Channel getChannel() { if (channel != null) { return channel; } synchronized (LOCK) { // t2 if (channel != null) { // t1 return channel; } initChannel(); return channel; } } // 初始化 channel 方法 private static void initChannel() { NioEventLoopGroup group = new NioEventLoopGroup(); LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG); MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable(); RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler(); Bootstrap bootstrap = new Bootstrap(); bootstrap.channel(NioSocketChannel.class); bootstrap.group(group); bootstrap.handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new ProcotolFrameDecoder()); ch.pipeline().addLast(LOGGING_HANDLER); ch.pipeline().addLast(MESSAGE_CODEC); ch.pipeline().addLast(RPC_HANDLER); } }); try { channel = bootstrap.connect(\\\"localhost\\\", 8080).sync().channel(); channel.closeFuture().addListener(future -> { group.shutdownGracefully(); }); } catch (Exception e) { log.error(\\\"client error\\\", e); } } } \"]},\"493\":{\"h\":\"6）客户端 handler 第二版\",\"t\":[\"@Slf4j @ChannelHandler.Sharable public class RpcResponseMessageHandler extends SimpleChannelInboundHandler<RpcResponseMessage> { // 序号 用来接收结果的 promise 对象 public static final Map<Integer, Promise<Object>> PROMISES = new ConcurrentHashMap<>(); @Override protected void channelRead0(ChannelHandlerContext ctx, RpcResponseMessage msg) throws Exception { log.debug(\\\"{}\\\", msg); // 拿到空的 promise Promise<Object> promise = PROMISES.remove(msg.getSequenceId()); if (promise != null) { Object returnValue = msg.getReturnValue(); Exception exceptionValue = msg.getExceptionValue(); if(exceptionValue != null) { promise.setFailure(exceptionValue); } else { promise.setSuccess(returnValue); } } } } \"]},\"494\":{\"h\":\"2. 源码分析\"},\"495\":{\"h\":\"2.1 启动剖析\",\"t\":[\"我们就来看看 netty 中对下面的代码是怎样进行处理的\",\"//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector Selector selector = Selector.open(); //2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config NioServerSocketChannel attachment = new NioServerSocketChannel(); //3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.configureBlocking(false); //4 启动 nio boss 线程执行接下来的操作 //5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件 SelectionKey selectionKey = serverSocketChannel.register(selector, 0, attachment); //6 head -> 初始化器 -> ServerBootstrapAcceptor -> tail，初始化器是一次性的，只为添加 acceptor //7 绑定端口 serverSocketChannel.bind(new InetSocketAddress(8080)); //8 触发 channel active 事件，在 head 中关注 op_accept 事件 selectionKey.interestOps(SelectionKey.OP_ACCEPT); \",\"入口 io.netty.bootstrap.ServerBootstrap#bind\",\"关键代码 io.netty.bootstrap.AbstractBootstrap#doBind\",\"private ChannelFuture doBind(final SocketAddress localAddress) { // 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码 final ChannelFuture regFuture = initAndRegister(); final Channel channel = regFuture.channel(); if (regFuture.cause() != null) { return regFuture; } // 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分 // 2.1 如果已经完成 if (regFuture.isDone()) { ChannelPromise promise = channel.newPromise(); // 3.1 立刻调用 doBind0 doBind0(regFuture, channel, localAddress, promise); return promise; } // 2.2 还没有完成 else { final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel); // 3.2 回调 doBind0 regFuture.addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { Throwable cause = future.cause(); if (cause != null) { // 处理异常... promise.setFailure(cause); } else { promise.registered(); // 3. 由注册线程去执行 doBind0 doBind0(regFuture, channel, localAddress, promise); } } }); return promise; } } \",\"关键代码 io.netty.bootstrap.AbstractBootstrap#initAndRegister\",\"final ChannelFuture initAndRegister() { Channel channel = null; try { channel = channelFactory.newChannel(); // 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer init(channel); } catch (Throwable t) { // 处理异常... return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t); } // 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上 ChannelFuture regFuture = config().group().register(channel); if (regFuture.cause() != null) { // 处理异常... } return regFuture; } \",\"关键代码 io.netty.bootstrap.ServerBootstrap#init\",\"// 这里 channel 实际上是 NioServerSocketChannel void init(Channel channel) throws Exception { final Map<ChannelOption<?>, Object> options = options0(); synchronized (options) { setChannelOptions(channel, options, logger); } final Map<AttributeKey<?>, Object> attrs = attrs0(); synchronized (attrs) { for (Entry<AttributeKey<?>, Object> e: attrs.entrySet()) { @SuppressWarnings(\\\"unchecked\\\") AttributeKey<Object> key = (AttributeKey<Object>) e.getKey(); channel.attr(key).set(e.getValue()); } } ChannelPipeline p = channel.pipeline(); final EventLoopGroup currentChildGroup = childGroup; final ChannelHandler currentChildHandler = childHandler; final Entry<ChannelOption<?>, Object>[] currentChildOptions; final Entry<AttributeKey<?>, Object>[] currentChildAttrs; synchronized (childOptions) { currentChildOptions = childOptions.entrySet().toArray(newOptionArray(0)); } synchronized (childAttrs) { currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(0)); } // 为 NioServerSocketChannel 添加初始化器 p.addLast(new ChannelInitializer<Channel>() { @Override public void initChannel(final Channel ch) throws Exception { final ChannelPipeline pipeline = ch.pipeline(); ChannelHandler handler = config.handler(); if (handler != null) { pipeline.addLast(handler); } // 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel ch.eventLoop().execute(new Runnable() { @Override public void run() { pipeline.addLast(new ServerBootstrapAcceptor( ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs)); } }); } }); } \",\"关键代码 io.netty.channel.AbstractChannel.AbstractUnsafe#register\",\"public final void register(EventLoop eventLoop, final ChannelPromise promise) { // 一些检查，略... AbstractChannel.this.eventLoop = eventLoop; if (eventLoop.inEventLoop()) { register0(promise); } else { try { // 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行 // 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程 // 这行代码完成的事实是 main -> nio boss 线程的切换 eventLoop.execute(new Runnable() { @Override public void run() { register0(promise); } }); } catch (Throwable t) { // 日志记录... closeForcibly(); closeFuture.setClosed(); safeSetFailure(promise, t); } } } \",\"io.netty.channel.AbstractChannel.AbstractUnsafe#register0\",\"private void register0(ChannelPromise promise) { try { if (!promise.setUncancellable() || !ensureOpen(promise)) { return; } boolean firstRegistration = neverRegistered; // 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel doRegister(); neverRegistered = false; registered = true; // 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel pipeline.invokeHandlerAddedIfNeeded(); // 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0 safeSetSuccess(promise); pipeline.fireChannelRegistered(); // 对应 server socket channel 还未绑定，isActive 为 false if (isActive()) { if (firstRegistration) { pipeline.fireChannelActive(); } else if (config().isAutoRead()) { beginRead(); } } } catch (Throwable t) { // Close the channel directly to avoid FD leak. closeForcibly(); closeFuture.setClosed(); safeSetFailure(promise, t); } } \",\"关键代码 io.netty.channel.ChannelInitializer#initChannel\",\"private boolean initChannel(ChannelHandlerContext ctx) throws Exception { if (initMap.add(ctx)) { // Guard against re-entrance. try { // 1.2.2.1 执行初始化 initChannel((C) ctx.channel()); } catch (Throwable cause) { exceptionCaught(ctx, cause); } finally { // 1.2.2.2 移除初始化器 ChannelPipeline pipeline = ctx.pipeline(); if (pipeline.context(this) != null) { pipeline.remove(this); } } return true; } return false; } \",\"关键代码 io.netty.bootstrap.AbstractBootstrap#doBind0\",\"// 3.1 或 3.2 执行 doBind0 private static void doBind0( final ChannelFuture regFuture, final Channel channel, final SocketAddress localAddress, final ChannelPromise promise) { channel.eventLoop().execute(new Runnable() { @Override public void run() { if (regFuture.isSuccess()) { channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE); } else { promise.setFailure(regFuture.cause()); } } }); } \",\"关键代码 io.netty.channel.AbstractChannel.AbstractUnsafe#bind\",\"public final void bind(final SocketAddress localAddress, final ChannelPromise promise) { assertEventLoop(); if (!promise.setUncancellable() || !ensureOpen(promise)) { return; } if (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) && localAddress instanceof InetSocketAddress && !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() && !PlatformDependent.isWindows() && !PlatformDependent.maybeSuperUser()) { // 记录日志... } boolean wasActive = isActive(); try { // 3.3 执行端口绑定 doBind(localAddress); } catch (Throwable t) { safeSetFailure(promise, t); closeIfClosed(); return; } if (!wasActive && isActive()) { invokeLater(new Runnable() { @Override public void run() { // 3.4 触发 active 事件 pipeline.fireChannelActive(); } }); } safeSetSuccess(promise); } \",\"3.3 关键代码 io.netty.channel.socket.nio.NioServerSocketChannel#doBind\",\"protected void doBind(SocketAddress localAddress) throws Exception { if (PlatformDependent.javaVersion() >= 7) { javaChannel().bind(localAddress, config.getBacklog()); } else { javaChannel().socket().bind(localAddress, config.getBacklog()); } } \",\"3.4 关键代码 io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive\",\"public void channelActive(ChannelHandlerContext ctx) { ctx.fireChannelActive(); // 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册) readIfIsAutoRead(); } \",\"关键代码 io.netty.channel.nio.AbstractNioChannel#doBeginRead\",\"protected void doBeginRead() throws Exception { // Channel.read() or ChannelHandlerContext.read() was called final SelectionKey selectionKey = this.selectionKey; if (!selectionKey.isValid()) { return; } readPending = true; final int interestOps = selectionKey.interestOps(); // readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件 if ((interestOps & readInterestOp) == 0) { selectionKey.interestOps(interestOps | readInterestOp); } } \"]},\"496\":{\"h\":\"2.2 NioEventLoop 剖析\",\"t\":[\"NioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），\",\"提交任务代码 io.netty.util.concurrent.SingleThreadEventExecutor#execute\",\"public void execute(Runnable task) { if (task == null) { throw new NullPointerException(\\\"task\\\"); } boolean inEventLoop = inEventLoop(); // 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列 addTask(task); if (!inEventLoop) { // inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread startThread(); if (isShutdown()) { // 如果已经 shutdown，做拒绝逻辑，代码略... } } if (!addTaskWakesUp && wakesUpForTask(task)) { // 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程 wakeup(inEventLoop); } } \",\"唤醒 select 阻塞线程io.netty.channel.nio.NioEventLoop#wakeup\",\"@Override protected void wakeup(boolean inEventLoop) { if (!inEventLoop && wakenUp.compareAndSet(false, true)) { selector.wakeup(); } } \",\"启动 EventLoop 主循环 io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread\",\"private void doStartThread() { assert thread == null; executor.execute(new Runnable() { @Override public void run() { // 将线程池的当前线程保存在成员变量中，以便后续使用 thread = Thread.currentThread(); if (interrupted) { thread.interrupt(); } boolean success = false; updateLastExecutionTime(); try { // 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下 SingleThreadEventExecutor.this.run(); success = true; } catch (Throwable t) { logger.warn(\\\"Unexpected exception from an event executor: \\\", t); } finally { // 清理工作，代码略... } } }); } \",\"io.netty.channel.nio.NioEventLoop#run 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件\",\"protected void run() { for (;;) { try { try { // calculateStrategy 的逻辑如下： // 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch // 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞 switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) { case SelectStrategy.CONTINUE: continue; case SelectStrategy.BUSY_WAIT: case SelectStrategy.SELECT: // 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒 // 进行 select 阻塞，并设置唤醒状态为 false boolean oldWakenUp = wakenUp.getAndSet(false); // 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup // 下面的 select 方法不会阻塞 // 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢? // 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时 // 才能执行，让 select 方法无谓阻塞 select(oldWakenUp); if (wakenUp.get()) { selector.wakeup(); } default: } } catch (IOException e) { rebuildSelector0(); handleLoopException(e); continue; } cancelledKeys = 0; needsToSelectAgain = false; // ioRatio 默认是 50 final int ioRatio = this.ioRatio; if (ioRatio == 100) { try { processSelectedKeys(); } finally { // ioRatio 为 100 时，总是运行完所有非 IO 任务 runAllTasks(); } } else { final long ioStartTime = System.nanoTime(); try { processSelectedKeys(); } finally { // 记录 io 事件处理耗时 final long ioTime = System.nanoTime() - ioStartTime; // 运行非 IO 任务，一旦超时会退出 runAllTasks runAllTasks(ioTime * (100 - ioRatio) / ioRatio); } } } catch (Throwable t) { handleLoopException(t); } try { if (isShuttingDown()) { closeAll(); if (confirmShutdown()) { return; } } } catch (Throwable t) { handleLoopException(t); } } } \"]},\"497\":{\"h\":\"⚠️ 注意\",\"t\":[\"这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：\",\"由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程\",\"由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作\",\"参考下图\",\"<./../../../.vuepress/public/assets/img src=\\\"./../../../.vuepress/public/assets/img/0032.png\\\" />\",\"io.netty.channel.nio.NioEventLoop#select\",\"private void select(boolean oldWakenUp) throws IOException { Selector selector = this.selector; try { int selectCnt = 0; long currentTimeNanos = System.nanoTime(); // 计算等待时间 // * 没有 scheduledTask，超时时间为 1s // * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间` long selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos); for (;;) { long timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L; // 如果超时，退出循环 if (timeoutMillis <= 0) { if (selectCnt == 0) { selector.selectNow(); selectCnt = 1; } break; } // 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行 // wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup if (hasTasks() && wakenUp.compareAndSet(false, true)) { selector.selectNow(); selectCnt = 1; break; } // select 有限时阻塞 // 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100% int selectedKeys = selector.select(timeoutMillis); // 计数加 1 selectCnt ++; // 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环 if (selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) { break; } if (Thread.interrupted()) { // 线程被打断，退出循环 // 记录日志 selectCnt = 1; break; } long time = System.nanoTime(); if (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) >= currentTimeNanos) { // 如果超时，计数重置为 1，下次循环就会 break selectCnt = 1; } // 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512 // 这是为了解决 nio 空轮询 bug else if (SELECTOR_AUTO_REBUILD_THRESHOLD > 0 && selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) { // 重建 selector selector = selectRebuildSelector(selectCnt); selectCnt = 1; break; } currentTimeNanos = time; } if (selectCnt > MIN_PREMATURE_SELECTOR_RETURNS) { // 记录日志 } } catch (CancelledKeyException e) { // 记录日志 } } \",\"处理 keys io.netty.channel.nio.NioEventLoop#processSelectedKeys\",\"private void processSelectedKeys() { if (selectedKeys != null) { // 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet // SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet） processSelectedKeysOptimized(); } else { processSelectedKeysPlain(selector.selectedKeys()); } } \",\"io.netty.channel.nio.NioEventLoop#processSelectedKey\",\"private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) { final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe(); // 当 key 取消或关闭时会导致这个 key 无效 if (!k.isValid()) { // 无效时处理... return; } try { int readyOps = k.readyOps(); // 连接事件 if ((readyOps & SelectionKey.OP_CONNECT) != 0) { int ops = k.interestOps(); ops &= ~SelectionKey.OP_CONNECT; k.interestOps(ops); unsafe.finishConnect(); } // 可写事件 if ((readyOps & SelectionKey.OP_WRITE) != 0) { ch.unsafe().forceFlush(); } // 可读或可接入事件 if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) { // 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read // 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read unsafe.read(); } } catch (CancelledKeyException ignored) { unsafe.close(unsafe.voidPromise()); } } \"]},\"498\":{\"h\":\"2.3 accept 剖析\",\"t\":[\"nio 中如下代码，在 netty 中的流程\",\"//1 阻塞直到事件发生 selector.select(); Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); while (iter.hasNext()) { //2 拿到一个事件 SelectionKey key = iter.next(); //3 如果是 accept 事件 if (key.isAcceptable()) { //4 执行 accept SocketChannel channel = serverSocketChannel.accept(); channel.configureBlocking(false); //5 关注 read 事件 channel.register(selector, SelectionKey.OP_READ); } // ... } \",\"先来看可接入事件处理（accept）\",\"io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read\",\"public void read() { assert eventLoop().inEventLoop(); final ChannelConfig config = config(); final ChannelPipeline pipeline = pipeline(); final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle(); allocHandle.reset(config); boolean closed = false; Throwable exception = null; try { try { do { // doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf // readBuf 是一个 ArrayList 用来缓存消息 int localRead = doReadMessages(readBuf); if (localRead == 0) { break; } if (localRead < 0) { closed = true; break; } // localRead 为 1，就一条消息，即接收一个客户端连接 allocHandle.incMessagesRead(localRead); } while (allocHandle.continueReading()); } catch (Throwable t) { exception = t; } int size = readBuf.size(); for (int i = 0; i < size; i ++) { readPending = false; // 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 // io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead pipeline.fireChannelRead(readBuf.get(i)); } readBuf.clear(); allocHandle.readComplete(); pipeline.fireChannelReadComplete(); if (exception != null) { closed = closeOnReadError(exception); pipeline.fireExceptionCaught(exception); } if (closed) { inputShutdown = true; if (isOpen()) { close(voidPromise()); } } } finally { if (!readPending && !config.isAutoRead()) { removeReadOp(); } } } \",\"关键代码 io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead\",\"public void channelRead(ChannelHandlerContext ctx, Object msg) { // 这时的 msg 是 NioSocketChannel final Channel child = (Channel) msg; // NioSocketChannel 添加 childHandler 即初始化器 child.pipeline().addLast(childHandler); // 设置选项 setChannelOptions(child, childOptions, logger); for (Entry<AttributeKey<?>, Object> e: childAttrs) { child.attr((AttributeKey<Object>) e.getKey()).set(e.getValue()); } try { // 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程 childGroup.register(child).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (!future.isSuccess()) { forceClose(child, future.cause()); } } }); } catch (Throwable t) { forceClose(child, t); } } \",\"又回到了熟悉的 io.netty.channel.AbstractChannel.AbstractUnsafe#register 方法\",\"public final void register(EventLoop eventLoop, final ChannelPromise promise) { // 一些检查，略... AbstractChannel.this.eventLoop = eventLoop; if (eventLoop.inEventLoop()) { register0(promise); } else { try { // 这行代码完成的事实是 nio boss -> nio worker 线程的切换 eventLoop.execute(new Runnable() { @Override public void run() { register0(promise); } }); } catch (Throwable t) { // 日志记录... closeForcibly(); closeFuture.setClosed(); safeSetFailure(promise, t); } } } \",\"io.netty.channel.AbstractChannel.AbstractUnsafe#register0\",\"private void register0(ChannelPromise promise) { try { if (!promise.setUncancellable() || !ensureOpen(promise)) { return; } boolean firstRegistration = neverRegistered; doRegister(); neverRegistered = false; registered = true; // 执行初始化器，执行前 pipeline 中只有 head -> 初始化器 -> tail pipeline.invokeHandlerAddedIfNeeded(); // 执行后就是 head -> logging handler -> my handler -> tail safeSetSuccess(promise); pipeline.fireChannelRegistered(); if (isActive()) { if (firstRegistration) { // 触发 pipeline 上 active 事件 pipeline.fireChannelActive(); } else if (config().isAutoRead()) { beginRead(); } } } catch (Throwable t) { closeForcibly(); closeFuture.setClosed(); safeSetFailure(promise, t); } } \",\"回到了熟悉的代码 io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive\",\"public void channelActive(ChannelHandlerContext ctx) { ctx.fireChannelActive(); // 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取) readIfIsAutoRead(); } \",\"io.netty.channel.nio.AbstractNioChannel#doBeginRead\",\"protected void doBeginRead() throws Exception { // Channel.read() or ChannelHandlerContext.read() was called final SelectionKey selectionKey = this.selectionKey; if (!selectionKey.isValid()) { return; } readPending = true; // 这时候 interestOps 是 0 final int interestOps = selectionKey.interestOps(); if ((interestOps & readInterestOp) == 0) { // 关注 read 事件 selectionKey.interestOps(interestOps | readInterestOp); } } \"]},\"499\":{\"h\":\"2.4 read 剖析\",\"t\":[\"再来看可读事件 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete\",\"public final void read() { final ChannelConfig config = config(); if (shouldBreakReadReady(config)) { clearReadPending(); return; } final ChannelPipeline pipeline = pipeline(); // io.netty.allocator.type 决定 allocator 的实现 final ByteBufAllocator allocator = config.getAllocator(); // 用来分配 byteBuf，确定单次读取大小 final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle(); allocHandle.reset(config); ByteBuf byteBuf = null; boolean close = false; try { do { byteBuf = allocHandle.allocate(allocator); // 读取 allocHandle.lastBytesRead(doReadBytes(byteBuf)); if (allocHandle.lastBytesRead() <= 0) { byteBuf.release(); byteBuf = null; close = allocHandle.lastBytesRead() < 0; if (close) { readPending = false; } break; } allocHandle.incMessagesRead(1); readPending = false; // 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler pipeline.fireChannelRead(byteBuf); byteBuf = null; } // 是否要继续循环 while (allocHandle.continueReading()); allocHandle.readComplete(); // 触发 read complete 事件 pipeline.fireChannelReadComplete(); if (close) { closeOnRead(pipeline); } } catch (Throwable t) { handleReadException(pipeline, byteBuf, t, close, allocHandle); } finally { if (!readPending && !config.isAutoRead()) { removeReadOp(); } } } \",\"io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)\",\"public boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) { return // 一般为 true config.isAutoRead() && // respectMaybeMoreData 默认为 true // maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true (!respectMaybeMoreData || maybeMoreDataSupplier.get()) && // 小于最大次数，maxMessagePerRead 默认 16 totalMessages < maxMessagePerRead && // 实际读到了数据 totalBytesRead > 0; } \"]},\"500\":{\"h\":\"Netty\"}},\"dirtCount\":0,\"index\":[[\"醒来后\",{\"1\":{\"497\":1}}],[\"计数超过阈值\",{\"1\":{\"497\":1}}],[\"计数重置为\",{\"1\":{\"497\":1}}],[\"计数加\",{\"1\":{\"497\":1}}],[\"计算等待时间\",{\"1\":{\"497\":1}}],[\"计算\",{\"1\":{\"397\":1}}],[\"计算多个有序集合的交集\",{\"1\":{\"153\":1}}],[\"计算多个有序集合的并集\",{\"1\":{\"153\":1}}],[\"占用\",{\"1\":{\"497\":1}}],[\"占位符\",{\"1\":{\"227\":1}}],[\"置为\",{\"1\":{\"496\":1}}],[\"剖析\",{\"0\":{\"496\":1,\"498\":1,\"499\":1}}],[\"记录\",{\"1\":{\"496\":1}}],[\"记录日志\",{\"1\":{\"495\":1,\"497\":3}}],[\"记录了这个\",{\"1\":{\"445\":1}}],[\"附件为\",{\"1\":{\"495\":1}}],[\"附带图片\",{\"1\":{\"34\":1}}],[\"首次执行\",{\"1\":{\"495\":1}}],[\"首先要说明\",{\"1\":{\"425\":1}}],[\"首先启动服务器端\",{\"1\":{\"390\":1}}],[\"首先第一种情况\",{\"1\":{\"130\":1}}],[\"首先\",{\"1\":{\"129\":1,\"145\":1}}],[\"首先我们要先确定我们的starter的名字\",{\"1\":{\"12\":1}}],[\"做拒绝逻辑\",{\"1\":{\"496\":1}}],[\"做的事就是将原生\",{\"1\":{\"495\":1}}],[\"做的事就是添加一个初始化器\",{\"1\":{\"495\":1}}],[\"做一个标记\",{\"1\":{\"346\":1}}],[\"源码分析\",{\"0\":{\"494\":1}}],[\"序号\",{\"1\":{\"493\":1}}],[\"序列化错误\",{\"1\":{\"478\":1}}],[\"序列化方法\",{\"1\":{\"478\":1}}],[\"序列化时\",{\"1\":{\"478\":1}}],[\"序列化算法\",{\"1\":{\"465\":1}}],[\"序列化是指将数据结构转换为字节流的过程\",{\"1\":{\"154\":1}}],[\"序列化\",{\"0\":{\"154\":1},\"1\":{\"478\":2}}],[\"待实现\",{\"1\":{\"488\":2}}],[\"省略旧的代码\",{\"1\":{\"488\":1}}],[\"省略一些不重要的方法\",{\"1\":{\"438\":1}}],[\"决定\",{\"1\":{\"486\":1,\"499\":1}}],[\"决定入站缓冲区的大小\",{\"1\":{\"486\":1}}],[\"统一采用\",{\"1\":{\"486\":1}}],[\"统计\",{\"1\":{\"364\":1}}],[\"控制\",{\"1\":{\"486\":1}}],[\"控制台配置lazy模式\",{\"0\":{\"135\":1}}],[\"既可用于\",{\"1\":{\"484\":1}}],[\"既然mq通知不一定发送到交易服务\",{\"1\":{\"145\":1}}],[\"外\",{\"1\":{\"481\":1}}],[\"外键到b表的\",{\"1\":{\"234\":1}}],[\"外键约束\",{\"0\":{\"234\":1},\"1\":{\"233\":1}}],[\"课堂调试关键断点为\",{\"1\":{\"481\":1}}],[\"逻辑上没有最大值限制\",{\"1\":{\"481\":1}}],[\"半连接队列\",{\"1\":{\"481\":1}}],[\"半包用这种办法还是不好解决\",{\"1\":{\"457\":1}}],[\"半包现象\",{\"0\":{\"454\":1}}],[\"半包\",{\"1\":{\"351\":1,\"407\":1,\"455\":1}}],[\"断点类型加以区分\",{\"1\":{\"495\":1}}],[\"断点2\",{\"1\":{\"480\":1}}],[\"断点1\",{\"1\":{\"480\":1}}],[\"属于比较昂贵的操作\",{\"1\":{\"496\":1}}],[\"属于操作系统参数\",{\"1\":{\"482\":1}}],[\"属于\",{\"1\":{\"480\":1,\"481\":1,\"483\":1,\"484\":1,\"485\":1,\"486\":1}}],[\"属性值\",{\"1\":{\"469\":2}}],[\"属性名\",{\"1\":{\"469\":2}}],[\"属性\",{\"0\":{\"199\":1}}],[\"属性或内部语句中使用属性值\",{\"1\":{\"197\":1}}],[\"增加配置类和配置文件\",{\"1\":{\"478\":1}}],[\"增加20\",{\"1\":{\"153\":1}}],[\"范围\",{\"1\":{\"478\":1}}],[\"范围查询和排序操作\",{\"1\":{\"236\":1}}],[\"范围查询\",{\"1\":{\"99\":1}}],[\"抽象一个\",{\"1\":{\"478\":1}}],[\"核心代码如下\",{\"1\":{\"478\":1}}],[\"核心数的线程\",{\"1\":{\"388\":1}}],[\"便于处理\",{\"1\":{\"478\":1}}],[\"便于我们扩展一些自定义的功能来替换默认实现\",{\"1\":{\"22\":1}}],[\"扩展序列化算法\",{\"0\":{\"478\":1}}],[\"扩容不能超过\",{\"1\":{\"439\":1}}],[\"扩容规则是\",{\"1\":{\"439\":1}}],[\"扩容\",{\"0\":{\"439\":1}}],[\"怎么判断客户端连接是否假死呢\",{\"1\":{\"475\":1}}],[\"怎么办\",{\"1\":{\"440\":1}}],[\"得到的反馈是发送超时\",{\"1\":{\"475\":1}}],[\"公网网络不稳定\",{\"1\":{\"475\":1}}],[\"公平消费\",{\"1\":{\"124\":1}}],[\"仍然占用着资源\",{\"1\":{\"475\":1}}],[\"仍然删除分支xxx\",{\"1\":{\"46\":1}}],[\"机房等\",{\"1\":{\"475\":1}}],[\"您已被拉入\",{\"1\":{\"472\":1}}],[\"群不存在\",{\"1\":{\"472\":2}}],[\"群加入成功\",{\"1\":{\"472\":1}}],[\"群管理器\",{\"1\":{\"472\":1}}],[\"群聊\",{\"0\":{\"472\":1},\"1\":{\"465\":1,\"472\":1}}],[\"独立出来\",{\"1\":{\"471\":1}}],[\"构造消息对象\",{\"1\":{\"470\":1}}],[\"构造器\",{\"0\":{\"258\":1}}],[\"唤醒\",{\"1\":{\"470\":1,\"496\":1}}],[\"成功时返回组对象\",{\"1\":{\"469\":1}}],[\"成功处理消息\",{\"1\":{\"139\":1}}],[\"成员集合\",{\"1\":{\"469\":1}}],[\"成员名\",{\"1\":{\"469\":2}}],[\"成员\",{\"1\":{\"469\":2}}],[\"哪个\",{\"1\":{\"469\":4}}],[\"父类\",{\"1\":{\"467\":2}}],[\"父表数据被删除\",{\"1\":{\"234\":2}}],[\"什么时候可以加\",{\"0\":{\"467\":1}}],[\"什么时候去调\",{\"1\":{\"246\":1}}],[\"引用计数\",{\"1\":{\"466\":1}}],[\"引入了窗口概念\",{\"1\":{\"455\":1}}],[\"引入了\",{\"1\":{\"363\":1,\"478\":1}}],[\"引入依赖\",{\"1\":{\"168\":1,\"169\":1,\"187\":1}}],[\"引入\",{\"1\":{\"41\":1}}],[\"张三\",{\"1\":{\"466\":1,\"490\":1,\"492\":1}}],[\"跟业务相关\",{\"1\":{\"465\":1}}],[\"魔数\",{\"1\":{\"465\":1}}],[\"束脩\",{\"1\":{\"462\":1}}],[\"真个是不亦乐乎\",{\"1\":{\"462\":1}}],[\"少不得束修金\",{\"1\":{\"462\":1}}],[\"少一次内存复制\",{\"1\":{\"435\":1}}],[\"肉亦可\",{\"1\":{\"462\":1}}],[\"鸭亦可\",{\"1\":{\"462\":1}}],[\"白菜豆腐不可\",{\"1\":{\"462\":1}}],[\"白菜豆腐不可少\",{\"1\":{\"462\":1}}],[\"白白浪费了\",{\"1\":{\"369\":1}}],[\"遂与主家理论\",{\"1\":{\"462\":1}}],[\"年关将至\",{\"1\":{\"462\":1}}],[\"丝毫未见鸡鸭鱼肉的款待\",{\"1\":{\"462\":1}}],[\"私塾先生据理力争\",{\"1\":{\"462\":1}}],[\"私塾先生临行时\",{\"1\":{\"462\":1}}],[\"私塾先生先是很不解\",{\"1\":{\"462\":1}}],[\"私塾先生虽然认真教课\",{\"1\":{\"462\":1}}],[\"私钥文件路径\",{\"1\":{\"90\":1}}],[\"双方唇枪舌战\",{\"1\":{\"462\":1}}],[\"双方签订了一纸协议\",{\"1\":{\"462\":1}}],[\"双向通信\",{\"0\":{\"448\":1},\"1\":{\"30\":1}}],[\"留\",{\"1\":{\"462\":1}}],[\"留我不\",{\"1\":{\"462\":1}}],[\"留客天\",{\"1\":{\"462\":1}}],[\"天留\",{\"1\":{\"462\":1}}],[\"天天学习\",{\"1\":{\"213\":1}}],[\"制定通信双方要共同遵守的通信规则\",{\"1\":{\"462\":1}}],[\"剥离字节数\",{\"1\":{\"460\":1}}],[\"预设长度\",{\"0\":{\"460\":1}}],[\"预览图片的\",{\"1\":{\"37\":1}}],[\"固定分隔符\",{\"0\":{\"459\":1}}],[\"固定长度\",{\"0\":{\"458\":1}}],[\"浪费\",{\"1\":{\"458\":1}}],[\"采用这种方法后\",{\"1\":{\"458\":1}}],[\"采用心跳机制\",{\"1\":{\"163\":1}}],[\"略\",{\"1\":{\"457\":1,\"495\":1,\"498\":1}}],[\"短链接\",{\"0\":{\"457\":1},\"1\":{\"456\":1}}],[\"希望尽可能发送足够大的数据\",{\"1\":{\"455\":1}}],[\"希望能\",{\"1\":{\"244\":1}}],[\"头\",{\"1\":{\"455\":1}}],[\"头占用\",{\"1\":{\"455\":2}}],[\"头后剩余能够作为数据传输的字节数\",{\"1\":{\"455\":1}}],[\"头和\",{\"1\":{\"455\":2}}],[\"头部信息较大\",{\"1\":{\"33\":1}}],[\"刨去\",{\"1\":{\"455\":1}}],[\"光纤分布式数据接口\",{\"1\":{\"455\":1}}],[\"光标移动到第一行\",{\"1\":{\"70\":1}}],[\"光标移动到第n行\",{\"1\":{\"70\":1}}],[\"光标移动到最后一行\",{\"1\":{\"70\":1}}],[\"光标移动到本行末尾\",{\"1\":{\"70\":1}}],[\"光标移动到本行开头\",{\"1\":{\"70\":1}}],[\"光标会向右移动这一行的n个字符\",{\"1\":{\"70\":1}}],[\"光标向下移动n行\",{\"1\":{\"70\":1}}],[\"光标向下移动一个字符\",{\"1\":{\"70\":1}}],[\"光标向右移动一个字符\",{\"1\":{\"70\":1}}],[\"光标向上移动一个字符\",{\"1\":{\"70\":1}}],[\"光标向左移动一个字符\",{\"1\":{\"70\":1}}],[\"链路层对一次能够发送的最大数据有限制\",{\"1\":{\"455\":1}}],[\"窗口就可以向前滑动\",{\"1\":{\"455\":1}}],[\"窗口必须停止滑动\",{\"1\":{\"455\":1}}],[\"窗口内的数据才允许被发送\",{\"1\":{\"455\":1}}],[\"窗口实际就起到一个缓冲区的作用\",{\"1\":{\"455\":1}}],[\"窗口大小即决定了无需等待应答而可以继续发送的数据最大值\",{\"1\":{\"455\":1}}],[\"算法产生的缘由\",{\"1\":{\"455\":1}}],[\"算法\",{\"1\":{\"455\":2}}],[\"滑动窗口\",{\"1\":{\"455\":3}}],[\"原本为\",{\"1\":{\"497\":1}}],[\"原生的\",{\"1\":{\"495\":2}}],[\"原因\",{\"1\":{\"455\":2,\"475\":1}}],[\"原始\",{\"1\":{\"442\":2}}],[\"原始的\",{\"1\":{\"441\":1}}],[\"现象\",{\"1\":{\"455\":2}}],[\"现象分析\",{\"0\":{\"455\":1}}],[\"现在需要一个新的\",{\"1\":{\"445\":1}}],[\"现在把它拆开来看\",{\"1\":{\"422\":1}}],[\"现在都是多核\",{\"1\":{\"388\":1}}],[\"现在要求你编写程序\",{\"1\":{\"351\":1}}],[\"现在我们给\",{\"1\":{\"16\":1}}],[\"现在我们假定\",{\"1\":{\"11\":1}}],[\"现在当我们要把a单独抽出来做成一个starter时\",{\"1\":{\"11\":1}}],[\"影响的底层接收缓冲区\",{\"1\":{\"454\":1}}],[\"粘包\",{\"1\":{\"455\":1}}],[\"粘包现象\",{\"0\":{\"453\":1}}],[\"粘包与半包\",{\"0\":{\"452\":1}}],[\"级别断点\",{\"1\":{\"450\":1}}],[\"级联删除\",{\"1\":{\"234\":1}}],[\"认为只有在\",{\"1\":{\"450\":1}}],[\"我这里直接将实现加入了枚举类\",{\"1\":{\"478\":1}}],[\"我不留\",{\"1\":{\"462\":1}}],[\"我最初在认识上有这样的误区\",{\"1\":{\"450\":1}}],[\"我们就来看看\",{\"1\":{\"495\":1}}],[\"我们就算慢sql\",{\"1\":{\"244\":1}}],[\"我们都会发布一个\",{\"1\":{\"300\":1}}],[\"我们是购物车服务\",{\"1\":{\"188\":1}}],[\"我们还在交易服务设置了定时任务\",{\"1\":{\"145\":1}}],[\"我们采用了生产者确认机制\",{\"1\":{\"145\":1}}],[\"我们到底该在什么时间主动查询支付状态呢\",{\"1\":{\"145\":1}}],[\"我们依然能通过主动查询来保证订单状态的一致\",{\"1\":{\"145\":1}}],[\"我们在where条件中除了判断id以外\",{\"1\":{\"144\":1}}],[\"我们在用户支付成功后会发送mq消息到交易服务\",{\"1\":{\"142\":1}}],[\"我们只要开启这个功能即可\",{\"1\":{\"143\":1}}],[\"我们该如何给消息添加唯一id呢\",{\"1\":{\"143\":1}}],[\"我们该如何确保mq消息的可靠性\",{\"1\":{\"128\":1}}],[\"我们必须想办法保证消息处理的幂等性\",{\"1\":{\"142\":1}}],[\"我们要尽可能避免业务被重复执行\",{\"1\":{\"142\":1}}],[\"我们要解决消息丢失问题\",{\"1\":{\"129\":1}}],[\"我们将异常改为runtimeexception类型\",{\"1\":{\"139\":1}}],[\"我们再次把确认机制修改为auto\",{\"1\":{\"139\":1}}],[\"我们也可以基于注解来声明队列并设置为lazy模式\",{\"1\":{\"136\":1}}],[\"我们利用命令停掉rabbitmq服务\",{\"1\":{\"130\":1}}],[\"我们一起分析一下消息丢失的可能性有哪些\",{\"1\":{\"129\":1}}],[\"我们从searchhits中获取查询结果列表\",{\"1\":{\"103\":1}}],[\"我们按照前述分页方式和排序方式添加分页和排序信息到查询\",{\"1\":{\"103\":1}}],[\"我们使用pageimpl将结果封装成page<product>对象\",{\"1\":{\"103\":1}}],[\"我们使用filterbuilders\",{\"1\":{\"103\":1}}],[\"我们使用querybuilders\",{\"1\":{\"103\":1}}],[\"我们结合使用查询\",{\"1\":{\"103\":1}}],[\"我们知道nginx中有两个关键的目录\",{\"1\":{\"58\":1}}],[\"我们可能会发现一些条件注解不生效\",{\"1\":{\"24\":1}}],[\"我们可以合并上述操作为这样\",{\"1\":{\"144\":1}}],[\"我们可以这样用\",{\"1\":{\"22\":1}}],[\"我们可以使用objectprovider\",{\"1\":{\"21\":1}}],[\"我们可以通过\",{\"1\":{\"18\":1}}],[\"我们可以通过importselector中提供给我们的annotationmetadata来获得enablea中的属性enabled\",{\"1\":{\"16\":1}}],[\"我们来看下面的配置1\",{\"1\":{\"22\":1}}],[\"我们需要自定义\",{\"1\":{\"155\":1}}],[\"我们需要修改orderserviceimpl中的markorderpaysuccess方法\",{\"1\":{\"144\":1}}],[\"我们需要先定义一个aproperties\",{\"1\":{\"18\":1}}],[\"我们需要在resources目录下新建一个meta\",{\"1\":{\"17\":1}}],[\"我们很有可能需要在application\",{\"1\":{\"18\":1}}],[\"我们返回aconfiguration\",{\"1\":{\"16\":1}}],[\"我们先使用注解的方式来导入\",{\"1\":{\"15\":1}}],[\"我们经常能看到有些组件的会需要你添加\",{\"1\":{\"14\":1}}],[\"我们实现了一个a类用于提供我们封装好的功能\",{\"1\":{\"11\":1}}],[\"吗\",{\"1\":{\"449\":3}}],[\"复杂了很多\",{\"1\":{\"445\":1}}],[\"复制等操作\",{\"1\":{\"446\":1}}],[\"复制数据阶段\",{\"1\":{\"393\":1}}],[\"复制当前行\",{\"1\":{\"70\":1}}],[\"复制选中的文本\",{\"1\":{\"70\":1}}],[\"复制代码annotationprocessor\",{\"1\":{\"19\":1}}],[\"缺点需要转义\",{\"1\":{\"456\":1}}],[\"缺点浪费空间\",{\"1\":{\"456\":1}}],[\"缺点效率太低\",{\"1\":{\"456\":1}}],[\"缺点\",{\"1\":{\"445\":1,\"459\":1}}],[\"缺点是包的往返时间越长性能就越差\",{\"1\":{\"455\":1}}],[\"缺点是数据拷贝耗费性能\",{\"1\":{\"383\":1}}],[\"缺点是\",{\"1\":{\"382\":1,\"458\":1}}],[\"缺点是效率低\",{\"1\":{\"382\":1}}],[\"缺点是浪费带宽\",{\"1\":{\"382\":1}}],[\"释放未处理消息逻辑\",{\"1\":{\"441\":1}}],[\"释放锁等\",{\"1\":{\"39\":1}}],[\"转换为其它类型的\",{\"1\":{\"441\":1}}],[\"详细分析如下\",{\"1\":{\"441\":1}}],[\"谁负责\",{\"1\":{\"441\":1}}],[\"谁是最后使用者\",{\"1\":{\"441\":1}}],[\"谁来负责\",{\"1\":{\"441\":1}}],[\"了\",{\"1\":{\"441\":1}}],[\"了解更多相关内容\",{\"1\":{\"301\":1}}],[\"了解跟多内容\",{\"1\":{\"301\":1}}],[\"呢\",{\"1\":{\"441\":1}}],[\"垃圾回收\",{\"1\":{\"441\":1}}],[\"垃圾回收的管理\",{\"1\":{\"435\":1}}],[\"垃圾回收的影响\",{\"1\":{\"397\":1}}],[\"堆外内存最好是手动来释放\",{\"1\":{\"441\":1}}],[\"堆内存\",{\"0\":{\"435\":1}}],[\"前先做个标记\",{\"1\":{\"440\":1}}],[\"前面的代码只有一个选择器\",{\"1\":{\"388\":1}}],[\"容量不够了\",{\"1\":{\"439\":1}}],[\"容器下\",{\"1\":{\"389\":1}}],[\"容器调度了\",{\"1\":{\"246\":1}}],[\"容器\",{\"0\":{\"65\":1}}],[\"容器运行的nginx所有的文件都在容器内部\",{\"1\":{\"58\":1}}],[\"容器中存在a2\",{\"1\":{\"22\":1}}],[\"备注\",{\"1\":{\"438\":1}}],[\"含义\",{\"1\":{\"438\":1}}],[\"平台启用非池化实现\",{\"1\":{\"436\":1}}],[\"平台默认启用池化实现\",{\"1\":{\"436\":1}}],[\"池化功能还不成熟\",{\"1\":{\"436\":1}}],[\"池化功能是否开启\",{\"1\":{\"436\":1}}],[\"池化功能更节约内存\",{\"1\":{\"436\":1}}],[\"池化的最大意义在于可以重用\",{\"1\":{\"436\":1}}],[\"池化\",{\"0\":{\"436\":1},\"1\":{\"447\":1}}],[\"池化基于直接内存的\",{\"1\":{\"434\":1}}],[\"压力\",{\"1\":{\"436\":1}}],[\"压力小\",{\"1\":{\"435\":1}}],[\"压缩\",{\"1\":{\"88\":1,\"90\":1}}],[\"适合配合池化功能一起用\",{\"1\":{\"435\":1}}],[\"适合连接数特别多\",{\"1\":{\"337\":1}}],[\"入口\",{\"1\":{\"495\":1}}],[\"入站\",{\"1\":{\"441\":1}}],[\"入站处理器中\",{\"1\":{\"432\":1}}],[\"入站处理器通常是\",{\"1\":{\"432\":1}}],[\"入门\",{\"0\":{\"402\":1}}],[\"死锁检查抛出的\",{\"1\":{\"431\":1}}],[\"死锁检查\",{\"1\":{\"431\":1}}],[\"区别在于\",{\"1\":{\"429\":1}}],[\"区分事件类型\",{\"1\":{\"382\":1}}],[\"名称\",{\"1\":{\"425\":1}}],[\"名字\",{\"1\":{\"260\":1}}],[\"又回到了熟悉的\",{\"1\":{\"498\":1}}],[\"又读了一个字节\",{\"1\":{\"442\":1}}],[\"又对\",{\"1\":{\"425\":1}}],[\"又不具备\",{\"1\":{\"396\":1}}],[\"合并为一个逻辑上的\",{\"1\":{\"445\":1}}],[\"合理进行任务拆分\",{\"1\":{\"424\":1}}],[\"合在一起就是\",{\"1\":{\"413\":1}}],[\"效率几乎是原来的四倍\",{\"1\":{\"424\":1}}],[\"效率高\",{\"1\":{\"362\":1}}],[\"他们的构造方法对\",{\"1\":{\"467\":1}}],[\"他们就能够满负荷工作\",{\"1\":{\"424\":1}}],[\"他还是另一个著名网络应用框架\",{\"1\":{\"405\":1}}],[\"医生\",{\"1\":{\"424\":1}}],[\"经过很多工序的加工\",{\"1\":{\"432\":1}}],[\"经常用到这两个接口\",{\"1\":{\"425\":1}}],[\"经拆分后每个步骤需要\",{\"1\":{\"424\":1}}],[\"经研究发现\",{\"1\":{\"424\":1}}],[\"看是否应当阻塞\",{\"1\":{\"496\":1}}],[\"看病可以细分为四个步骤\",{\"1\":{\"424\":1}}],[\"看这篇文章了解\",{\"1\":{\"302\":1}}],[\"思考\",{\"1\":{\"449\":3}}],[\"思考下面的场景\",{\"1\":{\"424\":1}}],[\"思考注释中两个问题\",{\"1\":{\"381\":1}}],[\"意味着可以链式调用\",{\"1\":{\"438\":1}}],[\"意味着不等连接建立\",{\"1\":{\"422\":1}}],[\"意思是运行10秒以上的sql语句\",{\"1\":{\"244\":1}}],[\"换人\",{\"1\":{\"418\":1}}],[\"演示\",{\"0\":{\"417\":1,\"419\":1,\"420\":1}}],[\"演示地址\",{\"1\":{\"297\":1}}],[\"停止线程的运行\",{\"1\":{\"416\":1}}],[\"停止容器\",{\"1\":{\"65\":1}}],[\"继承自\",{\"1\":{\"415\":1,\"425\":1}}],[\"继续运行\",{\"1\":{\"369\":1}}],[\"继续添加更多行数据\",{\"1\":{\"323\":1}}],[\"里面有\",{\"1\":{\"415\":1}}],[\"里面有多个任务\",{\"1\":{\"288\":1}}],[\"组名\",{\"1\":{\"469\":6}}],[\"组成\",{\"0\":{\"437\":1}}],[\"组成的双向链表\",{\"1\":{\"432\":1}}],[\"组件\",{\"0\":{\"414\":1}}],[\"组合这些\",{\"1\":{\"445\":1}}],[\"组合\",{\"1\":{\"246\":1,\"446\":1}}],[\"依次按照\",{\"1\":{\"413\":1}}],[\"依赖注入\",{\"0\":{\"256\":1},\"1\":{\"258\":1}}],[\"依赖范围\",{\"0\":{\"80\":1}}],[\"依赖传递\",{\"0\":{\"77\":1}}],[\"依赖管理\",{\"0\":{\"76\":1}}],[\"依赖\",{\"0\":{\"247\":1,\"318\":1},\"1\":{\"37\":1,\"171\":1,\"172\":1,\"176\":1,\"190\":1,\"195\":1,\"293\":1,\"478\":1}}],[\"顺序\",{\"1\":{\"413\":1}}],[\"顺序传递参数\",{\"0\":{\"201\":1}}],[\"负责入站数据的分配\",{\"1\":{\"486\":1}}],[\"负责向服务器发送各种消息\",{\"1\":{\"470\":1}}],[\"负责接收用户在控制台的输入\",{\"1\":{\"470\":1}}],[\"负责发布事件\",{\"1\":{\"413\":1}}],[\"负载均衡器\",{\"1\":{\"171\":1}}],[\"负载均衡列表\",{\"1\":{\"90\":1}}],[\"负载均衡\",{\"0\":{\"89\":1},\"1\":{\"90\":1,\"169\":1,\"176\":1}}],[\"理解为处理数据的工人\",{\"1\":{\"413\":1}}],[\"理解为数据的处理工序\",{\"1\":{\"413\":1}}],[\"理解为数据的通道\",{\"1\":{\"413\":1}}],[\"理解为流动的数据\",{\"1\":{\"413\":1}}],[\"流程梳理\",{\"0\":{\"412\":1}}],[\"流程如下\",{\"1\":{\"112\":1,\"145\":1}}],[\"走完一个流程\",{\"1\":{\"411\":1}}],[\"处代码\",{\"1\":{\"432\":4,\"495\":1}}],[\"处返回的是\",{\"1\":{\"422\":1}}],[\"处的\",{\"1\":{\"411\":1,\"432\":3}}],[\"处\",{\"1\":{\"410\":6,\"411\":8}}],[\"处理异常\",{\"1\":{\"495\":3}}],[\"处理字符数据比较合适\",{\"1\":{\"459\":1}}],[\"处理原则\",{\"1\":{\"441\":2}}],[\"处理的病人总数是\",{\"1\":{\"424\":1}}],[\"处理关闭之后的操作\",{\"1\":{\"423\":3}}],[\"处理定时任务\",{\"0\":{\"420\":1}}],[\"处理普通任务\",{\"0\":{\"419\":1}}],[\"处理数据\",{\"1\":{\"413\":1}}],[\"处理器\",{\"1\":{\"410\":1,\"411\":1}}],[\"处理完成后\",{\"1\":{\"496\":1}}],[\"处理完第一个\",{\"1\":{\"401\":2}}],[\"处理完毕\",{\"1\":{\"376\":1,\"378\":1}}],[\"处理key\",{\"1\":{\"382\":1}}],[\"处理事件\",{\"1\":{\"382\":1}}],[\"处理\",{\"0\":{\"376\":1,\"378\":1,\"384\":1,\"417\":1},\"1\":{\"401\":2,\"411\":1,\"455\":1,\"497\":1,\"498\":1,\"499\":1}}],[\"处理消息的边界\",{\"0\":{\"382\":1}}],[\"处理消息的业务逻辑是把订单状态从未支付修改为已支付\",{\"1\":{\"144\":1}}],[\"处理消息的进程发生异常\",{\"1\":{\"129\":1}}],[\"处理失败时返回nack\",{\"1\":{\"139\":1}}],[\"已退出群\",{\"1\":{\"472\":1}}],[\"已发送的数据都收到\",{\"1\":{\"455\":1}}],[\"已完成了它的使命\",{\"1\":{\"441\":1}}],[\"已经\",{\"1\":{\"475\":1}}],[\"已经异常断开\",{\"1\":{\"473\":1}}],[\"已经断开\",{\"1\":{\"473\":1}}],[\"已经存在\",{\"1\":{\"472\":1}}],[\"已经不够了\",{\"1\":{\"439\":1}}],[\"已经从队列中消失了\",{\"1\":{\"106\":1}}],[\"已废弃\",{\"1\":{\"407\":1}}],[\"久经考验\",{\"1\":{\"407\":1}}],[\"破坏\",{\"1\":{\"407\":1}}],[\"空轮询\",{\"1\":{\"497\":1}}],[\"空轮询导致\",{\"1\":{\"407\":1}}],[\"空闲检测\",{\"0\":{\"474\":1}}],[\"空间换时间\",{\"1\":{\"236\":1}}],[\"框架\",{\"0\":{\"487\":1},\"1\":{\"406\":2}}],[\"框架在\",{\"1\":{\"406\":1}}],[\"搜索引擎\",{\"1\":{\"406\":1}}],[\"概述\",{\"0\":{\"403\":1}}],[\"守护线程\",{\"0\":{\"400\":1}}],[\"操作\",{\"1\":{\"413\":2,\"497\":1}}],[\"操作阻塞\",{\"1\":{\"399\":1}}],[\"操作系统使用\",{\"1\":{\"396\":1}}],[\"操作系统出于性能的考虑\",{\"1\":{\"361\":1}}],[\"性能没有优势\",{\"1\":{\"398\":1}}],[\"系统异步\",{\"1\":{\"398\":1}}],[\"系统通过\",{\"1\":{\"398\":1}}],[\"整数时\",{\"1\":{\"439\":1}}],[\"整数\",{\"1\":{\"438\":1,\"440\":1}}],[\"整个过程仅只发生了一次用户态与内核态的切换\",{\"1\":{\"397\":1}}],[\"整合spring\",{\"0\":{\"250\":1}}],[\"整合\",{\"0\":{\"121\":1}}],[\"几乎无消耗\",{\"1\":{\"397\":1}}],[\"几乎不能正常工作\",{\"1\":{\"368\":1}}],[\"信息拷入\",{\"1\":{\"397\":1}}],[\"信号驱动\",{\"1\":{\"393\":1}}],[\"唯有一点\",{\"1\":{\"397\":1}}],[\"唯一约束\",{\"1\":{\"233\":1}}],[\"唯一消息id\",{\"0\":{\"143\":1},\"1\":{\"142\":1}}],[\"次发送\",{\"1\":{\"457\":1}}],[\"次接收\",{\"1\":{\"453\":1}}],[\"次\",{\"1\":{\"396\":2,\"397\":2,\"440\":1}}],[\"零拷贝适合小文件传输\",{\"1\":{\"397\":1}}],[\"零拷贝的优点有\",{\"1\":{\"397\":1}}],[\"零拷贝\",{\"0\":{\"395\":1},\"1\":{\"397\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1}}],[\"卷\",{\"1\":{\"394\":1}}],[\"🔖\",{\"0\":{\"394\":1}}],[\"💡\",{\"0\":{\"341\":1,\"375\":1,\"377\":1,\"379\":1,\"380\":1,\"386\":1,\"388\":1,\"389\":1,\"400\":1,\"413\":1,\"416\":1,\"418\":1,\"424\":1,\"447\":1,\"450\":1,\"467\":1}}],[\"异常值\",{\"1\":{\"488\":1}}],[\"异常是\",{\"1\":{\"473\":1}}],[\"异常处理原则\",{\"1\":{\"441\":1}}],[\"异常\",{\"1\":{\"431\":1,\"442\":1,\"480\":1}}],[\"异常关闭时\",{\"1\":{\"375\":1}}],[\"异步执行\",{\"1\":{\"495\":1}}],[\"异步处理任务失败\",{\"1\":{\"430\":1}}],[\"异步处理任务成功\",{\"1\":{\"427\":1}}],[\"异步处理关闭\",{\"1\":{\"423\":1}}],[\"异步接收结果\",{\"1\":{\"425\":1,\"427\":1}}],[\"异步并没有缩短响应时间\",{\"1\":{\"424\":1}}],[\"异步方式用了多线程\",{\"1\":{\"424\":1}}],[\"异步提升的是什么\",{\"0\":{\"424\":1}}],[\"异步操作\",{\"1\":{\"423\":1}}],[\"异步模型需要底层操作系统\",{\"1\":{\"398\":1}}],[\"异步意味着\",{\"1\":{\"398\":1}}],[\"异步\",{\"1\":{\"393\":2}}],[\"异步非阻塞\",{\"1\":{\"393\":1}}],[\"异步阻塞\",{\"1\":{\"393\":1}}],[\"个客户端连接时\",{\"1\":{\"481\":1}}],[\"个客户端都打印\",{\"1\":{\"481\":1}}],[\"个\",{\"1\":{\"481\":1}}],[\"个消息\",{\"1\":{\"453\":1,\"454\":1}}],[\"个字节\",{\"1\":{\"438\":2,\"453\":1,\"466\":1,\"467\":1,\"478\":1}}],[\"个字节后\",{\"1\":{\"340\":1}}],[\"个字节后的状态\",{\"1\":{\"340\":1}}],[\"个医生一天工作\",{\"1\":{\"424\":1}}],[\"个医生给人看病\",{\"1\":{\"424\":1}}],[\"个数超过一个时\",{\"1\":{\"446\":1}}],[\"个数\",{\"0\":{\"389\":1},\"1\":{\"389\":1}}],[\"轮流处理\",{\"1\":{\"388\":1}}],[\"专门处理\",{\"1\":{\"388\":1}}],[\"专门存放异常消息的队列\",{\"1\":{\"141\":1}}],[\"设计一个登录请求消息和登录响应消息\",{\"1\":{\"466\":1}}],[\"设计时要充分考虑别让\",{\"1\":{\"388\":1}}],[\"设置选项\",{\"1\":{\"498\":1}}],[\"设置其是否完成\",{\"1\":{\"495\":1}}],[\"设置属性\",{\"1\":{\"469\":1}}],[\"设置太大\",{\"1\":{\"455\":1}}],[\"设置回调\",{\"1\":{\"427\":1}}],[\"设置失败结果\",{\"1\":{\"425\":1}}],[\"设置成功结果\",{\"1\":{\"425\":1}}],[\"设置成粘贴模式\",{\"1\":{\"70\":1}}],[\"设置当前位置时\",{\"1\":{\"359\":1}}],[\"设置当前位置\",{\"1\":{\"359\":1}}],[\"设置图片相对大小\",{\"1\":{\"324\":1}}],[\"设置单元格内部没有边框\",{\"1\":{\"323\":3}}],[\"设置表格后间距\",{\"1\":{\"323\":1}}],[\"设置表格前间距\",{\"1\":{\"323\":1}}],[\"设置表格的样式\",{\"1\":{\"323\":1}}],[\"设置表格的列宽比例\",{\"1\":{\"323\":1}}],[\"设置表格宽度百分比\",{\"1\":{\"323\":1}}],[\"设置文本下移\",{\"1\":{\"322\":1}}],[\"设置文本上移\",{\"1\":{\"322\":1}}],[\"设置响应的内容类型和头部\",{\"1\":{\"320\":1}}],[\"设置截图选项\",{\"1\":{\"303\":1}}],[\"设置密钥\",{\"1\":{\"293\":1}}],[\"设置那些请求归springmvc处理\",{\"1\":{\"267\":1}}],[\"设置位配置类\",{\"1\":{\"260\":1}}],[\"设置信息\",{\"1\":{\"183\":1}}],[\"设置权重\",{\"1\":{\"181\":1}}],[\"设置重写的基准值\",{\"1\":{\"160\":2}}],[\"设置序列化器\",{\"1\":{\"155\":1}}],[\"设置name\",{\"1\":{\"153\":1}}],[\"设置k\",{\"1\":{\"153\":1}}],[\"设置队列模式为lazy模式\",{\"1\":{\"137\":1}}],[\"设置mq的连接超时时间\",{\"1\":{\"130\":1}}],[\"设置通道一次只能消费一个消息\",{\"1\":{\"110\":1}}],[\"设置用户名和密码\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"设置连接哪一个虚拟主机\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"设置连接mq主机\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"设置静态文件的缓存时间\",{\"1\":{\"90\":1}}],[\"设置\",{\"1\":{\"90\":1,\"163\":4,\"301\":1,\"302\":1}}],[\"设置与特定虚拟主机相关的指令\",{\"1\":{\"90\":1}}],[\"设置与\",{\"1\":{\"90\":1}}],[\"设置与客户端连接相关的参数\",{\"1\":{\"90\":1}}],[\"设置编码\",{\"1\":{\"69\":1}}],[\"参考下图\",{\"1\":{\"497\":1}}],[\"参考\",{\"0\":{\"394\":1}}],[\"参考实现\",{\"1\":{\"383\":1}}],[\"参数与系统参数\",{\"1\":{\"481\":1}}],[\"参数调优\",{\"0\":{\"479\":1}}],[\"参数类型\",{\"0\":{\"272\":1}}],[\"参数可以静态地\",{\"1\":{\"197\":1}}],[\"参数等\",{\"1\":{\"181\":1}}],[\"参数\",{\"1\":{\"111\":1,\"163\":2,\"389\":1,\"480\":1,\"481\":1,\"483\":1,\"484\":3,\"485\":1,\"486\":1}}],[\"维护独立的\",{\"1\":{\"442\":1}}],[\"维护一个线程\",{\"1\":{\"415\":1}}],[\"维护一个独立的\",{\"1\":{\"383\":1}}],[\"维护\",{\"1\":{\"407\":1}}],[\"维护成本高\",{\"1\":{\"186\":1,\"407\":1}}],[\"共同使用\",{\"1\":{\"383\":1}}],[\"共享日志配置\",{\"1\":{\"187\":2}}],[\"共享mybatis配置\",{\"1\":{\"187\":1}}],[\"共享配置\",{\"0\":{\"186\":1,\"187\":1},\"1\":{\"187\":1}}],[\"作为消息放入\",{\"1\":{\"498\":1}}],[\"作为分隔符\",{\"1\":{\"459\":1}}],[\"作为服务器端\",{\"1\":{\"406\":1}}],[\"作为附件加入\",{\"1\":{\"385\":1}}],[\"作为附件关联到\",{\"1\":{\"382\":1}}],[\"作用\",{\"1\":{\"55\":1,\"56\":1}}],[\"管理\",{\"1\":{\"492\":1}}],[\"管理一个\",{\"1\":{\"445\":1}}],[\"管理多个\",{\"1\":{\"382\":1}}],[\"管理对象\",{\"1\":{\"254\":1}}],[\"吞吐量\",{\"1\":{\"382\":1}}],[\"另有\",{\"1\":{\"415\":1}}],[\"另一种解读\",{\"1\":{\"462\":1}}],[\"另一种思路是用多个数组组成\",{\"1\":{\"383\":1}}],[\"另一种思路是按分隔符拆分\",{\"1\":{\"382\":1}}],[\"另一个线程去真正建立连接\",{\"1\":{\"424\":1}}],[\"另一条线是继承自\",{\"1\":{\"415\":1}}],[\"另外源码部分\",{\"1\":{\"480\":1}}],[\"另外如果发送的数据大于\",{\"1\":{\"375\":1}}],[\"另外\",{\"1\":{\"246\":1}}],[\"另外我们也可以看到很多第三方库的starter\",{\"1\":{\"12\":1}}],[\"�好\",{\"1\":{\"381\":1}}],[\"道理是一样的\",{\"1\":{\"381\":1}}],[\"连上了\",{\"1\":{\"379\":1}}],[\"连接事件\",{\"1\":{\"497\":1}}],[\"连接已经断开了\",{\"1\":{\"475\":1}}],[\"连接已建立\",{\"1\":{\"378\":3}}],[\"连接假死\",{\"0\":{\"475\":1}}],[\"连接肯定建立了\",{\"1\":{\"422\":2}}],[\"连接未建立\",{\"1\":{\"422\":2}}],[\"连接集合\",{\"1\":{\"368\":1,\"369\":1}}],[\"连接\",{\"1\":{\"336\":1}}],[\"连接符\",{\"0\":{\"291\":1}}],[\"连接池\",{\"0\":{\"172\":1}}],[\"连接对象方法\",{\"1\":{\"109\":1}}],[\"连接不稳定\",{\"1\":{\"33\":1}}],[\"集合中真正删除\",{\"1\":{\"382\":1}}],[\"集合中删除\",{\"1\":{\"380\":1,\"382\":1}}],[\"集合中移除\",{\"1\":{\"379\":1}}],[\"集合\",{\"1\":{\"379\":1,\"469\":2}}],[\"集合注入\",{\"0\":{\"259\":1}}],[\"否则返回组对象\",{\"1\":{\"469\":3}}],[\"否则返回\",{\"1\":{\"469\":2}}],[\"否则\",{\"1\":{\"418\":1,\"431\":1,\"445\":1}}],[\"否则下次处理就会有问题\",{\"1\":{\"382\":1}}],[\"否则下次该事件仍会触发\",{\"1\":{\"377\":1}}],[\"否则会抛异常\",{\"1\":{\"364\":1}}],[\"逐一处理\",{\"1\":{\"376\":1,\"378\":1}}],[\"遍历所有事件\",{\"1\":{\"376\":1,\"378\":1}}],[\"遍历目录文件\",{\"1\":{\"364\":1}}],[\"缓冲可写\",{\"1\":{\"386\":1}}],[\"缓冲区的数据写入网卡\",{\"1\":{\"396\":1,\"397\":1}}],[\"缓冲区写不下时再关注可写事件\",{\"1\":{\"386\":1}}],[\"缓冲区\",{\"1\":{\"375\":1,\"396\":1,\"397\":2}}],[\"缓存伪共享\",{\"1\":{\"397\":1}}],[\"缓存\",{\"0\":{\"50\":1},\"1\":{\"87\":1,\"88\":1}}],[\"何时不阻塞\",{\"0\":{\"375\":1}}],[\"何为幂等性\",{\"1\":{\"142\":1}}],[\"节约了线程的数量\",{\"1\":{\"371\":1}}],[\"节点值等操作\",{\"1\":{\"328\":1}}],[\"节点类型\",{\"1\":{\"328\":1}}],[\"让\",{\"1\":{\"496\":1,\"498\":1,\"499\":1}}],[\"让所有数据包长度固定\",{\"1\":{\"458\":1}}],[\"让这个线程能够被充分利用\",{\"1\":{\"371\":1}}],[\"让我们先给我们的starter取个名字吧哈哈哈\",{\"1\":{\"11\":1}}],[\"避免拷贝\",{\"1\":{\"445\":1}}],[\"避免非阻塞模式下所做无用功\",{\"1\":{\"371\":1}}],[\"避免了锁过期的问题\",{\"1\":{\"39\":1}}],[\"事件处理耗时\",{\"1\":{\"496\":1}}],[\"事件处理时的线程安全\",{\"1\":{\"415\":1}}],[\"事件都由此\",{\"1\":{\"415\":1}}],[\"事件循环组\",{\"1\":{\"415\":1}}],[\"事件循环对象\",{\"1\":{\"415\":1}}],[\"事件发生后要么处理\",{\"1\":{\"382\":1}}],[\"事件发生后\",{\"1\":{\"377\":1}}],[\"事件发生后能否不处理\",{\"0\":{\"377\":1}}],[\"事件发生时\",{\"1\":{\"375\":1}}],[\"事件发生线程才去处理\",{\"1\":{\"371\":1}}],[\"事件\",{\"0\":{\"373\":1,\"374\":1,\"376\":1,\"378\":1,\"384\":1,\"417\":1},\"1\":{\"375\":3,\"379\":2,\"382\":1,\"385\":1,\"388\":2,\"401\":2,\"415\":1,\"419\":1,\"463\":1,\"470\":1,\"473\":1,\"475\":2,\"495\":4,\"496\":3,\"497\":1,\"498\":5,\"499\":3}}],[\"事务对于确保数据的正确性\",{\"1\":{\"219\":1}}],[\"事务会自动将所有操作撤消\",{\"1\":{\"219\":1}}],[\"事务可以优化数据库操作的性能\",{\"1\":{\"219\":1}}],[\"事务可以通过锁机制来控制这些操作的执行顺序\",{\"1\":{\"219\":1}}],[\"事务可以解决数据库并发访问的问题\",{\"1\":{\"219\":1}}],[\"事务可以在发生错误或异常时回滚到之前的状态\",{\"1\":{\"219\":1}}],[\"事务可以确保数据的一致性\",{\"1\":{\"219\":1}}],[\"事务可以确保多个操作在一个逻辑单元中执行\",{\"1\":{\"219\":1}}],[\"事务主要的作用体现在以下几个方面\",{\"1\":{\"219\":1}}],[\"事务\",{\"0\":{\"219\":1}}],[\"好处\",{\"1\":{\"371\":1}}],[\"好多个哨兵都认为该实例下线\",{\"1\":{\"163\":1}}],[\"限于网络传输能力\",{\"1\":{\"370\":1}}],[\"限制后\",{\"1\":{\"455\":1}}],[\"限制\",{\"1\":{\"455\":2}}],[\"限制访问次数\",{\"1\":{\"191\":1}}],[\"限制内存大小\",{\"1\":{\"94\":1}}],[\"没法利用多路复用\",{\"1\":{\"370\":1}}],[\"没有\",{\"1\":{\"497\":1}}],[\"没有任务\",{\"1\":{\"496\":1}}],[\"没有写数据了\",{\"1\":{\"475\":1}}],[\"没有读到数据了\",{\"1\":{\"475\":1}}],[\"没有就可以判定为连接假死\",{\"1\":{\"475\":1}}],[\"没有成员会返回\",{\"1\":{\"469\":1}}],[\"没有成功传递到下一个\",{\"1\":{\"441\":1}}],[\"没有边界\",{\"1\":{\"462\":1}}],[\"没有池化\",{\"1\":{\"436\":1}}],[\"没有明显的性能提升\",{\"1\":{\"407\":1}}],[\"没有此情况\",{\"1\":{\"393\":1}}],[\"没有充分利用多核\",{\"1\":{\"388\":1}}],[\"没有事件发生\",{\"1\":{\"382\":1}}],[\"没有移除\",{\"1\":{\"379\":1}}],[\"没有非阻塞模式\",{\"1\":{\"373\":1}}],[\"没有配置则使用\",{\"1\":{\"187\":2}}],[\"没有文件夹\",{\"1\":{\"27\":1}}],[\"普通文件\",{\"1\":{\"370\":1}}],[\"建立成功后\",{\"1\":{\"463\":1}}],[\"建立连接完毕\",{\"1\":{\"411\":1}}],[\"建立连接后\",{\"1\":{\"410\":1,\"411\":1}}],[\"建立\",{\"1\":{\"382\":1}}],[\"建立与客户端连接\",{\"1\":{\"368\":1,\"369\":1}}],[\"建议设置到\",{\"1\":{\"484\":1}}],[\"建议使用\",{\"1\":{\"449\":1}}],[\"建议使用pdf的mime类型\",{\"1\":{\"320\":1}}],[\"建议使用子账号\",{\"1\":{\"5\":1}}],[\"建议禁用重试机制\",{\"1\":{\"130\":1}}],[\"反序列化错误\",{\"1\":{\"478\":1}}],[\"反序列化方法\",{\"1\":{\"478\":1}}],[\"反序列化\",{\"1\":{\"478\":1}}],[\"反序列化机制\",{\"1\":{\"478\":1}}],[\"反序列化时\",{\"1\":{\"478\":1}}],[\"反序列化主要用在消息正文的转换上\",{\"1\":{\"478\":1}}],[\"反而有所增加\",{\"1\":{\"424\":1}}],[\"反而会因为频繁上下文切换导致性能降低\",{\"1\":{\"368\":1}}],[\"反向代理可以提供负载均衡\",{\"1\":{\"88\":1}}],[\"反向代理是代理服务器\",{\"1\":{\"88\":1}}],[\"反向代理\",{\"0\":{\"88\":1}}],[\"反向重复前一个查找操作\",{\"1\":{\"70\":1}}],[\"必然导致\",{\"1\":{\"368\":1}}],[\"必须和\",{\"1\":{\"467\":1,\"478\":1}}],[\"必须\",{\"1\":{\"441\":2}}],[\"必须配合多线程\",{\"1\":{\"424\":1}}],[\"必须将事件移除\",{\"1\":{\"376\":1,\"378\":1}}],[\"必须处理\",{\"1\":{\"376\":1,\"378\":1}}],[\"必须工作在非阻塞模式\",{\"1\":{\"373\":1}}],[\"必须关闭\",{\"1\":{\"358\":1}}],[\"必须通过\",{\"1\":{\"355\":1}}],[\"必须严格按照参数顺序来引用\",{\"1\":{\"201\":1}}],[\"必须是个完整的词\",{\"1\":{\"99\":1}}],[\"位\",{\"1\":{\"368\":2}}],[\"位置\",{\"0\":{\"359\":1},\"1\":{\"324\":1,\"346\":1,\"437\":1}}],[\"体现在以下方面\",{\"1\":{\"368\":1}}],[\"体积更大\",{\"1\":{\"65\":1}}],[\"暂停期间不会占用\",{\"1\":{\"368\":1}}],[\"阻塞直到事件发生\",{\"1\":{\"498\":1}}],[\"阻塞直到绑定事件发生\",{\"1\":{\"374\":2}}],[\"阻塞的\",{\"1\":{\"497\":1}}],[\"阻塞的表现其实就是线程暂停了\",{\"1\":{\"368\":1}}],[\"阻塞线程io\",{\"1\":{\"496\":1}}],[\"阻塞了\",{\"1\":{\"496\":1}}],[\"阻塞等待\",{\"1\":{\"425\":1}}],[\"阻塞方法\",{\"1\":{\"368\":2}}],[\"阻塞方法之间相互影响\",{\"1\":{\"368\":1}}],[\"阻塞\",{\"0\":{\"367\":1,\"368\":1},\"1\":{\"393\":2,\"480\":1,\"496\":1}}],[\"阻塞模式下\",{\"1\":{\"336\":1,\"368\":1}}],[\"拷贝多级目录\",{\"1\":{\"365\":1}}],[\"拷贝文件\",{\"1\":{\"364\":1}}],[\"移除初始化器\",{\"1\":{\"495\":1}}],[\"移除聊天组\",{\"1\":{\"469\":1}}],[\"移除组成员\",{\"1\":{\"469\":1}}],[\"移除当前登录用户信息\",{\"1\":{\"184\":1}}],[\"移动文件\",{\"1\":{\"364\":1}}],[\"覆盖掉\",{\"1\":{\"364\":1}}],[\"绝对路径\",{\"1\":{\"363\":2}}],[\"变量代表还剩余多少字节\",{\"1\":{\"362\":1}}],[\"变成了下面的两个\",{\"1\":{\"351\":1}}],[\"底层为数组实现\",{\"1\":{\"497\":1}}],[\"底层的\",{\"1\":{\"475\":1}}],[\"底层的真正读写是操作系统来完成的\",{\"1\":{\"396\":1}}],[\"底层也不会有拷贝操作\",{\"1\":{\"446\":1}}],[\"底层使用了\",{\"1\":{\"446\":1}}],[\"底层使用的是水平触发\",{\"1\":{\"377\":1}}],[\"底层内存会被回收\",{\"1\":{\"441\":1}}],[\"底层采用了\",{\"1\":{\"397\":1}}],[\"底层会利用操作系统的零拷贝进行优化\",{\"1\":{\"362\":1}}],[\"底层源码如下\",{\"1\":{\"136\":1}}],[\"立刻调用\",{\"1\":{\"495\":1}}],[\"立刻\",{\"1\":{\"422\":1}}],[\"立刻返回\",{\"1\":{\"374\":1}}],[\"立刻写入磁盘\",{\"1\":{\"361\":1}}],[\"立马开始\",{\"1\":{\"248\":1,\"249\":1}}],[\"黏包\",{\"1\":{\"351\":1}}],[\"练习\",{\"0\":{\"351\":1,\"449\":1}}],[\"互转\",{\"0\":{\"347\":1}}],[\"都可以\",{\"1\":{\"458\":1}}],[\"都与原始\",{\"1\":{\"444\":1}}],[\"都实现了\",{\"1\":{\"441\":1}}],[\"都需要一个\",{\"1\":{\"385\":1}}],[\"都需要记录可能被切分的消息\",{\"1\":{\"383\":1}}],[\"都会跳过\",{\"1\":{\"496\":1}}],[\"都会触发\",{\"1\":{\"375\":1}}],[\"都会清除\",{\"1\":{\"346\":1}}],[\"都是触发出站处理器的执行\",{\"1\":{\"432\":1}}],[\"都是可以根据routinghey把消息路由到不同的队列\",{\"1\":{\"119\":1}}],[\"都是书本上的呀\",{\"1\":{\"43\":1}}],[\"调试时也需要通过\",{\"1\":{\"495\":1}}],[\"调试工具类\",{\"0\":{\"341\":1}}],[\"调用外部类\",{\"1\":{\"496\":1}}],[\"调用失败\",{\"1\":{\"492\":1}}],[\"调用正常\",{\"1\":{\"492\":1}}],[\"调用异常\",{\"1\":{\"489\":1}}],[\"调用成功\",{\"1\":{\"489\":1}}],[\"调用方法\",{\"1\":{\"489\":1}}],[\"调用接口中的方法名\",{\"1\":{\"488\":1}}],[\"调用的接口全限定名\",{\"1\":{\"488\":1}}],[\"调用的是无参构造\",{\"1\":{\"255\":1}}],[\"调用下一个入站处理器\",{\"1\":{\"432\":1}}],[\"调用操作系统的写能力\",{\"1\":{\"396\":1}}],[\"调用\",{\"1\":{\"337\":1,\"339\":2,\"344\":2,\"345\":2,\"375\":2,\"396\":1,\"397\":3,\"441\":3}}],[\"调用原始操作\",{\"1\":{\"264\":1,\"265\":1}}],[\"状态改变为\",{\"1\":{\"481\":3}}],[\"状态修改为\",{\"1\":{\"481\":1}}],[\"状态\",{\"1\":{\"340\":2}}],[\"动作发生后\",{\"1\":{\"340\":2}}],[\"动态更新\",{\"1\":{\"328\":1}}],[\"动态条件查询\",{\"0\":{\"209\":1}}],[\"动态路由\",{\"0\":{\"127\":1},\"1\":{\"119\":1,\"122\":1}}],[\"动态\",{\"0\":{\"119\":1}}],[\"输出\",{\"1\":{\"338\":1,\"347\":1,\"350\":1,\"362\":1,\"378\":1,\"381\":1,\"390\":1,\"399\":1,\"415\":2,\"417\":1,\"419\":1,\"420\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"434\":1,\"441\":1,\"442\":6,\"445\":1,\"446\":2,\"457\":1}}],[\"写空闲时间过长\",{\"1\":{\"475\":2}}],[\"写回响应\",{\"1\":{\"464\":1}}],[\"写回结果\",{\"1\":{\"432\":1}}],[\"写也不会阻塞读\",{\"1\":{\"450\":1}}],[\"写出剩余内容\",{\"1\":{\"401\":1}}],[\"写出\",{\"1\":{\"396\":1}}],[\"写完了\",{\"1\":{\"385\":1}}],[\"写事件由\",{\"1\":{\"401\":1}}],[\"写事件\",{\"1\":{\"385\":1}}],[\"写数据时\",{\"1\":{\"369\":1}}],[\"写\",{\"1\":{\"351\":1,\"382\":1}}],[\"写模式下\",{\"1\":{\"340\":1}}],[\"写模式\",{\"1\":{\"338\":1}}],[\"写入内容\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"写入字符串\",{\"1\":{\"438\":1}}],[\"写入后\",{\"1\":{\"438\":2}}],[\"写入消息并清空缓冲区\",{\"1\":{\"411\":1}}],[\"写入的正确姿势如下\",{\"1\":{\"357\":1}}],[\"写入数据\",{\"0\":{\"344\":1},\"1\":{\"339\":1}}],[\"写入\",{\"0\":{\"357\":1,\"438\":1},\"1\":{\"338\":1,\"396\":1,\"438\":12}}],[\"工人执行\",{\"1\":{\"417\":2}}],[\"工人也分别绑定了\",{\"1\":{\"417\":1}}],[\"工人和\",{\"1\":{\"417\":1}}],[\"工人\",{\"1\":{\"417\":2}}],[\"工人按照\",{\"1\":{\"413\":1}}],[\"工人既可以执行\",{\"1\":{\"413\":1}}],[\"工人可以管理多个\",{\"1\":{\"413\":1}}],[\"工序有多道\",{\"1\":{\"413\":1}}],[\"工作量大\",{\"1\":{\"407\":1}}],[\"工作模式\",{\"0\":{\"354\":1}}],[\"工作在非阻塞模式下\",{\"1\":{\"337\":1}}],[\"工具类\",{\"1\":{\"318\":1}}],[\"工具\",{\"0\":{\"308\":1}}],[\"版设计\",{\"0\":{\"337\":1}}],[\"版本号\",{\"1\":{\"465\":1}}],[\"版本可能会有较大重构\",{\"1\":{\"407\":1}}],[\"版本引入\",{\"1\":{\"398\":1}}],[\"版本\",{\"1\":{\"300\":1,\"302\":1,\"407\":1}}],[\"版本以来\",{\"1\":{\"300\":1}}],[\"版本控制\",{\"0\":{\"49\":1}}],[\"⚠️\",{\"0\":{\"334\":1,\"336\":1,\"348\":1,\"354\":1,\"365\":1,\"381\":1,\"497\":1}}],[\"常见方法\",{\"0\":{\"342\":1}}],[\"常见的\",{\"1\":{\"331\":2}}],[\"常用于执行一个全局搜索匹配\",{\"1\":{\"316\":1}}],[\"常用的导入方式有两种\",{\"1\":{\"14\":1}}],[\"允许你根据特定的xpath表达式来选择文档中的节点\",{\"1\":{\"328\":1}}],[\"迭代节点\",{\"1\":{\"328\":1}}],[\"方法即使没有时间发生\",{\"1\":{\"497\":1}}],[\"方法的效果\",{\"1\":{\"497\":1}}],[\"方法的返回值\",{\"1\":{\"385\":1}}],[\"方法的返回值代表有多少\",{\"1\":{\"374\":1}}],[\"方法无谓阻塞\",{\"1\":{\"496\":1}}],[\"方法就会阻塞\",{\"1\":{\"496\":1}}],[\"方法就会返回这些事件交给\",{\"1\":{\"337\":1}}],[\"方法不会阻塞\",{\"1\":{\"496\":1}}],[\"方法见下\",{\"1\":{\"496\":1}}],[\"方法时\",{\"1\":{\"495\":1}}],[\"方法参数值数组\",{\"1\":{\"488\":1}}],[\"方法参数类型数组\",{\"1\":{\"488\":1}}],[\"方法参考如下\",{\"1\":{\"434\":1}}],[\"方法返回类型\",{\"1\":{\"488\":1}}],[\"方法返回nodelist中的节点数量\",{\"1\":{\"328\":1}}],[\"方法4\",{\"0\":{\"460\":1}}],[\"方法中首次创建\",{\"1\":{\"441\":1}}],[\"方法中会\",{\"1\":{\"431\":1}}],[\"方法计数加\",{\"1\":{\"441\":1}}],[\"方法计数减\",{\"1\":{\"441\":1}}],[\"方法签名\",{\"1\":{\"438\":1}}],[\"方法列表\",{\"1\":{\"438\":1}}],[\"方法可以让异步操作同步以外\",{\"1\":{\"422\":1}}],[\"方法是同步等待连接建立完成\",{\"1\":{\"422\":1}}],[\"方法是异步的\",{\"1\":{\"422\":1}}],[\"方法是异步等待\",{\"1\":{\"421\":1}}],[\"方法执行就返回了\",{\"1\":{\"422\":1}}],[\"方法添加处理器\",{\"1\":{\"421\":1}}],[\"方法作用是同步等待\",{\"1\":{\"421\":1}}],[\"方法判断一个线程是否属于此\",{\"1\":{\"415\":1}}],[\"方法处理\",{\"1\":{\"415\":1}}],[\"方法等待\",{\"1\":{\"411\":1}}],[\"方法来获取\",{\"1\":{\"422\":1}}],[\"方法来绑定其中一个\",{\"1\":{\"415\":1}}],[\"方法来看看自己属于哪个\",{\"1\":{\"415\":1}}],[\"方法来处理下一个\",{\"1\":{\"401\":2}}],[\"方法来遍历nodelist中的所有节点\",{\"1\":{\"328\":1}}],[\"方法后\",{\"1\":{\"397\":2}}],[\"方法拷贝数据\",{\"1\":{\"397\":1}}],[\"方法调用后\",{\"1\":{\"396\":1}}],[\"方法3\",{\"0\":{\"459\":1},\"1\":{\"374\":1}}],[\"方法2\",{\"0\":{\"458\":1},\"1\":{\"374\":1,\"445\":1}}],[\"方法1\",{\"0\":{\"457\":1},\"1\":{\"374\":1,\"445\":1}}],[\"方法获取集合中下一个\",{\"1\":{\"415\":1}}],[\"方法获取文件的大小\",{\"1\":{\"360\":1}}],[\"方法获取索引\",{\"1\":{\"345\":1}}],[\"方法会将接收到的数据存入\",{\"1\":{\"390\":1}}],[\"方法会间接地调用\",{\"1\":{\"358\":1}}],[\"方法会让\",{\"1\":{\"345\":1}}],[\"方法并不能保证一次将\",{\"1\":{\"357\":1}}],[\"方法将数据写入并刷出\",{\"1\":{\"421\":1}}],[\"方法将数据写入\",{\"1\":{\"421\":1}}],[\"方法将文件内容和元数据\",{\"1\":{\"361\":1}}],[\"方法将\",{\"1\":{\"345\":1}}],[\"方法为\",{\"1\":{\"343\":1}}],[\"方法\",{\"1\":{\"340\":1,\"344\":2,\"345\":2,\"355\":1,\"358\":1,\"382\":1,\"396\":1,\"397\":1,\"416\":1,\"422\":1,\"446\":1,\"492\":1,\"496\":1,\"498\":1}}],[\"方法允许你通过索引访问nodelist中的特定节点\",{\"1\":{\"328\":1}}],[\"绘制图案\",{\"1\":{\"325\":1}}],[\"图中深色的部分即要发送的数据\",{\"1\":{\"455\":1}}],[\"图中数字代表了处理步骤的先后次序\",{\"1\":{\"432\":1}}],[\"图中黄色线圈起来的部分就是mq通知失败后的兜底处理方案\",{\"1\":{\"145\":1}}],[\"图1\",{\"1\":{\"432\":1}}],[\"图片\",{\"1\":{\"324\":1}}],[\"居中\",{\"1\":{\"321\":1}}],[\"段落\",{\"1\":{\"321\":1}}],[\"明小子\",{\"1\":{\"317\":1}}],[\"超时时才能被执行\",{\"1\":{\"497\":1}}],[\"超时时间为\",{\"1\":{\"497\":2}}],[\"超过\",{\"1\":{\"362\":1,\"478\":1}}],[\"超过了文件末尾\",{\"1\":{\"359\":1}}],[\"超过了消费者处理速度\",{\"1\":{\"134\":1}}],[\"超详解\",{\"1\":{\"317\":1}}],[\"修饰符\",{\"1\":{\"316\":1}}],[\"修饰语\",{\"1\":{\"315\":1}}],[\"修改编解码器\",{\"1\":{\"478\":1}}],[\"修改一下发送文字\",{\"1\":{\"378\":1}}],[\"修改原数据\",{\"1\":{\"328\":1}}],[\"修改参数\",{\"1\":{\"265\":1}}],[\"修改视图\",{\"0\":{\"239\":1}}],[\"修改配置文件my\",{\"1\":{\"244\":1}}],[\"修改配置文件\",{\"1\":{\"162\":1}}],[\"修改订单状态为已支付\",{\"1\":{\"142\":1}}],[\"修改consumer服务的application\",{\"1\":{\"140\":1}}],[\"修改consumer服务的springrabbitlistener类中的方法\",{\"1\":{\"139\":1}}],[\"修改publisher模块的application\",{\"1\":{\"130\":1}}],[\"修改文档\",{\"1\":{\"98\":1}}],[\"修改容器限制\",{\"1\":{\"65\":1}}],[\"忽略空白\",{\"1\":{\"328\":2}}],[\"忽略注释\",{\"1\":{\"328\":2}}],[\"忽略大小写\",{\"0\":{\"315\":1}}],[\"忽略修改\",{\"1\":{\"46\":1}}],[\"^\",{\"1\":{\"313\":3}}],[\"^lazy\",{\"1\":{\"137\":2}}],[\"除上述情况\",{\"1\":{\"455\":1}}],[\"除了用\",{\"1\":{\"422\":1}}],[\"除了可以处理\",{\"1\":{\"419\":1}}],[\"除换行符外的所有字符\",{\"1\":{\"313\":1}}],[\"除非是消息格式有问题\",{\"1\":{\"139\":1}}],[\"描述\",{\"1\":{\"313\":1}}],[\"描述如何从数据库结果集中加载对象\",{\"1\":{\"196\":1}}],[\"元字符\",{\"0\":{\"312\":1}}],[\"元素的\",{\"1\":{\"197\":1}}],[\"元素中定义不同的参数值\",{\"1\":{\"197\":1}}],[\"插件\",{\"0\":{\"310\":1}}],[\"浏览器大概占用\",{\"1\":{\"307\":1}}],[\"浏览器\",{\"1\":{\"307\":1}}],[\"按照上述协议的规则\",{\"1\":{\"462\":1}}],[\"按照官方文档的说法\",{\"1\":{\"307\":1}}],[\"按下数字后再按空格\",{\"1\":{\"70\":1}}],[\"亮子ai的博客\",{\"1\":{\"307\":1}}],[\"问题\",{\"0\":{\"306\":1,\"396\":1},\"1\":{\"475\":1}}],[\"`下一个定时任务执行时间\",{\"1\":{\"497\":1}}],[\"`$\",{\"1\":{\"303\":2}}],[\"`order`\",{\"1\":{\"144\":2}}],[\"格式\",{\"1\":{\"382\":3}}],[\"格式化日期为\",{\"1\":{\"303\":2}}],[\"格式为x\",{\"1\":{\"289\":1}}],[\"替换成你的网站地址\",{\"1\":{\"303\":2}}],[\"该算法是指发送端即使还有应该发送的数据\",{\"1\":{\"455\":1}}],[\"该方法会首先切换\",{\"1\":{\"416\":1}}],[\"该方法有点类似于\",{\"1\":{\"301\":1}}],[\"该库中该组件的默认实现就不会生效了\",{\"1\":{\"22\":1}}],[\"跳转到\",{\"1\":{\"301\":1}}],[\"跳转到index\",{\"1\":{\"273\":1}}],[\"至少两个线程\",{\"1\":{\"393\":1}}],[\"至少需要\",{\"1\":{\"301\":1}}],[\"至此双方相安无事\",{\"1\":{\"462\":1}}],[\"至此\",{\"1\":{\"145\":1}}],[\"捕获网站的\",{\"1\":{\"297\":1}}],[\"捕获异常\",{\"1\":{\"219\":1}}],[\"键盘输入等\",{\"1\":{\"297\":1}}],[\"抓取\",{\"1\":{\"297\":1}}],[\"你来我往\",{\"1\":{\"462\":1}}],[\"你有什么要说的呢\",{\"1\":{\"462\":1}}],[\"你可以使用for循环结合getlength\",{\"1\":{\"328\":1}}],[\"你可以在浏览器中手动执行的绝大多数操作都可以使用\",{\"1\":{\"297\":1}}],[\"你需要创建一个\",{\"1\":{\"301\":1}}],[\"你好\",{\"1\":{\"40\":2,\"347\":3,\"381\":1}}],[\"能够保证\",{\"1\":{\"370\":1}}],[\"能够确保订单的支付状态一致呢\",{\"1\":{\"145\":1}}],[\"能做什么\",{\"0\":{\"297\":1}}],[\"库\",{\"1\":{\"296\":1}}],[\"环境变量来定位\",{\"1\":{\"363\":1}}],[\"环境配置\",{\"1\":{\"293\":1}}],[\"环绕\",{\"1\":{\"264\":1,\"265\":1}}],[\"办法有很多\",{\"1\":{\"293\":1}}],[\"尽量不使用明文\",{\"1\":{\"293\":1}}],[\"脱敏处理\",{\"1\":{\"293\":1}}],[\"出站消息最终都会转为\",{\"1\":{\"441\":1}}],[\"出站\",{\"1\":{\"441\":1}}],[\"出站处理器中\",{\"1\":{\"432\":1}}],[\"出站处理器通常是\",{\"1\":{\"432\":1}}],[\"出站两种\",{\"1\":{\"432\":1}}],[\"出于安全考虑\",{\"1\":{\"293\":1}}],[\"出现时\",{\"1\":{\"497\":1}}],[\"出现丢包\",{\"1\":{\"475\":1}}],[\"出现业务故障\",{\"1\":{\"142\":1}}],[\"出现了网络故障\",{\"1\":{\"130\":1}}],[\"标点符号\",{\"1\":{\"462\":1}}],[\"标志\",{\"0\":{\"314\":1}}],[\"标识不生效的字段\",{\"1\":{\"291\":1}}],[\"标签\",{\"1\":{\"37\":1}}],[\"标签用于选择图片\",{\"1\":{\"37\":1}}],[\"仅关联\",{\"1\":{\"495\":1}}],[\"仅决定了\",{\"1\":{\"454\":1}}],[\"仅会打印\",{\"1\":{\"432\":1}}],[\"仅执行一次\",{\"1\":{\"410\":1,\"411\":1}}],[\"仅支持阻塞\",{\"1\":{\"392\":1}}],[\"仅适合短连接场景\",{\"1\":{\"336\":1}}],[\"仅用于\",{\"1\":{\"291\":1}}],[\"仅保存容器当时的快照状态\",{\"1\":{\"65\":1}}],[\"星期\",{\"1\":{\"290\":1}}],[\"小故事\",{\"1\":{\"462\":1}}],[\"小时\",{\"1\":{\"290\":1,\"424\":1}}],[\"小于最大次数\",{\"1\":{\"499\":1}}],[\"小于实际发送数据量\",{\"1\":{\"455\":1}}],[\"小于等于\",{\"1\":{\"99\":1}}],[\"小于\",{\"1\":{\"99\":1}}],[\"小于号\",{\"1\":{\"70\":1}}],[\"特殊字符\",{\"1\":{\"290\":1}}],[\"域\",{\"1\":{\"290\":1}}],[\"域名\",{\"1\":{\"169\":1}}],[\"周\",{\"1\":{\"289\":1,\"291\":1}}],[\"月份\",{\"1\":{\"290\":1}}],[\"月\",{\"1\":{\"289\":1}}],[\"秒\",{\"1\":{\"289\":1,\"290\":1}}],[\"隔开取值\",{\"1\":{\"289\":1}}],[\"隔了一段时间后重新投递给交易服务\",{\"1\":{\"142\":1}}],[\"携带参数\",{\"1\":{\"288\":1}}],[\"程序的用户态切换至内核态\",{\"1\":{\"396\":1,\"397\":2}}],[\"程序名字\",{\"1\":{\"288\":1}}],[\"程序卡在断点时\",{\"1\":{\"139\":2}}],[\"枚举\",{\"0\":{\"287\":1}}],[\"拦截路径\",{\"1\":{\"285\":1}}],[\"拦截\",{\"1\":{\"284\":1}}],[\"拦截器对象\",{\"1\":{\"285\":1}}],[\"拦截器\",{\"0\":{\"283\":1}}],[\"被固定为这个区间的大小\",{\"1\":{\"442\":1}}],[\"被引用了多少次\",{\"1\":{\"441\":1}}],[\"被连成一串\",{\"1\":{\"432\":1}}],[\"被进行了重新组合\",{\"1\":{\"351\":1}}],[\"被拦截的操作之后运行\",{\"1\":{\"284\":1}}],[\"被拦截的操作之前运行\",{\"1\":{\"284\":1}}],[\"被构造\",{\"1\":{\"255\":1}}],[\"解读\",{\"1\":{\"466\":1}}],[\"解码\",{\"1\":{\"410\":1}}],[\"解决方案\",{\"0\":{\"456\":1}}],[\"解决\",{\"1\":{\"407\":1}}],[\"解决pdf文件中文不显示的问题\",{\"1\":{\"319\":1}}],[\"解析xml\",{\"0\":{\"327\":1}}],[\"解析html为pdf\",{\"1\":{\"317\":1}}],[\"解析出来用户信息\",{\"1\":{\"277\":1}}],[\"解密\",{\"1\":{\"293\":2}}],[\"解绑会话\",{\"1\":{\"469\":1}}],[\"解绑\",{\"1\":{\"51\":1}}],[\"切片后的\",{\"1\":{\"442\":3}}],[\"切换读模式\",{\"1\":{\"357\":1}}],[\"切换为读取限制\",{\"1\":{\"340\":1}}],[\"切换为读取位置\",{\"1\":{\"340\":1}}],[\"切换为分支xxx\",{\"1\":{\"46\":1}}],[\"切换至写模式\",{\"1\":{\"339\":1}}],[\"切换至读模式\",{\"1\":{\"339\":1}}],[\"切换\",{\"1\":{\"338\":2}}],[\"切入点表达式\",{\"0\":{\"263\":1}}],[\"绑定到\",{\"1\":{\"495\":1}}],[\"绑定到firstjob\",{\"1\":{\"248\":1,\"249\":1}}],[\"绑定端口\",{\"1\":{\"495\":1}}],[\"绑定会话\",{\"1\":{\"469\":1}}],[\"绑定的是同一个线程\",{\"1\":{\"418\":1}}],[\"绑定的监听端口\",{\"1\":{\"410\":1}}],[\"绑定的事件类型可以有\",{\"1\":{\"373\":1}}],[\"绑定的事件\",{\"1\":{\"373\":1}}],[\"绑定事件\",{\"1\":{\"373\":1}}],[\"绑定监听端口\",{\"1\":{\"368\":1,\"369\":1}}],[\"绑定\",{\"0\":{\"373\":1},\"1\":{\"262\":1,\"413\":1}}],[\"销毁\",{\"1\":{\"260\":1}}],[\"扫描路径\",{\"1\":{\"260\":1}}],[\"扫描进去了\",{\"1\":{\"17\":1}}],[\"等都是无限等待的\",{\"1\":{\"480\":1}}],[\"等\",{\"1\":{\"478\":1,\"496\":1}}],[\"等待后续操作\",{\"1\":{\"470\":1}}],[\"等待\",{\"1\":{\"427\":1,\"455\":1,\"492\":1}}],[\"等待任务结束\",{\"1\":{\"425\":2}}],[\"等待数据阶段\",{\"1\":{\"393\":1}}],[\"等于容量\",{\"1\":{\"340\":1}}],[\"等同于\",{\"1\":{\"254\":1,\"313\":4}}],[\"等其他\",{\"1\":{\"245\":1}}],[\"循环如此\",{\"1\":{\"328\":1}}],[\"循环\",{\"1\":{\"248\":1,\"249\":1,\"415\":1}}],[\"步骤名称\",{\"1\":{\"288\":3}}],[\"步骤\",{\"0\":{\"248\":1},\"1\":{\"288\":1,\"339\":1}}],[\"要解绑会话\",{\"1\":{\"469\":1}}],[\"要绑定会话\",{\"1\":{\"469\":1}}],[\"要点\",{\"1\":{\"424\":1}}],[\"要支持百万连接就要\",{\"1\":{\"383\":1}}],[\"要从\",{\"1\":{\"382\":1,\"396\":1,\"397\":2}}],[\"要么取消\",{\"1\":{\"377\":1,\"382\":1}}],[\"要么处理\",{\"1\":{\"377\":1}}],[\"要么是输出\",{\"1\":{\"331\":1}}],[\"要么是输入\",{\"1\":{\"331\":1}}],[\"要么全部失败回滚\",{\"1\":{\"219\":1}}],[\"要么全部执行成功\",{\"1\":{\"219\":1}}],[\"要实现这一点\",{\"1\":{\"293\":1}}],[\"要执行的具体内容\",{\"1\":{\"246\":1}}],[\"官方文档\",{\"1\":{\"246\":1}}],[\"官网学习地址\",{\"1\":{\"195\":1}}],[\"慢查询日志\",{\"0\":{\"244\":1}}],[\"​\",{\"1\":{\"237\":1}}],[\"视图名\",{\"1\":{\"237\":1}}],[\"视图名和表名无法重复\",{\"1\":{\"237\":1}}],[\"视图的\",{\"1\":{\"237\":1}}],[\"视图中的数据是依赖于原来的表中的数据的\",{\"1\":{\"237\":1}}],[\"视图包含一系列带有名称的列和行数据\",{\"1\":{\"237\":1}}],[\"视图是一个虚拟表\",{\"1\":{\"237\":1}}],[\"视图\",{\"0\":{\"237\":1}}],[\"线路上存在a\",{\"1\":{\"450\":1}}],[\"线程被打断\",{\"1\":{\"497\":1}}],[\"线程唤醒\",{\"1\":{\"497\":1}}],[\"线程调用\",{\"1\":{\"497\":1}}],[\"线程来调用\",{\"1\":{\"497\":1}}],[\"线程抢先将\",{\"1\":{\"496\":1}}],[\"线程和提交任务线程都有可能执行\",{\"1\":{\"496\":1}}],[\"线程不仅要处理\",{\"1\":{\"496\":1}}],[\"线程不必等待结果\",{\"1\":{\"398\":1}}],[\"线程的切换\",{\"1\":{\"495\":1,\"498\":1}}],[\"线程上执行\",{\"1\":{\"495\":1}}],[\"线程上下文切换成本高\",{\"1\":{\"334\":1}}],[\"线程执行接下来的操作\",{\"1\":{\"495\":1}}],[\"线程\",{\"1\":{\"470\":1,\"492\":1,\"495\":3,\"496\":1,\"497\":1,\"498\":2}}],[\"线程池\",{\"1\":{\"410\":1}}],[\"线程池版缺点\",{\"0\":{\"336\":1}}],[\"线程池版设计\",{\"0\":{\"335\":1}}],[\"线程需要等待结果\",{\"1\":{\"398\":1}}],[\"线程自己不去获取结果\",{\"1\":{\"393\":1}}],[\"线程自己去获取结果\",{\"1\":{\"393\":1}}],[\"线程才会恢复运行\",{\"1\":{\"382\":1}}],[\"线程阻塞\",{\"1\":{\"382\":1}}],[\"线程大部分时间都在做无用功\",{\"1\":{\"370\":1}}],[\"线程仍然会继续运行\",{\"1\":{\"369\":1}}],[\"线程仍然在不断运行\",{\"1\":{\"369\":1}}],[\"线程还会继续运行\",{\"1\":{\"369\":1}}],[\"线程实际还是阻塞的\",{\"1\":{\"369\":1}}],[\"线程只是等待数据写入\",{\"1\":{\"369\":1}}],[\"线程停止运行\",{\"1\":{\"368\":2}}],[\"线程仅能处理一个\",{\"1\":{\"336\":1}}],[\"线程隔离正是解决这个问题的好办法\",{\"1\":{\"192\":1}}],[\"线程隔断\",{\"0\":{\"192\":1}}],[\"线\",{\"1\":{\"236\":1}}],[\"男\",{\"1\":{\"235\":3}}],[\"联合查询\",{\"1\":{\"235\":1}}],[\"右外连接\",{\"1\":{\"235\":1}}],[\"左外连接\",{\"1\":{\"235\":1}}],[\"左箭头键\",{\"1\":{\"70\":1}}],[\"笛卡尔积\",{\"1\":{\"235\":1}}],[\"子查询介绍\",{\"1\":{\"235\":1}}],[\"子查询\",{\"1\":{\"235\":1}}],[\"子链接必须使用表别名\",{\"1\":{\"235\":1}}],[\"子表数据会设置为null\",{\"1\":{\"234\":1}}],[\"子工程会直接继承下来\",{\"1\":{\"83\":1}}],[\"同名\",{\"1\":{\"425\":1}}],[\"同\",{\"1\":{\"411\":1}}],[\"同步处理任务失败\",{\"1\":{\"428\":1,\"429\":1}}],[\"同步处理任务成功\",{\"1\":{\"426\":1}}],[\"同步处理关闭\",{\"1\":{\"423\":1}}],[\"同步意味着\",{\"1\":{\"398\":1}}],[\"同步\",{\"1\":{\"393\":1}}],[\"同步多路复用\",{\"1\":{\"393\":1}}],[\"同步非阻塞\",{\"1\":{\"393\":1}}],[\"同步阻塞\",{\"1\":{\"393\":1}}],[\"同样可以向它提交普通任务\",{\"1\":{\"419\":1}}],[\"同样代表了\",{\"1\":{\"363\":1}}],[\"同样有两种办法\",{\"1\":{\"345\":1}}],[\"同样效果\",{\"1\":{\"260\":1}}],[\"同样对视图的更新\",{\"1\":{\"237\":1}}],[\"同真实的表一样\",{\"1\":{\"237\":1}}],[\"同restrict\",{\"1\":{\"234\":1}}],[\"同时会初始化它关联的\",{\"1\":{\"495\":1}}],[\"同时也能起到流量控制的作用\",{\"1\":{\"455\":1}}],[\"同时维护了一个\",{\"1\":{\"415\":1}}],[\"同时支持阻塞\",{\"1\":{\"392\":1}}],[\"同时返回ack的确认信息\",{\"1\":{\"131\":1}}],[\"同时给aproperties添加configurationproperties注解并标记前缀为a\",{\"1\":{\"18\":1}}],[\"约束\",{\"0\":{\"233\":1}}],[\"获得对应的消息\",{\"1\":{\"478\":1}}],[\"获得到正确的\",{\"1\":{\"422\":1}}],[\"获得token\",{\"0\":{\"279\":1}}],[\"获得指定year的年\",{\"1\":{\"232\":1}}],[\"获取唯一的\",{\"1\":{\"492\":1}}],[\"获取要调用的方法\",{\"1\":{\"489\":1}}],[\"获取真正的实现对象\",{\"1\":{\"489\":1}}],[\"获取到对应的\",{\"1\":{\"478\":1}}],[\"获取组成员的\",{\"1\":{\"469\":1}}],[\"获取组成员\",{\"1\":{\"469\":1}}],[\"获取属性\",{\"1\":{\"469\":1}}],[\"获取内容的字节数组\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"获取请求\",{\"1\":{\"464\":1}}],[\"获取失败信息\",{\"1\":{\"425\":1}}],[\"获取任务结果\",{\"1\":{\"425\":2}}],[\"获取所有事件\",{\"1\":{\"376\":1,\"378\":1}}],[\"获取的\",{\"1\":{\"355\":2}}],[\"获取这些\",{\"1\":{\"337\":1}}],[\"获取节点数量\",{\"1\":{\"328\":1}}],[\"获取参数\",{\"1\":{\"265\":1}}],[\"获取通知数据\",{\"0\":{\"265\":1}}],[\"获取bean\",{\"1\":{\"254\":1}}],[\"获取容器\",{\"1\":{\"254\":1}}],[\"获取当前位置\",{\"1\":{\"359\":1}}],[\"获取当前日期\",{\"1\":{\"303\":2}}],[\"获取当前登录用户信息\",{\"1\":{\"184\":1}}],[\"获取当前应用程序的根目录\",{\"1\":{\"27\":1}}],[\"获取最后一次成功执行快照的时间\",{\"1\":{\"159\":1}}],[\"获取key对应的hash中所有的value\",{\"1\":{\"153\":1}}],[\"获取key对应的hash中所有的field\",{\"1\":{\"153\":1}}],[\"获取key对应的hash中所有的键值对\",{\"1\":{\"153\":1}}],[\"获取key对应的hash中field的数量\",{\"1\":{\"153\":1}}],[\"获取key对应的hash中field对应的value\",{\"1\":{\"153\":1}}],[\"获取\",{\"0\":{\"355\":1},\"1\":{\"109\":1,\"382\":1,\"411\":1,\"423\":1,\"488\":1}}],[\"获取连接中的通道\",{\"1\":{\"107\":1,\"108\":1}}],[\"获取连接对象\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"获取选择的文件\",{\"1\":{\"37\":1}}],[\"日期\",{\"1\":{\"290\":1}}],[\"日期函数\",{\"1\":{\"232\":1}}],[\"日\",{\"1\":{\"289\":1,\"291\":1}}],[\"日常维护\",{\"1\":{\"289\":1}}],[\"日志记录\",{\"1\":{\"495\":1,\"498\":1}}],[\"日志\",{\"0\":{\"174\":1}}],[\"日志将输出到控制台\",{\"1\":{\"163\":1}}],[\"日志格式定义\",{\"1\":{\"90\":1}}],[\"求参数x的四舍五入的值\",{\"1\":{\"232\":1}}],[\"去执行关闭\",{\"1\":{\"424\":1}}],[\"去调用操作系统\",{\"1\":{\"396\":1}}],[\"去重\",{\"1\":{\"235\":1}}],[\"去除首尾空格\",{\"1\":{\"232\":1}}],[\"去数据库查询判断是否存在\",{\"1\":{\"143\":1}}],[\"字节的指令类型\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"字节的序列化方式\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"字节的版本\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"字节的魔数\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"字节数据常常会有此情况\",{\"1\":{\"459\":1}}],[\"字节就会缓冲在接收方的滑动窗口中\",{\"1\":{\"455\":1}}],[\"字节\",{\"1\":{\"453\":1,\"454\":3,\"458\":1}}],[\"字体\",{\"1\":{\"318\":1}}],[\"字符串与\",{\"0\":{\"347\":1}}],[\"字符串以5个空格隔开\",{\"1\":{\"289\":1}}],[\"字符串函数\",{\"1\":{\"232\":1}}],[\"字段类型也一致\",{\"1\":{\"235\":1}}],[\"字段列表\",{\"1\":{\"225\":1,\"235\":1}}],[\"字段2=值2\",{\"1\":{\"223\":1}}],[\"字段2\",{\"1\":{\"222\":2}}],[\"字段1=值1\",{\"1\":{\"223\":1}}],[\"字段1\",{\"1\":{\"222\":2}}],[\"字段\",{\"1\":{\"94\":1,\"99\":1,\"291\":1}}],[\"函数时\",{\"1\":{\"481\":1}}],[\"函数\",{\"0\":{\"232\":1}}],[\"函数配置lazy模式\",{\"1\":{\"136\":1}}],[\"起点\",{\"1\":{\"441\":1}}],[\"起始索引从0开始\",{\"1\":{\"231\":1}}],[\"起始索引\",{\"1\":{\"231\":2}}],[\"起别名\",{\"1\":{\"226\":1}}],[\"降序\",{\"1\":{\"230\":1}}],[\"升序\",{\"1\":{\"230\":1}}],[\"升降序\",{\"1\":{\"99\":1}}],[\"单聊\",{\"0\":{\"471\":1},\"1\":{\"465\":1,\"471\":1}}],[\"单线程没法异步提高效率\",{\"1\":{\"424\":1}}],[\"单线程配一个选择器\",{\"1\":{\"388\":1}}],[\"单线程可以配合\",{\"1\":{\"370\":1}}],[\"单线程\",{\"1\":{\"368\":1,\"369\":1}}],[\"单线程下\",{\"1\":{\"368\":1}}],[\"单从字面意思不好理解\",{\"1\":{\"332\":1}}],[\"单页应用\",{\"1\":{\"297\":1}}],[\"单个域有多个取值时\",{\"1\":{\"289\":1}}],[\"单个字符\",{\"1\":{\"227\":1}}],[\"单例\",{\"1\":{\"260\":1}}],[\"单位\",{\"1\":{\"163\":2}}],[\"模型时\",{\"1\":{\"450\":1}}],[\"模型\",{\"0\":{\"393\":1}}],[\"模板\",{\"0\":{\"303\":1}}],[\"模式\",{\"1\":{\"296\":1,\"481\":1}}],[\"模式运行\",{\"1\":{\"296\":1}}],[\"模糊匹配\",{\"1\":{\"227\":1}}],[\"模拟事务回滚\",{\"1\":{\"219\":1}}],[\"模拟一个消息处理的异常\",{\"1\":{\"139\":1}}],[\"模拟执行的漫\",{\"1\":{\"111\":1}}],[\"模拟实现\",{\"1\":{\"29\":1}}],[\"功能\",{\"1\":{\"227\":1,\"425\":1}}],[\"功能键\",{\"1\":{\"70\":2}}],[\"姓名\",{\"1\":{\"226\":2}}],[\"条件查询\",{\"0\":{\"227\":1},\"1\":{\"225\":1}}],[\"条件列表\",{\"1\":{\"225\":1}}],[\"条件\",{\"1\":{\"223\":1,\"224\":1,\"235\":1}}],[\"条件装配也是经常用到的功能\",{\"1\":{\"22\":1}}],[\"条件装配\",{\"0\":{\"22\":1}}],[\"给\",{\"1\":{\"481\":2}}],[\"给全部字段添加值\",{\"1\":{\"222\":1}}],[\"给指定字段批量添加值\",{\"1\":{\"222\":1}}],[\"给指定字段添加值\",{\"1\":{\"222\":1}}],[\"值也有所不同\",{\"1\":{\"455\":1}}],[\"值\",{\"1\":{\"438\":9,\"481\":1}}],[\"值2\",{\"1\":{\"222\":8}}],[\"值1\",{\"1\":{\"222\":8}}],[\"抛出异常\",{\"1\":{\"425\":1}}],[\"抛出运行时异常\",{\"1\":{\"219\":1}}],[\"抛出了amqprejectanddontrequeueexception异常\",{\"1\":{\"140\":1}}],[\"任意个字符\",{\"1\":{\"227\":1}}],[\"任何异常都回滚\",{\"1\":{\"219\":1}}],[\"任务是否完成\",{\"1\":{\"425\":1}}],[\"任务是否取消\",{\"1\":{\"425\":1}}],[\"任务分为普通任务\",{\"1\":{\"413\":1}}],[\"任务名字\",{\"1\":{\"288\":1}}],[\"任务传参\",{\"0\":{\"249\":1}}],[\"任务\",{\"0\":{\"124\":1},\"1\":{\"496\":2}}],[\"任务模型\",{\"0\":{\"110\":1}}],[\"错误回滚\",{\"1\":{\"219\":1}}],[\"错误日志定义\",{\"1\":{\"90\":1}}],[\"防止数据冲突和数据丢失等问题\",{\"1\":{\"219\":1}}],[\"赋值\",{\"1\":{\"215\":1}}],[\"雪花算法\",{\"1\":{\"215\":1}}],[\"表达式\",{\"1\":{\"315\":1}}],[\"表达方式\",{\"1\":{\"290\":1}}],[\"表格还是\",{\"1\":{\"237\":1}}],[\"表b\",{\"1\":{\"235\":1}}],[\"表a\",{\"1\":{\"235\":1}}],[\"表名列表\",{\"1\":{\"225\":1}}],[\"表名\",{\"1\":{\"215\":1,\"222\":4,\"223\":1,\"224\":2,\"226\":3,\"228\":4,\"231\":1,\"232\":1}}],[\"表示该由当前线程唤醒\",{\"1\":{\"496\":1}}],[\"表示由其它线程来调用\",{\"1\":{\"496\":1}}],[\"表示需要连接关闭\",{\"1\":{\"455\":1}}],[\"表示增加新的\",{\"1\":{\"445\":1}}],[\"表示调用者没用完之前\",{\"1\":{\"441\":1}}],[\"表示基于\",{\"1\":{\"410\":1,\"411\":1}}],[\"表示实际写了多少字节\",{\"1\":{\"385\":1}}],[\"表示到达了文件的末尾\",{\"1\":{\"356\":1}}],[\"表示全局搜索\",{\"1\":{\"315\":1}}],[\"表示在全局搜索\",{\"1\":{\"315\":1}}],[\"表示一个完整报文\",{\"1\":{\"455\":1}}],[\"表示一个具体的可执行的调度程序\",{\"1\":{\"246\":1}}],[\"表示一个工作\",{\"1\":{\"246\":1}}],[\"表示与cpu核心数相同\",{\"1\":{\"90\":1}}],[\"表示正文是html格式\",{\"1\":{\"34\":1}}],[\"改进的地方\",{\"1\":{\"369\":1}}],[\"改变\",{\"1\":{\"346\":1}}],[\"改了\",{\"1\":{\"213\":1}}],[\"改为\",{\"1\":{\"16\":2}}],[\"损耗小\",{\"1\":{\"211\":1}}],[\"尚硅谷\",{\"1\":{\"211\":1}}],[\"尚未消费就突然宕机\",{\"1\":{\"129\":1}}],[\"来封装线程和\",{\"1\":{\"495\":1}}],[\"来接收结果\",{\"1\":{\"492\":1}}],[\"来设置大小\",{\"1\":{\"481\":1}}],[\"来实现文件读\",{\"1\":{\"396\":1}}],[\"来跟踪\",{\"1\":{\"385\":1}}],[\"来理解非阻塞模式\",{\"1\":{\"369\":1}}],[\"来理解阻塞模式\",{\"1\":{\"368\":1}}],[\"来控制\",{\"1\":{\"364\":1}}],[\"来获取\",{\"1\":{\"355\":1}}],[\"来读取文件内容\",{\"1\":{\"338\":1}}],[\"来处理\",{\"1\":{\"337\":1,\"415\":1}}],[\"来完成\",{\"1\":{\"297\":1}}],[\"来通过\",{\"1\":{\"296\":1}}],[\"来源\",{\"1\":{\"206\":1}}],[\"来自\",{\"1\":{\"24\":1}}],[\"传递给下一个\",{\"1\":{\"441\":1}}],[\"传递集合类型参数list\",{\"0\":{\"206\":1}}],[\"传播给每个\",{\"1\":{\"413\":1}}],[\"传输问题\",{\"1\":{\"407\":1}}],[\"传输数据\",{\"0\":{\"362\":1}}],[\"传统的\",{\"1\":{\"396\":1}}],[\"传统\",{\"0\":{\"396\":1}}],[\"传参\",{\"0\":{\"200\":1}}],[\"类如其名\",{\"1\":{\"446\":1}}],[\"类\",{\"1\":{\"363\":1}}],[\"类也有该方法\",{\"1\":{\"343\":1}}],[\"类似的内存分配算法提升分配效率\",{\"1\":{\"436\":1}}],[\"类似的\",{\"1\":{\"432\":1}}],[\"类似的形式\",{\"1\":{\"201\":1}}],[\"类似于applicationcontext\",{\"1\":{\"260\":1}}],[\"类型和长度已知的情况下\",{\"1\":{\"382\":1}}],[\"类型exchange可以让队列在绑定routing\",{\"1\":{\"119\":1}}],[\"类型\",{\"1\":{\"90\":1,\"94\":1,\"113\":1,\"382\":1}}],[\"类型映射\",{\"1\":{\"90\":1}}],[\"匿名顺序传参\",{\"1\":{\"201\":1}}],[\"匿名参数只能使用\",{\"1\":{\"201\":1}}],[\"匿名参数\",{\"0\":{\"201\":1}}],[\"片段可以在其它语句中使用\",{\"1\":{\"197\":1}}],[\"确定单次读取大小\",{\"1\":{\"499\":1}}],[\"确定具体消息类型\",{\"1\":{\"478\":1}}],[\"确定下来\",{\"1\":{\"197\":1}}],[\"确保接到的\",{\"1\":{\"467\":1,\"478\":1}}],[\"确保要递归删除的文件夹没有重要内容\",{\"1\":{\"365\":1}}],[\"确保订单支付状态的最终一致性\",{\"1\":{\"145\":1}}],[\"确保消息投递的可靠性\",{\"1\":{\"145\":1}}],[\"确保消费者一定要处理消息\",{\"1\":{\"129\":1}}],[\"确保mq不会将消息弄丢\",{\"1\":{\"129\":1}}],[\"确保生产者一定把消息发送到mq\",{\"1\":{\"129\":1}}],[\"后才能发送剩余部分\",{\"1\":{\"455\":1}}],[\"后设置成功结果\",{\"1\":{\"427\":1}}],[\"后面会详细展开\",{\"1\":{\"410\":1}}],[\"后面的数字必须大于等于30\",{\"1\":{\"290\":1}}],[\"后提供的\",{\"1\":{\"397\":1}}],[\"后\",{\"1\":{\"393\":1,\"441\":1}}],[\"后续出站处理器的执行\",{\"1\":{\"432\":1}}],[\"后续这个\",{\"1\":{\"415\":1}}],[\"后续不会再监听事件\",{\"1\":{\"380\":1}}],[\"后续由人工集中处理\",{\"1\":{\"141\":1}}],[\"后缀名\",{\"1\":{\"188\":2}}],[\"随时调整\",{\"1\":{\"188\":1}}],[\"随机给一个\",{\"1\":{\"169\":1}}],[\"随机返回集合中的一个元素\",{\"1\":{\"153\":1}}],[\"某个文件发生变化\",{\"1\":{\"288\":1}}],[\"某个范围之内\",{\"1\":{\"227\":1}}],[\"某个项目配置\",{\"1\":{\"45\":1}}],[\"某些业务配置在配置文件中写死了\",{\"1\":{\"186\":1}}],[\"往后传递\",{\"1\":{\"183\":1}}],[\"往list中加入hello\",{\"1\":{\"153\":1}}],[\"登录成功\",{\"1\":{\"470\":1,\"471\":1}}],[\"登录成功返回\",{\"1\":{\"469\":1}}],[\"登录\",{\"0\":{\"470\":1},\"1\":{\"469\":1,\"471\":1}}],[\"登录样例\",{\"0\":{\"182\":1}}],[\"登录名\",{\"1\":{\"71\":1}}],[\"响应消息处理器\",{\"1\":{\"488\":1}}],[\"响应消息\",{\"1\":{\"488\":1}}],[\"响应文件读取成功的是另一个线程\",{\"1\":{\"399\":1}}],[\"响应\",{\"0\":{\"273\":1}}],[\"响应式\",{\"1\":{\"181\":1}}],[\"响应修改等功能\",{\"1\":{\"88\":1}}],[\"拿到一个事件\",{\"1\":{\"498\":1}}],[\"拿到空的\",{\"1\":{\"493\":1}}],[\"拿到触发事件的channel\",{\"1\":{\"382\":1}}],[\"拿到请求的header\",{\"1\":{\"181\":1}}],[\"拿到uri\",{\"1\":{\"169\":1}}],[\"针对请求的过滤\",{\"1\":{\"181\":1}}],[\"针对上述情况\",{\"1\":{\"131\":1}}],[\"身份校验\",{\"1\":{\"175\":1}}],[\"网络设备出现故障\",{\"1\":{\"475\":1}}],[\"网络传输\",{\"1\":{\"438\":1}}],[\"网络应用框架中的地位就好比\",{\"1\":{\"406\":1}}],[\"网络\",{\"0\":{\"401\":1},\"1\":{\"392\":1}}],[\"网络编程\",{\"0\":{\"366\":1},\"1\":{\"394\":1}}],[\"网络上有多条数据发送给服务端\",{\"1\":{\"351\":1}}],[\"网络等信息\",{\"1\":{\"65\":1}}],[\"网关路由在配置文件中写死了\",{\"1\":{\"186\":1}}],[\"网关可以把信息重新放入请求头中\",{\"1\":{\"183\":1}}],[\"网关中拿到啊用户信息\",{\"1\":{\"183\":1}}],[\"网关传递信息\",{\"0\":{\"183\":1}}],[\"网关登录校验\",{\"0\":{\"180\":1}}],[\"网关\",{\"0\":{\"175\":1},\"1\":{\"176\":1}}],[\"额外创建模块\",{\"1\":{\"173\":1}}],[\"优势\",{\"0\":{\"447\":1}}],[\"优点\",{\"1\":{\"445\":1}}],[\"优点有\",{\"1\":{\"436\":1}}],[\"优点是避免了拷贝引起的性能损耗\",{\"1\":{\"383\":1}}],[\"优点是消息连续容易处理\",{\"1\":{\"383\":1}}],[\"优雅关闭\",{\"0\":{\"416\":1},\"1\":{\"416\":1}}],[\"优先执行\",{\"1\":{\"181\":1}}],[\"优先使用服务器端的加密套件\",{\"1\":{\"90\":1}}],[\"优先使用的加密套件\",{\"1\":{\"90\":1}}],[\"优化与源码\",{\"0\":{\"476\":1}}],[\"优化\",{\"0\":{\"173\":1,\"397\":1,\"477\":1}}],[\"编解码器\",{\"0\":{\"466\":1}}],[\"编写\",{\"1\":{\"449\":2}}],[\"编写feignclient\",{\"1\":{\"171\":1}}],[\"编码格式\",{\"1\":{\"220\":1}}],[\"编译\",{\"1\":{\"75\":1}}],[\"帮助我们优雅的发送请求\",{\"1\":{\"171\":1}}],[\"想简单点\",{\"1\":{\"171\":1}}],[\"太多了\",{\"1\":{\"171\":1}}],[\"飞书bilibili\",{\"1\":{\"164\":1}}],[\"指令类型\",{\"1\":{\"465\":1}}],[\"指令来提供密码\",{\"1\":{\"163\":1}}],[\"指针\",{\"1\":{\"442\":1}}],[\"指定\",{\"1\":{\"481\":2,\"492\":1,\"497\":1}}],[\"指定要连接的服务器和端口\",{\"1\":{\"411\":1}}],[\"指定值的起始和增加幅度\",{\"1\":{\"291\":1}}],[\"指定值的范围\",{\"1\":{\"291\":1}}],[\"指定某几个值\",{\"1\":{\"291\":1}}],[\"指定主节点的名称\",{\"1\":{\"163\":1}}],[\"指定下标值替换为hello\",{\"1\":{\"153\":1}}],[\"指定名称和邮箱\",{\"0\":{\"45\":1}}],[\"指定配置顺序\",{\"1\":{\"24\":1}}],[\"毫秒\",{\"1\":{\"163\":2}}],[\"客观下线\",{\"1\":{\"163\":1}}],[\"客户端架子\",{\"1\":{\"488\":1}}],[\"客户端启动\",{\"1\":{\"481\":1}}],[\"客户端可以定义如下心跳处理器\",{\"1\":{\"475\":1}}],[\"客户端可以定时向服务器端发送数据\",{\"1\":{\"475\":1}}],[\"客户端定时心跳\",{\"1\":{\"475\":1}}],[\"客户端在每条消息之后\",{\"1\":{\"459\":1}}],[\"客户端输出\",{\"1\":{\"458\":1,\"459\":1,\"460\":1}}],[\"客户端什么时候\",{\"1\":{\"458\":1}}],[\"客户端测试代码\",{\"1\":{\"458\":1}}],[\"客户端向服务器端发送\",{\"1\":{\"409\":1}}],[\"客户端代码第一版\",{\"0\":{\"490\":1}}],[\"客户端代码\",{\"0\":{\"492\":1},\"1\":{\"460\":1}}],[\"客户端代码希望发送\",{\"1\":{\"453\":1,\"454\":1}}],[\"客户端代码为\",{\"1\":{\"376\":1}}],[\"客户端代码不变\",{\"1\":{\"369\":1,\"417\":1}}],[\"客户端正常\",{\"1\":{\"375\":1}}],[\"客户端发送数据过来\",{\"1\":{\"375\":1}}],[\"客户端发起连接请求\",{\"1\":{\"375\":1}}],[\"客户端连接成功时触发\",{\"1\":{\"373\":1}}],[\"客户端连接到redis服务\",{\"1\":{\"162\":1}}],[\"客户端\",{\"0\":{\"411\":1,\"491\":1,\"493\":1},\"1\":{\"368\":1,\"381\":1,\"382\":1,\"385\":1,\"417\":1,\"432\":1,\"450\":1}}],[\"客户端通常不知道反向代理的存在\",{\"1\":{\"88\":1}}],[\"客户端通过正向代理访问互联网上的内容\",{\"1\":{\"87\":1}}],[\"客户端通过正向代理服务器发送请求到目标服务器\",{\"1\":{\"87\":1}}],[\"哨兵\",{\"0\":{\"163\":1}}],[\"永久生效\",{\"1\":{\"162\":1,\"244\":1}}],[\"速度最快\",{\"1\":{\"160\":1}}],[\"无效时处理\",{\"1\":{\"497\":1}}],[\"无效\",{\"1\":{\"497\":1}}],[\"无论有没有\",{\"1\":{\"496\":1}}],[\"无锁队列\",{\"1\":{\"496\":1}}],[\"无鱼\",{\"1\":{\"462\":1}}],[\"无鱼肉亦可\",{\"1\":{\"462\":1}}],[\"无鸡\",{\"1\":{\"462\":1}}],[\"无鸡鸭亦可\",{\"1\":{\"462\":1}}],[\"无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金\",{\"1\":{\"462\":1}}],[\"无关\",{\"1\":{\"444\":1}}],[\"无参\",{\"1\":{\"442\":1}}],[\"无法进行数据读写\",{\"1\":{\"475\":1}}],[\"无法利用\",{\"1\":{\"396\":1}}],[\"无法保证把\",{\"1\":{\"385\":1}}],[\"无侵入\",{\"1\":{\"211\":1}}],[\"无意义\",{\"1\":{\"159\":1,\"466\":1,\"467\":1,\"478\":1}}],[\"无需从头编写练习\",{\"1\":{\"488\":1}}],[\"无需等\",{\"1\":{\"369\":1}}],[\"无需重复处理\",{\"1\":{\"144\":1}}],[\"无需指定版本\",{\"1\":{\"83\":1}}],[\"快照同时还可以响应客户端请求\",{\"1\":{\"159\":1}}],[\"禁用rdb\",{\"1\":{\"159\":1}}],[\"全连接队列\",{\"1\":{\"481\":1}}],[\"全局搜索\",{\"0\":{\"316\":1}}],[\"全局配置\",{\"1\":{\"45\":1}}],[\"全部查出来\",{\"1\":{\"235\":1}}],[\"全部阻塞\",{\"1\":{\"159\":1}}],[\"触发了写空闲事件\",{\"1\":{\"475\":1}}],[\"触发了读空闲事件\",{\"1\":{\"475\":1}}],[\"触发的原始流程\",{\"1\":{\"432\":1}}],[\"触发上一个出站处理器\",{\"1\":{\"432\":1}}],[\"触发时机\",{\"1\":{\"288\":1}}],[\"触发作业立即运行\",{\"1\":{\"248\":1,\"249\":1}}],[\"触发器的参数\",{\"1\":{\"249\":1}}],[\"触发器\",{\"1\":{\"248\":1,\"249\":1}}],[\"触发阈值自动重写aof\",{\"1\":{\"160\":1}}],[\"触发\",{\"0\":{\"159\":1},\"1\":{\"288\":1,\"495\":3,\"498\":3,\"499\":2}}],[\"持久化\",{\"0\":{\"157\":1}}],[\"持久消息投递到了mq\",{\"1\":{\"131\":1}}],[\"很久很久以前\",{\"1\":{\"462\":1}}],[\"很多地方体现零拷贝\",{\"1\":{\"447\":1}}],[\"很多时候\",{\"1\":{\"155\":1}}],[\"很有可能导致消息被消费多次\",{\"1\":{\"142\":1}}],[\"减少内存溢出的可能\",{\"1\":{\"436\":1,\"447\":1}}],[\"减少\",{\"1\":{\"397\":1}}],[\"减少了一次数据拷贝\",{\"1\":{\"397\":1}}],[\"减少了线程上下文切换\",{\"1\":{\"371\":1}}],[\"减少创建次数\",{\"1\":{\"172\":1}}],[\"减少操作\",{\"1\":{\"153\":1}}],[\"减少20\",{\"1\":{\"153\":1}}],[\"zoom\",{\"1\":{\"455\":1}}],[\"zookeeper\",{\"1\":{\"406\":1}}],[\"zhangsan\",{\"1\":{\"351\":3,\"417\":6,\"466\":1,\"492\":1}}],[\"z\",{\"1\":{\"313\":1}}],[\"z0\",{\"1\":{\"313\":1}}],[\"za\",{\"1\":{\"313\":1}}],[\"zadd\",{\"1\":{\"153\":2}}],[\"zenhei\",{\"1\":{\"305\":1}}],[\"zinterstore\",{\"1\":{\"153\":2}}],[\"zincrby\",{\"1\":{\"153\":2}}],[\"zunionstore\",{\"1\":{\"153\":2}}],[\"zcard\",{\"1\":{\"153\":2}}],[\"zcount\",{\"1\":{\"153\":2}}],[\"zrem\",{\"1\":{\"153\":2}}],[\"zrank\",{\"1\":{\"153\":2}}],[\"zrangebyscore\",{\"1\":{\"153\":2}}],[\"zrange\",{\"1\":{\"153\":2}}],[\"检查\",{\"1\":{\"385\":1}}],[\"检查文件是否存在\",{\"1\":{\"364\":1}}],[\"检查key对应的hash中是否存在field\",{\"1\":{\"153\":1}}],[\"检查或者是否加了依赖\",{\"1\":{\"85\":1}}],[\"剩余2\",{\"1\":{\"153\":1}}],[\"截取整个页面\",{\"1\":{\"303\":1}}],[\"截取\",{\"1\":{\"153\":1,\"232\":1}}],[\"长度调整\",{\"1\":{\"460\":1}}],[\"长度占用字节\",{\"1\":{\"460\":1}}],[\"长度偏移\",{\"1\":{\"460\":1}}],[\"长度定的太小\",{\"1\":{\"458\":1}}],[\"长度定的太大\",{\"1\":{\"458\":1}}],[\"长度\",{\"1\":{\"153\":1,\"382\":1,\"466\":1,\"467\":1,\"478\":1}}],[\"长连接\",{\"1\":{\"31\":1}}],[\"找到反序列化算法\",{\"1\":{\"478\":1}}],[\"找到一条完整消息\",{\"1\":{\"382\":1}}],[\"找到就设置\",{\"1\":{\"153\":1}}],[\"找到添加打包依赖\",{\"1\":{\"85\":1}}],[\"找到添加依赖\",{\"1\":{\"85\":1}}],[\"找不到就创建\",{\"1\":{\"153\":1}}],[\"批量set或get\",{\"1\":{\"153\":1}}],[\"批量修改提交人信息\",{\"0\":{\"52\":1}}],[\"串的截取\",{\"1\":{\"153\":1}}],[\"过期\",{\"1\":{\"153\":1}}],[\"过滤器\",{\"0\":{\"286\":1}}],[\"过滤\",{\"1\":{\"94\":1,\"103\":1}}],[\"过滤等\",{\"1\":{\"87\":1}}],[\"打个比喻\",{\"1\":{\"432\":1}}],[\"打开页面\",{\"1\":{\"301\":1}}],[\"打印\",{\"1\":{\"422\":4}}],[\"打印可读取内容\",{\"1\":{\"341\":1}}],[\"打印下标1的值\",{\"1\":{\"153\":1}}],[\"打印所有内容\",{\"1\":{\"341\":1}}],[\"打印所有\",{\"1\":{\"153\":1}}],[\"打印所有的key\",{\"1\":{\"153\":1}}],[\"打印name的value\",{\"1\":{\"153\":1}}],[\"打包\",{\"1\":{\"75\":1,\"80\":1}}],[\"打包使用\",{\"1\":{\"27\":1}}],[\"微服务\",{\"0\":{\"149\":1}}],[\"收到\",{\"1\":{\"481\":3}}],[\"收到信息了\",{\"1\":{\"148\":1}}],[\"收集超过5秒的sql\",{\"1\":{\"244\":1}}],[\"收件人\",{\"1\":{\"34\":2}}],[\"延迟发送\",{\"1\":{\"455\":1}}],[\"延迟消息队列\",{\"1\":{\"146\":1}}],[\"延迟队列\",{\"0\":{\"146\":1}}],[\"延迟5s启动\",{\"1\":{\"35\":1}}],[\"完全抛弃了\",{\"1\":{\"406\":1}}],[\"完成收发\",{\"1\":{\"466\":1}}],[\"完成文件\",{\"1\":{\"396\":1}}],[\"完成对多个\",{\"1\":{\"370\":1}}],[\"完成订单状态同步\",{\"1\":{\"145\":1}}],[\"完整性和一致性非常重要\",{\"1\":{\"219\":1}}],[\"完整代码如下\",{\"1\":{\"141\":1}}],[\"支付服务会正在用户支付成功以后利用mq消息通知交易服务\",{\"1\":{\"145\":1}}],[\"支付服务与交易服务之间的订单状态一致性是如何保证的\",{\"1\":{\"145\":1}}],[\"支持链式调用\",{\"1\":{\"447\":1}}],[\"支持关键词自动转义\",{\"1\":{\"211\":1}}],[\"支持自定义全局通用操作\",{\"1\":{\"211\":1}}],[\"支持activerecord模式\",{\"1\":{\"211\":1}}],[\"支持主键自动生成\",{\"1\":{\"211\":1}}],[\"支持多种数据库\",{\"1\":{\"211\":1}}],[\"支持lambda形式调用\",{\"1\":{\"211\":1}}],[\"支持指定分数\",{\"1\":{\"153\":1}}],[\"支持数百万条的消息存储\",{\"1\":{\"134\":1}}],[\"支持各种数据类型\",{\"1\":{\"94\":1}}],[\"支持性\",{\"1\":{\"31\":1,\"32\":1}}],[\"由注册线程去执行\",{\"1\":{\"495\":1}}],[\"由四部分组成\",{\"1\":{\"437\":1}}],[\"由下一个\",{\"1\":{\"418\":1}}],[\"由非\",{\"1\":{\"417\":1,\"497\":1}}],[\"由\",{\"1\":{\"407\":1,\"417\":1,\"441\":1,\"497\":2}}],[\"由他来查看哪些sql超出了我们的最大忍耐时间值\",{\"1\":{\"244\":1}}],[\"由操作系统保证数据同步到磁盘\",{\"1\":{\"160\":1}}],[\"由交易服务自己主动去查询支付状态\",{\"1\":{\"145\":1}}],[\"由于\",{\"1\":{\"185\":1,\"441\":1}}],[\"由于记录中的很多操作没有意义\",{\"1\":{\"160\":1}}],[\"由于某种原因\",{\"1\":{\"142\":1}}],[\"由于意外经常会出现业务被重复执行的情况\",{\"1\":{\"142\":1}}],[\"由于抛出的是业务异常\",{\"1\":{\"139\":1}}],[\"由于抛出的是消息转换异常\",{\"1\":{\"139\":1}}],[\"由于消息回执的处理代码比较统一\",{\"1\":{\"139\":1}}],[\"由于我们进入了demo目录\",{\"1\":{\"61\":1}}],[\"由于sockjs在不支持websocket的浏览器中使用的是长轮询技术\",{\"1\":{\"33\":1}}],[\"万一真的mq通知失败该怎么办呢\",{\"1\":{\"145\":1}}],[\"兜底方案\",{\"0\":{\"145\":1}}],[\"还要处理\",{\"1\":{\"496\":1}}],[\"还未涉及数据读取\",{\"1\":{\"498\":1}}],[\"还未绑定\",{\"1\":{\"495\":1}}],[\"还未产生结果时返回\",{\"1\":{\"425\":1}}],[\"还没有完成\",{\"1\":{\"495\":1}}],[\"还没有结果\",{\"1\":{\"426\":1}}],[\"还是使用原始\",{\"1\":{\"442\":1}}],[\"还是相当于闲置\",{\"1\":{\"398\":1}}],[\"还有种办法是采用\",{\"1\":{\"440\":1}}],[\"还有一类方法是\",{\"1\":{\"438\":1}}],[\"还有同学会笼统地回答\",{\"1\":{\"424\":1}}],[\"还有内容\",{\"1\":{\"401\":1}}],[\"还可以使用回调的方式\",{\"1\":{\"422\":1}}],[\"还可以利用定时任务作为兜底方案\",{\"1\":{\"145\":1}}],[\"还包含了这个任务调度的方案略\",{\"1\":{\"246\":1}}],[\"还加上了status必须为1的条件\",{\"1\":{\"144\":1}}],[\"还需要在子工程中引入所需依赖\",{\"1\":{\"83\":1}}],[\"还需要一个属性a\",{\"1\":{\"18\":1}}],[\"尝试更新订单\",{\"1\":{\"144\":1}}],[\"订单不存在或者订单状态不是1\",{\"1\":{\"144\":1}}],[\"判断任务是否成功\",{\"1\":{\"425\":1}}],[\"判断\",{\"1\":{\"425\":1}}],[\"判断事件类型\",{\"1\":{\"376\":1,\"378\":1}}],[\"判断主节点下线的时间阈值\",{\"1\":{\"163\":1}}],[\"判断元素是否在集合中\",{\"1\":{\"153\":1}}],[\"判断key是否存在\",{\"1\":{\"153\":1}}],[\"判断订单状态\",{\"1\":{\"144\":1}}],[\"判断是否是图片类型\",{\"1\":{\"37\":1}}],[\"以解决粘包为例\",{\"1\":{\"457\":1}}],[\"以太网的\",{\"1\":{\"455\":1}}],[\"以一个段\",{\"1\":{\"455\":1}}],[\"以一个简单的实现为例\",{\"1\":{\"415\":1}}],[\"以后\",{\"1\":{\"436\":1}}],[\"以便后续使用\",{\"1\":{\"496\":1}}],[\"以便添加更多的处理器\",{\"1\":{\"410\":1,\"411\":1}}],[\"以便在其它语句中使用\",{\"1\":{\"197\":1}}],[\"以下的框架都使用了\",{\"1\":{\"406\":1}}],[\"以避免守护线程意外结束\",{\"1\":{\"400\":1}}],[\"以避免并发访问引起的数据冲突和错误\",{\"1\":{\"219\":1}}],[\"以\",{\"1\":{\"381\":1}}],[\"以前有同学写过这样的代码\",{\"1\":{\"381\":1}}],[\"以保证可以使用\",{\"1\":{\"299\":1}}],[\"以保证数据同步到磁盘\",{\"1\":{\"160\":1}}],[\"以此类推\",{\"1\":{\"291\":3}}],[\"以及为原生\",{\"1\":{\"495\":1}}],[\"以及其\",{\"1\":{\"302\":1}}],[\"以及b表的name\",{\"1\":{\"235\":1}}],[\"以及两张表交集部分\",{\"1\":{\"235\":1}}],[\"以支付修改订单的业务为例\",{\"1\":{\"144\":1}}],[\"以jackson的消息转换器为例\",{\"1\":{\"143\":1}}],[\"以nginx为例\",{\"1\":{\"58\":1}}],[\"业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息\",{\"1\":{\"144\":1}}],[\"业务判断\",{\"0\":{\"144\":1}}],[\"业务处理成功后将消息id保存到数据库\",{\"1\":{\"143\":1}}],[\"业务状态判断\",{\"1\":{\"142\":1}}],[\"业务异常\",{\"1\":{\"142\":1}}],[\"业务幂等性\",{\"0\":{\"142\":1}}],[\"交由ioc管理后\",{\"1\":{\"254\":1}}],[\"交易服务并不知道用户会在什么时候支付\",{\"1\":{\"145\":1}}],[\"交易服务更改订单为已支付状态\",{\"1\":{\"142\":1}}],[\"交换机和队列绑定和\",{\"1\":{\"118\":2,\"120\":1}}],[\"交换机和队列绑定\",{\"1\":{\"114\":1}}],[\"交换机吧消息发给和自己绑定的队列\",{\"1\":{\"112\":1}}],[\"交换机名称\",{\"1\":{\"107\":1,\"108\":1,\"113\":1}}],[\"假死的连接占用的资源不能自动释放\",{\"1\":{\"475\":1}}],[\"假设一个中文字符长度为\",{\"1\":{\"462\":1}}],[\"假设长度为\",{\"1\":{\"458\":1}}],[\"假设接收方的窗口只剩了\",{\"1\":{\"455\":1}}],[\"假设发送方\",{\"1\":{\"455\":1}}],[\"假设消息一直向后传\",{\"1\":{\"441\":1}}],[\"假设病人源源不断地来\",{\"1\":{\"424\":1}}],[\"假设现在我们的a有一个扩展类a1\",{\"1\":{\"22\":1}}],[\"假设现在我们的a需要依赖b实例\",{\"1\":{\"20\":1}}],[\"假如用户刚刚支付完成\",{\"1\":{\"142\":1}}],[\"页面卡顿时频繁刷新导致表单重复提交\",{\"1\":{\"142\":1}}],[\"然主家亦振振有词\",{\"1\":{\"462\":1}}],[\"然而在实际业务场景中\",{\"1\":{\"142\":1}}],[\"然后在两者之间选择一个小值作为\",{\"1\":{\"455\":1}}],[\"然后在任务队列的任务都处理完成后\",{\"1\":{\"416\":1}}],[\"然后在meta\",{\"1\":{\"17\":1}}],[\"然后切换至写模式\",{\"1\":{\"340\":1}}],[\"然后使用\",{\"1\":{\"301\":1}}],[\"然后每3秒重复一次\",{\"1\":{\"248\":1,\"249\":1}}],[\"然后每隔5s运行一次\",{\"1\":{\"35\":1}}],[\"然后相同的按照第二个方式排序\",{\"1\":{\"230\":1}}],[\"然后再次发送消息测试\",{\"1\":{\"139\":1}}],[\"然后测试发送一条消息\",{\"1\":{\"130\":1}}],[\"然后\",{\"1\":{\"103\":1}}],[\"然后将请求转发到后端的服务器集群中的一个或多个服务器上\",{\"1\":{\"88\":1}}],[\"然后同样的把\",{\"1\":{\"16\":1}}],[\"退款完成后\",{\"1\":{\"142\":1}}],[\"退款业务\",{\"1\":{\"142\":1}}],[\"退出循环\",{\"1\":{\"497\":4}}],[\"退出群聊\",{\"1\":{\"472\":1}}],[\"退出的时候也会产生\",{\"1\":{\"159\":1}}],[\"退出\",{\"0\":{\"473\":1},\"1\":{\"70\":1}}],[\"新投递的消息才被消费\",{\"1\":{\"142\":1}}],[\"新增数据\",{\"1\":{\"142\":1}}],[\"新建本地分支\",{\"1\":{\"46\":1}}],[\"新建分支xxx\",{\"1\":{\"46\":1}}],[\"幂等是一个数学概念\",{\"1\":{\"142\":1}}],[\"比\",{\"1\":{\"331\":1}}],[\"比较费解\",{\"1\":{\"497\":1}}],[\"比较好理解\",{\"1\":{\"497\":1}}],[\"比较运算符\",{\"1\":{\"227\":1}}],[\"比较优雅的一种处理方案是republishmessagerecoverer\",{\"1\":{\"141\":1}}],[\"比如一个线程发起建立连接\",{\"1\":{\"424\":1}}],[\"比如一个\",{\"1\":{\"383\":1}}],[\"比如一条sql执行超过5秒钟\",{\"1\":{\"244\":1}}],[\"比如用户名或身份证号\",{\"1\":{\"236\":1}}],[\"比如文章标题或描述的搜索\",{\"1\":{\"236\":1}}],[\"比如要求\",{\"1\":{\"235\":1}}],[\"比如查询的时候用户正在支付中\",{\"1\":{\"145\":1}}],[\"比如\",{\"1\":{\"12\":2,\"14\":2,\"131\":1,\"134\":1,\"138\":1,\"142\":1,\"197\":1,\"291\":4}}],[\"显示在视图中的数据也会发生改变\",{\"1\":{\"237\":1}}],[\"显示行号\",{\"1\":{\"70\":1}}],[\"显式内连接\",{\"1\":{\"235\":1}}],[\"显然不太合适了\",{\"1\":{\"141\":1}}],[\"本质是因为\",{\"1\":{\"455\":1}}],[\"本质是一个单线程执行器\",{\"1\":{\"415\":1}}],[\"本身并不具备\",{\"1\":{\"396\":1}}],[\"本地测试不走网卡\",{\"1\":{\"455\":1}}],[\"本地测试达到最大重试次数后\",{\"1\":{\"141\":1}}],[\"本地回环地址的\",{\"1\":{\"455\":1}}],[\"本地重试3次以后\",{\"1\":{\"140\":1}}],[\"本章我们就一起研究一下消费者处理消息时的可靠性解决方案\",{\"1\":{\"138\":1}}],[\"初始容量是\",{\"1\":{\"434\":1,\"439\":1}}],[\"初始化器的\",{\"1\":{\"495\":1}}],[\"初始化器的职责是将\",{\"1\":{\"495\":1}}],[\"初始化器是一次性的\",{\"1\":{\"495\":1}}],[\"初始化器\",{\"1\":{\"495\":1,\"498\":1}}],[\"初始化的屏幕大小默认为\",{\"1\":{\"301\":1}}],[\"初始化\",{\"0\":{\"320\":1},\"1\":{\"47\":1,\"260\":1,\"492\":1,\"495\":1}}],[\"初识spring\",{\"1\":{\"253\":1}}],[\"初识的失败等待时长为1秒\",{\"1\":{\"140\":1}}],[\"带来不必要的压力\",{\"1\":{\"140\":1}}],[\"极端情况就是消费者一直无法执行成功\",{\"1\":{\"140\":1}}],[\"到再循环进来这个阶段新增的任务会不会及时执行呢\",{\"1\":{\"496\":1}}],[\"到\",{\"1\":{\"442\":1,\"450\":2,\"481\":1,\"498\":1}}],[\"到关闭状态从而拒绝新的任务的加入\",{\"1\":{\"416\":1}}],[\"到达服务器端\",{\"1\":{\"411\":1}}],[\"到队列\",{\"1\":{\"140\":1}}],[\"到消费者处理消息\",{\"1\":{\"129\":1}}],[\"失败返回\",{\"1\":{\"469\":1}}],[\"失败处理策略\",{\"0\":{\"141\":1}}],[\"失败的等待时长倍数\",{\"1\":{\"140\":1}}],[\"失败重试机制\",{\"0\":{\"140\":1}}],[\"失败后将消息投递到一个指定的\",{\"1\":{\"141\":1}}],[\"失败后下次的等待时长倍数\",{\"1\":{\"130\":1}}],[\"失败后的初始等待时间\",{\"1\":{\"130\":1}}],[\"未关注事件\",{\"1\":{\"495\":1}}],[\"未必时时可写\",{\"1\":{\"370\":1}}],[\"未确定状态\",{\"1\":{\"139\":2}}],[\"未找到合适的queue\",{\"1\":{\"129\":1,\"131\":1}}],[\"故意的\",{\"1\":{\"139\":2}}],[\"根本不会执行\",{\"1\":{\"144\":1}}],[\"根本不需要的描述\",{\"1\":{\"43\":1}}],[\"根据消息类型字节\",{\"1\":{\"478\":1}}],[\"根据用户名获取\",{\"1\":{\"469\":1}}],[\"根据上面的要素\",{\"1\":{\"466\":1}}],[\"根据虚引用释放堆外内存\",{\"1\":{\"397\":1}}],[\"根据操作系统及浏览器版本的不同\",{\"1\":{\"307\":1}}],[\"根据需要设置宽度和高度\",{\"1\":{\"303\":1}}],[\"根据服务名称拉取所有的服务\",{\"1\":{\"169\":1}}],[\"根据id删除数据\",{\"1\":{\"142\":1}}],[\"根据异常判断返回不同结果\",{\"1\":{\"139\":1}}],[\"存入数据\",{\"1\":{\"357\":1}}],[\"存入作用域中\",{\"0\":{\"279\":1}}],[\"存在则为重复消息放弃处理\",{\"1\":{\"143\":1}}],[\"存在业务入侵\",{\"1\":{\"139\":1}}],[\"存储\",{\"1\":{\"65\":1,\"495\":1}}],[\"回到了熟悉的代码\",{\"1\":{\"498\":1}}],[\"回调\",{\"1\":{\"495\":2}}],[\"回复\",{\"1\":{\"481\":1}}],[\"回来了\",{\"1\":{\"455\":1}}],[\"回答是不太好\",{\"1\":{\"445\":1}}],[\"回收内存的源码实现\",{\"1\":{\"441\":1}}],[\"回收内存即可\",{\"1\":{\"441\":1}}],[\"回滚事务\",{\"1\":{\"219\":1}}],[\"回执有三种可选值\",{\"1\":{\"139\":1}}],[\"回退版本\",{\"1\":{\"49\":1}}],[\"告知rabbitmq自己消息处理状态\",{\"1\":{\"139\":1}}],[\"告知投递失败\",{\"1\":{\"131\":1}}],[\"告知投递成功\",{\"1\":{\"131\":2}}],[\"应当是泛指教师应当得到的报酬\",{\"1\":{\"462\":1}}],[\"应用程序线程阻塞\",{\"1\":{\"475\":1}}],[\"应用程序中的属性源提供加密支持\",{\"1\":{\"293\":1}}],[\"应用层\",{\"1\":{\"455\":2}}],[\"应用场景\",{\"1\":{\"29\":1,\"106\":1}}],[\"应该向rabbitmq发送一个回执\",{\"1\":{\"139\":1}}],[\"点击这里访问itext官网\",{\"1\":{\"322\":1}}],[\"点击policies\",{\"1\":{\"137\":1}}],[\"点击父模块的package即可打包\",{\"1\":{\"85\":1}}],[\"策略的作用对象\",{\"1\":{\"137\":1}}],[\"策略名称\",{\"1\":{\"137\":1}}],[\"更节约内存\",{\"1\":{\"447\":1}}],[\"更简洁\",{\"1\":{\"407\":1}}],[\"更少的用户态与内核态的切换\",{\"1\":{\"397\":1}}],[\"更进一步\",{\"0\":{\"387\":1}}],[\"更为底层\",{\"1\":{\"331\":1,\"392\":1}}],[\"更新\",{\"1\":{\"234\":4}}],[\"更新行为\",{\"1\":{\"234\":1}}],[\"更新所有\",{\"1\":{\"223\":1}}],[\"更新已有队列为lazy模式\",{\"0\":{\"137\":1}}],[\"更安全\",{\"0\":{\"5\":1}}],[\"惰性队列的特征如下\",{\"1\":{\"134\":1}}],[\"临时消息投递到了mq\",{\"1\":{\"131\":1}}],[\"临时队列\",{\"1\":{\"114\":1,\"118\":2,\"120\":1}}],[\"利用多线程优化\",{\"0\":{\"388\":1}}],[\"利用重试机制可以有效提高消息发送的成功率\",{\"1\":{\"130\":1}}],[\"利用镜像ubuntu\",{\"1\":{\"65\":1}}],[\"总是运行完所有非\",{\"1\":{\"496\":1}}],[\"总结如下\",{\"1\":{\"131\":1}}],[\"总共重试了3次\",{\"1\":{\"130\":1}}],[\"总大小\",{\"1\":{\"27\":1}}],[\"综上\",{\"1\":{\"129\":1,\"145\":1}}],[\"才可以实现高效的双向通信\",{\"1\":{\"450\":1}}],[\"才可以省去sudo权限\",{\"1\":{\"62\":1}}],[\"才能执行\",{\"1\":{\"496\":1}}],[\"才能得到结果\",{\"1\":{\"425\":1}}],[\"才能发挥异步的优势\",{\"1\":{\"424\":1}}],[\"才能看下一个病人\",{\"1\":{\"424\":1}}],[\"才修复\",{\"1\":{\"389\":1}}],[\"才需要关注写事件\",{\"1\":{\"385\":1}}],[\"才将\",{\"1\":{\"385\":1}}],[\"才会返回\",{\"1\":{\"469\":1}}],[\"才会关心\",{\"1\":{\"373\":1}}],[\"才会收到消息\",{\"1\":{\"116\":1}}],[\"路由过滤器\",{\"0\":{\"179\":1}}],[\"路由断言\",{\"0\":{\"178\":1}}],[\"路由属性\",{\"0\":{\"177\":1}}],[\"路由key\",{\"1\":{\"116\":1}}],[\"路由模型\",{\"0\":{\"115\":1}}],[\"此后\",{\"1\":{\"462\":1}}],[\"此时rabbitmq会将内存消息刷到磁盘上\",{\"1\":{\"134\":1}}],[\"此时就用到了\",{\"1\":{\"116\":1}}],[\"此命令的路径即mysql的安装路径\",{\"1\":{\"68\":1}}],[\"直到超时\",{\"1\":{\"496\":1}}],[\"直到返回\",{\"1\":{\"441\":1}}],[\"直到消息处理成功为止\",{\"1\":{\"140\":1}}],[\"直到触发内存预警上限\",{\"1\":{\"134\":1}}],[\"直连路由\",{\"1\":{\"116\":1}}],[\"直连\",{\"0\":{\"116\":1}}],[\"直接内存对\",{\"1\":{\"435\":1}}],[\"直接内存创建和销毁的代价昂贵\",{\"1\":{\"435\":1}}],[\"直接内存\",{\"0\":{\"435\":1},\"1\":{\"486\":1}}],[\"直接调用\",{\"1\":{\"418\":1}}],[\"直接使用json传递参数\",{\"0\":{\"205\":1}}],[\"直接reject\",{\"1\":{\"141\":1}}],[\"直接删除\",{\"1\":{\"50\":1}}],[\"直接在方法参数中注入即可\",{\"1\":{\"20\":1}}],[\"有任务\",{\"1\":{\"496\":1}}],[\"有限时阻塞\",{\"1\":{\"497\":1}}],[\"有限制\",{\"1\":{\"467\":1}}],[\"有限支持\",{\"1\":{\"290\":1}}],[\"有协议为证\",{\"1\":{\"462\":1}}],[\"有两个\",{\"1\":{\"445\":1}}],[\"有两种办法\",{\"1\":{\"344\":1}}],[\"有时候不清楚\",{\"1\":{\"441\":1}}],[\"有了池化\",{\"1\":{\"436\":1}}],[\"有些同学看到这里会有疑问\",{\"1\":{\"424\":1}}],[\"有助于\",{\"1\":{\"397\":1}}],[\"有事件\",{\"1\":{\"382\":1}}],[\"有因为发送能力弱\",{\"1\":{\"373\":1}}],[\"有因为接收能力弱\",{\"1\":{\"373\":1}}],[\"有可写事件才去写入\",{\"1\":{\"370\":1}}],[\"有可读事件才去读取\",{\"1\":{\"370\":1}}],[\"有可连接事件时才去连接\",{\"1\":{\"370\":1}}],[\"有新的问题\",{\"1\":{\"368\":1}}],[\"有以下重要属性\",{\"1\":{\"340\":1}}],[\"有一个文本文件\",{\"1\":{\"349\":1}}],[\"有一普通文本文件\",{\"1\":{\"338\":1}}],[\"有一点类似于\",{\"1\":{\"331\":1}}],[\"有\",{\"1\":{\"331\":2,\"497\":2}}],[\"有头\",{\"1\":{\"296\":1}}],[\"有三种模式\",{\"1\":{\"139\":1}}],[\"有没有\",{\"1\":{\"496\":1}}],[\"有没有问题\",{\"1\":{\"381\":2}}],[\"有没有其它兜底方案\",{\"1\":{\"145\":1}}],[\"有没有其它的兜底方案\",{\"1\":{\"128\":1}}],[\"有没有什么办法让我们的aproperties也能自动提示呢\",{\"1\":{\"19\":1}}],[\"有多个消费者\",{\"1\":{\"112\":1}}],[\"广播\",{\"0\":{\"112\":1,\"125\":1}}],[\"手动抛出异常\",{\"1\":{\"219\":1}}],[\"手动模式\",{\"1\":{\"139\":1}}],[\"手动确认的表示\",{\"1\":{\"111\":1}}],[\"手机\",{\"1\":{\"103\":2}}],[\"目前的代码仅支持\",{\"1\":{\"478\":1}}],[\"目前要求能者多劳\",{\"1\":{\"110\":1}}],[\"目标\",{\"0\":{\"409\":1}}],[\"目录下\",{\"1\":{\"307\":1}}],[\"目录必须为空\",{\"1\":{\"8\":1}}],[\"目录列表\",{\"0\":{\"7\":1}}],[\"目录\",{\"1\":{\"5\":1}}],[\"叫做循环\",{\"1\":{\"110\":1}}],[\"两类\",{\"1\":{\"413\":1}}],[\"两个\",{\"0\":{\"362\":1}}],[\"两个表的所有组合\",{\"1\":{\"235\":1}}],[\"两个消费者\",{\"1\":{\"110\":1}}],[\"两者都应用广泛\",{\"1\":{\"29\":1}}],[\"|j\",{\"1\":{\"460\":1}}],[\"|jjjjjjjjj\",{\"1\":{\"460\":1}}],[\"|jjjjjjjjjjj\",{\"1\":{\"459\":2}}],[\"|jjjj\",{\"1\":{\"458\":1}}],[\"|eeee\",{\"1\":{\"460\":1}}],[\"|eeeeeeeeeeeeeee\",{\"1\":{\"460\":1}}],[\"|eeeeeeeeee\",{\"1\":{\"459\":1}}],[\"|eeeeeee\",{\"1\":{\"459\":1}}],[\"|gg\",{\"1\":{\"459\":1,\"460\":1}}],[\"|ggggggg\",{\"1\":{\"459\":1}}],[\"|ggg\",{\"1\":{\"458\":2}}],[\"|hh\",{\"1\":{\"460\":1}}],[\"|hhhh\",{\"1\":{\"459\":1}}],[\"|h\",{\"1\":{\"458\":1}}],[\"|hello\",{\"1\":{\"378\":1,\"390\":1}}],[\"|dddddddd\",{\"1\":{\"460\":1}}],[\"|dddd\",{\"1\":{\"460\":1}}],[\"|dd\",{\"1\":{\"459\":1}}],[\"|d\",{\"1\":{\"458\":1}}],[\"|bbbbbbbbb\",{\"1\":{\"460\":1}}],[\"|bbbb\",{\"1\":{\"460\":1}}],[\"|bbb\",{\"1\":{\"459\":1}}],[\"|b\",{\"1\":{\"458\":1}}],[\"|iiiiiiiiiiiiii\",{\"1\":{\"460\":1}}],[\"|iiiiiii\",{\"1\":{\"459\":1,\"460\":1}}],[\"|iiiii\",{\"1\":{\"458\":2}}],[\"|cccccc\",{\"1\":{\"460\":1}}],[\"|ccc\",{\"1\":{\"459\":1}}],[\"|cc\",{\"1\":{\"458\":2}}],[\"|00000090|\",{\"1\":{\"453\":1}}],[\"|00000080|\",{\"1\":{\"453\":1,\"454\":1}}],[\"|00000070|\",{\"1\":{\"453\":1,\"454\":1}}],[\"|00000060|\",{\"1\":{\"453\":1,\"454\":1,\"460\":1}}],[\"|00000050|\",{\"1\":{\"453\":1,\"454\":1,\"460\":1}}],[\"|00000040|\",{\"1\":{\"453\":1,\"454\":1,\"458\":1,\"460\":1}}],[\"|00000030|\",{\"1\":{\"453\":1,\"454\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"|00000020|\",{\"1\":{\"453\":1,\"454\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"|00000010|\",{\"1\":{\"453\":1,\"454\":2,\"458\":1,\"459\":1,\"460\":1}}],[\"|00000000|\",{\"1\":{\"347\":2,\"349\":3,\"350\":2,\"378\":2,\"390\":1,\"399\":1,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"453\":1,\"454\":2,\"458\":11,\"459\":11,\"460\":11}}],[\"|wangwu\",{\"1\":{\"417\":2}}],[\"|world\",{\"1\":{\"378\":1}}],[\"|lisi\",{\"1\":{\"417\":2}}],[\"|zhangsan\",{\"1\":{\"417\":2}}],[\"|aaaaaaaaa\",{\"1\":{\"460\":1}}],[\"|aaaa\",{\"1\":{\"458\":2}}],[\"|a\",{\"1\":{\"399\":1,\"459\":2}}],[\"|ff\",{\"1\":{\"459\":1,\"460\":1}}],[\"|fffffffffffff\",{\"1\":{\"460\":1}}],[\"|ffff\",{\"1\":{\"458\":1}}],[\"|five\",{\"1\":{\"350\":1}}],[\"|four\",{\"1\":{\"350\":1}}],[\"|three\",{\"1\":{\"349\":1}}],[\"|two\",{\"1\":{\"349\":1}}],[\"|one\",{\"1\":{\"349\":1}}],[\"||\",{\"1\":{\"144\":1,\"227\":1,\"341\":1,\"478\":1,\"495\":2,\"497\":5,\"498\":1,\"499\":1}}],[\"|\",{\"0\":{\"296\":3},\"1\":{\"109\":1,\"119\":1,\"120\":2,\"228\":1,\"245\":36,\"288\":2,\"305\":2,\"341\":12,\"347\":8,\"349\":9,\"350\":6,\"363\":4,\"378\":6,\"385\":1,\"390\":3,\"399\":3,\"417\":18,\"438\":8,\"439\":4,\"440\":12,\"442\":24,\"445\":16,\"446\":8,\"453\":22,\"454\":26,\"458\":39,\"459\":34,\"460\":34,\"478\":1,\"488\":3,\"495\":1,\"497\":1,\"498\":1}}],[\"静态路由\",{\"0\":{\"126\":1}}],[\"静态代码块\",{\"1\":{\"109\":1}}],[\"静态资源访问\",{\"0\":{\"26\":1}}],[\"消费同一个队列\",{\"1\":{\"110\":1}}],[\"消费时的回调接口\",{\"1\":{\"108\":1}}],[\"消费者失败重试等策略\",{\"1\":{\"145\":1}}],[\"消费者确认\",{\"1\":{\"145\":1}}],[\"消费者确认机制\",{\"0\":{\"139\":1}}],[\"消费者在失败后消息没有重新回到mq无限重新投递\",{\"1\":{\"140\":1}}],[\"消费者接收到消息\",{\"1\":{\"139\":2}}],[\"消费者接收到消息后处理自己的业务\",{\"1\":{\"143\":1}}],[\"消费者接收到消息后\",{\"1\":{\"138\":1}}],[\"消费者接收到消息后突然宕机\",{\"1\":{\"138\":1}}],[\"消费者的可靠性\",{\"0\":{\"138\":1}}],[\"消费者要消费消息时才会从磁盘中读取并加载到内存\",{\"1\":{\"134\":1}}],[\"消费者处理业务发生阻塞\",{\"1\":{\"134\":1}}],[\"消费者处理消息时\",{\"1\":{\"129\":1}}],[\"消费者宕机或出现网络故障\",{\"1\":{\"134\":1}}],[\"消费者\",{\"0\":{\"114\":1,\"118\":1,\"148\":1},\"1\":{\"108\":1}}],[\"消费消息\",{\"0\":{\"108\":1},\"1\":{\"108\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"消息对象\",{\"1\":{\"492\":1}}],[\"消息类型字节\",{\"1\":{\"478\":2}}],[\"消息是完整的\",{\"1\":{\"467\":1,\"478\":1}}],[\"消息正文\",{\"1\":{\"465\":1}}],[\"消息正文到底采用哪种序列化反序列化方式\",{\"1\":{\"465\":1}}],[\"消息无边界\",{\"1\":{\"455\":1}}],[\"消息可靠性的问题已经解决了\",{\"1\":{\"145\":1}}],[\"消息可能没有被消费者正确处理\",{\"1\":{\"106\":1}}],[\"消息id的方案需要改造原有的数据库\",{\"1\":{\"144\":1}}],[\"消息重新入队\",{\"1\":{\"141\":1}}],[\"消息会经过通道\",{\"1\":{\"411\":1}}],[\"消息会被丢弃\",{\"1\":{\"140\":1,\"141\":1}}],[\"消息会再次requeue到队列\",{\"1\":{\"140\":1}}],[\"消息会不断requeue\",{\"1\":{\"140\":1}}],[\"消息会立刻从mq删除\",{\"1\":{\"139\":1}}],[\"消息依然被rabbitmq删除了\",{\"1\":{\"139\":1}}],[\"消息处理过程中抛出异常\",{\"1\":{\"140\":1}}],[\"消息处理完成\",{\"1\":{\"139\":2}}],[\"消息处理成功时返回ack\",{\"1\":{\"139\":1}}],[\"消息处理失败后\",{\"1\":{\"139\":1}}],[\"消息处理失败并拒绝该消息\",{\"1\":{\"139\":1}}],[\"消息处理失败\",{\"1\":{\"139\":1}}],[\"消息也会丢失\",{\"1\":{\"138\":1}}],[\"消息投递的过程中出现了网络故障\",{\"1\":{\"138\":1}}],[\"消息发送量激增\",{\"1\":{\"134\":1}}],[\"消息发送的超时重试机制配置成功了\",{\"1\":{\"130\":1}}],[\"消息接收后处理过程中抛出异常\",{\"1\":{\"129\":1}}],[\"消息接收后尚未处理突然宕机\",{\"1\":{\"129\":1}}],[\"消息到达mq以后\",{\"1\":{\"132\":1}}],[\"消息到达mq\",{\"1\":{\"129\":1}}],[\"消息到达mq后\",{\"1\":{\"129\":1}}],[\"消息从生产者到消费者的每一步都可能导致消息丢失\",{\"1\":{\"129\":1}}],[\"消息从发送者发送消息\",{\"1\":{\"129\":1}}],[\"消息应该至少被消费者处理1次\",{\"1\":{\"128\":1}}],[\"消息\",{\"1\":{\"116\":1,\"478\":2}}],[\"消息被拿走后\",{\"1\":{\"106\":1}}],[\"消息队列\",{\"1\":{\"106\":1}}],[\"消息的消费者\",{\"1\":{\"106\":1}}],[\"消息产生者将消息放入队列\",{\"1\":{\"106\":1}}],[\"发完即关\",{\"1\":{\"457\":1}}],[\"发一个包建立一次连接\",{\"1\":{\"456\":1}}],[\"发出\",{\"1\":{\"411\":1}}],[\"发生成功消息\",{\"1\":{\"472\":1}}],[\"发生时\",{\"1\":{\"375\":1}}],[\"发生了事件\",{\"1\":{\"374\":1}}],[\"发生了读写就绪事件\",{\"1\":{\"337\":1}}],[\"发现消息被删除了\",{\"1\":{\"140\":1}}],[\"发布消息\",{\"1\":{\"107\":1}}],[\"发送一个心跳包\",{\"1\":{\"475\":1}}],[\"发送拉群消息\",{\"1\":{\"472\":1}}],[\"发送消息\",{\"1\":{\"470\":1}}],[\"发送消息时丢失\",{\"1\":{\"129\":1}}],[\"发送信息方式如下\",{\"1\":{\"462\":1}}],[\"发送内容随机的数据包\",{\"1\":{\"458\":1}}],[\"发送方的报文大小是\",{\"1\":{\"455\":1}}],[\"发送\",{\"1\":{\"455\":2,\"481\":1}}],[\"发送数据不会管\",{\"1\":{\"390\":1}}],[\"发送数据时\",{\"1\":{\"386\":1}}],[\"发送走的信息\",{\"1\":{\"283\":1}}],[\"发送过来的信息\",{\"1\":{\"283\":1}}],[\"发送ack或reject\",{\"1\":{\"139\":1}}],[\"发送到mq的消息并不是逐条持久化到数据库的\",{\"1\":{\"133\":1}}],[\"发送公钥\",{\"1\":{\"71\":1}}],[\"发送带附件的邮件\",{\"1\":{\"34\":1}}],[\"发送者的可靠性\",{\"0\":{\"129\":1}}],[\"发送者\",{\"1\":{\"34\":1}}],[\"发送邮件\",{\"0\":{\"34\":1}}],[\"队列满了\",{\"1\":{\"481\":1}}],[\"队列\",{\"1\":{\"481\":1}}],[\"队列里可以堆放多个\",{\"1\":{\"413\":1}}],[\"队列与交换机绑定\",{\"1\":{\"116\":1}}],[\"队列中的消费者都可以拿到消息\",{\"1\":{\"112\":1}}],[\"队列是否持久化\",{\"1\":{\"107\":1,\"108\":1}}],[\"队列名称\",{\"1\":{\"107\":1,\"108\":1}}],[\"通行\",{\"1\":{\"284\":1}}],[\"通知类型\",{\"0\":{\"264\":1}}],[\"通配符即可\",{\"1\":{\"263\":1}}],[\"通常是每几秒或几分钟\",{\"1\":{\"158\":1}}],[\"通常我们采取的措施就是利用定时任务定期查询\",{\"1\":{\"145\":1}}],[\"通道绑定交换机\",{\"1\":{\"114\":1,\"118\":2,\"120\":1}}],[\"通道绑定对应的消息队列\",{\"1\":{\"107\":1,\"108\":1}}],[\"通道名称\",{\"1\":{\"107\":1}}],[\"通过反射将\",{\"1\":{\"497\":1}}],[\"通过专门线程访问引用队列\",{\"1\":{\"397\":1}}],[\"通过它可以知道事件和哪个channel的事件\",{\"1\":{\"382\":1}}],[\"通过网络把数据发送出去\",{\"1\":{\"369\":1}}],[\"通过\",{\"1\":{\"355\":3,\"397\":1}}],[\"通过map查询\",{\"1\":{\"213\":1}}],[\"通过多个id进行查询\",{\"1\":{\"213\":1}}],[\"通过id查询信息\",{\"1\":{\"213\":1}}],[\"通过list\",{\"1\":{\"206\":1}}],[\"通过json传递多个参数\",{\"1\":{\"205\":1}}],[\"通过java\",{\"1\":{\"204\":1}}],[\"通过下面的配置可以修改springamqp的ack处理方式\",{\"1\":{\"139\":1}}],[\"通过publisher\",{\"1\":{\"131\":1}}],[\"通过elasticsearchresttemplate\",{\"1\":{\"103\":1}}],[\"通过get方法停止任务\",{\"1\":{\"36\":1}}],[\"生命周期\",{\"1\":{\"255\":1,\"260\":2}}],[\"生产者的所有请求都会被阻塞\",{\"1\":{\"134\":1}}],[\"生产者确认机制\",{\"0\":{\"131\":1}}],[\"生产者重试机制\",{\"0\":{\"130\":1}}],[\"生产者发送消息到达mq的exchange后\",{\"1\":{\"129\":1,\"131\":1}}],[\"生产者发送消息到达mq后未找到exchange\",{\"1\":{\"129\":1,\"131\":1}}],[\"生产者发送消息时连接mq失败\",{\"1\":{\"129\":1}}],[\"生产者无权决定\",{\"1\":{\"112\":1}}],[\"生产者只能向交换机发送消息\",{\"1\":{\"112\":1}}],[\"生产者\",{\"0\":{\"113\":1,\"117\":1,\"147\":1},\"1\":{\"107\":1}}],[\"生产消息\",{\"0\":{\"107\":1}}],[\"生成pdf文件\",{\"1\":{\"319\":1}}],[\"生成pdf\",{\"1\":{\"318\":1}}],[\"生成截图文件路径和名称\",{\"1\":{\"303\":2}}],[\"生成页面\",{\"1\":{\"297\":1}}],[\"生成\",{\"1\":{\"47\":1}}],[\"聊天组会话管理接口\",{\"1\":{\"469\":1}}],[\"聊天室业务\",{\"0\":{\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1}}],[\"聊天室业务介绍\",{\"0\":{\"469\":1}}],[\"聊天室案例\",{\"0\":{\"468\":1}}],[\"聊天\",{\"1\":{\"106\":1}}],[\"造成消息的丢失\",{\"1\":{\"106\":1}}],[\"隐式内连接\",{\"1\":{\"235\":1}}],[\"隐患\",{\"1\":{\"106\":1}}],[\"隐藏后端服务器的细节\",{\"1\":{\"88\":1}}],[\"隐藏行号\",{\"1\":{\"70\":1}}],[\"哔哩哔哩\",{\"1\":{\"104\":1,\"161\":1,\"211\":1,\"220\":1,\"235\":1,\"253\":1,\"266\":1,\"272\":1,\"274\":1}}],[\"学习地址\",{\"1\":{\"104\":1}}],[\"博客园\",{\"1\":{\"104\":1,\"317\":1}}],[\"逊老头\",{\"1\":{\"104\":1}}],[\"执行后就是\",{\"1\":{\"498\":1}}],[\"执行前\",{\"1\":{\"498\":1}}],[\"执行端口绑定\",{\"1\":{\"495\":1}}],[\"执行初始化器\",{\"1\":{\"498\":1}}],[\"执行初始化\",{\"1\":{\"495\":1}}],[\"执行初始化和注册\",{\"1\":{\"495\":1}}],[\"执行到\",{\"1\":{\"422\":4}}],[\"执行中如何换人\",{\"0\":{\"418\":1}}],[\"执行slaveof\",{\"1\":{\"162\":1}}],[\"执行\",{\"1\":{\"159\":1,\"410\":1,\"411\":1,\"495\":2,\"498\":1}}],[\"执行一次或多次对业务状态的影响是一致的\",{\"1\":{\"142\":1}}],[\"执行查询\",{\"1\":{\"103\":1}}],[\"执行完此操作后\",{\"1\":{\"62\":1}}],[\"电子产品\",{\"1\":{\"103\":1}}],[\"聚合函数\",{\"0\":{\"228\":1}}],[\"聚合查询\",{\"1\":{\"225\":1}}],[\"聚合\",{\"1\":{\"99\":1}}],[\"汤姆\",{\"1\":{\"99\":1}}],[\"的逻辑是如果预期读取字节与实际读取字节相等\",{\"1\":{\"499\":1}}],[\"的逻辑如下\",{\"1\":{\"496\":1}}],[\"的实现\",{\"1\":{\"499\":1}}],[\"的实现是一个\",{\"1\":{\"432\":1}}],[\"的长度\",{\"1\":{\"456\":1}}],[\"的值\",{\"1\":{\"455\":1}}],[\"的值在三次握手时通知对方自己\",{\"1\":{\"455\":1}}],[\"的值为\",{\"1\":{\"455\":1}}],[\"的双向信号传输\",{\"1\":{\"450\":1}}],[\"的限制\",{\"1\":{\"443\":1}}],[\"的内存\",{\"1\":{\"442\":1}}],[\"的内容发生了更改\",{\"1\":{\"442\":1}}],[\"的内容\",{\"1\":{\"345\":1}}],[\"的体现之一\",{\"1\":{\"442\":1,\"443\":1,\"445\":1}}],[\"的存在\",{\"1\":{\"441\":1}}],[\"的整数倍\",{\"1\":{\"439\":1}}],[\"的调用也会\",{\"1\":{\"432\":1}}],[\"的逆序执行的\",{\"1\":{\"432\":1}}],[\"的顺序执行的\",{\"1\":{\"432\":1}}],[\"的子类\",{\"1\":{\"432\":2}}],[\"的失败结果而不会抛出\",{\"1\":{\"431\":1}}],[\"的功能\",{\"1\":{\"425\":1}}],[\"的关闭\",{\"1\":{\"421\":1}}],[\"的主要作用\",{\"1\":{\"421\":1}}],[\"的线程来调用\",{\"1\":{\"418\":1}}],[\"的线程安全\",{\"0\":{\"348\":1}}],[\"的能力\",{\"1\":{\"415\":1}}],[\"的规划\",{\"1\":{\"413\":1}}],[\"的待处理任务\",{\"1\":{\"413\":1}}],[\"的加工\",{\"1\":{\"413\":1}}],[\"的客户端实现\",{\"1\":{\"411\":1}}],[\"的业务处理器\",{\"1\":{\"410\":1}}],[\"的处理器\",{\"1\":{\"410\":1,\"411\":1}}],[\"的服务器端实现\",{\"1\":{\"410\":1}}],[\"的开发迭代更迅速\",{\"1\":{\"407\":1}}],[\"的优势\",{\"0\":{\"407\":1}}],[\"的地位\",{\"0\":{\"406\":1}}],[\"的重要贡献者\",{\"1\":{\"405\":1}}],[\"的作者\",{\"0\":{\"405\":1}}],[\"的作用\",{\"0\":{\"380\":1}}],[\"的作用就是配合一个线程来管理多个\",{\"1\":{\"337\":1}}],[\"的读能力\",{\"1\":{\"396\":1}}],[\"的力量被白白浪费\",{\"1\":{\"388\":1}}],[\"的注册\",{\"1\":{\"385\":1}}],[\"的话\",{\"1\":{\"383\":1}}],[\"的方法的返回值是\",{\"1\":{\"382\":1}}],[\"的方式进行组合\",{\"1\":{\"99\":1}}],[\"的联系\",{\"1\":{\"382\":1}}],[\"的事件注册\",{\"1\":{\"495\":1,\"498\":1}}],[\"的事件循环是否与当前的事件循环是同一个线程\",{\"1\":{\"418\":1}}],[\"的事件\",{\"1\":{\"371\":1}}],[\"的可写事件\",{\"1\":{\"370\":1,\"385\":1}}],[\"的可靠\",{\"1\":{\"145\":1}}],[\"的非阻塞模式\",{\"1\":{\"370\":1}}],[\"的数目\",{\"1\":{\"364\":1}}],[\"的数据\",{\"1\":{\"475\":1}}],[\"的数据达到\",{\"1\":{\"455\":1}}],[\"的数据填充至\",{\"1\":{\"350\":1}}],[\"的数据写入\",{\"1\":{\"331\":1}}],[\"的位置\",{\"1\":{\"346\":1}}],[\"的磁盘空间\",{\"1\":{\"307\":1}}],[\"的情况\",{\"1\":{\"307\":1}}],[\"的不同\",{\"1\":{\"302\":1}}],[\"的headless\",{\"1\":{\"302\":1}}],[\"的\",{\"1\":{\"301\":1,\"337\":1,\"344\":1,\"345\":1,\"358\":2,\"369\":1,\"382\":1,\"383\":1,\"396\":1,\"413\":1,\"415\":1,\"425\":2,\"438\":2,\"442\":1,\"455\":1,\"496\":1}}],[\"的语句中是无法区分是\",{\"1\":{\"237\":1}}],[\"的人\",{\"1\":{\"235\":1}}],[\"的基础上只做增强不做改变\",{\"1\":{\"211\":1}}],[\"的增强工具\",{\"1\":{\"211\":1}}],[\"的依赖\",{\"1\":{\"172\":1}}],[\"的多节点部署\",{\"1\":{\"163\":1}}],[\"的另一种数据持久化方式\",{\"1\":{\"160\":1}}],[\"的缩写\",{\"1\":{\"160\":1}}],[\"的默认数据持久化方式\",{\"1\":{\"158\":1}}],[\"的发送方在向exchang发送消息时\",{\"1\":{\"116\":1}}],[\"的一个\",{\"1\":{\"29\":1}}],[\"的一种新协议\",{\"1\":{\"29\":1}}],[\"与前面的区别是消息存储不连续解析复杂\",{\"1\":{\"383\":1}}],[\"与不同版本的\",{\"1\":{\"302\":1}}],[\"与消息一起投递给消费者\",{\"1\":{\"143\":1}}],[\"与\",{\"1\":{\"99\":1,\"246\":1,\"302\":1,\"425\":1,\"429\":1}}],[\"多次操作会带来性能的损耗\",{\"1\":{\"445\":1}}],[\"多次重试\",{\"1\":{\"130\":1}}],[\"多核\",{\"1\":{\"424\":1}}],[\"多线程和异步所提升的效率并不是所认为的\",{\"1\":{\"424\":1}}],[\"多线程就效率高\",{\"1\":{\"424\":1}}],[\"多线程版缺点\",{\"0\":{\"334\":1}}],[\"多线程版设计\",{\"0\":{\"333\":1}}],[\"多\",{\"1\":{\"407\":1}}],[\"多出来的数据会被默默抛弃\",{\"1\":{\"390\":1}}],[\"多关注\",{\"1\":{\"385\":1}}],[\"多路复用仅针对网络\",{\"1\":{\"370\":1}}],[\"多路复用\",{\"0\":{\"370\":1},\"1\":{\"393\":2}}],[\"多边形等\",{\"1\":{\"236\":1}}],[\"多表查询\",{\"0\":{\"235\":1},\"1\":{\"235\":1}}],[\"多字段排序\",{\"1\":{\"230\":1}}],[\"多选一\",{\"1\":{\"227\":1}}],[\"多个参数查询\",{\"1\":{\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"多个单词之间以\",{\"1\":{\"119\":1}}],[\"多添加查询\",{\"1\":{\"99\":1}}],[\"多条件查询\",{\"1\":{\"99\":1}}],[\"多模块打包\",{\"0\":{\"84\":1}}],[\"匹配一个垂直制表符\",{\"1\":{\"313\":1}}],[\"匹配一个制表符\",{\"1\":{\"313\":1}}],[\"匹配一个回车符\",{\"1\":{\"313\":1}}],[\"匹配一个换行符\",{\"1\":{\"313\":1}}],[\"匹配一个换页符\",{\"1\":{\"313\":1}}],[\"匹配一个或多个单词\",{\"1\":{\"119\":1}}],[\"匹配非数字\",{\"1\":{\"313\":1}}],[\"匹配数字\",{\"1\":{\"313\":1}}],[\"匹配所有非空格字符\",{\"1\":{\"313\":1}}],[\"匹配所有非字母数字\",{\"1\":{\"313\":1}}],[\"匹配所有空格字符\",{\"1\":{\"313\":1}}],[\"匹配所有字母数字\",{\"1\":{\"313\":1}}],[\"匹配不多不少恰好一个单词\",{\"1\":{\"119\":1}}],[\"匹配\",{\"1\":{\"99\":4,\"313\":1}}],[\"匹配规则和处理方式\",{\"1\":{\"90\":1}}],[\"健康状态\",{\"1\":{\"96\":1}}],[\"行高\",{\"1\":{\"323\":1}}],[\"行终止符\",{\"1\":{\"313\":1}}],[\"行\",{\"1\":{\"94\":1,\"323\":3}}],[\"索引从0开始\",{\"1\":{\"328\":1}}],[\"索引\",{\"0\":{\"97\":1,\"101\":1,\"236\":1},\"1\":{\"94\":1}}],[\"企业搜索和网站搜索\",{\"1\":{\"94\":1}}],[\"非池化\",{\"0\":{\"436\":1}}],[\"非要用这么复杂的异步方式\",{\"1\":{\"424\":1}}],[\"非阻塞模式\",{\"1\":{\"369\":2}}],[\"非阻塞模式下\",{\"1\":{\"369\":1,\"385\":1}}],[\"非阻塞\",{\"0\":{\"367\":1,\"369\":1},\"1\":{\"329\":1,\"369\":2,\"392\":1,\"393\":1,\"425\":2}}],[\"非空约束\",{\"1\":{\"233\":1}}],[\"非常不经济\",{\"1\":{\"455\":1}}],[\"非常不安全\",{\"1\":{\"139\":1}}],[\"非常方便\",{\"1\":{\"77\":1}}],[\"非独占\",{\"1\":{\"123\":1}}],[\"非\",{\"1\":{\"99\":1,\"227\":1,\"417\":1,\"436\":1,\"496\":1}}],[\"非结构化\",{\"1\":{\"94\":1}}],[\"结果是一样的\",{\"1\":{\"445\":1}}],[\"结果是\",{\"1\":{\"438\":2,\"439\":1}}],[\"结果又是节点6\",{\"1\":{\"432\":1}}],[\"结果\",{\"1\":{\"349\":1,\"440\":1,\"445\":1,\"492\":1,\"496\":1}}],[\"结果过滤\",{\"1\":{\"94\":1}}],[\"结构\",{\"0\":{\"340\":1}}],[\"结构化\",{\"1\":{\"94\":1}}],[\"结束\",{\"1\":{\"248\":1}}],[\"结合之前explain进行全面分析\",{\"1\":{\"244\":1}}],[\"结论\",{\"1\":{\"140\":1}}],[\"地理\",{\"1\":{\"94\":1}}],[\"数组\",{\"1\":{\"445\":1}}],[\"数值函数\",{\"1\":{\"232\":1}}],[\"数字之间的间隔必须大于等于30分钟\",{\"1\":{\"290\":1}}],[\"数字\",{\"1\":{\"94\":1}}],[\"数据包的大小不好把握\",{\"1\":{\"458\":1}}],[\"数据包大小一样\",{\"1\":{\"382\":1}}],[\"数据经过网络传输\",{\"1\":{\"411\":1}}],[\"数据拷贝了\",{\"1\":{\"397\":2}}],[\"数据拷贝了共\",{\"1\":{\"396\":1}}],[\"数据从内核缓冲区传输到\",{\"1\":{\"397\":1}}],[\"数据写完之后再取消关注\",{\"1\":{\"386\":1}}],[\"数据\",{\"1\":{\"382\":1}}],[\"数据暂不能写出的情况\",{\"1\":{\"373\":1}}],[\"数据暂不能读入的情况\",{\"1\":{\"373\":1}}],[\"数据可写出时触发\",{\"1\":{\"373\":1}}],[\"数据可读入时触发\",{\"1\":{\"373\":1}}],[\"数据复制过程中\",{\"1\":{\"369\":1}}],[\"数据之间使用\",{\"1\":{\"351\":1}}],[\"数据源\",{\"1\":{\"260\":1}}],[\"数据一致性\",{\"1\":{\"219\":1}}],[\"数据持久化\",{\"0\":{\"133\":1}}],[\"数据表\",{\"1\":{\"94\":1}}],[\"数据库系统会从原来的表中取出对应的数据\",{\"1\":{\"237\":1}}],[\"数据库中只存放了视图的定义\",{\"1\":{\"237\":1}}],[\"数据库切换\",{\"1\":{\"152\":1}}],[\"数据库\",{\"1\":{\"94\":1,\"406\":1}}],[\"数据库名\",{\"1\":{\"68\":5,\"69\":2}}],[\"数据卷\",{\"0\":{\"58\":1},\"1\":{\"58\":1}}],[\"数据校验\",{\"0\":{\"37\":1}}],[\"数据格式紧凑\",{\"1\":{\"30\":1}}],[\"开头的一系列方法\",{\"1\":{\"438\":1,\"440\":1}}],[\"开源的消息队列\",{\"1\":{\"406\":1}}],[\"开源的搜索分析引擎\",{\"1\":{\"94\":1}}],[\"开发一个简单的服务器端和客户端\",{\"1\":{\"409\":1}}],[\"开发中的地位\",{\"1\":{\"406\":1}}],[\"开发\",{\"0\":{\"326\":1}}],[\"开始使用\",{\"0\":{\"298\":1}}],[\"开始\",{\"1\":{\"248\":1}}],[\"开始手动确认消息\",{\"1\":{\"110\":1}}],[\"开始消息的自动确认机制\",{\"1\":{\"108\":1}}],[\"开启两个客户端\",{\"1\":{\"378\":1}}],[\"开启请求方式前缀\",{\"1\":{\"190\":1}}],[\"开启注解\",{\"1\":{\"171\":1}}],[\"开启本地重试时\",{\"1\":{\"140\":1}}],[\"开启消费者失败重试\",{\"1\":{\"140\":1}}],[\"开启lazy模式\",{\"1\":{\"136\":1}}],[\"开启超时重试机制\",{\"1\":{\"130\":1}}],[\"开启\",{\"0\":{\"162\":1},\"1\":{\"90\":2,\"245\":1}}],[\"开启高效文件传输模式\",{\"1\":{\"90\":1}}],[\"开启代码自动缩进\",{\"1\":{\"70\":1}}],[\"排序查询\",{\"0\":{\"230\":1},\"1\":{\"225\":1}}],[\"排序字段列表\",{\"1\":{\"225\":1}}],[\"排序和should操作\",{\"1\":{\"103\":1}}],[\"排序的字段\",{\"1\":{\"99\":1}}],[\"排序\",{\"1\":{\"94\":1,\"99\":1}}],[\"排除依赖\",{\"0\":{\"79\":1}}],[\"高并发时\",{\"1\":{\"436\":1}}],[\"高性能的网络服务器和客户端\",{\"1\":{\"404\":1}}],[\"高级篇\",{\"1\":{\"161\":1}}],[\"高级\",{\"0\":{\"128\":1}}],[\"高级查询\",{\"0\":{\"99\":1,\"103\":1},\"1\":{\"94\":1}}],[\"高亮的部分即窗口\",{\"1\":{\"455\":1}}],[\"高亮\",{\"1\":{\"99\":1,\"103\":1}}],[\"高效性\",{\"1\":{\"30\":1}}],[\"文档更优秀\",{\"1\":{\"407\":1}}],[\"文档\",{\"0\":{\"91\":1,\"98\":1,\"102\":1},\"1\":{\"94\":1}}],[\"文件的权限等信息\",{\"1\":{\"361\":1}}],[\"文件的缩写\",{\"1\":{\"158\":1}}],[\"文件编程\",{\"0\":{\"352\":1}}],[\"文件内容\",{\"1\":{\"350\":1}}],[\"文件为\",{\"1\":{\"301\":3}}],[\"文件后缀名\",{\"1\":{\"187\":1}}],[\"文件名称\",{\"1\":{\"160\":1}}],[\"文件是将\",{\"1\":{\"160\":1}}],[\"文件是在指定的时间间隔内\",{\"1\":{\"158\":1}}],[\"文件\",{\"0\":{\"399\":1},\"1\":{\"159\":2}}],[\"文件存放位置\",{\"1\":{\"90\":1}}],[\"文件上传\",{\"0\":{\"27\":1}}],[\"验证\",{\"1\":{\"90\":1}}],[\"会取消下一次的\",{\"1\":{\"497\":1}}],[\"会取消注册在\",{\"1\":{\"380\":1}}],[\"会本次的\",{\"1\":{\"497\":1}}],[\"会唤醒当前在执行\",{\"1\":{\"497\":1}}],[\"会匹配\",{\"1\":{\"496\":1}}],[\"会执行一次\",{\"1\":{\"496\":1}}],[\"会执行到下面的\",{\"1\":{\"496\":1}}],[\"会启动\",{\"1\":{\"495\":1}}],[\"会由\",{\"1\":{\"495\":1}}],[\"会抛出\",{\"1\":{\"480\":1}}],[\"会抛异常\",{\"1\":{\"364\":4}}],[\"会按照\",{\"1\":{\"455\":1}}],[\"会造成粘包\",{\"1\":{\"455\":1}}],[\"会始终为\",{\"1\":{\"445\":1}}],[\"会将数据切分发送\",{\"1\":{\"455\":1}}],[\"会将数据缓存\",{\"1\":{\"361\":1}}],[\"会将底层内存数据进行深拷贝\",{\"1\":{\"444\":1}}],[\"会报\",{\"1\":{\"442\":1}}],[\"会报错\",{\"1\":{\"439\":1}}],[\"会负责释放未处理消息\",{\"1\":{\"441\":1}}],[\"会打印\",{\"1\":{\"432\":1}}],[\"会\",{\"1\":{\"432\":1}}],[\"会继续向上传播\",{\"1\":{\"431\":1}}],[\"会再用\",{\"1\":{\"428\":1}}],[\"会变成其它类型对象\",{\"1\":{\"413\":1}}],[\"会参与拷贝\",{\"1\":{\"396\":2,\"397\":1}}],[\"会切换至操作系统内核态来完成真正数据读取\",{\"1\":{\"393\":1}}],[\"会利用系统提供的发送缓冲区\",{\"1\":{\"392\":1}}],[\"会拿到物理\",{\"1\":{\"389\":1}}],[\"会每次可写均会触发\",{\"1\":{\"385\":1}}],[\"会触发一个\",{\"1\":{\"475\":2}}],[\"会触发多次读取事件\",{\"1\":{\"375\":1}}],[\"会触发\",{\"1\":{\"370\":1,\"375\":2,\"463\":1}}],[\"会返回\",{\"1\":{\"369\":2}}],[\"会在连接\",{\"1\":{\"463\":1}}],[\"会在连接建立时被调用\",{\"1\":{\"422\":1}}],[\"会在没有数据可读时让线程暂停\",{\"1\":{\"368\":1}}],[\"会在没有连接建立时让线程暂停\",{\"1\":{\"368\":1}}],[\"会在后台异步进行快照操作\",{\"1\":{\"159\":1}}],[\"会输出\",{\"1\":{\"363\":1}}],[\"会追加内容\",{\"1\":{\"359\":1}}],[\"会从\",{\"1\":{\"356\":1}}],[\"会阻塞线程池中所有线程\",{\"1\":{\"368\":1}}],[\"会阻塞直到\",{\"1\":{\"337\":1}}],[\"会阻止删除\",{\"1\":{\"234\":1}}],[\"会出现不安装\",{\"1\":{\"307\":1}}],[\"会创建自己的\",{\"1\":{\"302\":1}}],[\"会自动把属性放进去\",{\"1\":{\"272\":1}}],[\"会自动返回nack\",{\"1\":{\"139\":1}}],[\"会把地址中的name映射给username\",{\"1\":{\"272\":1}}],[\"会影响到原来表的数据\",{\"1\":{\"237\":1}}],[\"会减少查询耗时\",{\"1\":{\"236\":1}}],[\"会重新创建请求\",{\"1\":{\"172\":1}}],[\"会回到rabbitmq\",{\"1\":{\"139\":1}}],[\"会发现会每隔1秒重试1次\",{\"1\":{\"130\":1}}],[\"会根据指定的routingkey进行判断\",{\"1\":{\"116\":1}}],[\"会被订阅的队列消费\",{\"1\":{\"116\":1}}],[\"会覆盖原有的数据\",{\"1\":{\"98\":1}}],[\"会话绑定用户\",{\"1\":{\"469\":1}}],[\"会话管理接口\",{\"1\":{\"469\":1}}],[\"会话超时时间\",{\"1\":{\"90\":1}}],[\"会话缓存\",{\"1\":{\"90\":1}}],[\"会代理到http\",{\"1\":{\"88\":1}}],[\"协议举例\",{\"0\":{\"463\":1,\"464\":1}}],[\"协议是这样的\",{\"1\":{\"462\":1}}],[\"协议的目的就是划定消息的边界\",{\"1\":{\"462\":1}}],[\"协议设计与解析\",{\"0\":{\"461\":1}}],[\"协议设置\",{\"1\":{\"90\":1}}],[\"协议控制\",{\"1\":{\"296\":1}}],[\"协议版本\",{\"1\":{\"90\":1}}],[\"启用的情况下\",{\"1\":{\"481\":1}}],[\"启用的\",{\"1\":{\"90\":1}}],[\"启动死循环\",{\"1\":{\"496\":1}}],[\"启动剖析\",{\"0\":{\"495\":1}}],[\"启动三次\",{\"1\":{\"417\":2}}],[\"启动\",{\"0\":{\"176\":1},\"1\":{\"163\":1,\"495\":1,\"496\":1}}],[\"启动命令\",{\"1\":{\"151\":1}}],[\"启动时的\",{\"1\":{\"90\":1}}],[\"启动两台实例\",{\"1\":{\"89\":1}}],[\"启动容器\",{\"1\":{\"65\":1}}],[\"证书文件路径\",{\"1\":{\"90\":1}}],[\"证书和私钥文件路径\",{\"1\":{\"90\":1}}],[\"~selectionkey\",{\"1\":{\"497\":1}}],[\"~280mb\",{\"1\":{\"299\":1}}],[\"~282mb\",{\"1\":{\"299\":1}}],[\"~170mb\",{\"1\":{\"299\":1}}],[\"~\",{\"1\":{\"90\":1,\"351\":1}}],[\"端口号\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"端口\",{\"1\":{\"90\":2,\"169\":1}}],[\"监听所有\",{\"1\":{\"385\":1}}],[\"监听\",{\"0\":{\"374\":1},\"1\":{\"90\":2,\"106\":1}}],[\"包装了\",{\"1\":{\"432\":1}}],[\"包一层异常\",{\"1\":{\"428\":1}}],[\"包\",{\"1\":{\"300\":1}}],[\"包含其他配置文件\",{\"1\":{\"90\":1}}],[\"包括普通任务和定时任务\",{\"1\":{\"496\":1}}],[\"包括\",{\"1\":{\"492\":1}}],[\"包括publisher\",{\"1\":{\"131\":1}}],[\"包括文本\",{\"1\":{\"94\":1}}],[\"包括cpu\",{\"1\":{\"65\":1}}],[\"包括锁定\",{\"1\":{\"39\":1}}],[\"推送\",{\"1\":{\"90\":1}}],[\"块\",{\"1\":{\"90\":4}}],[\"进阶\",{\"0\":{\"451\":1}}],[\"进一步优化\",{\"1\":{\"397\":2}}],[\"进一步确保消息的可靠性\",{\"1\":{\"133\":1}}],[\"进行切片\",{\"1\":{\"442\":1}}],[\"进行切片成多个\",{\"1\":{\"442\":1}}],[\"进行一些初始操作\",{\"1\":{\"442\":1}}],[\"进行了扩展\",{\"1\":{\"425\":1}}],[\"进行增强\",{\"1\":{\"407\":1}}],[\"进行分隔\",{\"1\":{\"351\":1}}],[\"进行\",{\"1\":{\"297\":1,\"496\":1}}],[\"进行故障转移的超时时间\",{\"1\":{\"163\":1}}],[\"进程信息\",{\"1\":{\"163\":2}}],[\"进程的认证密码\",{\"1\":{\"163\":1}}],[\"进程的id\",{\"1\":{\"163\":1}}],[\"进程和主节点失去联系后\",{\"1\":{\"163\":1}}],[\"进程文件\",{\"1\":{\"90\":1}}],[\"进入死循环\",{\"1\":{\"496\":1}}],[\"进入在控制台的admin页面\",{\"1\":{\"137\":1}}],[\"进入一般命令模式\",{\"1\":{\"70\":1}}],[\"进入编辑模式\",{\"1\":{\"70\":1}}],[\"进入容器\",{\"1\":{\"65\":1}}],[\"服务端根据它找到实现\",{\"1\":{\"488\":1}}],[\"服务端也一直收不到数据\",{\"1\":{\"475\":1}}],[\"服务端加入\",{\"1\":{\"459\":1}}],[\"服务端输出\",{\"1\":{\"458\":1,\"459\":1,\"460\":1}}],[\"服务端修改一下接收缓冲区\",{\"1\":{\"454\":1}}],[\"服务端代码\",{\"1\":{\"453\":1}}],[\"服务端\",{\"1\":{\"432\":2}}],[\"服务器\",{\"0\":{\"489\":1}}],[\"服务器架子\",{\"1\":{\"488\":1}}],[\"服务器仅接收\",{\"1\":{\"409\":1}}],[\"服务器按预定长度读取\",{\"1\":{\"382\":1}}],[\"服务器端的\",{\"1\":{\"488\":1}}],[\"服务器端的某次输出\",{\"1\":{\"453\":1,\"454\":1}}],[\"服务器端解决\",{\"1\":{\"475\":1}}],[\"服务器端将\",{\"1\":{\"471\":1}}],[\"服务器端加入\",{\"1\":{\"458\":1}}],[\"服务器端打印\",{\"1\":{\"432\":1}}],[\"服务器端两个\",{\"1\":{\"417\":1}}],[\"服务器端代码为\",{\"1\":{\"376\":1}}],[\"服务器端成功接受连接时触发\",{\"1\":{\"373\":1}}],[\"服务器端\",{\"0\":{\"410\":1},\"1\":{\"368\":1,\"369\":1,\"382\":1,\"411\":1}}],[\"服务器端渲染\",{\"1\":{\"297\":1}}],[\"服务器整体运行的指令\",{\"1\":{\"90\":1}}],[\"服务熔断\",{\"0\":{\"193\":1}}],[\"服务保护\",{\"0\":{\"189\":1}}],[\"服务名\",{\"1\":{\"188\":2}}],[\"服务名称\",{\"1\":{\"187\":1}}],[\"服务发现\",{\"0\":{\"169\":1}}],[\"服务注册\",{\"0\":{\"168\":1}}],[\"服务注册和发现\",{\"0\":{\"165\":1}}],[\"服务间调用的重试\",{\"1\":{\"142\":1}}],[\"服务相关的指令\",{\"1\":{\"90\":1}}],[\"服务的用户\",{\"1\":{\"90\":1}}],[\"访问节点\",{\"1\":{\"328\":1}}],[\"访问形式\",{\"1\":{\"274\":1}}],[\"访问路径\",{\"1\":{\"267\":1,\"275\":1}}],[\"访问\",{\"1\":{\"89\":1}}],[\"访问控制\",{\"1\":{\"87\":1}}],[\"所谓的\",{\"1\":{\"397\":1}}],[\"所在线程\",{\"1\":{\"375\":1}}],[\"所有内容\",{\"1\":{\"443\":1}}],[\"所有\",{\"1\":{\"432\":1}}],[\"所有异常然后设置为\",{\"1\":{\"431\":1}}],[\"所有的数据\",{\"1\":{\"213\":1}}],[\"所有的op发起的请求都会先调用拦截器处理请求\",{\"1\":{\"185\":1}}],[\"所有的交互都通过nginx进行\",{\"1\":{\"88\":1}}],[\"所有后续的微服务中\",{\"1\":{\"185\":1}}],[\"所有写操作命令追加到文件的过程\",{\"1\":{\"160\":1}}],[\"所以常被用作讲述标点符号的重要性\",{\"1\":{\"462\":1}}],[\"所以最后要执行\",{\"1\":{\"400\":1}}],[\"所以需要用\",{\"1\":{\"291\":1}}],[\"所以正确的引用方式如下\",{\"1\":{\"201\":1}}],[\"所以是cart\",{\"1\":{\"188\":1}}],[\"所以我更推荐使用业务判断的方案\",{\"1\":{\"144\":1}}],[\"所以我们必须把这种影响降低\",{\"1\":{\"192\":1}}],[\"所以我们通常会利用数据卷将两个目录与宿主机目录关联\",{\"1\":{\"58\":1}}],[\"所以我们现在需要一个属性a\",{\"1\":{\"18\":1}}],[\"所以我们在这里修改名称为aautoconfiguration\",{\"1\":{\"17\":1}}],[\"所以我们需要用另外的方式来导入这个配置类\",{\"1\":{\"13\":1}}],[\"所以\",{\"1\":{\"142\":1}}],[\"所以spring返回ack\",{\"1\":{\"139\":1}}],[\"所以消息依然会被删除\",{\"1\":{\"139\":1}}],[\"所以mq的可靠性也非常重要\",{\"1\":{\"132\":1}}],[\"所以指定的是\",{\"1\":{\"61\":1}}],[\"所以大家在使用时需要多加注意\",{\"1\":{\"22\":1}}],[\"所以在a\",{\"1\":{\"20\":1}}],[\"所以额外添加一个注解更加合适\",{\"1\":{\"14\":1}}],[\"所以现在就把我们要实现的starter取名为a\",{\"1\":{\"12\":1}}],[\"请输入密码\",{\"1\":{\"470\":1}}],[\"请输入用户名\",{\"1\":{\"470\":1}}],[\"请思考\",{\"1\":{\"441\":1}}],[\"请关注下面方法的不同实现\",{\"1\":{\"441\":1}}],[\"请阅读环境变量\",{\"1\":{\"299\":1}}],[\"请合理配置等待时长和重试次数\",{\"1\":{\"130\":1}}],[\"请求消息处理器\",{\"1\":{\"488\":1}}],[\"请求消息\",{\"1\":{\"488\":1}}],[\"请求和响应消息\",{\"1\":{\"488\":1}}],[\"请求序号\",{\"1\":{\"465\":1}}],[\"请求体\",{\"1\":{\"464\":1}}],[\"请求头\",{\"1\":{\"464\":1}}],[\"请求行\",{\"1\":{\"464\":1}}],[\"请求限流\",{\"0\":{\"191\":1}}],[\"请求参数\",{\"1\":{\"178\":1}}],[\"请求方式\",{\"1\":{\"178\":1}}],[\"请求转发\",{\"1\":{\"175\":1}}],[\"请求\",{\"0\":{\"268\":1},\"1\":{\"88\":1}}],[\"请登录ram控制台创建ram用户\",{\"1\":{\"6\":1}}],[\"代表关注\",{\"1\":{\"495\":1}}],[\"代表着整体中某一段的数据\",{\"1\":{\"445\":1}}],[\"代表\",{\"1\":{\"438\":1}}],[\"代表实际写入字节数\",{\"1\":{\"385\":1}}],[\"代表了上一级路径\",{\"1\":{\"363\":1}}],[\"代表了当前路径\",{\"1\":{\"363\":1}}],[\"代表了\",{\"1\":{\"363\":2}}],[\"代表一个调度容器\",{\"1\":{\"246\":1}}],[\"代表一个调度参数的配置\",{\"1\":{\"246\":1}}],[\"代表投递成功\",{\"1\":{\"131\":1}}],[\"代表当前目录\",{\"1\":{\"61\":1}}],[\"代码略\",{\"1\":{\"496\":2}}],[\"代码改为\",{\"1\":{\"454\":1}}],[\"代码解读\",{\"1\":{\"410\":1,\"411\":1}}],[\"代码片段\",{\"1\":{\"197\":1}}],[\"代码配置lazy模式\",{\"0\":{\"136\":1}}],[\"代码\",{\"0\":{\"120\":1},\"1\":{\"363\":1,\"413\":1}}],[\"代理\",{\"1\":{\"492\":1}}],[\"代理服务端\",{\"1\":{\"88\":1}}],[\"代理客户端\",{\"1\":{\"87\":1}}],[\"正文长度\",{\"1\":{\"465\":1}}],[\"正常化路径\",{\"1\":{\"363\":1}}],[\"正常情况下\",{\"1\":{\"18\":1}}],[\"正确使用姿势\",{\"0\":{\"339\":1}}],[\"正确的安装到\",{\"1\":{\"307\":1}}],[\"正确流程\",{\"0\":{\"85\":1}}],[\"正向代理可以隐藏客户端的真实ip地址\",{\"1\":{\"87\":1}}],[\"正向代理通常是客户端的代理\",{\"1\":{\"87\":1}}],[\"正向代理是代理客户端的代理服务器\",{\"1\":{\"87\":1}}],[\"正向代理\",{\"0\":{\"87\":1}}],[\"各个模块之间引入坐标即可使用\",{\"1\":{\"83\":1}}],[\"默认是\",{\"1\":{\"496\":1}}],[\"默认是非池化实现\",{\"1\":{\"436\":1}}],[\"默认习惯是\",{\"1\":{\"438\":1}}],[\"默认文件\",{\"1\":{\"400\":1}}],[\"默认开启\",{\"1\":{\"389\":1}}],[\"默认设置\",{\"0\":{\"302\":1}}],[\"默认以\",{\"1\":{\"296\":1,\"459\":1}}],[\"默认就是这一项\",{\"1\":{\"234\":1}}],[\"默认就是这种方式\",{\"1\":{\"141\":1}}],[\"默认约束\",{\"1\":{\"233\":1}}],[\"默认形况下\",{\"1\":{\"219\":1}}],[\"默认每次发送\",{\"1\":{\"172\":1}}],[\"默认情况下\",{\"1\":{\"163\":1,\"302\":1}}],[\"默认情况下无需修改\",{\"1\":{\"163\":1}}],[\"默认情况下的模板只能支持\",{\"1\":{\"155\":1}}],[\"默认为\",{\"1\":{\"163\":1,\"499\":1}}],[\"默认使用的是rdb方式持久化\",{\"1\":{\"160\":1}}],[\"默认两种机制都是关闭状态\",{\"1\":{\"131\":1}}],[\"默认队列持久化\",{\"1\":{\"123\":1}}],[\"默认会平均分配内容\",{\"1\":{\"110\":1}}],[\"默认的\",{\"1\":{\"90\":1}}],[\"默认\",{\"1\":{\"80\":1,\"162\":1,\"230\":1,\"455\":1,\"497\":1,\"499\":1}}],[\"加入至\",{\"1\":{\"495\":1}}],[\"加入群聊\",{\"1\":{\"472\":1}}],[\"加入自己\",{\"1\":{\"470\":1}}],[\"加入聊天组\",{\"1\":{\"469\":1}}],[\"加入\",{\"1\":{\"459\":1}}],[\"加入依赖\",{\"1\":{\"409\":1}}],[\"加入某个jar包依赖后\",{\"1\":{\"79\":1}}],[\"加密\",{\"1\":{\"293\":2}}],[\"加载配置\",{\"1\":{\"267\":1}}],[\"加载对应的bean\",{\"1\":{\"267\":1}}],[\"加载spring配置\",{\"1\":{\"267\":1}}],[\"加载springmvc配置\",{\"1\":{\"267\":1}}],[\"加一个连接池\",{\"1\":{\"172\":1}}],[\"加参\",{\"1\":{\"49\":1}}],[\"像主动依赖了c和d一样使用它们\",{\"1\":{\"77\":1}}],[\"测试浏览器扩展\",{\"1\":{\"297\":1}}],[\"测试时加入\",{\"1\":{\"219\":1}}],[\"测试可以发现\",{\"1\":{\"139\":1}}],[\"测试代码\",{\"1\":{\"80\":1}}],[\"测试\",{\"0\":{\"156\":1},\"1\":{\"75\":1,\"297\":1,\"466\":1}}],[\"安装插件以及使用\",{\"1\":{\"146\":1}}],[\"安装地址\",{\"1\":{\"104\":1}}],[\"安装报错官方文档基本查询\",{\"1\":{\"94\":1}}],[\"安装到本地仓库\",{\"1\":{\"75\":1}}],[\"安装\",{\"0\":{\"73\":1,\"151\":1,\"299\":1},\"1\":{\"94\":1,\"307\":1}}],[\"别名b\",{\"1\":{\"235\":1}}],[\"别名a\",{\"1\":{\"235\":1}}],[\"别名登录\",{\"1\":{\"71\":1}}],[\"别名\",{\"1\":{\"71\":1}}],[\"免密登录\",{\"0\":{\"71\":1}}],[\"关注\",{\"1\":{\"498\":2}}],[\"关注事件\",{\"1\":{\"495\":1}}],[\"关键代码\",{\"1\":{\"418\":1,\"495\":10,\"498\":1}}],[\"关于html页面转pdf的一点经验\",{\"1\":{\"317\":1}}],[\"关闭自动确定\",{\"1\":{\"111\":1}}],[\"关闭消息的自动确认\",{\"1\":{\"110\":1}}],[\"关闭通道和连接\",{\"1\":{\"109\":1}}],[\"关闭\",{\"0\":{\"358\":1},\"1\":{\"90\":1,\"421\":2}}],[\"关闭查找关键词高亮\",{\"1\":{\"70\":1}}],[\"关联队列和交换机\",{\"1\":{\"141\":1}}],[\"关联\",{\"1\":{\"51\":1}}],[\"强大的crud操作\",{\"1\":{\"211\":1}}],[\"强制写入\",{\"0\":{\"361\":1}}],[\"强制退出\",{\"1\":{\"70\":1}}],[\"强制保存\",{\"1\":{\"70\":1}}],[\"强烈建议您创建并使用ram用户进行api访问或日常运维\",{\"1\":{\"6\":1}}],[\"大数据分布式存储框架\",{\"1\":{\"406\":1}}],[\"大数据分布式计算框架\",{\"1\":{\"406\":1}}],[\"大部分步骤与优化前相同\",{\"1\":{\"397\":1}}],[\"大小通过\",{\"1\":{\"481\":1}}],[\"大小包括了两个队列的大小\",{\"1\":{\"481\":1}}],[\"大小将数据进行分割发送\",{\"1\":{\"455\":1}}],[\"大小分配\",{\"0\":{\"383\":1}}],[\"大小的文件传输\",{\"1\":{\"362\":1}}],[\"大小\",{\"0\":{\"360\":1},\"1\":{\"390\":1,\"454\":1}}],[\"大杂烩\",{\"1\":{\"103\":1}}],[\"大于等于\",{\"1\":{\"99\":1}}],[\"大于\",{\"1\":{\"99\":1}}],[\"大于号\",{\"1\":{\"70\":1}}],[\"大家可能会想\",{\"1\":{\"18\":1}}],[\"大家在开发的过程中应该经常会看到各种各样的starter\",{\"1\":{\"10\":1}}],[\"取值是\",{\"1\":{\"495\":1}}],[\"取值范围\",{\"0\":{\"290\":1},\"1\":{\"290\":1}}],[\"取二者的较小值\",{\"1\":{\"481\":1}}],[\"取消或关闭时会导致这个\",{\"1\":{\"497\":1}}],[\"取消任务\",{\"1\":{\"425\":1}}],[\"取消\",{\"1\":{\"382\":1}}],[\"取消订单\",{\"1\":{\"142\":1}}],[\"取消粘贴模式\",{\"1\":{\"70\":1}}],[\"取消代码自动缩进\",{\"1\":{\"70\":1}}],[\"取消撤销\",{\"1\":{\"70\":1}}],[\"取名\",{\"0\":{\"12\":1}}],[\"撤销\",{\"1\":{\"70\":1}}],[\"下次循环就会\",{\"1\":{\"497\":1}}],[\"下次等待时长\",{\"1\":{\"130\":1,\"140\":1}}],[\"下雨天\",{\"1\":{\"462\":1}}],[\"下雨天留客\",{\"1\":{\"462\":1}}],[\"下雨天留客天留我不留\",{\"1\":{\"462\":1}}],[\"下一个\",{\"1\":{\"418\":1}}],[\"下一个位置粘贴\",{\"1\":{\"70\":1}}],[\"下\",{\"1\":{\"375\":1}}],[\"下图表示写入了\",{\"1\":{\"340\":1}}],[\"下面的\",{\"1\":{\"496\":1}}],[\"下面的示例使用\",{\"1\":{\"301\":1}}],[\"下面一种协议较为常用\",{\"1\":{\"462\":1}}],[\"下面是一些示例\",{\"1\":{\"297\":1}}],[\"下午14\",{\"1\":{\"292\":1}}],[\"下redis\",{\"1\":{\"162\":1}}],[\"下创建config文件\",{\"1\":{\"71\":1}}],[\"下载并使用特定版本的\",{\"1\":{\"302\":1}}],[\"下载地址中央仓库配置本地仓库\",{\"1\":{\"73\":1}}],[\"下载\",{\"1\":{\"34\":1,\"86\":1}}],[\"选择客户\",{\"1\":{\"411\":1}}],[\"选择服务\",{\"1\":{\"410\":1}}],[\"选择文件\",{\"1\":{\"27\":1}}],[\"选中文本\",{\"1\":{\"70\":1}}],[\"且在替换前要求用户确认\",{\"1\":{\"70\":1}}],[\"相对于整体偏移量等信息\",{\"1\":{\"445\":1}}],[\"相对路径\",{\"1\":{\"363\":1}}],[\"相当与查询a\",{\"1\":{\"235\":1}}],[\"相当于1g\",{\"1\":{\"70\":1}}],[\"相比较而言\",{\"1\":{\"144\":1}}],[\"相比\",{\"1\":{\"119\":1}}],[\"相关配置\",{\"1\":{\"488\":1}}],[\"相关的\",{\"1\":{\"446\":1}}],[\"相关的数据\",{\"1\":{\"236\":1}}],[\"相关方法都会不会让线程暂停\",{\"1\":{\"369\":1}}],[\"相关方法都会导致线程暂停\",{\"1\":{\"368\":1}}],[\"相关设置\",{\"1\":{\"90\":1}}],[\"相关信息\",{\"1\":{\"27\":1,\"160\":1}}],[\"9b\",{\"1\":{\"460\":3}}],[\"97b\",{\"1\":{\"460\":1}}],[\"96\",{\"1\":{\"424\":1}}],[\"9999\",{\"1\":{\"390\":2}}],[\"918\",{\"1\":{\"428\":1,\"431\":2}}],[\"91\",{\"1\":{\"364\":2}}],[\"9849\",{\"1\":{\"167\":2}}],[\"9848\",{\"1\":{\"167\":2}}],[\"90f\",{\"1\":{\"324\":1}}],[\"9000\",{\"1\":{\"381\":2}}],[\"900\",{\"1\":{\"159\":1}}],[\"900s\",{\"1\":{\"159\":1}}],[\"9091\",{\"1\":{\"89\":1,\"90\":1}}],[\"9090\",{\"1\":{\"88\":2,\"89\":1,\"90\":1,\"176\":1,\"458\":20,\"459\":17,\"460\":20}}],[\"9300\",{\"1\":{\"94\":2}}],[\"9200\",{\"1\":{\"94\":2,\"100\":1}}],[\"9<\",{\"1\":{\"78\":1,\"100\":1}}],[\"9\",{\"0\":{\"442\":1},\"1\":{\"70\":1,\"78\":1,\"292\":1,\"313\":2,\"338\":1,\"341\":3,\"347\":2,\"349\":3,\"350\":2,\"378\":2,\"390\":1,\"399\":1,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":5,\"446\":3,\"453\":2,\"454\":3,\"457\":1,\"458\":11,\"459\":11,\"460\":11,\"478\":1}}],[\"向假死的连接发送数据\",{\"1\":{\"475\":1}}],[\"向后传递\",{\"1\":{\"441\":2}}],[\"向客户端发送内容\",{\"1\":{\"385\":1}}],[\"向\",{\"0\":{\"344\":1},\"1\":{\"338\":1,\"339\":1,\"351\":1,\"382\":1}}],[\"向下兼容性\",{\"1\":{\"407\":1}}],[\"向下取整\",{\"1\":{\"232\":1}}],[\"向下箭头\",{\"1\":{\"70\":1}}],[\"向上取整\",{\"1\":{\"232\":1}}],[\"向上箭头\",{\"1\":{\"70\":1}}],[\"向有序集合中添加元素\",{\"1\":{\"153\":1}}],[\"向集合中添加元素\",{\"1\":{\"153\":1}}],[\"向光标之上寻找第一个值为word的字符串\",{\"1\":{\"70\":1}}],[\"向光标之下寻找第一个值为word的字符串\",{\"1\":{\"70\":1}}],[\"向右箭头\",{\"1\":{\"70\":1}}],[\"kernel\",{\"1\":{\"396\":1,\"398\":1}}],[\"kee\",{\"1\":{\"178\":1}}],[\"keepalive\",{\"1\":{\"90\":1}}],[\"key=\",{\"1\":{\"259\":1}}],[\"keyproperty=\",{\"1\":{\"208\":1}}],[\"key采用string的序列化方式\",{\"1\":{\"155\":1}}],[\"keys\",{\"1\":{\"153\":1,\"376\":2,\"378\":2,\"380\":1,\"382\":1,\"388\":2,\"497\":1}}],[\"key的时候使用通配符\",{\"1\":{\"119\":1}}],[\"keyword\",{\"1\":{\"99\":2,\"100\":1}}],[\"keygen\",{\"1\":{\"51\":1,\"71\":2}}],[\"key\",{\"1\":{\"40\":5,\"51\":1,\"90\":2,\"126\":2,\"127\":2,\"146\":1,\"153\":9,\"233\":2,\"234\":1,\"249\":2,\"373\":1,\"376\":3,\"378\":6,\"379\":1,\"380\":1,\"382\":14,\"385\":12,\"388\":8,\"495\":2,\"497\":2,\"498\":2}}],[\"koi8\",{\"1\":{\"88\":1}}],[\"k\",{\"1\":{\"70\":1,\"497\":5}}],[\"注册到\",{\"1\":{\"385\":1,\"495\":1}}],[\"注册\",{\"1\":{\"382\":1,\"465\":1,\"495\":2,\"498\":1}}],[\"注册与发现\",{\"1\":{\"168\":1,\"169\":1}}],[\"注入\",{\"1\":{\"258\":1}}],[\"注意发送的数据未必能够一次读完\",{\"1\":{\"499\":1}}],[\"注意此时没有注册\",{\"1\":{\"495\":1}}],[\"注意各种异常\",{\"1\":{\"441\":1}}],[\"注意不能仅捕获\",{\"1\":{\"431\":1}}],[\"注意这里按参数名去引用的话会报如下错误\",{\"1\":{\"201\":1}}],[\"注意看\",{\"1\":{\"144\":1}}],[\"注意\",{\"0\":{\"497\":1},\"1\":{\"130\":2,\"133\":1,\"346\":1,\"422\":1,\"438\":1,\"454\":1,\"458\":1,\"497\":1}}],[\"注意sql的路径\",{\"1\":{\"69\":1}}],[\"注解开发\",{\"0\":{\"260\":1}}],[\"注解说明\",{\"0\":{\"215\":1,\"275\":1}}],[\"注解方式传参\",{\"1\":{\"202\":1}}],[\"注解和spring\",{\"1\":{\"17\":1}}],[\"注解参数\",{\"0\":{\"16\":1}}],[\"注解导入\",{\"0\":{\"15\":1}}],[\"先来看可接入事件处理\",{\"1\":{\"498\":1}}],[\"先来看看\",{\"1\":{\"399\":1}}],[\"先约定用定长字节表示接下来数据的长度\",{\"1\":{\"460\":1}}],[\"先写入长度\",{\"1\":{\"460\":1}}],[\"先写入\",{\"1\":{\"438\":1}}],[\"先搞清楚顺序\",{\"1\":{\"432\":1}}],[\"先经过一道道入站工序\",{\"1\":{\"432\":1}}],[\"先后被触发\",{\"1\":{\"411\":1}}],[\"先实现一个拦截对象\",{\"0\":{\"284\":1}}],[\"先按第一个排序\",{\"1\":{\"230\":1}}],[\"先按ctrl\",{\"1\":{\"65\":1}}],[\"先配置\",{\"1\":{\"162\":1}}],[\"先生成一对密钥\",{\"1\":{\"71\":1}}],[\"先进入到mysql中\",{\"1\":{\"69\":1}}],[\"运行非\",{\"1\":{\"496\":1}}],[\"运行客户端\",{\"1\":{\"390\":1}}],[\"运行绑定的\",{\"1\":{\"302\":1}}],[\"运行的系统下\",{\"1\":{\"288\":1}}],[\"运行\",{\"1\":{\"167\":1,\"302\":1}}],[\"运行镜像\",{\"1\":{\"66\":1}}],[\"运行目录下\",{\"1\":{\"27\":1}}],[\"例\",{\"1\":{\"442\":1}}],[\"例6\",{\"0\":{\"431\":1}}],[\"例5\",{\"0\":{\"430\":1}}],[\"例4\",{\"0\":{\"429\":1}}],[\"例3\",{\"0\":{\"428\":1}}],[\"例2\",{\"0\":{\"427\":1}}],[\"例1\",{\"0\":{\"426\":1}}],[\"例子\",{\"0\":{\"66\":1}}],[\"例如网卡\",{\"1\":{\"475\":1}}],[\"例如网络故障导致生产者没有得到确认\",{\"1\":{\"142\":1}}],[\"例如在这个位置加入\",{\"1\":{\"450\":1}}],[\"例如读了\",{\"1\":{\"440\":1}}],[\"例如写入后大小为\",{\"1\":{\"439\":2}}],[\"例如目录结构如下\",{\"1\":{\"363\":1}}],[\"例如原始数据有3条为\",{\"1\":{\"351\":1}}],[\"例如调用\",{\"1\":{\"339\":2}}],[\"例如yaml\",{\"1\":{\"188\":1}}],[\"例如每隔20秒就查询一次\",{\"1\":{\"145\":1}}],[\"例如我们当前案例中\",{\"1\":{\"144\":1}}],[\"例如求绝对值函数\",{\"1\":{\"142\":1}}],[\"例如a依赖了b\",{\"1\":{\"77\":1}}],[\"例如断开连接或网络故障\",{\"1\":{\"33\":1}}],[\"例如\",{\"1\":{\"22\":1,\"68\":2,\"69\":1,\"119\":1,\"142\":2,\"153\":28,\"197\":2,\"315\":1,\"379\":1,\"383\":1,\"447\":1,\"450\":1,\"455\":1,\"456\":1,\"462\":2,\"465\":1}}],[\"例如examplebucket\",{\"1\":{\"6\":1}}],[\"内核会根据传入的\",{\"1\":{\"481\":1}}],[\"内核缓冲区的数据写入网卡\",{\"1\":{\"397\":1}}],[\"内如果没有向服务器写数据\",{\"1\":{\"475\":1}}],[\"内如果没有收到\",{\"1\":{\"475\":1}}],[\"内这个\",{\"1\":{\"441\":1}}],[\"内部创建了两个\",{\"1\":{\"415\":1}}],[\"内部工作流程是这样的\",{\"1\":{\"396\":1}}],[\"内部包含了所有发生的事件\",{\"1\":{\"382\":1}}],[\"内部触发机制\",{\"1\":{\"159\":1}}],[\"内连接\",{\"1\":{\"235\":1}}],[\"内置sql注入剥离器\",{\"1\":{\"211\":1}}],[\"内置全局拦截插件\",{\"1\":{\"211\":1}}],[\"内置性能分析插件\",{\"1\":{\"211\":1}}],[\"内置分页插件\",{\"1\":{\"211\":1}}],[\"内置代码生成器\",{\"1\":{\"211\":1}}],[\"内有一条数据被修改\",{\"1\":{\"159\":1}}],[\"内存被回收\",{\"1\":{\"441\":1}}],[\"内存中\",{\"1\":{\"397\":1}}],[\"内存中来直接访问使用\",{\"1\":{\"397\":1}}],[\"内存回收分成两步\",{\"1\":{\"397\":1}}],[\"内存占用高\",{\"1\":{\"334\":1}}],[\"内存\",{\"1\":{\"65\":1,\"383\":1,\"397\":1,\"441\":1}}],[\"内容来自于刚才的\",{\"1\":{\"445\":1}}],[\"内容拷贝至\",{\"1\":{\"383\":1}}],[\"内容为\",{\"1\":{\"338\":1}}],[\"内容\",{\"1\":{\"34\":1,\"107\":1,\"260\":1}}],[\"再来看可读事件\",{\"1\":{\"499\":1}}],[\"再\",{\"1\":{\"460\":1}}],[\"再关闭\",{\"1\":{\"455\":1}}],[\"再读只能读那些尚未读取的部分\",{\"1\":{\"440\":1}}],[\"再写入一个\",{\"1\":{\"438\":1,\"439\":1}}],[\"再写入时在新内容和原末尾之间会有空洞\",{\"1\":{\"359\":1}}],[\"再经过一道道出站工序最终变成产品\",{\"1\":{\"432\":1}}],[\"再增加两个非\",{\"1\":{\"417\":1}}],[\"再分配\",{\"1\":{\"383\":1}}],[\"再次读操作\",{\"1\":{\"442\":1}}],[\"再次投递\",{\"1\":{\"140\":1}}],[\"再次发送消息\",{\"1\":{\"139\":1}}],[\"再重新发送给消费者\",{\"1\":{\"140\":1}}],[\"再重新登录回来\",{\"1\":{\"62\":1}}],[\"再有交换机发给队列\",{\"1\":{\"112\":1}}],[\"再按ctrl\",{\"1\":{\"65\":1}}],[\"重建\",{\"1\":{\"497\":1}}],[\"重置到标记位置\",{\"1\":{\"440\":1}}],[\"重写了相应事件处理方法\",{\"1\":{\"413\":1}}],[\"重写时是否可以运用appendfsync\",{\"1\":{\"160\":1}}],[\"重新置为\",{\"1\":{\"345\":1}}],[\"重新提交到githu\",{\"1\":{\"288\":1}}],[\"重试耗尽后\",{\"1\":{\"141\":3}}],[\"重试达到最大次数后\",{\"1\":{\"140\":1}}],[\"重复\",{\"1\":{\"339\":1}}],[\"重复退款对商家而言会有经济损失\",{\"1\":{\"142\":1}}],[\"重复之前的测试\",{\"1\":{\"140\":1}}],[\"重复前一个查找操作\",{\"1\":{\"70\":1}}],[\"重入队\",{\"1\":{\"140\":1}}],[\"重启\",{\"1\":{\"187\":1}}],[\"重启后失效\",{\"1\":{\"162\":1}}],[\"重启consumer服务\",{\"1\":{\"140\":1}}],[\"重启消息也在\",{\"1\":{\"107\":1}}],[\"重启容器\",{\"1\":{\"65\":1}}],[\"重命名容器\",{\"1\":{\"65\":1}}],[\"重命名\",{\"1\":{\"27\":1,\"238\":1}}],[\"将线程池的当前线程保存在成员变量中\",{\"1\":{\"496\":1}}],[\"将消息对象发送出去\",{\"1\":{\"492\":1}}],[\"将方法调用转换为\",{\"1\":{\"492\":1}}],[\"将发送一个拒绝连接的错误信息到\",{\"1\":{\"481\":1}}],[\"将该请求从\",{\"1\":{\"481\":1}}],[\"将原始\",{\"1\":{\"441\":1}}],[\"将要执行的代码作为任务提交给下一个事件循环处理\",{\"1\":{\"418\":1}}],[\"将来\",{\"1\":{\"407\":1}}],[\"将虚引用加入引用队列\",{\"1\":{\"397\":1}}],[\"将堆外内存映射到\",{\"1\":{\"397\":1}}],[\"将\",{\"1\":{\"383\":1,\"396\":1,\"397\":2}}],[\"将一个文件通过\",{\"1\":{\"396\":1}}],[\"将一个\",{\"1\":{\"382\":1}}],[\"将错乱的数据恢复成原始的按\",{\"1\":{\"351\":1}}],[\"将数据从内核缓冲区读入用户缓冲区\",{\"1\":{\"396\":1}}],[\"将数据读入内核缓冲区\",{\"1\":{\"396\":1}}],[\"将数据读入\",{\"1\":{\"331\":1}}],[\"将数据回滚至操作之前的状态\",{\"1\":{\"219\":1}}],[\"将修改后的document写回到新的xml文件中\",{\"1\":{\"328\":1}}],[\"将表格添加到文档中\",{\"1\":{\"323\":1}}],[\"将段落添加到文档中\",{\"1\":{\"322\":1}}],[\"将其条件修改为忽略大小写\",{\"1\":{\"315\":1}}],[\"将文件推送到新的分支\",{\"1\":{\"288\":1}}],[\"将功能增强\",{\"1\":{\"261\":1}}],[\"将年龄低于50和性别为\",{\"1\":{\"235\":1}}],[\"将所有操作合并到一个事务中可以减少i\",{\"1\":{\"219\":1}}],[\"将name移入到数据库1中\",{\"1\":{\"153\":1}}],[\"将订单状态改为了已退款状态\",{\"1\":{\"142\":1}}],[\"将失败消息投递到指定的交换机\",{\"1\":{\"141\":1}}],[\"将通道声明到交换机\",{\"1\":{\"113\":1}}],[\"将全文代码格式化\",{\"1\":{\"70\":1}}],[\"将全文的word1替换为word2\",{\"1\":{\"70\":2}}],[\"将选中的文本整体向左缩进一次\",{\"1\":{\"70\":1}}],[\"将选中的文本整体向右缩进一次\",{\"1\":{\"70\":1}}],[\"将复制的数据在光标的下一行\",{\"1\":{\"70\":1}}],[\"将本地文件xxx\",{\"1\":{\"65\":1}}],[\"将本地内容推送到远程仓库\",{\"1\":{\"51\":2}}],[\"将容器container导出到本地文件xxx\",{\"1\":{\"65\":1}}],[\"将镜像ubuntu\",{\"1\":{\"64\":2}}],[\"或失败\",{\"1\":{\"425\":1}}],[\"或成功\",{\"1\":{\"425\":1}}],[\"或是由非\",{\"1\":{\"497\":1}}],[\"或是超时\",{\"1\":{\"374\":1}}],[\"或是去执行\",{\"1\":{\"369\":1}}],[\"或更高版本中被支持\",{\"1\":{\"301\":1}}],[\"或称为btree\",{\"1\":{\"236\":1}}],[\"或者有任务\",{\"1\":{\"497\":1}}],[\"或者调用\",{\"1\":{\"345\":1}}],[\"或者\",{\"1\":{\"226\":1,\"227\":1,\"355\":1,\"358\":1}}],[\"或者缩减影响的范围\",{\"1\":{\"192\":1}}],[\"或category字段包含搜索词\",{\"1\":{\"103\":1}}],[\"或\",{\"1\":{\"64\":1,\"65\":1,\"70\":7,\"99\":1,\"227\":2,\"290\":2,\"296\":1,\"302\":1,\"339\":1,\"393\":1,\"459\":1,\"467\":1,\"475\":2,\"478\":2,\"495\":1}}],[\"列3\",{\"1\":{\"323\":1}}],[\"列2\",{\"1\":{\"323\":1}}],[\"列1\",{\"1\":{\"323\":1}}],[\"列数必须保持一致\",{\"1\":{\"235\":1}}],[\"列表中的值\",{\"1\":{\"227\":1}}],[\"列\",{\"1\":{\"94\":1,\"323\":3}}],[\"列出本地所有镜像\",{\"1\":{\"64\":1}}],[\"列举文件\",{\"1\":{\"7\":1}}],[\"拉取代码\",{\"1\":{\"288\":1}}],[\"拉取一个镜像\",{\"1\":{\"64\":1}}],[\"拉取远程分支xxx\",{\"1\":{\"46\":1}}],[\"镜像\",{\"0\":{\"64\":1}}],[\"基于事件驱动的网络应用框架\",{\"1\":{\"404\":1}}],[\"基础\",{\"1\":{\"235\":1}}],[\"基础语句\",{\"0\":{\"221\":1}}],[\"基础使用\",{\"0\":{\"171\":1}}],[\"基础部分\",{\"0\":{\"105\":1}}],[\"基础操作\",{\"0\":{\"95\":1}}],[\"基操\",{\"0\":{\"63\":1}}],[\"基本规则是\",{\"1\":{\"441\":1}}],[\"基本查询\",{\"0\":{\"226\":1}}],[\"基本不会出现发送消息丢失的情况\",{\"1\":{\"131\":1}}],[\"基本语法\",{\"1\":{\"62\":1}}],[\"基本命令\",{\"0\":{\"59\":1,\"152\":1}}],[\"中只有\",{\"1\":{\"498\":1}}],[\"中执行了\",{\"1\":{\"498\":1}}],[\"中如下代码\",{\"1\":{\"498\":1}}],[\"中关注\",{\"1\":{\"495\":1}}],[\"中使用\",{\"1\":{\"495\":1}}],[\"中对下面的代码是怎样进行处理的\",{\"1\":{\"495\":1}}],[\"中对应着两个\",{\"1\":{\"397\":1}}],[\"中更容易说明\",{\"1\":{\"481\":1}}],[\"中消息传输基于流的方式\",{\"1\":{\"462\":1}}],[\"中包含\",{\"1\":{\"456\":1}}],[\"中含有\",{\"1\":{\"455\":1}}],[\"中\",{\"1\":{\"441\":1,\"478\":1,\"480\":1,\"481\":2}}],[\"中有堆外内存的\",{\"1\":{\"441\":1}}],[\"中很多方法都是异步的\",{\"1\":{\"411\":1}}],[\"中的流程\",{\"1\":{\"498\":1}}],[\"中的\",{\"1\":{\"397\":1,\"425\":2}}],[\"中的内容全部写入\",{\"1\":{\"357\":1}}],[\"中所有数据都写入\",{\"1\":{\"385\":1}}],[\"中还有上次的\",{\"1\":{\"379\":1}}],[\"中调用\",{\"1\":{\"357\":1}}],[\"中调用b\",{\"1\":{\"20\":1}}],[\"中间有一个过度的服务器\",{\"1\":{\"106\":1}}],[\"中安装\",{\"1\":{\"62\":1}}],[\"为单位\",{\"1\":{\"455\":1}}],[\"为现象明显\",{\"1\":{\"454\":1}}],[\"为啥方法叫\",{\"1\":{\"410\":1}}],[\"为什么需要协议\",{\"0\":{\"462\":1}}],[\"为什么不在一个线程中去执行建立连接\",{\"1\":{\"424\":1}}],[\"为什么\",{\"1\":{\"381\":1}}],[\"为何要取消\",{\"0\":{\"386\":1}}],[\"为何要\",{\"0\":{\"379\":1}}],[\"为\",{\"1\":{\"293\":1,\"495\":2,\"496\":2,\"498\":1}}],[\"为属性赋值\",{\"1\":{\"277\":1}}],[\"为空\",{\"1\":{\"227\":1}}],[\"为简化开发\",{\"1\":{\"211\":1}}],[\"为了简化起见\",{\"1\":{\"488\":1}}],[\"为了支持更多序列化算法\",{\"1\":{\"478\":1}}],[\"为了双工通信\",{\"1\":{\"465\":1}}],[\"为了解决此问题\",{\"1\":{\"455\":1}}],[\"为了解决这个问题\",{\"1\":{\"130\":1,\"134\":1}}],[\"为了更有效地使用内存\",{\"1\":{\"154\":1}}],[\"为了保证mq消息的可靠性\",{\"1\":{\"145\":1}}],[\"为了应对上述情况spring又提供了消费者失败重试机制\",{\"1\":{\"140\":1}}],[\"为了确认消费者是否成功处理消息\",{\"1\":{\"139\":1}}],[\"为了减少io次数\",{\"1\":{\"133\":1}}],[\"为了一直消费信息\",{\"1\":{\"108\":1}}],[\"为了避免每次使用docker命令都需要加上sudo权限\",{\"1\":{\"62\":1}}],[\"为例\",{\"1\":{\"6\":1,\"381\":1}}],[\"跑起来\",{\"1\":{\"62\":1}}],[\"7b\",{\"1\":{\"459\":2}}],[\"73\",{\"1\":{\"417\":4,\"431\":2}}],[\"7a\",{\"1\":{\"417\":2}}],[\"76\",{\"1\":{\"350\":1}}],[\"75\",{\"1\":{\"350\":1,\"417\":2}}],[\"724\",{\"1\":{\"364\":1}}],[\"72\",{\"1\":{\"349\":1,\"350\":1,\"378\":1}}],[\"7769948160\",{\"1\":{\"362\":1}}],[\"77\",{\"1\":{\"349\":1,\"378\":1,\"417\":4}}],[\"745\",{\"1\":{\"428\":1,\"431\":2}}],[\"74\",{\"1\":{\"349\":2,\"428\":1,\"431\":2}}],[\"789\",{\"1\":{\"178\":1}}],[\"7001\",{\"1\":{\"163\":1}}],[\"7\",{\"0\":{\"390\":1,\"440\":1,\"486\":1},\"1\":{\"62\":1,\"70\":1,\"94\":2,\"100\":1,\"279\":1,\"290\":2,\"300\":1,\"319\":1,\"338\":1,\"341\":1,\"347\":2,\"349\":3,\"350\":2,\"378\":2,\"390\":1,\"399\":1,\"411\":2,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":5,\"446\":3,\"453\":2,\"454\":3,\"457\":1,\"458\":11,\"459\":11,\"460\":11,\"466\":1,\"467\":1,\"478\":2,\"495\":2}}],[\"7124603507025379365↩︎\",{\"1\":{\"24\":1}}],[\"也只会有一个\",{\"1\":{\"495\":1}}],[\"也作\",{\"1\":{\"462\":1}}],[\"也罢\",{\"1\":{\"462\":1}}],[\"也需要加入\",{\"1\":{\"455\":1}}],[\"也不会阻塞住\",{\"1\":{\"497\":1}}],[\"也不会造成回收\",{\"1\":{\"441\":1}}],[\"也不见主人家为他交付束修金\",{\"1\":{\"462\":1}}],[\"也不妨碍前面线程读取客户端数据\",{\"1\":{\"450\":1}}],[\"也称之为注册事件\",{\"1\":{\"373\":1}}],[\"也行\",{\"1\":{\"285\":1}}],[\"也在posthandle之后\",{\"1\":{\"284\":1}}],[\"也是与原始\",{\"1\":{\"443\":1}}],[\"也是\",{\"1\":{\"438\":1}}],[\"也是利用异步的关键\",{\"1\":{\"424\":1}}],[\"也是后面\",{\"1\":{\"284\":1}}],[\"也是默认的索引类型\",{\"1\":{\"236\":1}}],[\"也可以由\",{\"1\":{\"497\":1}}],[\"也可以用于\",{\"1\":{\"484\":1}}],[\"也可以用来包装普通字节数组\",{\"1\":{\"446\":1}}],[\"也可以写入数据\",{\"1\":{\"438\":1}}],[\"也可以异步方式得到结果\",{\"1\":{\"425\":1}}],[\"也可以使用下面的代码来创建池化基于直接内存的\",{\"1\":{\"435\":1}}],[\"也可以使用\",{\"1\":{\"415\":1}}],[\"也可以进行任务处理\",{\"1\":{\"413\":1}}],[\"也可以理解为硬件单元\",{\"1\":{\"396\":1}}],[\"也可以将\",{\"1\":{\"331\":1}}],[\"也可以是具有逻辑意义的特殊字符\",{\"1\":{\"289\":1}}],[\"也可以\",{\"1\":{\"288\":1}}],[\"也可以在\",{\"1\":{\"197\":1}}],[\"也可以在业务中基于id判断是否是重复消息\",{\"1\":{\"143\":1}}],[\"也可以在控制台配置policy\",{\"1\":{\"137\":1}}],[\"也可以配置为lazy模式\",{\"1\":{\"137\":1}}],[\"也可以直接指定dockerfile目录\",{\"1\":{\"61\":1}}],[\"也会受影响\",{\"1\":{\"442\":1}}],[\"也会增加\",{\"1\":{\"436\":1}}],[\"也会出现异常\",{\"1\":{\"428\":1}}],[\"也会出现消息发送到mq之后丢失的现象\",{\"1\":{\"131\":1}}],[\"也会产生\",{\"1\":{\"159\":1}}],[\"也会导致消息丢失\",{\"1\":{\"132\":1}}],[\"也就是总字节数会使用\",{\"1\":{\"455\":1}}],[\"也就是不管有没有事件\",{\"1\":{\"374\":1}}],[\"也就是第3秒\",{\"1\":{\"291\":1}}],[\"也就是懒加载\",{\"1\":{\"134\":1}}],[\"也就是惰性队列\",{\"1\":{\"134\":1}}],[\"也就是说多次重试等待的过程中\",{\"1\":{\"130\":1}}],[\"也就是需要定义在spring\",{\"1\":{\"24\":1}}],[\"也必须要指定一个routingkey\",{\"1\":{\"116\":1}}],[\"示例\",{\"0\":{\"60\":1,\"292\":1},\"1\":{\"292\":1,\"328\":1}}],[\"挂载目录\",{\"1\":{\"59\":1}}],[\"清空所有数据库\",{\"1\":{\"152\":1}}],[\"清空当前数据库\",{\"1\":{\"152\":1}}],[\"清空git缓存\",{\"1\":{\"50\":1}}],[\"清理工作\",{\"1\":{\"496\":1}}],[\"清理\",{\"1\":{\"75\":1}}],[\"清除上一次的\",{\"1\":{\"496\":1}}],[\"清除公钥信息\",{\"1\":{\"71\":1}}],[\"清除数据卷\",{\"1\":{\"59\":1}}],[\"说明没有假死\",{\"1\":{\"475\":1}}],[\"说明订单已支付\",{\"1\":{\"144\":1}}],[\"说明最后springamqp返回的是reject\",{\"1\":{\"140\":1}}],[\"说明\",{\"0\":{\"83\":1},\"1\":{\"59\":1,\"133\":1,\"292\":1}}],[\"命令解读\",{\"1\":{\"137\":1}}],[\"命令说明\",{\"1\":{\"61\":1}}],[\"命令\",{\"1\":{\"59\":1,\"159\":1,\"234\":1}}],[\"读空闲时间过长\",{\"1\":{\"475\":2}}],[\"读不会阻塞写\",{\"1\":{\"450\":1}}],[\"读和写是可以同时进行的\",{\"1\":{\"450\":1}}],[\"读和写的误解\",{\"0\":{\"450\":1}}],[\"读过的内容\",{\"1\":{\"440\":1}}],[\"读事件由\",{\"1\":{\"401\":1}}],[\"读写才不会相互阻塞\",{\"1\":{\"450\":1}}],[\"读写指针分离\",{\"1\":{\"447\":1}}],[\"读写\",{\"1\":{\"397\":1}}],[\"读写能力\",{\"1\":{\"396\":1}}],[\"读写都非常不方便\",{\"1\":{\"58\":1}}],[\"读\",{\"1\":{\"351\":1,\"382\":1,\"413\":1}}],[\"读指针向后走\",{\"1\":{\"345\":1}}],[\"读模式\",{\"1\":{\"338\":1}}],[\"读到字节数\",{\"1\":{\"338\":4}}],[\"读取的最小单位\",{\"1\":{\"454\":1}}],[\"读取完成\",{\"1\":{\"413\":1}}],[\"读取\",{\"0\":{\"356\":1,\"440\":1},\"1\":{\"340\":1,\"499\":1}}],[\"读取数据填充\",{\"1\":{\"356\":1}}],[\"读取数据\",{\"0\":{\"345\":1},\"1\":{\"339\":1}}],[\"读取即可\",{\"1\":{\"188\":1}}],[\"读取bootstrap文件\",{\"1\":{\"187\":1}}],[\"读取图片文件\",{\"1\":{\"37\":1}}],[\"放入\",{\"1\":{\"379\":1,\"441\":1,\"481\":1}}],[\"放入图片带文档中\",{\"1\":{\"324\":1}}],[\"放弃处理\",{\"1\":{\"144\":1}}],[\"放行\",{\"1\":{\"182\":1}}],[\"放行以后\",{\"1\":{\"139\":2}}],[\"放行权限\",{\"1\":{\"5\":1}}],[\"放置配置文件\",{\"1\":{\"58\":1}}],[\"放置一些静态资源\",{\"1\":{\"58\":1}}],[\"举例\",{\"0\":{\"262\":1},\"1\":{\"55\":1,\"56\":1,\"142\":1}}],[\"语法\",{\"1\":{\"55\":1,\"56\":1}}],[\"查询目前慢日志时间\",{\"1\":{\"244\":1}}],[\"查询右表\",{\"1\":{\"235\":1}}],[\"查询左表全部数据\",{\"1\":{\"235\":1}}],[\"查询页码\",{\"1\":{\"231\":1}}],[\"查询记录数\",{\"1\":{\"231\":1}}],[\"查询商品\",{\"1\":{\"171\":1}}],[\"查询订单\",{\"1\":{\"144\":1}}],[\"查询数据\",{\"1\":{\"142\":1}}],[\"查询结果列表和总记录数\",{\"1\":{\"103\":1}}],[\"查询文档\",{\"1\":{\"102\":1}}],[\"查询索引下所有文档\",{\"1\":{\"98\":1}}],[\"查询\",{\"1\":{\"98\":1}}],[\"查找当前目录中所有\",{\"1\":{\"56\":1}}],[\"查找helloworld\",{\"1\":{\"56\":1}}],[\"查找命令\",{\"0\":{\"54\":1}}],[\"查看成员\",{\"1\":{\"472\":1}}],[\"查看curd执行频率\",{\"0\":{\"243\":1}}],[\"查看\",{\"0\":{\"241\":1},\"1\":{\"301\":2}}],[\"查看name剩余过期时间\",{\"1\":{\"153\":1}}],[\"查看key的类型\",{\"1\":{\"152\":1}}],[\"查看rabbitmq控制台\",{\"1\":{\"140\":1}}],[\"查看索引\",{\"1\":{\"96\":1,\"97\":1}}],[\"查看所有的sql情况\",{\"1\":{\"245\":1}}],[\"查看所有的节点\",{\"1\":{\"96\":1}}],[\"查看所有的数据卷\",{\"1\":{\"59\":1}}],[\"查看所有容器的统计信息\",{\"1\":{\"65\":1}}],[\"查看某个具体sql\",{\"1\":{\"245\":1}}],[\"查看某个容器内的所有进程\",{\"1\":{\"65\":1}}],[\"查看某个数据卷的详情\",{\"1\":{\"59\":1}}],[\"查看本地的所有容器\",{\"1\":{\"65\":1}}],[\"查看远程库的详细信息\",{\"1\":{\"51\":1}}],[\"查看远程库的信息\",{\"1\":{\"51\":1}}],[\"查看远程仓库信息\",{\"1\":{\"51\":1}}],[\"查看工作区中文件当前状态\",{\"1\":{\"49\":1}}],[\"查看文件内容\",{\"1\":{\"49\":1}}],[\"查看每一次修改历史\",{\"1\":{\"49\":1}}],[\"查看提交历史记录\",{\"1\":{\"49\":1}}],[\"查看当前目录\",{\"1\":{\"47\":1}}],[\"查看分支\",{\"1\":{\"46\":1}}],[\"拒绝合并不相关的历史\",{\"1\":{\"52\":1}}],[\"七\",{\"0\":{\"52\":1}}],[\"克隆之后使用和查看\",{\"1\":{\"51\":1}}],[\"克隆远程仓库\",{\"1\":{\"51\":1}}],[\"之前\",{\"1\":{\"436\":1,\"481\":1}}],[\"之前没有其它出站处理器了\",{\"1\":{\"432\":1}}],[\"之前说\",{\"1\":{\"13\":1}}],[\"之间的内容进行切片\",{\"1\":{\"442\":1}}],[\"之间进行了绑定\",{\"1\":{\"417\":1}}],[\"之间发送请求\",{\"1\":{\"185\":1}}],[\"之后注册等操作在\",{\"1\":{\"495\":1}}],[\"之后就可以随意修改了\",{\"1\":{\"60\":1}}],[\"之后\",{\"1\":{\"51\":1,\"423\":1,\"481\":1}}],[\"第二版\",{\"0\":{\"492\":1,\"493\":1}}],[\"第二次握手\",{\"1\":{\"481\":1}}],[\"第二次\",{\"1\":{\"417\":2,\"454\":1}}],[\"第二次触发了\",{\"1\":{\"379\":1}}],[\"第\",{\"1\":{\"481\":2}}],[\"第三次握手\",{\"1\":{\"481\":1}}],[\"第三次\",{\"1\":{\"417\":2}}],[\"第三方的starter会把starter放后面\",{\"1\":{\"12\":1}}],[\"第5秒\",{\"1\":{\"291\":1}}],[\"第4\",{\"1\":{\"291\":1}}],[\"第一版\",{\"0\":{\"491\":1}}],[\"第一种模式\",{\"1\":{\"123\":1}}],[\"第一次握手\",{\"1\":{\"481\":1}}],[\"第一次触发了\",{\"1\":{\"379\":1}}],[\"第一次\",{\"1\":{\"51\":1,\"417\":2,\"454\":1}}],[\"第几条开始\",{\"1\":{\"99\":1}}],[\"远程仓库\",{\"0\":{\"51\":1}}],[\"六\",{\"0\":{\"51\":1},\"1\":{\"272\":1}}],[\"恢复库存的业务\",{\"1\":{\"142\":1}}],[\"恢复\",{\"1\":{\"50\":1}}],[\"删错了\",{\"1\":{\"50\":1}}],[\"删除是危险操作\",{\"1\":{\"365\":1}}],[\"删除很危险\",{\"0\":{\"365\":1}}],[\"删除多级目录\",{\"1\":{\"364\":1}}],[\"删除多个\",{\"1\":{\"213\":1}}],[\"删除目录\",{\"1\":{\"364\":1}}],[\"删除视图\",{\"0\":{\"240\":1}}],[\"删除所有数据\",{\"1\":{\"224\":1}}],[\"删除所有已停止的容器\",{\"1\":{\"65\":1}}],[\"删除key对应的hash中的一个或多个field\",{\"1\":{\"153\":1}}],[\"删除一个hello\",{\"1\":{\"153\":1}}],[\"删除左右头部\",{\"1\":{\"153\":1}}],[\"删除文档\",{\"1\":{\"102\":1}}],[\"删除文件\",{\"0\":{\"50\":1},\"1\":{\"364\":1}}],[\"删除文件或目录\",{\"1\":{\"8\":1}}],[\"删除索引\",{\"1\":{\"97\":1,\"101\":1}}],[\"删除当前行\",{\"1\":{\"70\":1}}],[\"删除选中的文本\",{\"1\":{\"70\":1}}],[\"删除容器\",{\"1\":{\"65\":1}}],[\"删除镜像ubuntu\",{\"1\":{\"64\":1}}],[\"删除指定的数据卷\",{\"1\":{\"59\":1}}],[\"删除远程仓库\",{\"1\":{\"51\":1}}],[\"删除本地分支xxx\",{\"1\":{\"46\":1}}],[\"删除图片\",{\"0\":{\"8\":1}}],[\"删除\",{\"1\":{\"5\":1,\"85\":1,\"98\":1,\"234\":1}}],[\"五大数据类型\",{\"0\":{\"153\":1}}],[\"五\",{\"0\":{\"50\":1},\"1\":{\"272\":1}}],[\"若您使用\",{\"1\":{\"290\":1}}],[\"若已提交\",{\"1\":{\"49\":1}}],[\"若该文件隐藏\",{\"1\":{\"47\":1}}],[\"丢弃消息\",{\"1\":{\"141\":1}}],[\"丢弃暂存区的修改\",{\"1\":{\"49\":1}}],[\"丢弃工作区的修改\",{\"1\":{\"49\":1}}],[\"即初始化器\",{\"1\":{\"498\":1}}],[\"即接收一个客户端连接\",{\"1\":{\"498\":1}}],[\"即首次调用\",{\"1\":{\"496\":1}}],[\"即滑动窗口\",{\"1\":{\"454\":1}}],[\"即读写可以同时进行\",{\"1\":{\"392\":1}}],[\"即使发送一个字节\",{\"1\":{\"455\":1}}],[\"即使是阻塞\",{\"1\":{\"450\":1}}],[\"即使调用了\",{\"1\":{\"441\":1}}],[\"即使没有连接建立\",{\"1\":{\"369\":1}}],[\"即使\",{\"1\":{\"346\":1}}],[\"即符号\",{\"1\":{\"313\":1}}],[\"即可\",{\"1\":{\"302\":1,\"369\":1}}],[\"即可添加配置\",{\"1\":{\"137\":1}}],[\"即不写死\",{\"1\":{\"188\":1}}],[\"即消息投递给消费者后立刻ack\",{\"1\":{\"139\":1}}],[\"即\",{\"1\":{\"128\":1,\"130\":1,\"139\":1,\"297\":1,\"382\":1,\"396\":1,\"438\":2}}],[\"即撤销修改\",{\"1\":{\"49\":1}}],[\"即当浏览器不支持\",{\"1\":{\"29\":1}}],[\"简写\",{\"1\":{\"313\":1}}],[\"简写字符集\",{\"0\":{\"313\":1}}],[\"简称\",{\"1\":{\"211\":1,\"495\":1}}],[\"简洁查看\",{\"1\":{\"49\":1}}],[\"简单使用\",{\"1\":{\"293\":1}}],[\"简单类型注入\",{\"1\":{\"260\":1}}],[\"简单\",{\"0\":{\"123\":1}}],[\"简单命令\",{\"0\":{\"75\":1}}],[\"简单易用\",{\"1\":{\"30\":1}}],[\"简单啊\",{\"1\":{\"18\":1}}],[\"从尾部开始查找出站处理器\",{\"1\":{\"432\":1}}],[\"从尾部开始触发\",{\"1\":{\"432\":1}}],[\"从而回调\",{\"1\":{\"495\":1}}],[\"从而确保整体应用是在正常有序的状态下退出的\",{\"1\":{\"416\":1}}],[\"从而使得浏览器与服务器之间的通信始终保持稳定和高效\",{\"1\":{\"29\":1}}],[\"从内核态切换回用户态\",{\"1\":{\"396\":1}}],[\"从source\",{\"1\":{\"351\":1}}],[\"从\",{\"0\":{\"345\":1},\"1\":{\"339\":1,\"382\":2}}],[\"从机只读\",{\"1\":{\"162\":1}}],[\"从有序集合中删除元素\",{\"1\":{\"153\":1}}],[\"从集合中弹出一个随机元素\",{\"1\":{\"153\":1}}],[\"从集合中删除元素\",{\"1\":{\"153\":1}}],[\"从rabbitmq的3\",{\"1\":{\"134\":1}}],[\"从高亮结果中获取需要高亮的字段内容\",{\"1\":{\"103\":1}}],[\"从指定文件中查找指定的文本内容\",{\"1\":{\"56\":1}}],[\"从最近到最远\",{\"1\":{\"49\":1}}],[\"四\",{\"0\":{\"49\":1},\"1\":{\"272\":1}}],[\"3s\",{\"1\":{\"475\":2}}],[\"3b\",{\"1\":{\"459\":2}}],[\"3parts\",{\"1\":{\"349\":2,\"350\":1}}],[\"3个字段\",{\"1\":{\"235\":1}}],[\"39\",{\"1\":{\"70\":1,\"338\":17,\"378\":3,\"409\":1}}],[\"384\",{\"1\":{\"431\":2}}],[\"380f\",{\"1\":{\"324\":1}}],[\"38\",{\"1\":{\"70\":1,\"417\":6,\"419\":1,\"431\":2}}],[\"37\",{\"1\":{\"70\":1,\"460\":21}}],[\"36\",{\"1\":{\"70\":1,\"417\":2,\"419\":1,\"431\":1,\"460\":2}}],[\"35f983a6\",{\"1\":{\"415\":2}}],[\"35\",{\"1\":{\"70\":1,\"420\":5}}],[\"3474980866\",{\"1\":{\"362\":1}}],[\"34\",{\"1\":{\"70\":1,\"417\":1,\"428\":1}}],[\"3306\",{\"1\":{\"187\":1,\"293\":1}}],[\"33\",{\"1\":{\"70\":1}}],[\"320k\",{\"1\":{\"368\":1}}],[\"32\",{\"1\":{\"70\":1,\"351\":1,\"368\":1,\"390\":1}}],[\"31\",{\"1\":{\"70\":1,\"290\":1,\"427\":2}}],[\"30各执行一次任务\",{\"1\":{\"292\":1}}],[\"3000000\",{\"1\":{\"385\":1}}],[\"300\",{\"1\":{\"159\":1,\"480\":1}}],[\"30d\",{\"1\":{\"90\":1}}],[\"30\",{\"1\":{\"70\":1,\"292\":1,\"323\":1,\"419\":2,\"427\":1,\"428\":1,\"431\":2,\"481\":2}}],[\"3\",{\"0\":{\"137\":1,\"138\":1,\"141\":1,\"280\":1,\"342\":1,\"352\":1,\"353\":1,\"362\":1,\"363\":2,\"364\":1,\"376\":1,\"395\":1,\"398\":1,\"406\":1,\"411\":1,\"414\":1,\"415\":1,\"421\":1,\"425\":2,\"432\":1,\"433\":1,\"436\":1,\"455\":1,\"464\":1,\"468\":1,\"469\":1,\"470\":1,\"471\":2,\"472\":1,\"473\":1,\"474\":1,\"482\":1,\"487\":1,\"490\":1,\"498\":1},\"1\":{\"48\":1,\"62\":1,\"70\":1,\"79\":1,\"130\":1,\"140\":1,\"144\":1,\"153\":1,\"213\":1,\"232\":1,\"245\":1,\"248\":1,\"254\":2,\"267\":1,\"291\":1,\"292\":1,\"302\":1,\"323\":2,\"338\":1,\"341\":2,\"347\":2,\"349\":5,\"350\":2,\"368\":1,\"369\":1,\"378\":2,\"382\":1,\"385\":1,\"390\":1,\"396\":1,\"397\":1,\"399\":1,\"407\":2,\"410\":2,\"411\":2,\"417\":12,\"422\":2,\"424\":2,\"431\":2,\"432\":10,\"438\":3,\"439\":1,\"440\":4,\"442\":7,\"445\":5,\"446\":4,\"453\":7,\"454\":10,\"457\":1,\"458\":25,\"459\":23,\"460\":25,\"462\":1,\"463\":1,\"466\":2,\"467\":2,\"475\":1,\"478\":3,\"481\":1,\"492\":1,\"495\":14,\"498\":1}}],[\"提供的\",{\"1\":{\"496\":1}}],[\"提供两个实现\",{\"1\":{\"478\":1}}],[\"提供异步能力\",{\"1\":{\"465\":1}}],[\"提供了非池化的\",{\"1\":{\"446\":1}}],[\"提供了\",{\"1\":{\"415\":2}}],[\"提供了一个拦截器接口\",{\"1\":{\"185\":1}}],[\"提供支持\",{\"1\":{\"398\":1}}],[\"提供负载均衡等\",{\"1\":{\"88\":1}}],[\"提高数据库操作的性能\",{\"1\":{\"219\":1}}],[\"提高性能\",{\"1\":{\"219\":1}}],[\"提高效率而生\",{\"1\":{\"211\":1}}],[\"提高传输效率\",{\"1\":{\"90\":1}}],[\"提高网站性能和安全性\",{\"1\":{\"88\":1}}],[\"提交首个任务\",{\"1\":{\"496\":1}}],[\"提交任务代码\",{\"1\":{\"496\":1}}],[\"提交\",{\"1\":{\"48\":1}}],[\"提示\",{\"0\":{\"413\":1},\"1\":{\"35\":1,\"58\":1}}],[\"把要调用的代码封装为一个任务对象\",{\"1\":{\"418\":1}}],[\"把\",{\"1\":{\"385\":1,\"413\":4}}],[\"把多出来的内容写入新的数组\",{\"1\":{\"383\":1}}],[\"把这条完整消息存入新的\",{\"1\":{\"382\":1}}],[\"把用户传过来的token\",{\"1\":{\"277\":1}}],[\"把表中字段和实体类对应\",{\"1\":{\"215\":1}}],[\"把每个服务中的公共配置抽取出来\",{\"1\":{\"187\":1}}],[\"把文件添加add和提交commit到版本库\",{\"0\":{\"48\":1}}],[\"把新建的分支yyy上传\",{\"1\":{\"46\":1}}],[\"三大组件\",{\"0\":{\"330\":1}}],[\"三个不同的redis\",{\"1\":{\"162\":1}}],[\"三\",{\"0\":{\"48\":1},\"1\":{\"213\":1,\"272\":1}}],[\"则抛出异常\",{\"1\":{\"459\":1}}],[\"则需要发送\",{\"1\":{\"455\":4}}],[\"则需要配置\",{\"1\":{\"163\":1}}],[\"则进行延迟发送\",{\"1\":{\"455\":1}}],[\"则扩容后\",{\"1\":{\"439\":2}}],[\"则选择下一个\",{\"1\":{\"439\":2}}],[\"则可以重用池中\",{\"1\":{\"436\":1}}],[\"则每次都得创建新的\",{\"1\":{\"436\":1}}],[\"则仅会打印\",{\"1\":{\"432\":4}}],[\"则影响\",{\"1\":{\"382\":1}}],[\"则用来缓冲读写数据\",{\"1\":{\"331\":1}}],[\"则变成搜索\",{\"1\":{\"315\":1}}],[\"则会被记录到慢查询日志中\",{\"1\":{\"244\":1}}],[\"则会自动生成id\",{\"1\":{\"98\":1}}],[\"则所有profile共享该配置\",{\"1\":{\"188\":1}}],[\"则该实例客观下线\",{\"1\":{\"163\":1}}],[\"则主观认为该实例下线\",{\"1\":{\"163\":1}}],[\"则执行bgsave\",{\"1\":{\"159\":1}}],[\"则新建一个\",{\"1\":{\"153\":1}}],[\"则立刻更新订单状态为已支付即可\",{\"1\":{\"145\":1}}],[\"则sql匹配不到数据\",{\"1\":{\"144\":1}}],[\"则是指同一个业务\",{\"1\":{\"142\":1}}],[\"则回退\",{\"1\":{\"49\":1}}],[\"则使用ls\",{\"1\":{\"47\":1}}],[\"则列举包含指定前缀的文件\",{\"1\":{\"7\":1}}],[\"则列举存储空间下的所有文件\",{\"1\":{\"7\":1}}],[\"$3\",{\"1\":{\"463\":5}}],[\"$http\",{\"1\":{\"90\":3}}],[\"$body\",{\"1\":{\"90\":1}}],[\"$time\",{\"1\":{\"90\":1}}],[\"$request\",{\"1\":{\"90\":1}}],[\"$remote\",{\"1\":{\"90\":2}}],[\"$refs\",{\"1\":{\"37\":1}}],[\"$status\",{\"1\":{\"90\":1}}],[\"$s\",{\"1\":{\"70\":2}}],[\"$user\",{\"1\":{\"62\":1}}],[\"$correct\",{\"1\":{\"52\":6}}],[\"$git\",{\"1\":{\"52\":2}}],[\"$\",{\"1\":{\"47\":4,\"48\":3,\"49\":8,\"50\":4,\"51\":11,\"70\":1,\"90\":1,\"187\":5,\"197\":5,\"260\":1}}],[\"分隔符\",{\"1\":{\"459\":1}}],[\"分隔的数据\",{\"1\":{\"351\":1}}],[\"分为入站\",{\"1\":{\"432\":1}}],[\"分为6个域\",{\"1\":{\"289\":1}}],[\"分别用下面两个参数来控制\",{\"1\":{\"481\":1}}],[\"分别要等待\",{\"1\":{\"424\":1}}],[\"分别修改发送字符串为\",{\"1\":{\"417\":2}}],[\"分别为\",{\"1\":{\"393\":1}}],[\"分两组选择器\",{\"1\":{\"388\":1}}],[\"分配合适的\",{\"1\":{\"382\":1}}],[\"分配空间\",{\"0\":{\"343\":1},\"1\":{\"343\":1}}],[\"分散读取\",{\"1\":{\"349\":1}}],[\"分钟才能执行工作\",{\"1\":{\"424\":1}}],[\"分钟\",{\"1\":{\"290\":1,\"424\":2}}],[\"分\",{\"1\":{\"289\":1,\"413\":1,\"457\":1}}],[\"分组后的列只有待分组的字段和聚合函数\",{\"1\":{\"229\":1}}],[\"分组后条件列表\",{\"1\":{\"225\":1}}],[\"分组查询\",{\"0\":{\"229\":1},\"1\":{\"225\":1}}],[\"分组字段列表\",{\"1\":{\"225\":1}}],[\"分布式协调框架\",{\"1\":{\"406\":1}}],[\"分布式事务\",{\"0\":{\"194\":1}}],[\"分布式缓存\",{\"1\":{\"161\":1}}],[\"分布式锁\",{\"0\":{\"38\":1}}],[\"分割\",{\"1\":{\"119\":1}}],[\"分页查询\",{\"0\":{\"231\":1},\"1\":{\"225\":1}}],[\"分页\",{\"0\":{\"217\":1},\"1\":{\"103\":1,\"225\":1}}],[\"分页+排序\",{\"1\":{\"99\":1}}],[\"分模块\",{\"0\":{\"81\":1}}],[\"分支管理\",{\"0\":{\"46\":1}}],[\"二者均为全双工\",{\"1\":{\"392\":1}}],[\"二进制协议是redis自定义的序列化格式\",{\"1\":{\"154\":1}}],[\"二\",{\"0\":{\"46\":1,\"47\":1},\"1\":{\"213\":1,\"272\":1}}],[\"一些检查\",{\"1\":{\"495\":1,\"498\":1}}],[\"一位私塾先生到一家任教\",{\"1\":{\"462\":1}}],[\"一种解读\",{\"1\":{\"462\":1}}],[\"一种思路是首先分配一个较小的\",{\"1\":{\"383\":1}}],[\"一种思路是固定消息长度\",{\"1\":{\"382\":1}}],[\"一种思想\",{\"1\":{\"254\":1}}],[\"一样切换读写模式\",{\"1\":{\"447\":1}}],[\"一直向前传\",{\"1\":{\"441\":1}}],[\"一条线是继承自\",{\"1\":{\"415\":1}}],[\"一条消息\",{\"1\":{\"116\":1}}],[\"一次事件会触发一次\",{\"1\":{\"499\":1}}],[\"一次事件内会触发多次\",{\"1\":{\"499\":1}}],[\"一次无法写完例子\",{\"0\":{\"385\":1}}],[\"一次性提交多个文件\",{\"1\":{\"48\":1}}],[\"一个学年段亦告结束\",{\"1\":{\"462\":1}}],[\"一个病人看完了\",{\"1\":{\"424\":1}}],[\"一个数组不够\",{\"1\":{\"383\":1}}],[\"一个线程配合\",{\"1\":{\"371\":1}}],[\"一个线程\",{\"1\":{\"368\":2,\"393\":1}}],[\"一个调度容器中可以注册多个\",{\"1\":{\"246\":1}}],[\"一开始需要树立正确的观念\",{\"1\":{\"413\":1}}],[\"一开始\",{\"1\":{\"340\":1}}],[\"一张图片大概3m\",{\"1\":{\"303\":1}}],[\"一起使用\",{\"1\":{\"302\":1,\"373\":1,\"467\":1,\"478\":1}}],[\"一套玩转mybatis\",{\"1\":{\"211\":1}}],[\"一旦超时会退出\",{\"1\":{\"496\":1}}],[\"一旦\",{\"1\":{\"370\":1}}],[\"一旦表中的数据发生改变\",{\"1\":{\"237\":1}}],[\"一旦消息处理失败才能重新投递消息\",{\"1\":{\"138\":1}}],[\"一旦发生上述情况\",{\"1\":{\"138\":1}}],[\"一旦出现消息堆积问题\",{\"1\":{\"134\":1}}],[\"一页几条数据\",{\"1\":{\"99\":1}}],[\"一\",{\"0\":{\"45\":1},\"1\":{\"213\":1,\"272\":1}}],[\"一般为\",{\"1\":{\"455\":1,\"499\":1}}],[\"一般需要将\",{\"1\":{\"441\":1}}],[\"一般会调用\",{\"1\":{\"415\":1}}],[\"一般\",{\"1\":{\"258\":1}}],[\"一般对象都是直接通过new出来\",{\"1\":{\"254\":1}}],[\"一般reject方式用的较少\",{\"1\":{\"139\":1}}],[\"一般间隔在100毫秒左右\",{\"1\":{\"133\":1}}],[\"一般当我们重写了某个库中的某个组件后\",{\"1\":{\"22\":1}}],[\"一般情况下\",{\"1\":{\"17\":1,\"131\":1,\"441\":1}}],[\"一般情况下我们会使用\",{\"1\":{\"11\":1}}],[\"一般在一个项目中也会有一些标记了\",{\"1\":{\"13\":1}}],[\"一般来说\",{\"1\":{\"12\":1}}],[\"添加的任务的线程需要负责唤醒\",{\"1\":{\"496\":1}}],[\"添加任务\",{\"1\":{\"496\":1}}],[\"添加初始化器\",{\"1\":{\"495\":1}}],[\"添加回调\",{\"1\":{\"425\":1}}],[\"添加单元格到表格\",{\"1\":{\"323\":1}}],[\"添加到doc中\",{\"1\":{\"321\":1}}],[\"添加要写入的内容\",{\"1\":{\"320\":1}}],[\"添加字体失败\",{\"1\":{\"319\":1}}],[\"添加用户时出现异常\",{\"1\":{\"219\":2}}],[\"添加用户\",{\"1\":{\"219\":1}}],[\"添加一行数据\",{\"1\":{\"323\":1}}],[\"添加一行配置\",{\"1\":{\"162\":1}}],[\"添加一个策略\",{\"1\":{\"137\":1}}],[\"添加内容\",{\"1\":{\"140\":1}}],[\"添加x\",{\"1\":{\"135\":1,\"136\":1}}],[\"添加下面的内容\",{\"1\":{\"130\":1}}],[\"添加多个\",{\"1\":{\"102\":1}}],[\"添加文档\",{\"1\":{\"102\":1}}],[\"添加\",{\"0\":{\"208\":1},\"1\":{\"48\":1,\"411\":1,\"498\":1}}],[\"添加apioperiation注解的被扫描\",{\"1\":{\"43\":1}}],[\"添加注解的类的可以是任意的配置类\",{\"1\":{\"24\":1}}],[\"搭建sentinel集群\",{\"1\":{\"163\":1}}],[\"搭建\",{\"0\":{\"43\":1}}],[\"6a\",{\"1\":{\"458\":8,\"459\":22,\"460\":18}}],[\"62\",{\"1\":{\"458\":2,\"459\":6,\"460\":18}}],[\"6b\",{\"1\":{\"417\":2,\"460\":1}}],[\"67\",{\"1\":{\"417\":4,\"458\":6,\"459\":14,\"460\":4}}],[\"61\",{\"1\":{\"399\":1,\"417\":6,\"458\":8,\"459\":2,\"460\":18}}],[\"6c\",{\"1\":{\"378\":3,\"390\":2,\"417\":2}}],[\"69\",{\"1\":{\"350\":1,\"417\":4,\"458\":10,\"459\":14,\"460\":28}}],[\"66\",{\"1\":{\"350\":2,\"458\":8,\"459\":4,\"460\":26}}],[\"666\",{\"1\":{\"98\":1,\"213\":2,\"265\":1}}],[\"68\",{\"1\":{\"349\":1,\"378\":1,\"390\":1,\"417\":2,\"458\":2,\"459\":8,\"460\":4}}],[\"6e\",{\"1\":{\"349\":1,\"417\":6}}],[\"6f\",{\"1\":{\"349\":2,\"350\":1,\"378\":2,\"390\":1}}],[\"64\",{\"1\":{\"368\":1,\"378\":1,\"458\":2,\"459\":4,\"460\":16}}],[\"6442450941\",{\"1\":{\"362\":1}}],[\"64kib\",{\"1\":{\"341\":1}}],[\"64mb\",{\"1\":{\"160\":1}}],[\"63641\",{\"1\":{\"459\":15}}],[\"63\",{\"1\":{\"458\":4,\"459\":6,\"460\":12}}],[\"6380\",{\"1\":{\"163\":1}}],[\"6379\",{\"1\":{\"41\":1,\"463\":1}}],[\"60b\",{\"1\":{\"459\":1}}],[\"60f82f98\",{\"1\":{\"415\":3}}],[\"60378\",{\"1\":{\"378\":1}}],[\"60367\",{\"1\":{\"378\":1}}],[\"600px\",{\"1\":{\"301\":1}}],[\"60\",{\"1\":{\"159\":1}}],[\"65535\",{\"1\":{\"455\":1}}],[\"65536\",{\"1\":{\"341\":1}}],[\"65\",{\"1\":{\"90\":1,\"349\":3,\"350\":1,\"378\":1,\"390\":1,\"459\":20,\"460\":30}}],[\"6\",{\"0\":{\"351\":1,\"387\":1,\"439\":1,\"474\":1,\"485\":1,\"493\":1},\"1\":{\"41\":1,\"70\":1,\"94\":2,\"134\":1,\"258\":1,\"274\":1,\"301\":1,\"305\":1,\"338\":1,\"341\":1,\"347\":2,\"349\":3,\"350\":2,\"378\":2,\"390\":1,\"398\":1,\"399\":1,\"410\":2,\"411\":3,\"417\":6,\"432\":9,\"438\":2,\"439\":2,\"440\":3,\"442\":6,\"445\":5,\"446\":4,\"453\":2,\"454\":3,\"457\":1,\"458\":11,\"459\":11,\"460\":11,\"466\":1,\"467\":1,\"478\":2,\"495\":1}}],[\"qian\",{\"1\":{\"264\":1}}],[\"quithandler\",{\"1\":{\"473\":1}}],[\"quit\",{\"1\":{\"470\":2}}],[\"quartz<\",{\"1\":{\"247\":1}}],[\"quartz\",{\"0\":{\"246\":1},\"1\":{\"293\":1}}],[\"queue$\",{\"1\":{\"137\":2}}],[\"queue的消息\",{\"1\":{\"136\":1}}],[\"queuebuilder\",{\"1\":{\"136\":1}}],[\"queuebinding\",{\"1\":{\"125\":2,\"126\":2,\"127\":2}}],[\"queuebind\",{\"1\":{\"114\":1,\"118\":4,\"120\":3}}],[\"queues\",{\"1\":{\"137\":2,\"139\":2,\"148\":1}}],[\"queues的模式\",{\"1\":{\"134\":1}}],[\"queuestodeclare\",{\"1\":{\"123\":1,\"124\":2,\"136\":1}}],[\"queue\",{\"1\":{\"114\":3,\"118\":8,\"120\":5,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"135\":1,\"136\":6,\"137\":2,\"139\":2,\"141\":9,\"146\":5,\"148\":1,\"481\":7}}],[\"queuedeclare\",{\"1\":{\"107\":1,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"querymycarts\",{\"1\":{\"183\":2}}],[\"query=smile\",{\"1\":{\"178\":1}}],[\"query\",{\"1\":{\"99\":5,\"171\":2,\"244\":6,\"245\":5}}],[\"querywrapper<>\",{\"1\":{\"217\":1}}],[\"querywrapper<record>\",{\"1\":{\"217\":1}}],[\"querywrapper<web>\",{\"1\":{\"40\":2}}],[\"querywrapper\",{\"1\":{\"40\":3,\"212\":8,\"217\":3}}],[\"q\",{\"1\":{\"70\":3,\"213\":3,\"218\":5,\"423\":1,\"449\":1}}],[\"q可以挂起容器\",{\"1\":{\"65\":1}}],[\"qq\",{\"1\":{\"34\":5}}],[\"密码\",{\"1\":{\"469\":1}}],[\"密码长度不能超过50\",{\"1\":{\"40\":1}}],[\"密码不能为空\",{\"1\":{\"40\":1}}],[\"使之更易用\",{\"1\":{\"407\":1}}],[\"使复杂的sql简单化\",{\"1\":{\"237\":1}}],[\"使事务回滚\",{\"1\":{\"219\":1}}],[\"使数据占用的空间更小\",{\"1\":{\"154\":1}}],[\"使得锁的使用变得简单\",{\"1\":{\"39\":1}}],[\"使用它调整超时时间\",{\"1\":{\"480\":1}}],[\"使用更流畅\",{\"1\":{\"447\":1}}],[\"使用同一块底层内存\",{\"1\":{\"443\":1}}],[\"使用上一个处理器的处理结果\",{\"1\":{\"410\":1}}],[\"使用的就是直接内存了\",{\"1\":{\"441\":1}}],[\"使用的是\",{\"1\":{\"441\":1}}],[\"使用的是操作系统内存\",{\"1\":{\"397\":1}}],[\"使用的线程都是守护线程\",{\"1\":{\"400\":1}}],[\"使用的还是\",{\"1\":{\"397\":1}}],[\"使用如下方式写入\",{\"1\":{\"350\":1}}],[\"使用如下方式读取\",{\"1\":{\"349\":1}}],[\"使用xpath表达式\",{\"1\":{\"328\":1}}],[\"使用jaxp\",{\"0\":{\"328\":1}}],[\"使用itext\",{\"1\":{\"320\":1}}],[\"使用无头模式\",{\"1\":{\"302\":1}}],[\"使用起来和其他测试框架类似\",{\"1\":{\"301\":1}}],[\"使用最新的\",{\"1\":{\"297\":1}}],[\"使用半角逗号\",{\"1\":{\"289\":1}}],[\"使用别人现成的action完成需要的操作\",{\"1\":{\"288\":1}}],[\"使用视图查询数据时\",{\"1\":{\"237\":1}}],[\"使用线程存储数据\",{\"0\":{\"184\":1}}],[\"使用redis\",{\"1\":{\"162\":1}}],[\"使用ram用户访问密钥发起请求\",{\"1\":{\"5\":1}}],[\"使用ram访问\",{\"0\":{\"5\":1}}],[\"使用mapper继承basemapper<t>即可开箱即用\",{\"1\":{\"213\":1}}],[\"使用map传递参数\",{\"0\":{\"203\":1}}],[\"使用must操作添加category字段必须等于\",{\"1\":{\"103\":1}}],[\"使用mysql命令导入\",{\"1\":{\"69\":1}}],[\"使用should操作指定至少满足一个条件的情况\",{\"1\":{\"103\":1}}],[\"使用sources命令导入\",{\"1\":{\"69\":1}}],[\"使用场景\",{\"1\":{\"87\":1,\"88\":1,\"277\":1}}],[\"使用坐标主动排除掉\",{\"1\":{\"79\":1}}],[\"使用已创建的数据库\",{\"1\":{\"69\":1}}],[\"使用cron表达式指定执行时间\",{\"0\":{\"36\":1}}],[\"使用\",{\"0\":{\"202\":1,\"282\":1,\"301\":1},\"1\":{\"14\":1,\"15\":1,\"35\":1,\"41\":1,\"47\":1,\"169\":1,\"171\":1,\"188\":1,\"217\":1,\"263\":1,\"317\":1,\"338\":1,\"360\":1,\"363\":1,\"368\":1,\"369\":1,\"389\":1,\"396\":1,\"397\":3,\"406\":1}}],[\"但除了第一个处于\",{\"1\":{\"481\":1}}],[\"但应用程序没有感知到\",{\"1\":{\"475\":1}}],[\"但要注意对于编解码器类\",{\"1\":{\"467\":1}}],[\"但要注意如果\",{\"1\":{\"359\":1}}],[\"但主人家则总是给私塾先生以白菜豆腐为菜\",{\"1\":{\"462\":1}}],[\"但通过分隔符来断句不是很好\",{\"1\":{\"462\":1}}],[\"但发生超时\",{\"1\":{\"455\":1}}],[\"但如果内容本身包含了分隔符\",{\"1\":{\"459\":1}}],[\"但如果这部分数据很少的话\",{\"1\":{\"455\":1}}],[\"但如果这么做\",{\"1\":{\"455\":1}}],[\"但如果数据报文超过\",{\"1\":{\"390\":1}}],[\"但由于接收方处理不及时且窗口大小足够大\",{\"1\":{\"455\":1}}],[\"但由于某种原因这些数据在接收时\",{\"1\":{\"351\":1}}],[\"但实际上\",{\"1\":{\"450\":1}}],[\"但又必须彻底释放\",{\"1\":{\"441\":1}}],[\"但不会改变写指针位置\",{\"1\":{\"438\":1}}],[\"但不会在处理完后从\",{\"1\":{\"379\":1}}],[\"但也要注意及时主动释放\",{\"1\":{\"435\":1}}],[\"但也不好说能保证消息100\",{\"1\":{\"145\":1}}],[\"但读写性能高\",{\"1\":{\"435\":1}}],[\"但都是要等任务结束\",{\"1\":{\"425\":1}}],[\"但只要后续病人源源不断地来\",{\"1\":{\"424\":1}}],[\"但工人与\",{\"1\":{\"417\":1}}],[\"但经过\",{\"1\":{\"413\":1}}],[\"但其底层实现还是用多路复用模拟了异步\",{\"1\":{\"398\":1}}],[\"但这样又会导致占用内存过多\",{\"1\":{\"385\":1}}],[\"但这时\",{\"1\":{\"379\":1}}],[\"但sc是null\",{\"1\":{\"369\":1}}],[\"但非阻塞模式下\",{\"1\":{\"369\":1}}],[\"但线程不必阻塞\",{\"1\":{\"369\":1}}],[\"但线程相当于闲置\",{\"1\":{\"368\":1}}],[\"但长时间\",{\"1\":{\"368\":1}}],[\"但治标不治本\",{\"1\":{\"368\":1}}],[\"但多线程下\",{\"1\":{\"368\":1}}],[\"但流量低的场景\",{\"1\":{\"337\":1}}],[\"但里面是空的\",{\"1\":{\"159\":1}}],[\"但数据的更新往往不是幂等的\",{\"1\":{\"142\":1}}],[\"但更灵活\",{\"1\":{\"139\":1}}],[\"但问题来了\",{\"1\":{\"138\":1}}],[\"但在某些特殊情况下\",{\"1\":{\"134\":1}}],[\"但有时我们希望不同的消息被不同的队列消费\",{\"1\":{\"116\":1}}],[\"但遗憾的是\",{\"1\":{\"58\":1}}],[\"但它们之间有以下区别\",{\"0\":{\"39\":1}}],[\"但是是两个接口\",{\"1\":{\"425\":1}}],[\"但是实际安装过程中\",{\"1\":{\"307\":1}}],[\"但是这个尺寸可以通过\",{\"1\":{\"301\":1}}],[\"但是这个注解如果用不好也可能出现问题\",{\"1\":{\"22\":1}}],[\"但是可以通过修改配置文件运行\",{\"1\":{\"296\":1}}],[\"但是由于判断和更新是两步动作\",{\"1\":{\"144\":1}}],[\"但是\",{\"1\":{\"142\":1,\"237\":1}}],[\"但是要通过设置policy实现\",{\"1\":{\"137\":1}}],[\"但是路由失败时\",{\"1\":{\"131\":1}}],[\"但是注解中指定的类需要是spring\",{\"1\":{\"24\":1}}],[\"但是现在b允许为null\",{\"1\":{\"21\":1}}],[\"但是现在我们如果做成一个starter\",{\"1\":{\"13\":1}}],[\"但是我们自定义的配置就没有\",{\"1\":{\"19\":1}}],[\"但是有更好的方式\",{\"1\":{\"18\":1}}],[\"每隔一段时间就检查这段时间内是否接收到客户端数据\",{\"1\":{\"475\":1}}],[\"每隔5秒生效一次\",{\"1\":{\"291\":1}}],[\"每一条消息分为\",{\"1\":{\"456\":1}}],[\"每一条消息采用分隔符\",{\"1\":{\"456\":1}}],[\"每一条消息采用固定长度\",{\"1\":{\"456\":1}}],[\"每一条消息都生成一个唯一的id\",{\"1\":{\"143\":1}}],[\"每发送一个段就需要进行一次确认应答\",{\"1\":{\"455\":1}}],[\"每位工人有任务队列\",{\"1\":{\"413\":1}}],[\"每6小时执行一次\",{\"1\":{\"305\":1}}],[\"每年3月的每个星期三下午14\",{\"1\":{\"292\":1}}],[\"每月最后一日上午10\",{\"1\":{\"292\":1}}],[\"每月15日上午10\",{\"1\":{\"292\":1}}],[\"每天上午09\",{\"1\":{\"292\":1}}],[\"每天上午10\",{\"1\":{\"292\":3}}],[\"每天中午12\",{\"1\":{\"292\":1}}],[\"每天中午12点执行任务\",{\"1\":{\"36\":1}}],[\"每小时等\",{\"1\":{\"291\":1}}],[\"每分\",{\"1\":{\"291\":1}}],[\"每的意思\",{\"1\":{\"291\":1}}],[\"每3秒\",{\"1\":{\"248\":1,\"249\":1}}],[\"每页记录数\",{\"1\":{\"231\":1}}],[\"每秒执行一次fsync\",{\"1\":{\"160\":1}}],[\"每次一个字节\",{\"1\":{\"440\":1}}],[\"每次修改都要重启服务\",{\"1\":{\"186\":1}}],[\"每次写入都执行fsync\",{\"1\":{\"160\":1}}],[\"每次消费一个\",{\"1\":{\"111\":1}}],[\"每个消息是\",{\"1\":{\"453\":1}}],[\"每个消费者有自己的队列\",{\"1\":{\"112\":1}}],[\"每个病人花费\",{\"1\":{\"424\":1}}],[\"每个线程配一个选择器\",{\"1\":{\"388\":1}}],[\"每个\",{\"1\":{\"383\":1,\"385\":1,\"415\":1,\"432\":1,\"441\":2,\"445\":1}}],[\"每个星期三中午12\",{\"1\":{\"292\":1}}],[\"每个域可以是确定的取值\",{\"1\":{\"289\":1}}],[\"每个微服务都有很多重复的配置\",{\"1\":{\"186\":1}}],[\"每个1s就会向每个实例发送ping命令\",{\"1\":{\"163\":1}}],[\"每个队列都绑定了交换机\",{\"1\":{\"112\":1}}],[\"每调用一次就会新建一个b实例\",{\"1\":{\"20\":1}}],[\"55\",{\"1\":{\"453\":5}}],[\"58177\",{\"1\":{\"453\":5}}],[\"58\",{\"1\":{\"430\":2,\"481\":1}}],[\"54\",{\"1\":{\"426\":2,\"428\":1,\"429\":2,\"431\":2}}],[\"54chensongxia\",{\"1\":{\"37\":1}}],[\"53155\",{\"1\":{\"458\":17}}],[\"53\",{\"1\":{\"426\":2,\"429\":2,\"481\":2}}],[\"57\",{\"1\":{\"430\":1}}],[\"57351\",{\"1\":{\"422\":1}}],[\"57191\",{\"1\":{\"422\":1}}],[\"52625\",{\"1\":{\"417\":6}}],[\"52612\",{\"1\":{\"417\":6}}],[\"52588\",{\"1\":{\"417\":6}}],[\"56\",{\"1\":{\"399\":3}}],[\"5622464513\",{\"1\":{\"362\":1}}],[\"5672\",{\"1\":{\"107\":1,\"108\":1,\"109\":1,\"121\":1}}],[\"59221\",{\"1\":{\"454\":7}}],[\"59\",{\"1\":{\"290\":2,\"378\":3,\"481\":1}}],[\"5个字段\",{\"1\":{\"235\":1}}],[\"513\",{\"1\":{\"439\":1}}],[\"512\",{\"1\":{\"439\":2,\"497\":1}}],[\"51\",{\"1\":{\"232\":1,\"426\":4,\"458\":2,\"460\":1}}],[\"50\",{\"1\":{\"229\":1,\"235\":2,\"417\":3,\"438\":2,\"455\":1,\"460\":1,\"496\":1}}],[\"500mb\",{\"1\":{\"65\":1}}],[\"500000l\",{\"1\":{\"497\":1}}],[\"5000ms\",{\"1\":{\"36\":1}}],[\"5000l\",{\"1\":{\"36\":1}}],[\"5000\",{\"1\":{\"35\":2,\"163\":1}}],[\"5s\",{\"1\":{\"153\":1,\"475\":2}}],[\"5m\",{\"1\":{\"90\":1}}],[\"5\",{\"0\":{\"145\":1,\"282\":1,\"350\":1,\"384\":1,\"391\":1,\"392\":1,\"393\":1,\"395\":1,\"398\":1,\"433\":1,\"438\":1,\"473\":1,\"484\":1,\"492\":1},\"1\":{\"40\":1,\"62\":1,\"70\":1,\"153\":1,\"195\":1,\"232\":2,\"245\":1,\"274\":1,\"291\":2,\"318\":2,\"322\":2,\"323\":2,\"338\":1,\"341\":1,\"347\":2,\"349\":4,\"350\":2,\"368\":1,\"369\":1,\"378\":2,\"382\":1,\"390\":1,\"399\":3,\"406\":1,\"407\":1,\"410\":2,\"411\":3,\"417\":6,\"424\":2,\"432\":3,\"438\":3,\"439\":1,\"440\":5,\"442\":8,\"445\":7,\"446\":6,\"453\":2,\"454\":3,\"457\":1,\"458\":11,\"459\":23,\"460\":11,\"466\":1,\"467\":1,\"475\":1,\"478\":2,\"495\":1,\"498\":1}}],[\"5<\",{\"1\":{\"27\":1,\"41\":1,\"195\":1}}],[\"定长字节表示内容长度\",{\"1\":{\"462\":1}}],[\"定时\",{\"0\":{\"304\":1}}],[\"定时执行\",{\"1\":{\"288\":1}}],[\"定时任务大家之前学习过\",{\"1\":{\"145\":1}}],[\"定时任务\",{\"0\":{\"35\":1},\"1\":{\"413\":1}}],[\"定期查询订单支付状态\",{\"1\":{\"145\":1}}],[\"定义bean\",{\"1\":{\"260\":1,\"267\":1,\"275\":1}}],[\"定义作业\",{\"1\":{\"248\":1,\"249\":1}}],[\"定义消息转换器\",{\"1\":{\"143\":1}}],[\"定义内部重定向\",{\"1\":{\"90\":1}}],[\"定义错误页面的处理规则\",{\"1\":{\"90\":1}}],[\"定义静态文件的处理规则\",{\"1\":{\"90\":1}}],[\"定义服务器的根目录\",{\"1\":{\"90\":1}}],[\"定义服务器名\",{\"1\":{\"90\":2}}],[\"定义\",{\"1\":{\"90\":3}}],[\"定义连接超时时间\",{\"1\":{\"90\":1}}],[\"定义发送文件的缓冲区大小\",{\"1\":{\"90\":1}}],[\"定义日志文件的存放路径和使用的日志格式\",{\"1\":{\"90\":1}}],[\"定义文件扩展名与\",{\"1\":{\"90\":1}}],[\"定义每个工作进程可以同时处理的连接数\",{\"1\":{\"90\":1}}],[\"定义了\",{\"1\":{\"90\":1}}],[\"定义工作进程数\",{\"1\":{\"90\":1}}],[\"定义运行\",{\"1\":{\"90\":1}}],[\"定义配置文件的全局块\",{\"1\":{\"90\":1}}],[\"定义一个servlet启动配置\",{\"1\":{\"267\":1}}],[\"定义一个republishmessagerecoverer\",{\"1\":{\"141\":1}}],[\"定义一个\",{\"1\":{\"15\":1,\"90\":3}}],[\"2b\",{\"1\":{\"459\":2,\"460\":2}}],[\"2^9=512\",{\"1\":{\"439\":1}}],[\"2^10=1024\",{\"1\":{\"439\":1}}],[\"2^n\",{\"1\":{\"439\":1}}],[\"2g\",{\"1\":{\"362\":1}}],[\"2f\",{\"1\":{\"323\":1}}],[\"2代表星期一\",{\"1\":{\"290\":1}}],[\"29\",{\"1\":{\"70\":1}}],[\"28\",{\"1\":{\"70\":1,\"481\":2}}],[\"27003\",{\"1\":{\"163\":1}}],[\"27\",{\"1\":{\"70\":1,\"417\":3,\"428\":1,\"431\":1}}],[\"26\",{\"1\":{\"70\":1}}],[\"24\",{\"1\":{\"70\":1,\"178\":1,\"351\":1,\"417\":2,\"453\":7,\"454\":4}}],[\"23<\",{\"1\":{\"254\":1,\"267\":1}}],[\"23\",{\"1\":{\"70\":1,\"98\":1,\"290\":1,\"454\":3}}],[\"212\",{\"1\":{\"431\":2}}],[\"2147483647\",{\"1\":{\"362\":1}}],[\"21\",{\"1\":{\"70\":1,\"218\":1,\"378\":6,\"481\":4}}],[\"20b\",{\"1\":{\"454\":1}}],[\"2013\",{\"1\":{\"407\":1}}],[\"2011\",{\"1\":{\"362\":1}}],[\"200ms\",{\"1\":{\"455\":1}}],[\"200m～400m\",{\"1\":{\"307\":1}}],[\"2000\",{\"1\":{\"417\":1,\"419\":1,\"420\":1}}],[\"20000\",{\"1\":{\"66\":1}}],[\"2008\",{\"1\":{\"407\":1}}],[\"2004\",{\"1\":{\"407\":1}}],[\"200\",{\"1\":{\"325\":2}}],[\"2020\",{\"1\":{\"481\":4}}],[\"2024\",{\"1\":{\"319\":1}}],[\"20240820154128449\",{\"1\":{\"89\":1}}],[\"2022版mybatisplus教程\",{\"1\":{\"211\":1}}],[\"2023\",{\"1\":{\"182\":1}}],[\"20t17\",{\"1\":{\"178\":1}}],[\"20t06\",{\"1\":{\"178\":1}}],[\"20\",{\"1\":{\"64\":11,\"65\":3,\"70\":1,\"153\":2,\"417\":16,\"420\":1,\"424\":1,\"454\":1,\"455\":2,\"481\":4}}],[\"20l\",{\"1\":{\"40\":1}}],[\"22\",{\"1\":{\"62\":1,\"66\":1,\"70\":1,\"218\":1,\"417\":30,\"419\":2,\"420\":5}}],[\"256\",{\"1\":{\"341\":6,\"455\":3}}],[\"25\",{\"1\":{\"62\":1,\"70\":1,\"417\":3}}],[\"2\",{\"0\":{\"131\":1,\"132\":1,\"133\":1,\"134\":2,\"135\":2,\"136\":3,\"137\":2,\"139\":1,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"144\":2,\"145\":1,\"279\":1,\"285\":1,\"332\":1,\"338\":1,\"339\":1,\"340\":2,\"342\":1,\"349\":1,\"350\":1,\"351\":1,\"362\":1,\"371\":1,\"393\":1,\"405\":1,\"408\":1,\"409\":1,\"410\":2,\"411\":1,\"412\":1,\"421\":1,\"435\":1,\"454\":1,\"461\":1,\"462\":1,\"463\":2,\"464\":1,\"465\":1,\"470\":1,\"479\":1,\"481\":1,\"489\":1,\"494\":1,\"495\":1,\"496\":2,\"498\":1,\"499\":1},\"1\":{\"34\":1,\"37\":1,\"43\":1,\"68\":1,\"69\":1,\"70\":1,\"90\":1,\"94\":2,\"99\":1,\"141\":1,\"143\":1,\"144\":3,\"153\":7,\"163\":2,\"213\":2,\"238\":2,\"245\":1,\"254\":1,\"288\":1,\"291\":1,\"302\":1,\"318\":1,\"322\":1,\"323\":4,\"338\":1,\"341\":1,\"347\":2,\"349\":3,\"350\":2,\"365\":2,\"368\":1,\"369\":1,\"378\":2,\"382\":3,\"388\":1,\"390\":1,\"397\":3,\"398\":1,\"399\":3,\"407\":1,\"410\":2,\"411\":2,\"415\":2,\"417\":25,\"419\":2,\"420\":5,\"422\":4,\"423\":1,\"424\":1,\"431\":2,\"432\":9,\"434\":1,\"438\":3,\"439\":1,\"440\":4,\"442\":8,\"445\":5,\"446\":4,\"453\":2,\"454\":3,\"457\":1,\"458\":18,\"459\":18,\"460\":18,\"463\":1,\"466\":3,\"467\":2,\"470\":3,\"478\":4,\"481\":6,\"492\":1,\"495\":18,\"498\":1}}],[\"49979\",{\"1\":{\"460\":17}}],[\"49\",{\"1\":{\"427\":3,\"454\":2}}],[\"4b\",{\"1\":{\"417\":2,\"459\":1}}],[\"48\",{\"1\":{\"417\":5}}],[\"44\",{\"1\":{\"399\":3,\"454\":7}}],[\"443\",{\"1\":{\"90\":2}}],[\"4k\",{\"1\":{\"383\":2}}],[\"46\",{\"1\":{\"453\":2}}],[\"460f\",{\"1\":{\"324\":1}}],[\"465\",{\"1\":{\"34\":1}}],[\"4352\",{\"1\":{\"455\":1}}],[\"43\",{\"1\":{\"235\":1,\"454\":2}}],[\"457\",{\"1\":{\"232\":1}}],[\"456871865468\",{\"1\":{\"232\":1}}],[\"47499c2a\",{\"1\":{\"431\":2}}],[\"47\",{\"1\":{\"178\":1}}],[\"47f4c019880711ebb6edd017c2d2eca2\",{\"1\":{\"34\":1}}],[\"4294967294\",{\"1\":{\"362\":1}}],[\"42\",{\"1\":{\"70\":1,\"178\":1}}],[\"41\",{\"1\":{\"70\":1,\"182\":1,\"428\":1,\"455\":1}}],[\"404\",{\"1\":{\"90\":3}}],[\"40\",{\"1\":{\"70\":1,\"292\":1,\"417\":3,\"455\":1}}],[\"4\",{\"0\":{\"142\":1,\"143\":1,\"144\":1,\"281\":1,\"349\":1,\"364\":1,\"366\":1,\"367\":1,\"371\":1,\"376\":1,\"378\":2,\"384\":1,\"387\":1,\"390\":1,\"407\":1,\"412\":1,\"432\":1,\"437\":1,\"448\":1,\"449\":1,\"456\":1,\"465\":1,\"472\":1,\"483\":1,\"491\":1,\"499\":1},\"1\":{\"70\":1,\"153\":2,\"182\":1,\"188\":1,\"245\":1,\"254\":1,\"291\":1,\"301\":1,\"338\":2,\"340\":2,\"341\":8,\"347\":2,\"349\":3,\"350\":4,\"368\":1,\"369\":1,\"378\":2,\"381\":1,\"382\":1,\"385\":2,\"390\":1,\"396\":1,\"397\":1,\"399\":1,\"407\":1,\"410\":2,\"411\":2,\"417\":24,\"424\":5,\"431\":2,\"432\":3,\"434\":1,\"436\":2,\"438\":6,\"439\":1,\"440\":7,\"442\":7,\"445\":5,\"446\":4,\"453\":2,\"454\":3,\"457\":1,\"458\":11,\"459\":11,\"460\":11,\"466\":5,\"467\":4,\"478\":5,\"481\":2,\"492\":1,\"495\":3,\"498\":1}}],[\"知道发件人把该邮件抄送给了另外哪些人\",{\"1\":{\"34\":1}}],[\"抄送人\",{\"1\":{\"34\":1}}],[\"抄送\",{\"1\":{\"34\":1}}],[\"8b\",{\"1\":{\"417\":2,\"458\":10,\"460\":1}}],[\"8k\",{\"1\":{\"383\":2}}],[\"837bpgx2vwwq\",{\"1\":{\"293\":1}}],[\"8秒\",{\"1\":{\"291\":1}}],[\"8888\",{\"1\":{\"450\":2,\"481\":2}}],[\"880\",{\"1\":{\"213\":2}}],[\"8848\",{\"1\":{\"167\":2,\"168\":1,\"169\":1,\"176\":1,\"187\":1}}],[\"80b\",{\"1\":{\"458\":1}}],[\"800px\",{\"1\":{\"301\":1}}],[\"80\",{\"1\":{\"88\":1,\"89\":1,\"90\":2,\"213\":1,\"434\":1}}],[\"80时\",{\"1\":{\"88\":1}}],[\"8080\",{\"1\":{\"86\":2,\"368\":2,\"369\":1,\"376\":2,\"378\":4,\"382\":2,\"385\":2,\"388\":1,\"401\":1,\"410\":1,\"411\":1,\"417\":21,\"422\":6,\"423\":1,\"432\":2,\"449\":2,\"453\":8,\"454\":8,\"457\":1,\"464\":1,\"470\":2,\"478\":1,\"480\":1,\"488\":2,\"490\":1,\"492\":1,\"495\":1}}],[\"8090\",{\"1\":{\"62\":2,\"190\":3}}],[\"8<\",{\"1\":{\"85\":2}}],[\"8\",{\"0\":{\"441\":1},\"1\":{\"34\":1,\"62\":1,\"69\":1,\"70\":1,\"85\":2,\"338\":1,\"341\":1,\"347\":5,\"349\":3,\"350\":2,\"362\":1,\"364\":2,\"378\":2,\"390\":2,\"399\":1,\"411\":2,\"417\":6,\"424\":3,\"438\":3,\"439\":1,\"440\":4,\"442\":6,\"445\":5,\"446\":3,\"453\":2,\"454\":3,\"457\":1,\"458\":15,\"459\":11,\"460\":11,\"466\":1,\"467\":1,\"478\":4,\"495\":1}}],[\"邮件配置\",{\"1\":{\"34\":1}}],[\"导出pdf\",{\"0\":{\"317\":1}}],[\"导出完整数据库\",{\"0\":{\"68\":1}}],[\"导致不断空轮询\",{\"1\":{\"497\":1}}],[\"导致服务内的其它接口受到影响\",{\"1\":{\"192\":1}}],[\"导致mq的消息处理飙升\",{\"1\":{\"140\":1}}],[\"导致与mq的连接中断\",{\"1\":{\"130\":1}}],[\"导致数据传输效率较低\",{\"1\":{\"33\":1}}],[\"导入\",{\"1\":{\"254\":1}}],[\"导入sql文件\",{\"1\":{\"69\":1}}],[\"导入数据库\",{\"0\":{\"69\":1}}],[\"导入方式\",{\"0\":{\"14\":1}}],[\"甚至包括ie6\",{\"1\":{\"32\":1}}],[\"跨浏览器\",{\"1\":{\"32\":1}}],[\"跨域放行\",{\"1\":{\"5\":1}}],[\"可读或可接入事件\",{\"1\":{\"497\":1}}],[\"可读写事件的监控\",{\"1\":{\"370\":1}}],[\"可是后来也就想通了\",{\"1\":{\"462\":1}}],[\"可配合\",{\"1\":{\"392\":1}}],[\"可写事件\",{\"1\":{\"497\":1}}],[\"可写\",{\"1\":{\"370\":1,\"375\":1}}],[\"可根据需要调整时间\",{\"1\":{\"305\":1}}],[\"可执行文件的路径即可\",{\"1\":{\"302\":1}}],[\"可被其它语句引用的可重用语句块\",{\"1\":{\"196\":1}}],[\"可选值\",{\"1\":{\"163\":1}}],[\"可选依赖\",{\"0\":{\"78\":1},\"1\":{\"78\":1}}],[\"可能会导致丢失这1s数据\",{\"1\":{\"160\":1}}],[\"可能会导致资源浪费和性能问题\",{\"1\":{\"31\":1}}],[\"可能查询到的支付状态也不正确\",{\"1\":{\"145\":1}}],[\"可能出现的故障有很多\",{\"1\":{\"138\":1}}],[\"可靠性\",{\"1\":{\"32\":1}}],[\"可以提高遍历性能\",{\"1\":{\"497\":1}}],[\"可以提高网络效率\",{\"1\":{\"90\":1}}],[\"可以通过\",{\"1\":{\"481\":1}}],[\"可以通过下面源码查看默认大小\",{\"1\":{\"481\":1}}],[\"可以通过下面的系统环境变量来设置\",{\"1\":{\"436\":1}}],[\"可以通过下面三种方法来监听是否有事件发生\",{\"1\":{\"374\":1}}],[\"可以根据\",{\"1\":{\"478\":1}}],[\"可以是\",{\"1\":{\"478\":1}}],[\"可以继承\",{\"1\":{\"467\":1}}],[\"可以由此扩展\",{\"1\":{\"465\":1}}],[\"可以支持协议的升级\",{\"1\":{\"465\":1}}],[\"可以重用池中\",{\"1\":{\"447\":1}}],[\"可以循环调用\",{\"1\":{\"441\":1}}],[\"可以在\",{\"1\":{\"440\":1}}],[\"可以同时作为入站和出站处理器\",{\"1\":{\"475\":2}}],[\"可以同时在客户端和服务器端发送和接收消息\",{\"1\":{\"30\":1}}],[\"可以同步等待任务结束得到结果\",{\"1\":{\"425\":1}}],[\"可以计算一下\",{\"1\":{\"424\":1}}],[\"可以用来包装\",{\"1\":{\"446\":1}}],[\"可以用来关闭\",{\"1\":{\"421\":1}}],[\"可以用来执行定时任务\",{\"1\":{\"420\":1}}],[\"可以用来执行耗时较长的任务\",{\"1\":{\"419\":1}}],[\"可以用来设置段落的某些文本样式\",{\"1\":{\"322\":1}}],[\"可以为每道工序指定不同的工人\",{\"1\":{\"413\":1}}],[\"可以进行数据读写操作\",{\"1\":{\"411\":1}}],[\"可以简单理解为\",{\"1\":{\"410\":1}}],[\"可以看到接收的消息被分为两节\",{\"1\":{\"454\":1}}],[\"可以看到一次就接收了\",{\"1\":{\"453\":1}}],[\"可以看到两个工人轮流处理\",{\"1\":{\"417\":1}}],[\"可以看到\",{\"1\":{\"397\":1,\"399\":1,\"417\":1,\"432\":1}}],[\"可以看到中间环节较多\",{\"1\":{\"396\":1}}],[\"可以看到3次\",{\"1\":{\"49\":1}}],[\"可以去执行其它\",{\"1\":{\"369\":1}}],[\"可以采用线程池技术来减少线程数和线程上下文切换\",{\"1\":{\"368\":1}}],[\"可以调用\",{\"1\":{\"345\":1,\"361\":1}}],[\"可以从\",{\"1\":{\"331\":1}}],[\"可以加速等值查询\",{\"1\":{\"236\":1}}],[\"可以使用下面的代码来创建池化基于堆的\",{\"1\":{\"435\":1}}],[\"可以使用\",{\"1\":{\"303\":1,\"343\":1,\"397\":1}}],[\"可以使用两个表之间的联系去除无用数据\",{\"1\":{\"235\":1}}],[\"可以使用以下命令找到导出的数据库\",{\"1\":{\"68\":1}}],[\"可以把id拿出来\",{\"1\":{\"208\":1}}],[\"可以暂时切断对下游服务的调用\",{\"1\":{\"193\":1}}],[\"可以省略\",{\"1\":{\"188\":1}}],[\"可以添加更多的\",{\"1\":{\"163\":1}}],[\"可以设置日志级别\",{\"1\":{\"163\":1}}],[\"可以设置一些影响\",{\"1\":{\"90\":1}}],[\"可以将多个\",{\"1\":{\"350\":1,\"445\":1}}],[\"可以将数据填充至多个\",{\"1\":{\"349\":1}}],[\"可以将日志输出到指定的文件\",{\"1\":{\"163\":1}}],[\"可以将当前用户加入安装中自动创建的docker用户组如何在\",{\"1\":{\"62\":1}}],[\"可以让aof文件执行重写功能\",{\"1\":{\"160\":1}}],[\"可以执行\",{\"1\":{\"160\":1}}],[\"可以发现即使不写入数据\",{\"1\":{\"450\":1}}],[\"可以发现\",{\"1\":{\"140\":1}}],[\"可以发现此时消息状态为unacked\",{\"1\":{\"139\":2}}],[\"可以发现这些自带的starter的名称格式都是spring\",{\"1\":{\"12\":1}}],[\"可以基于命令行设置policy\",{\"1\":{\"137\":1}}],[\"可以被索引\",{\"1\":{\"99\":1}}],[\"可以被分词查询\",{\"1\":{\"99\":1}}],[\"可以很好地存储和查询文档\",{\"1\":{\"94\":1}}],[\"可以自动扩容\",{\"1\":{\"447\":1}}],[\"可以自动降级为支持长轮询等传输方式的\",{\"1\":{\"29\":1}}],[\"可以自定义\",{\"1\":{\"137\":1}}],[\"可以自定义日志格式\",{\"1\":{\"90\":1}}],[\"可以指定日志文件的存放路径和日志级别\",{\"1\":{\"90\":1}}],[\"可以指定在servlet或reactive环境中生效\",{\"1\":{\"23\":1}}],[\"可以取消当前正在执行的命令\",{\"1\":{\"70\":1}}],[\"可以保证数据的可靠性\",{\"1\":{\"32\":1}}],[\"可以有效降低accesskey泄露的风险\",{\"1\":{\"5\":1}}],[\"需要分两种情况来看\",{\"1\":{\"495\":1}}],[\"需要从协议的字节中得到是哪种序列化算法\",{\"1\":{\"478\":1}}],[\"需要将传入的正文数据还原成\",{\"1\":{\"478\":1}}],[\"需要将\",{\"1\":{\"478\":1}}],[\"需要释放\",{\"1\":{\"449\":3}}],[\"需要更复杂的规则来回收内存\",{\"1\":{\"441\":1}}],[\"需要特殊的方法来回收内存\",{\"1\":{\"441\":1}}],[\"需要再次\",{\"1\":{\"401\":1}}],[\"需要再次调用\",{\"1\":{\"401\":2}}],[\"需要扩容\",{\"1\":{\"382\":1}}],[\"需要提前分配\",{\"1\":{\"382\":1}}],[\"需要我们自己编码删除\",{\"1\":{\"379\":1}}],[\"需要多线程支持\",{\"1\":{\"368\":1}}],[\"需要多个sentinel\",{\"1\":{\"163\":1}}],[\"需要用\",{\"1\":{\"364\":1}}],[\"需要结合服务器的设计演化来理解它的用途\",{\"1\":{\"332\":1}}],[\"需要自己构建协议\",{\"1\":{\"407\":1}}],[\"需要自己在业务代码中调用api\",{\"1\":{\"139\":1}}],[\"需要自己实现保证操作的原子性\",{\"1\":{\"39\":1}}],[\"需要知道消费者的处理状态如何\",{\"1\":{\"138\":1}}],[\"需要通过配置文件来开启\",{\"1\":{\"131\":1}}],[\"需要经过的流程是这样的\",{\"1\":{\"129\":1}}],[\"需要退出服务器\",{\"1\":{\"62\":1}}],[\"需要使用polyfill或其他技术\",{\"1\":{\"31\":1}}],[\"需要手动添加注解来启用\",{\"1\":{\"14\":1}}],[\"对应\",{\"1\":{\"495\":1}}],[\"对应的包名可能就扫不到了\",{\"1\":{\"13\":1}}],[\"对方用户不存在或者不在线\",{\"1\":{\"471\":1}}],[\"对齐填充\",{\"1\":{\"466\":1,\"467\":1,\"478\":1}}],[\"对某些数据包又显得不够\",{\"1\":{\"458\":1}}],[\"对外是一个虚拟视图\",{\"1\":{\"445\":1}}],[\"对原始\",{\"1\":{\"441\":1,\"442\":1}}],[\"对自己感兴趣的事件进行处理\",{\"1\":{\"413\":1}}],[\"对\",{\"1\":{\"290\":1,\"407\":1}}],[\"对有序集合中指定元素的分数进行增加\",{\"1\":{\"153\":1}}],[\"对于\",{\"1\":{\"441\":1}}],[\"对于已经存在的队列\",{\"1\":{\"137\":1}}],[\"对于老的浏览器\",{\"1\":{\"31\":1}}],[\"对比数据库\",{\"1\":{\"94\":1}}],[\"对象异步接收结果线程\",{\"1\":{\"492\":1}}],[\"对象变为要传输的数据\",{\"1\":{\"478\":1}}],[\"对象还在\",{\"1\":{\"441\":1}}],[\"对象的初始计数为\",{\"1\":{\"441\":1}}],[\"对象中不能\",{\"1\":{\"422\":1}}],[\"对象被垃圾回收\",{\"1\":{\"397\":1}}],[\"对象仅维护了此内存的虚引用\",{\"1\":{\"397\":1}}],[\"对象\",{\"1\":{\"37\":1,\"411\":1,\"422\":3,\"423\":1,\"441\":1,\"478\":1,\"492\":2,\"493\":1}}],[\"因处理不当导致异常\",{\"1\":{\"138\":1}}],[\"因此会触发多次\",{\"1\":{\"499\":1}}],[\"因此下面的\",{\"1\":{\"496\":1}}],[\"因此使用了一个原子布尔对象\",{\"1\":{\"496\":1}}],[\"因此策略就可以定为\",{\"1\":{\"475\":1}}],[\"因此为了提高网络利用率\",{\"1\":{\"455\":1}}],[\"因此以太网\",{\"1\":{\"455\":1}}],[\"因此无论读写\",{\"1\":{\"444\":1}}],[\"因此无法路由\",{\"1\":{\"131\":1}}],[\"因此执行到\",{\"1\":{\"422\":1}}],[\"因此包含了线程池中所有的方法\",{\"1\":{\"415\":1}}],[\"因此内存地址固定\",{\"1\":{\"397\":1}}],[\"因此又得从用户态切换至内核态\",{\"1\":{\"396\":1}}],[\"因此应当只在\",{\"1\":{\"386\":1}}],[\"因此需要追踪\",{\"1\":{\"385\":1}}],[\"因此需要设计大小可变的\",{\"1\":{\"383\":1}}],[\"因此需要为每个\",{\"1\":{\"383\":1}}],[\"因此需要将\",{\"1\":{\"382\":1}}],[\"因此需要发送大量的头部信息\",{\"1\":{\"33\":1}}],[\"因此不能追加\",{\"1\":{\"442\":1}}],[\"因此不能配合\",{\"1\":{\"373\":1}}],[\"因此不适合长连接\",{\"1\":{\"368\":1}}],[\"因此可以做如下优化\",{\"1\":{\"424\":1}}],[\"因此可以保证数据的完整性\",{\"1\":{\"160\":1}}],[\"因此可能会遇到连接不稳定的情况\",{\"1\":{\"33\":1}}],[\"因此我们就可以在执行业务时判断订单状态是否是未支付\",{\"1\":{\"144\":1}}],[\"因此spring允许我们自定义重试次数耗尽后的消息处理策略\",{\"1\":{\"141\":1}}],[\"因此spring会自动返回reject\",{\"1\":{\"139\":1}}],[\"因此springamqp帮我们实现了消息确认\",{\"1\":{\"139\":1}}],[\"因此大多数情况下我们需要将消息处理的代码通过try\",{\"1\":{\"139\":1}}],[\"因此大多数情况下我们无需考虑这种问题\",{\"1\":{\"131\":1}}],[\"因此\",{\"1\":{\"138\":1,\"142\":1,\"145\":1,\"219\":1,\"237\":1,\"396\":1,\"422\":1,\"462\":1,\"495\":1}}],[\"因此官方推荐升级mq为3\",{\"1\":{\"134\":1}}],[\"因此在极小概率下可能存在线程安全问题\",{\"1\":{\"144\":1}}],[\"因此在这个过程中rabbitmq不会再处理新的消息\",{\"1\":{\"134\":1}}],[\"因此在不支持websocket的浏览器中也可以使用\",{\"1\":{\"32\":1}}],[\"因此建议生产者确认全部采用异步方式\",{\"1\":{\"133\":1}}],[\"因此只有在支持html5的浏览器中才能使用\",{\"1\":{\"31\":1}}],[\"因此数据传输的效率非常高\",{\"1\":{\"30\":1}}],[\"因为只有一个\",{\"1\":{\"495\":1}}],[\"因为是\",{\"1\":{\"495\":1}}],[\"因为分隔符本身如果用于传输\",{\"1\":{\"462\":1}}],[\"因为接收方的缓冲区大小是有限的\",{\"1\":{\"457\":1}}],[\"因为进行了数据的内存复制操作\",{\"1\":{\"445\":1}}],[\"因为底层都是同一块内存\",{\"1\":{\"442\":1}}],[\"因为它有独立的读写指针\",{\"1\":{\"442\":1}}],[\"因为它们有网络通信需求\",{\"1\":{\"406\":1}}],[\"因为这部分内存不受\",{\"1\":{\"435\":1}}],[\"因为节点3\",{\"1\":{\"432\":1}}],[\"因为容器不是物理隔离的\",{\"1\":{\"389\":1}}],[\"因为客户端断开了\",{\"1\":{\"382\":1}}],[\"因为在指定某日和周几的时候\",{\"1\":{\"291\":1}}],[\"因为消息投递给消费者并不代表就一定被正确消费了\",{\"1\":{\"138\":1}}],[\"因为请求是通过代理服务器发出的\",{\"1\":{\"87\":1}}],[\"因为sockjs在不支持websocket的浏览器中使用的是长轮询技术\",{\"1\":{\"33\":1}}],[\"因为\",{\"1\":{\"22\":1,\"379\":1,\"383\":1,\"424\":1,\"432\":1,\"441\":1,\"496\":2}}],[\"因为我们的包结构是确定的\",{\"1\":{\"14\":1}}],[\"只为添加\",{\"1\":{\"495\":1}}],[\"只发消息\",{\"1\":{\"490\":1}}],[\"只发生了一次用户态与内核态的切换\",{\"1\":{\"397\":1}}],[\"只是为了触发\",{\"1\":{\"495\":1,\"498\":1}}],[\"只是读写指针是独立的\",{\"1\":{\"443\":1}}],[\"只是\",{\"1\":{\"428\":1}}],[\"只是便于理解\",{\"1\":{\"260\":1}}],[\"只作为两个线程间传递结果的容器\",{\"1\":{\"425\":1}}],[\"只会将一些\",{\"1\":{\"397\":1}}],[\"只会删除视图\",{\"1\":{\"240\":1}}],[\"只关注\",{\"1\":{\"382\":1}}],[\"只适合短连接\",{\"1\":{\"368\":1}}],[\"只适合连接数少的场景\",{\"1\":{\"334\":1}}],[\"只能先发送前\",{\"1\":{\"455\":1}}],[\"只能同步等待任务结束\",{\"1\":{\"425\":1}}],[\"只能写\",{\"1\":{\"355\":1}}],[\"只能读\",{\"1\":{\"355\":1}}],[\"只能工作在阻塞模式下\",{\"1\":{\"354\":1}}],[\"只能修改查询暴漏出来的字段\",{\"1\":{\"237\":1}}],[\"只能存入字符串\",{\"1\":{\"155\":1}}],[\"只有在线的\",{\"1\":{\"469\":1}}],[\"只有落在窗口内的数据才能允许接收\",{\"1\":{\"455\":1}}],[\"只有一开始\",{\"1\":{\"424\":1}}],[\"只有出现runtimeexception才回滚异常\",{\"1\":{\"219\":1}}],[\"只有队列的routingkey与消息的routingkey完全一致\",{\"1\":{\"116\":1}}],[\"只管保存\",{\"1\":{\"159\":1}}],[\"只不过topic\",{\"1\":{\"119\":1}}],[\"只执行一次\",{\"1\":{\"109\":1}}],[\"只需等\",{\"1\":{\"441\":1}}],[\"只需要添加代理地址\",{\"1\":{\"88\":1}}],[\"只需建立连接\",{\"1\":{\"30\":1}}],[\"只导出表结构\",{\"1\":{\"68\":1}}],[\"只要这个时间间隔小于服务器定义的空闲检测的时间间隔\",{\"1\":{\"475\":1}}],[\"只要分别采用读线程和写线程即可\",{\"1\":{\"450\":1}}],[\"只要向\",{\"1\":{\"386\":1}}],[\"只要调用\",{\"1\":{\"346\":1}}],[\"只要生产者与mq之间的网路连接顺畅\",{\"1\":{\"131\":1}}],[\"只要的字段\",{\"1\":{\"99\":1}}],[\"只要引入下面这个包就行啦\",{\"1\":{\"19\":1}}],[\"只要spring能够扫描到这个类\",{\"1\":{\"13\":1}}],[\"它既可以由提交任务的线程来调用\",{\"1\":{\"497\":1}}],[\"它取值为\",{\"1\":{\"496\":1}}],[\"它内部维护了一个\",{\"1\":{\"445\":1}}],[\"它的\",{\"1\":{\"431\":1}}],[\"它的作用是利用\",{\"1\":{\"422\":1}}],[\"它的作用是待客户端\",{\"1\":{\"410\":1,\"411\":1}}],[\"它的继承关系比较复杂\",{\"1\":{\"415\":1}}],[\"它即为通道抽象\",{\"1\":{\"411\":1}}],[\"它不会阻塞\",{\"1\":{\"382\":1}}],[\"它不会移动读指针\",{\"1\":{\"345\":1}}],[\"它就是读写数据的双向通道\",{\"1\":{\"331\":1}}],[\"它会在每次运行时清理\",{\"1\":{\"302\":1}}],[\"它会下载最新版本的chromium\",{\"1\":{\"299\":1}}],[\"它提供了一个高级\",{\"1\":{\"296\":1}}],[\"它用来记录在mysql中响应时间超过阀值的语句\",{\"1\":{\"244\":1}}],[\"它确保索引列的值在表中是唯一的\",{\"1\":{\"236\":1}}],[\"它只能应用于支持空间数据类型的存储引擎\",{\"1\":{\"236\":1}}],[\"它只能应用于myisam和innodb存储引擎\",{\"1\":{\"236\":1}}],[\"它支持对空间数据进行高效的地理位置查询\",{\"1\":{\"236\":1}}],[\"它可以应用于大多数的数据类型和存储引擎\",{\"1\":{\"236\":2}}],[\"它可以最大程度地减少数据占用的空间\",{\"1\":{\"154\":1}}],[\"它使用b树数据结构来加速对数据的查找\",{\"1\":{\"236\":1}}],[\"它适用于对文本内容进行关键词搜索的场景\",{\"1\":{\"236\":1}}],[\"它是\",{\"1\":{\"158\":1,\"160\":1,\"455\":1}}],[\"它需要对存储的数据进行序列化\",{\"1\":{\"154\":1}}],[\"它有3个不同实现\",{\"1\":{\"141\":1}}],[\"它们都有\",{\"1\":{\"355\":1}}],[\"它们都有自己的优势和缺点\",{\"1\":{\"29\":1}}],[\"它们仅在\",{\"1\":{\"301\":1}}],[\"它们具有不同的特点和适用场景\",{\"1\":{\"236\":1}}],[\"它们可以方便地与其他语言和系统进行交互\",{\"1\":{\"154\":1}}],[\"它们直接与反向代理通信\",{\"1\":{\"88\":1}}],[\"它接收客户端的请求\",{\"1\":{\"88\":1}}],[\"它实现了浏览器与服务器全双工通信\",{\"1\":{\"29\":1}}],[\"时的读写模式决定\",{\"1\":{\"355\":1}}],[\"时会自动安装\",{\"1\":{\"307\":1}}],[\"时间单位为\",{\"1\":{\"374\":1}}],[\"时间间隔\",{\"1\":{\"232\":1}}],[\"时间\",{\"1\":{\"178\":1,\"272\":1}}],[\"时\",{\"1\":{\"29\":1,\"289\":1,\"299\":1,\"382\":1,\"401\":2,\"422\":5,\"441\":1,\"455\":1,\"495\":1,\"496\":2}}],[\"而意思却是完全不同\",{\"1\":{\"462\":1}}],[\"而非分\",{\"1\":{\"453\":1}}],[\"而后面要讲的\",{\"1\":{\"432\":1}}],[\"而提交的任务会被包装为\",{\"1\":{\"431\":1}}],[\"而且脱离了任务独立存在\",{\"1\":{\"425\":1}}],[\"而且医生看病的过程中是以病人为单位的\",{\"1\":{\"424\":1}}],[\"而且并发高时\",{\"1\":{\"192\":1}}],[\"而我们自己的\",{\"1\":{\"417\":1}}],[\"而读取又分为两个阶段\",{\"1\":{\"393\":1}}],[\"而不是等\",{\"1\":{\"441\":1}}],[\"而不是给\",{\"1\":{\"410\":1}}],[\"而不是容器申请时的个数\",{\"1\":{\"389\":1}}],[\"而不是无限制的requeue到mq队列\",{\"1\":{\"140\":1}}],[\"而之前的\",{\"1\":{\"331\":1}}],[\"而并没有存放视图中的数据\",{\"1\":{\"237\":1}}],[\"而在3\",{\"1\":{\"134\":1}}],[\"而是通过\",{\"1\":{\"425\":1}}],[\"而是将来由操作系统来通过回调方式由另外的线程来获得结果\",{\"1\":{\"398\":1}}],[\"而是缓存的复制\",{\"1\":{\"396\":1}}],[\"而是由其它线程送结果\",{\"1\":{\"393\":1}}],[\"而是在不会拷贝重复数据到\",{\"1\":{\"397\":1}}],[\"而是在消费者本地重试\",{\"1\":{\"140\":1}}],[\"而是在本地重试了3次\",{\"1\":{\"140\":1}}],[\"而是每隔一段时间批量持久化\",{\"1\":{\"133\":1}}],[\"而是要指定一个routingkey\",{\"1\":{\"116\":1}}],[\"而return则属于publisher\",{\"1\":{\"131\":1}}],[\"而redisson分布式锁是基于redis的redisson分布式框架实现的\",{\"1\":{\"39\":1}}],[\"而反向代理再将请求转发到后端服务器\",{\"1\":{\"88\":1}}],[\"而\",{\"1\":{\"29\":1,\"370\":1,\"421\":1,\"425\":1,\"432\":1,\"496\":1}}],[\"而使用spring\",{\"1\":{\"14\":1}}],[\"实验如下\",{\"1\":{\"422\":1}}],[\"实际读到了数据\",{\"1\":{\"499\":1}}],[\"实际上是\",{\"1\":{\"495\":1}}],[\"实际上还有许多其他的命令可供使用\",{\"1\":{\"153\":1}}],[\"实际内容\",{\"1\":{\"462\":1}}],[\"实际每次读取的一般是它的整数倍\",{\"1\":{\"454\":1}}],[\"实际不是物理设备级别的读写\",{\"1\":{\"396\":1}}],[\"实际写入字节\",{\"1\":{\"385\":2}}],[\"实际传输一个超大文件\",{\"1\":{\"362\":1}}],[\"实体类\",{\"1\":{\"100\":1}}],[\"实现一个\",{\"1\":{\"449\":1}}],[\"实现来讲\",{\"1\":{\"441\":1}}],[\"实现类中的就绪事件集合替换为\",{\"1\":{\"497\":1}}],[\"实现类\",{\"1\":{\"410\":1,\"411\":1}}],[\"实现了\",{\"1\":{\"415\":1}}],[\"实现了真正的异步\",{\"1\":{\"398\":1}}],[\"实现了客户端与服务器端的实时通信\",{\"1\":{\"29\":1}}],[\"实现多路复用\",{\"1\":{\"392\":1}}],[\"实现自定义注解\",{\"0\":{\"281\":1}}],[\"实现自减\",{\"1\":{\"153\":1}}],[\"实现自增\",{\"1\":{\"153\":1}}],[\"实现工具类\",{\"0\":{\"109\":1}}],[\"实现\",{\"0\":{\"155\":1},\"1\":{\"29\":1,\"441\":1,\"478\":2}}],[\"实例\",{\"1\":{\"22\":1,\"301\":1,\"363\":1,\"436\":2,\"447\":1}}],[\"具体池化还是非池化由\",{\"1\":{\"486\":1}}],[\"具体代码\",{\"1\":{\"441\":1}}],[\"具体见\",{\"1\":{\"300\":1,\"302\":1}}],[\"具体指运行时间超过long\",{\"1\":{\"244\":1}}],[\"具体的业务可能需要\",{\"1\":{\"188\":1}}],[\"具体的实现这里就不再赘述了\",{\"1\":{\"145\":1}}],[\"具体如图所示\",{\"1\":{\"131\":1}}],[\"具体应该根据实际情况来选择\",{\"1\":{\"29\":1}}],[\"具体有什么作用呢\",{\"1\":{\"20\":1}}],[\"和它的子类使用了池化机制\",{\"1\":{\"441\":1}}],[\"和可读数据\",{\"1\":{\"369\":1}}],[\"和item\",{\"1\":{\"328\":1}}],[\"和importselector不同的是\",{\"1\":{\"16\":1}}],[\"和浏览器功能直接在最新版本的chrome中执行测试\",{\"1\":{\"297\":1}}],[\"和远程分支连接起来\",{\"1\":{\"46\":1}}],[\"和\",{\"0\":{\"29\":1,\"346\":1},\"1\":{\"29\":1,\"62\":1,\"246\":1,\"290\":1,\"291\":1,\"315\":1,\"344\":1,\"345\":1,\"346\":1,\"363\":1,\"382\":1,\"397\":1,\"411\":1,\"413\":1,\"429\":1,\"445\":1,\"450\":1,\"456\":1,\"495\":1}}],[\"热加载\",{\"0\":{\"28\":1}}],[\"0f下雨天留客06天留09我不留\",{\"1\":{\"462\":1}}],[\"0f\",{\"1\":{\"453\":10,\"454\":10,\"460\":1}}],[\"0e\",{\"1\":{\"453\":10,\"454\":10,\"460\":1}}],[\"0c\",{\"1\":{\"453\":10,\"454\":10}}],[\"0b\",{\"1\":{\"453\":10,\"454\":10}}],[\"0a\",{\"1\":{\"445\":3,\"446\":1,\"453\":10,\"454\":10,\"459\":10}}],[\"08\",{\"1\":{\"428\":1,\"445\":3,\"446\":1,\"453\":17,\"454\":19,\"459\":19,\"460\":1}}],[\"05\",{\"1\":{\"417\":2,\"438\":1,\"439\":1,\"440\":2,\"442\":2,\"445\":3,\"446\":2,\"453\":10,\"454\":10}}],[\"0d\",{\"1\":{\"399\":1,\"453\":10,\"454\":10,\"460\":1}}],[\"0xdff439d3\",{\"1\":{\"460\":2}}],[\"0xd739f137\",{\"1\":{\"458\":14}}],[\"0xa4b3be43\",{\"1\":{\"459\":12}}],[\"0xe3d9713f\",{\"1\":{\"458\":2}}],[\"0x3c2ef3c2\",{\"1\":{\"458\":5}}],[\"0x4d6c6a84\",{\"1\":{\"454\":2}}],[\"0x94132411\",{\"1\":{\"453\":5}}],[\"0x94b2a840\",{\"1\":{\"417\":6}}],[\"0x81e0fda5\",{\"1\":{\"453\":2}}],[\"0x250\",{\"1\":{\"438\":2}}],[\"0x251562d5\",{\"1\":{\"417\":6}}],[\"0x2e1884dd\",{\"1\":{\"422\":2}}],[\"0x744f2b47\",{\"1\":{\"460\":14}}],[\"0x749124ba\",{\"1\":{\"422\":2}}],[\"0x79a26af9\",{\"1\":{\"417\":6}}],[\"0x7f\",{\"1\":{\"341\":1}}],[\"0xf0f347b8\",{\"1\":{\"460\":5}}],[\"0xff\",{\"1\":{\"341\":1,\"466\":1,\"467\":1,\"478\":1}}],[\"0xffffffffl\",{\"1\":{\"341\":2}}],[\"0xf\",{\"1\":{\"341\":1}}],[\"0x1282d755\",{\"1\":{\"459\":5}}],[\"0x1719abf7\",{\"1\":{\"454\":7}}],[\"0x1f\",{\"1\":{\"341\":1}}],[\"0x100000000l\",{\"1\":{\"341\":2}}],[\"0x0f\",{\"1\":{\"341\":2}}],[\"03\",{\"1\":{\"338\":17,\"417\":2,\"438\":2,\"439\":1,\"442\":6,\"445\":3,\"446\":2,\"453\":10,\"454\":10}}],[\"09\",{\"1\":{\"272\":1,\"417\":1,\"445\":3,\"446\":1,\"453\":10,\"454\":10,\"460\":3}}],[\"02\",{\"1\":{\"266\":1,\"438\":4,\"439\":1,\"442\":4,\"445\":3,\"446\":2,\"453\":10,\"454\":10,\"460\":2}}],[\"07\",{\"1\":{\"178\":1,\"428\":2,\"445\":3,\"446\":1,\"453\":10,\"454\":10,\"458\":21}}],[\"0032\",{\"1\":{\"497\":1}}],[\"0031\",{\"1\":{\"455\":1}}],[\"00和14\",{\"1\":{\"292\":1}}],[\"00时间段内每隔40分钟执行任务\",{\"1\":{\"292\":1}}],[\"00到下午17\",{\"1\":{\"292\":1}}],[\"00以及下午16\",{\"1\":{\"292\":1}}],[\"00点\",{\"1\":{\"292\":1}}],[\"00执行任务\",{\"1\":{\"292\":3}}],[\"000\",{\"1\":{\"362\":1}}],[\"00077300\",{\"1\":{\"245\":1}}],[\"00026325\",{\"1\":{\"245\":1}}],[\"00013375\",{\"1\":{\"245\":1}}],[\"00012275\",{\"1\":{\"245\":1}}],[\"00033425\",{\"1\":{\"245\":1}}],[\"00\",{\"1\":{\"178\":2,\"245\":1,\"359\":1,\"438\":7,\"439\":6,\"440\":15,\"453\":10,\"454\":10,\"458\":131}}],[\"01|00\",{\"1\":{\"438\":1}}],[\"0123\",{\"1\":{\"382\":1}}],[\"0123456789abcdef3333\",{\"1\":{\"382\":2}}],[\"0123456789abcdef\",{\"1\":{\"341\":1,\"382\":1}}],[\"01\",{\"1\":{\"178\":2,\"253\":1,\"438\":2,\"439\":1,\"445\":3,\"446\":2,\"453\":10,\"454\":10}}],[\"06+08\",{\"1\":{\"178\":1}}],[\"06\",{\"1\":{\"161\":1,\"178\":1,\"417\":2,\"439\":1,\"440\":3,\"445\":3,\"446\":2,\"453\":10,\"454\":10,\"458\":2,\"460\":1}}],[\"0版本开始\",{\"1\":{\"134\":1}}],[\"04创建一个容器\",{\"1\":{\"65\":1}}],[\"04从本地文件ubuntu\",{\"1\":{\"64\":1}}],[\"04导出到本地文件ubuntu\",{\"1\":{\"64\":1}}],[\"04\",{\"1\":{\"62\":1,\"64\":9,\"65\":2,\"245\":2,\"430\":3,\"438\":2,\"439\":1,\"442\":4,\"445\":3,\"446\":2,\"453\":10,\"454\":10}}],[\"0<\",{\"1\":{\"43\":1,\"318\":1}}],[\"0\",{\"0\":{\"36\":2},\"1\":{\"27\":1,\"36\":2,\"37\":1,\"40\":6,\"41\":1,\"43\":2,\"61\":3,\"66\":1,\"70\":1,\"71\":6,\"88\":4,\"89\":8,\"90\":4,\"99\":1,\"100\":2,\"107\":2,\"108\":2,\"109\":2,\"121\":2,\"122\":1,\"153\":4,\"163\":4,\"167\":3,\"168\":2,\"169\":2,\"176\":2,\"181\":1,\"182\":2,\"187\":2,\"231\":1,\"245\":10,\"265\":1,\"267\":1,\"288\":1,\"290\":3,\"291\":1,\"292\":14,\"300\":1,\"301\":2,\"303\":4,\"304\":2,\"305\":2,\"313\":1,\"323\":1,\"328\":5,\"338\":1,\"341\":14,\"345\":1,\"347\":2,\"349\":3,\"350\":2,\"351\":2,\"362\":4,\"364\":2,\"368\":1,\"369\":4,\"376\":1,\"378\":19,\"381\":1,\"382\":5,\"385\":2,\"388\":3,\"390\":1,\"399\":2,\"411\":2,\"417\":80,\"420\":1,\"422\":16,\"432\":2,\"434\":4,\"437\":1,\"438\":4,\"439\":2,\"440\":3,\"441\":2,\"442\":6,\"445\":5,\"446\":2,\"449\":2,\"450\":2,\"453\":33,\"454\":40,\"457\":2,\"458\":50,\"459\":44,\"460\":51,\"466\":6,\"467\":3,\"470\":1,\"475\":4,\"478\":6,\"480\":3,\"495\":4,\"496\":1,\"497\":9,\"498\":5,\"499\":3}}],[\"是让非\",{\"1\":{\"497\":1}}],[\"是登录\",{\"1\":{\"465\":1}}],[\"是中文一句著名的无标点符号句子\",{\"1\":{\"462\":1}}],[\"是流式协议\",{\"1\":{\"455\":1}}],[\"是全双工的\",{\"1\":{\"450\":1}}],[\"是对字节数据的封装\",{\"1\":{\"433\":1}}],[\"是从原始\",{\"1\":{\"442\":1}}],[\"是从尾部开始查找\",{\"1\":{\"432\":1}}],[\"是从当前节点找上一个出站处理器\",{\"1\":{\"432\":1}}],[\"是按照\",{\"1\":{\"432\":2}}],[\"是原材料\",{\"1\":{\"432\":1}}],[\"是车间中的流水线\",{\"1\":{\"432\":1}}],[\"是一组\",{\"1\":{\"415\":1}}],[\"是一个工具类\",{\"1\":{\"446\":1}}],[\"是一个组合的\",{\"1\":{\"445\":1}}],[\"是一个产品的加工车间\",{\"1\":{\"432\":1}}],[\"是一个异步的\",{\"1\":{\"404\":1}}],[\"是一个的轻量级的\",{\"1\":{\"300\":1}}],[\"是一个\",{\"1\":{\"211\":1,\"296\":1,\"498\":1}}],[\"是一个分布式的\",{\"1\":{\"94\":1}}],[\"是一个虚拟目录\",{\"1\":{\"58\":1}}],[\"是接下来添加的处理器都是给\",{\"1\":{\"410\":1}}],[\"是什么\",{\"0\":{\"404\":1}}],[\"是无连接的\",{\"1\":{\"390\":1}}],[\"是普通文件\",{\"1\":{\"365\":1}}],[\"是目录\",{\"1\":{\"365\":1}}],[\"是工具类\",{\"1\":{\"363\":1}}],[\"是因为\",{\"1\":{\"357\":1}}],[\"是非线程安全的\",{\"1\":{\"348\":1}}],[\"是在读取时\",{\"1\":{\"346\":1}}],[\"是把未读完的部分向前压缩\",{\"1\":{\"340\":1}}],[\"是写入位置\",{\"1\":{\"340\":1}}],[\"是这个可执行程调度程序所要执行的内容\",{\"1\":{\"246\":1}}],[\"是最大段长度\",{\"1\":{\"455\":1}}],[\"是最常见的索引类型\",{\"1\":{\"236\":1}}],[\"是最复杂也是最强大的元素\",{\"1\":{\"196\":1}}],[\"是保证数据库安全和稳定运行的基本手段\",{\"1\":{\"219\":1}}],[\"是webflux里面\",{\"1\":{\"181\":1}}],[\"是web里面的\",{\"1\":{\"181\":1}}],[\"是所有的队列\",{\"1\":{\"137\":1}}],[\"是用来定义文档和它所包含的字段是如何被存储和索引的\",{\"1\":{\"99\":1}}],[\"是统一管理依赖版本\",{\"1\":{\"83\":1}}],[\"是直接依赖\",{\"1\":{\"83\":1}}],[\"是容器内目录与宿主机目录之间映射的桥梁\",{\"1\":{\"58\":1}}],[\"是\",{\"1\":{\"29\":2,\"158\":1,\"160\":1,\"290\":6,\"382\":2,\"418\":1,\"432\":1,\"439\":2,\"455\":3,\"498\":2}}],[\"是否要继续循环\",{\"1\":{\"499\":1}}],[\"是否能读写根据构造\",{\"1\":{\"355\":1}}],[\"是否为节点\",{\"1\":{\"328\":1}}],[\"是否必需\",{\"1\":{\"290\":1}}],[\"是否支持\",{\"1\":{\"245\":1}}],[\"是否以append\",{\"1\":{\"160\":1}}],[\"是否开启\",{\"1\":{\"245\":1,\"390\":1}}],[\"是否开启多个消息同时确认\",{\"1\":{\"111\":1}}],[\"是否开启上传\",{\"1\":{\"27\":1}}],[\"是否消费结束后自动删除\",{\"1\":{\"107\":1,\"108\":1}}],[\"是否独占队列\",{\"1\":{\"107\":1,\"108\":1}}],[\"是否延迟解析\",{\"1\":{\"27\":1}}],[\"是会从spring的容器中获得b实例\",{\"1\":{\"20\":1}}],[\"创建时初始化好\",{\"1\":{\"495\":1}}],[\"创建了\",{\"1\":{\"495\":1}}],[\"创建了服务器\",{\"1\":{\"368\":1,\"369\":1}}],[\"创建代理类\",{\"1\":{\"492\":1}}],[\"创建成功\",{\"1\":{\"472\":1}}],[\"创建群聊\",{\"1\":{\"472\":1}}],[\"创建多级目录用\",{\"1\":{\"364\":1}}],[\"创建一级目录\",{\"1\":{\"364\":1}}],[\"创建一个聊天组\",{\"1\":{\"469\":1}}],[\"创建一个带超链接的chunk\",{\"1\":{\"322\":1}}],[\"创建一个普通的chunk\",{\"1\":{\"322\":1}}],[\"创建一个段落并添加到文档中\",{\"1\":{\"321\":1}}],[\"创建一个\",{\"1\":{\"301\":1}}],[\"创建一个时时更新的自动化测试环境\",{\"1\":{\"297\":1}}],[\"创建pdfptable对象\",{\"1\":{\"323\":1}}],[\"创建下标chunk\",{\"1\":{\"322\":1}}],[\"创建上标chunk\",{\"1\":{\"322\":1}}],[\"创建粗体chunk\",{\"1\":{\"322\":1}}],[\"创建斜体chunk\",{\"1\":{\"322\":1}}],[\"创建带删除线的chunk\",{\"1\":{\"322\":1}}],[\"创建带下划线的chunk\",{\"1\":{\"322\":1}}],[\"创建带颜色的chunk\",{\"1\":{\"322\":1}}],[\"创建段落\",{\"1\":{\"322\":1}}],[\"创建用户配置文件\",{\"1\":{\"302\":1}}],[\"创建拦截器\",{\"0\":{\"279\":1}}],[\"创建自定义注解\",{\"0\":{\"278\":1}}],[\"创建使用\",{\"0\":{\"267\":1}}],[\"创建对象\",{\"1\":{\"254\":1}}],[\"创建调度器\",{\"1\":{\"248\":1}}],[\"创建视图\",{\"0\":{\"238\":1}}],[\"创建连接对象\",{\"1\":{\"113\":1}}],[\"创建mq的连接工厂对象\",{\"1\":{\"107\":1,\"108\":1}}],[\"创建文档\",{\"1\":{\"98\":1}}],[\"创建文件对象\",{\"1\":{\"27\":1}}],[\"创建索引\",{\"1\":{\"94\":1,\"97\":1,\"101\":1}}],[\"创建新的数据库\",{\"1\":{\"69\":1}}],[\"创建并启动一个容器\",{\"1\":{\"65\":1}}],[\"创建某个container的镜像\",{\"1\":{\"64\":1}}],[\"创建数据卷\",{\"1\":{\"59\":1}}],[\"创建ssh\",{\"1\":{\"51\":1}}],[\"创建版本库\",{\"0\":{\"47\":1}}],[\"创建\",{\"0\":{\"372\":1,\"434\":1},\"1\":{\"37\":1,\"47\":1,\"66\":1,\"382\":1,\"388\":1,\"410\":1,\"411\":1,\"446\":1,\"449\":1,\"495\":2}}],[\"创建目录\",{\"1\":{\"27\":1}}],[\"拼接完整的目录路径\",{\"1\":{\"27\":1}}],[\"保留y位小数\",{\"1\":{\"232\":1}}],[\"保证了\",{\"1\":{\"415\":1}}],[\"保证了锁的操作原子性\",{\"1\":{\"39\":1}}],[\"保证文件移动的原子性\",{\"1\":{\"364\":1}}],[\"保证开箱即用\",{\"1\":{\"302\":1}}],[\"保证数据的完整性\",{\"1\":{\"219\":1}}],[\"保证数据安全性\",{\"1\":{\"160\":1}}],[\"保证mq的可靠性\",{\"1\":{\"129\":1}}],[\"保存截图的文件路径和名称\",{\"1\":{\"303\":2}}],[\"保存当前登录用户信息到threadlocal\",{\"1\":{\"184\":1}}],[\"保存配置\",{\"1\":{\"159\":1}}],[\"保存到队列后\",{\"1\":{\"129\":1}}],[\"保存并退出\",{\"1\":{\"70\":1}}],[\"保存临时位置\",{\"1\":{\"27\":1}}],[\"保存文件\",{\"1\":{\"27\":1}}],[\"保存\",{\"1\":{\"27\":1,\"70\":1}}],[\"保险起见可以指定\",{\"1\":{\"22\":1}}],[\"ulimit\",{\"0\":{\"482\":1}}],[\"ulisesbocchio<\",{\"1\":{\"293\":1}}],[\"udpclient\",{\"1\":{\"390\":1}}],[\"udpserver\",{\"1\":{\"390\":1}}],[\"udp\",{\"0\":{\"390\":1},\"1\":{\"390\":1}}],[\"ucs2\",{\"1\":{\"319\":1,\"320\":1}}],[\"ui\",{\"1\":{\"297\":1}}],[\"unsafe\",{\"1\":{\"497\":7,\"498\":1}}],[\"unexpected\",{\"1\":{\"496\":1}}],[\"uncheckedbooleansupplier\",{\"1\":{\"499\":2}}],[\"unchecked\",{\"1\":{\"495\":1}}],[\"unbind\",{\"1\":{\"469\":1,\"473\":2}}],[\"unpooled\",{\"0\":{\"446\":1},\"1\":{\"446\":3}}],[\"unpooleddirectbytebuf\",{\"1\":{\"441\":1}}],[\"unpooledheapbytebuf\",{\"1\":{\"441\":1}}],[\"unpooled|pooled\",{\"1\":{\"436\":1}}],[\"underline\",{\"1\":{\"322\":1}}],[\"underlinechunk\",{\"1\":{\"322\":2}}],[\"unit\",{\"1\":{\"455\":1}}],[\"unix\",{\"1\":{\"394\":1}}],[\"unigb\",{\"1\":{\"319\":1,\"320\":1}}],[\"union\",{\"1\":{\"235\":2}}],[\"unique索引适用于需要唯一性约束的列\",{\"1\":{\"236\":1}}],[\"unique索引\",{\"1\":{\"236\":1}}],[\"unique\",{\"1\":{\"233\":1}}],[\"un\",{\"1\":{\"187\":1}}],[\"unauthorized\",{\"1\":{\"182\":1}}],[\"unlock\",{\"1\":{\"41\":1}}],[\"util\",{\"1\":{\"182\":3,\"428\":5,\"431\":16,\"441\":1,\"496\":2,\"499\":1}}],[\"utf8mb4\",{\"1\":{\"220\":1}}],[\"utf\",{\"1\":{\"34\":1,\"69\":1,\"347\":3,\"390\":1,\"478\":2}}],[\"uri\",{\"1\":{\"169\":3,\"176\":2,\"464\":1}}],[\"uris\",{\"1\":{\"100\":1}}],[\"uroot\",{\"1\":{\"68\":2,\"69\":1}}],[\"url>\",{\"1\":{\"74\":1}}],[\"url\",{\"1\":{\"37\":1,\"90\":1,\"181\":1,\"187\":1,\"293\":1,\"324\":2,\"328\":4}}],[\"u用户名\",{\"1\":{\"68\":2,\"69\":1}}],[\"ubuntu\",{\"1\":{\"62\":1,\"64\":6,\"65\":2,\"288\":1,\"305\":1}}],[\"using\",{\"1\":{\"288\":1}}],[\"usr\",{\"1\":{\"59\":2,\"68\":1,\"90\":1}}],[\"usecontainersupport\",{\"1\":{\"389\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"208\":1}}],[\"uses\",{\"1\":{\"288\":2,\"305\":2}}],[\"usessl=false\",{\"1\":{\"167\":1,\"293\":1}}],[\"usesingleserver\",{\"1\":{\"41\":1}}],[\"useunicode=true\",{\"1\":{\"167\":1,\"293\":1}}],[\"use\",{\"1\":{\"69\":1,\"245\":1}}],[\"usereventtriggered\",{\"1\":{\"475\":2}}],[\"userlist\",{\"1\":{\"217\":1}}],[\"usermapper\",{\"1\":{\"213\":9,\"219\":3}}],[\"usermod\",{\"1\":{\"62\":1}}],[\"usercolumns\",{\"1\":{\"197\":3}}],[\"usercontroler类\",{\"1\":{\"267\":1}}],[\"usercontroller\",{\"1\":{\"37\":1,\"267\":1}}],[\"usercontext\",{\"1\":{\"184\":1,\"185\":1}}],[\"userinfoimpl\",{\"1\":{\"280\":1,\"281\":1}}],[\"userinfo\",{\"1\":{\"183\":5,\"185\":1,\"278\":1,\"281\":1,\"282\":1}}],[\"userid\",{\"1\":{\"182\":4,\"183\":1,\"184\":3}}],[\"user=root\",{\"1\":{\"167\":1}}],[\"userservicefactory\",{\"1\":{\"470\":1,\"471\":1}}],[\"userservice\",{\"1\":{\"219\":1,\"469\":1}}],[\"userserviceimpl\",{\"1\":{\"219\":1}}],[\"users\",{\"1\":{\"34\":2,\"213\":6}}],[\"username\",{\"1\":{\"34\":1,\"121\":1,\"187\":1,\"197\":1,\"272\":2,\"293\":1,\"469\":6,\"470\":10,\"471\":3}}],[\"user\",{\"1\":{\"27\":1,\"37\":12,\"45\":4,\"71\":1,\"90\":3,\"122\":1,\"127\":3,\"153\":8,\"176\":3,\"183\":2,\"185\":1,\"213\":17,\"219\":3,\"272\":2,\"280\":1,\"282\":1,\"285\":2,\"305\":2,\"363\":1}}],[\"u\",{\"1\":{\"51\":1,\"70\":1,\"350\":1,\"415\":1}}],[\"upper\",{\"1\":{\"232\":3}}],[\"upstream\",{\"1\":{\"89\":1,\"90\":1}}],[\"up\",{\"1\":{\"62\":1,\"208\":2,\"218\":4,\"341\":1}}],[\"updatelastexecutiontime\",{\"1\":{\"496\":1}}],[\"updatewrapper<article>\",{\"1\":{\"218\":1}}],[\"updatewrapper<>\",{\"1\":{\"213\":1,\"218\":1}}],[\"updatewrapper<user>\",{\"1\":{\"213\":1}}],[\"updatewrapper\",{\"1\":{\"212\":1,\"218\":3}}],[\"update\",{\"0\":{\"223\":1},\"1\":{\"50\":1,\"65\":1,\"98\":1,\"144\":3,\"151\":1,\"187\":1,\"196\":1,\"212\":1,\"213\":1,\"218\":2,\"223\":1,\"232\":1}}],[\"updatebyid\",{\"1\":{\"41\":1,\"144\":1,\"212\":1}}],[\"uploadfile\",{\"1\":{\"27\":7}}],[\"upload\",{\"1\":{\"27\":3}}],[\"uploadobject\",{\"1\":{\"6\":1}}],[\"uuid\",{\"1\":{\"27\":1,\"40\":1}}],[\">>>\",{\"1\":{\"341\":3}}],[\">>\",{\"1\":{\"288\":1}}],[\">=\",{\"1\":{\"227\":1,\"341\":1,\"495\":1,\"497\":2}}],[\"><\",{\"1\":{\"197\":2,\"259\":1}}],[\"><property\",{\"1\":{\"197\":2}}],[\"><img\",{\"1\":{\"34\":1}}],[\">aaa\",{\"1\":{\"68\":1}}],[\">50\",{\"1\":{\"40\":1}}],[\">\",{\"1\":{\"27\":3,\"34\":1,\"36\":1,\"37\":4,\"41\":1,\"68\":3,\"70\":1,\"79\":1,\"119\":2,\"147\":1,\"168\":1,\"169\":1,\"171\":2,\"172\":1,\"176\":3,\"183\":1,\"187\":2,\"190\":1,\"195\":1,\"197\":9,\"198\":6,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":2,\"208\":1,\"209\":10,\"227\":1,\"229\":1,\"232\":1,\"254\":4,\"257\":3,\"258\":6,\"259\":3,\"318\":3,\"362\":1,\"365\":1,\"369\":1,\"388\":1,\"419\":1,\"420\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":2,\"428\":1,\"429\":1,\"430\":2,\"431\":2,\"432\":1,\"449\":2,\"450\":4,\"455\":1,\"470\":1,\"478\":1,\"480\":1,\"488\":5,\"490\":1,\"492\":4,\"495\":9,\"497\":3,\"498\":7,\"499\":1}}],[\"ld�\",{\"1\":{\"381\":1}}],[\"lf\",{\"1\":{\"313\":1}}],[\"lb\",{\"1\":{\"176\":2}}],[\"lrem\",{\"1\":{\"153\":1}}],[\"lrange\",{\"1\":{\"153\":1}}],[\"llen\",{\"1\":{\"153\":1}}],[\"lpop\",{\"1\":{\"153\":1}}],[\"lpush\",{\"1\":{\"153\":1}}],[\"ltv\",{\"1\":{\"382\":1}}],[\"ltrim\",{\"1\":{\"153\":1}}],[\"lte`\",{\"1\":{\"99\":1}}],[\"lt\",{\"1\":{\"99\":1}}],[\"lts\",{\"1\":{\"62\":1}}],[\"l\",{\"1\":{\"70\":1,\"290\":1,\"292\":1,\"417\":36,\"422\":2,\"453\":10,\"454\":14,\"458\":36,\"459\":31,\"460\":36}}],[\"little\",{\"1\":{\"438\":1}}],[\"lisi\",{\"1\":{\"417\":6,\"492\":1}}],[\"listensimplequeuemessage\",{\"1\":{\"139\":2}}],[\"listener\",{\"1\":{\"139\":2,\"140\":1,\"141\":1}}],[\"listenlazyqueue\",{\"1\":{\"136\":1}}],[\"listen\",{\"1\":{\"88\":1,\"89\":1,\"90\":2,\"481\":1}}],[\"list<channel>\",{\"1\":{\"469\":1,\"472\":2}}],[\"list<cartvo>\",{\"1\":{\"183\":1}}],[\"list<handlermethodargumentresolver>\",{\"1\":{\"280\":1}}],[\"list<record>\",{\"1\":{\"217\":1}}],[\"list<user>\",{\"1\":{\"213\":3}}],[\"list<integer>\",{\"1\":{\"213\":2}}],[\"list<itemdto>\",{\"1\":{\"171\":2}}],[\"list<map<string\",{\"1\":{\"212\":1}}],[\"list<mytest>\",{\"1\":{\"102\":1}}],[\"list<t>\",{\"1\":{\"212\":3}}],[\"list<employee>\",{\"1\":{\"201\":1,\"202\":1,\"203\":1}}],[\"list<socketchannel>\",{\"1\":{\"368\":1,\"369\":1}}],[\"list<serviceinstance>\",{\"1\":{\"169\":1}}],[\"list<string>\",{\"1\":{\"37\":1,\"182\":1,\"206\":1,\"272\":1}}],[\"list<web>\",{\"1\":{\"40\":1}}],[\"list<object>\",{\"1\":{\"212\":1,\"466\":1,\"467\":2,\"478\":2}}],[\"list<objecterror>\",{\"1\":{\"37\":1}}],[\"list<ossobjectsummary>\",{\"1\":{\"7\":1}}],[\"list\",{\"1\":{\"6\":1,\"7\":4,\"8\":1,\"153\":9,\"182\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":2,\"205\":2,\"206\":7,\"213\":4,\"217\":2,\"259\":1,\"272\":1,\"282\":3}}],[\"listobjects\",{\"1\":{\"5\":1,\"7\":1}}],[\"light\",{\"1\":{\"319\":1,\"320\":1}}],[\"limit\",{\"1\":{\"225\":2,\"231\":3,\"340\":3,\"341\":7,\"351\":4,\"382\":3}}],[\"liming\",{\"1\":{\"156\":1}}],[\"like\",{\"1\":{\"209\":6,\"227\":1,\"238\":2,\"243\":1,\"244\":1}}],[\"linkchunk\",{\"1\":{\"322\":3}}],[\"linebasedframedecoder\",{\"1\":{\"459\":1}}],[\"line\",{\"1\":{\"288\":2,\"423\":3,\"441\":1,\"449\":3,\"463\":13}}],[\"lindex\",{\"1\":{\"153\":1}}],[\"linux\",{\"0\":{\"53\":1},\"1\":{\"299\":1,\"302\":1,\"375\":1,\"397\":2,\"398\":1,\"481\":1}}],[\"lib\",{\"1\":{\"62\":1,\"244\":1}}],[\"lset\",{\"1\":{\"153\":1}}],[\"ls\",{\"1\":{\"51\":1,\"59\":1}}],[\"lookup\",{\"1\":{\"341\":5}}],[\"low\",{\"1\":{\"337\":1}}],[\"lower\",{\"1\":{\"232\":2}}],[\"lombok\",{\"1\":{\"182\":1,\"188\":1}}],[\"longbuffer\",{\"1\":{\"331\":1}}],[\"long\",{\"1\":{\"100\":1,\"144\":2,\"182\":1,\"184\":2,\"244\":3,\"341\":2,\"359\":2,\"362\":4,\"365\":2,\"374\":1,\"438\":2,\"496\":2,\"497\":4}}],[\"loader\",{\"1\":{\"492\":2}}],[\"loadbalancer<\",{\"1\":{\"171\":1,\"176\":1}}],[\"load会保存完整记录\",{\"1\":{\"65\":1}}],[\"load的区别\",{\"1\":{\"65\":1}}],[\"load\",{\"1\":{\"64\":1,\"478\":1,\"488\":1}}],[\"loginresponsemessage\",{\"1\":{\"470\":6,\"471\":3,\"478\":3}}],[\"loginrequestmessagehandler\",{\"1\":{\"471\":1}}],[\"loginrequestmessage\",{\"1\":{\"466\":2,\"470\":3,\"471\":1,\"478\":3}}],[\"login\",{\"1\":{\"469\":1,\"470\":9,\"471\":3}}],[\"logging\",{\"1\":{\"470\":4,\"488\":4,\"490\":2,\"492\":2,\"498\":1}}],[\"logginghandler\",{\"1\":{\"417\":21,\"423\":1,\"453\":5,\"454\":6,\"457\":1,\"458\":19,\"459\":17,\"460\":19,\"463\":1,\"464\":1,\"466\":1,\"470\":4,\"480\":1,\"488\":4,\"490\":2,\"492\":2}}],[\"loggerfactory\",{\"1\":{\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"logger\",{\"1\":{\"441\":1,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"495\":1,\"496\":1,\"498\":1}}],[\"log=1\",{\"1\":{\"244\":1}}],[\"logfile\",{\"1\":{\"163\":1}}],[\"loglevel\",{\"1\":{\"163\":2,\"417\":2,\"423\":1,\"453\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"464\":1,\"470\":2,\"488\":2,\"490\":1,\"492\":1}}],[\"logs\",{\"1\":{\"88\":1}}],[\"log\",{\"1\":{\"49\":2,\"88\":2,\"90\":7,\"136\":1,\"139\":4,\"163\":2,\"187\":1,\"244\":3,\"301\":1,\"319\":1,\"338\":2,\"368\":4,\"369\":2,\"376\":2,\"378\":2,\"382\":4,\"388\":3,\"399\":4,\"417\":2,\"419\":2,\"420\":2,\"423\":5,\"426\":4,\"427\":3,\"428\":3,\"429\":4,\"430\":3,\"434\":3,\"438\":2,\"439\":1,\"440\":3,\"453\":11,\"457\":4,\"458\":4,\"459\":4,\"460\":4,\"463\":1,\"464\":3,\"466\":2,\"467\":2,\"470\":3,\"473\":2,\"475\":2,\"478\":2,\"480\":1,\"488\":2,\"490\":2,\"491\":1,\"492\":1,\"493\":1}}],[\"lock\",{\"1\":{\"40\":1,\"41\":4,\"492\":2}}],[\"localread\",{\"1\":{\"498\":5}}],[\"localaddress\",{\"1\":{\"480\":1,\"495\":12}}],[\"local=\",{\"1\":{\"378\":2}}],[\"localdatetime\",{\"1\":{\"144\":2}}],[\"local\",{\"1\":{\"68\":1,\"90\":1,\"305\":2,\"307\":1}}],[\"localhost\",{\"1\":{\"27\":1,\"41\":1,\"88\":1,\"90\":1,\"190\":1,\"293\":1,\"368\":1,\"376\":1,\"381\":1,\"382\":1,\"385\":1,\"390\":1,\"417\":1,\"423\":1,\"450\":1,\"457\":1,\"463\":1,\"470\":1,\"481\":1,\"488\":1,\"490\":1,\"492\":1}}],[\"location\",{\"1\":{\"27\":1,\"88\":1,\"89\":1,\"90\":4}}],[\"locations\",{\"1\":{\"26\":1}}],[\"leak\",{\"1\":{\"495\":1}}],[\"learngit\",{\"1\":{\"47\":2}}],[\"less\",{\"1\":{\"341\":1}}],[\"lesson\",{\"1\":{\"66\":1}}],[\"len\",{\"1\":{\"338\":3,\"417\":2}}],[\"lengthfieldbasedframedecoder\",{\"1\":{\"460\":1,\"466\":1,\"467\":1,\"478\":1}}],[\"length\",{\"1\":{\"34\":3,\"40\":3,\"341\":17,\"382\":4,\"388\":2,\"396\":1,\"397\":1,\"434\":3,\"460\":3,\"464\":2,\"466\":5,\"467\":5,\"478\":6}}],[\"left\",{\"1\":{\"235\":2,\"362\":13}}],[\"lambda$main$1\",{\"1\":{\"431\":1}}],[\"lambda$main$0\",{\"1\":{\"428\":1,\"431\":1}}],[\"lambdaupdatewrapper<>\",{\"1\":{\"218\":1}}],[\"lambdaupdatewrapper<article>\",{\"1\":{\"218\":1}}],[\"lambdaupdate\",{\"1\":{\"144\":1}}],[\"lang\",{\"1\":{\"428\":4,\"429\":2,\"430\":2,\"431\":2,\"441\":2}}],[\"launch\",{\"1\":{\"301\":3,\"302\":3,\"303\":2}}],[\"latest\",{\"1\":{\"288\":1,\"305\":1}}],[\"lastbytesread\",{\"1\":{\"499\":3}}],[\"lastsave\",{\"1\":{\"159\":1}}],[\"last\",{\"1\":{\"140\":1,\"341\":1}}],[\"lastindexof\",{\"1\":{\"27\":1}}],[\"lazy\",{\"1\":{\"136\":5,\"137\":4}}],[\"lazyqueue已经成为所有队列的默认格式\",{\"1\":{\"134\":1}}],[\"lazyqueue\",{\"0\":{\"134\":1},\"1\":{\"136\":1}}],[\"lazily\",{\"1\":{\"27\":1}}],[\"书本\",{\"0\":{\"25\":1}}],[\"jctools\",{\"1\":{\"496\":1}}],[\"jjjjjjjj|\",{\"1\":{\"460\":1}}],[\"jjjj\",{\"1\":{\"458\":1}}],[\"jjmc\",{\"1\":{\"143\":3}}],[\"jemalloc\",{\"1\":{\"436\":1}}],[\"jenkov\",{\"1\":{\"383\":1}}],[\"jenkins\",{\"0\":{\"294\":1},\"1\":{\"294\":1}}],[\"jvm\",{\"1\":{\"368\":2,\"389\":1,\"397\":3,\"435\":1,\"441\":1}}],[\"jdk\",{\"1\":{\"389\":1,\"425\":4,\"465\":1,\"466\":1,\"467\":1,\"478\":1}}],[\"jdk1\",{\"1\":{\"364\":2}}],[\"jdk7\",{\"1\":{\"363\":1}}],[\"jdbctype=\",{\"1\":{\"198\":5}}],[\"jdbc\",{\"1\":{\"187\":3,\"293\":2}}],[\"j++\",{\"1\":{\"341\":6,\"382\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"jzmnmtazzf0uxnfstwttug==\",{\"1\":{\"293\":1}}],[\"jobs\",{\"1\":{\"288\":1,\"305\":1}}],[\"jobdatamap1\",{\"1\":{\"249\":2}}],[\"jobdatamap\",{\"1\":{\"249\":9}}],[\"jobdetail\",{\"1\":{\"246\":4,\"248\":1,\"249\":1}}],[\"jobbuilder\",{\"1\":{\"248\":1,\"249\":1}}],[\"jobexecutionexception\",{\"1\":{\"248\":1,\"249\":1}}],[\"jobexecutioncontext\",{\"1\":{\"248\":2,\"249\":1}}],[\"job\",{\"1\":{\"246\":2,\"248\":3,\"249\":2}}],[\"joinmember\",{\"1\":{\"469\":1,\"472\":1}}],[\"join\",{\"1\":{\"169\":1,\"197\":1,\"235\":4,\"303\":2}}],[\"jkl\",{\"1\":{\"213\":1}}],[\"jasypt\",{\"0\":{\"293\":1},\"1\":{\"293\":2}}],[\"jan\",{\"1\":{\"290\":1}}],[\"jar\",{\"1\":{\"190\":4,\"293\":2,\"364\":2}}],[\"jackson2jsonredisserializer\",{\"1\":{\"155\":6}}],[\"jackson2jsonmessageconverter\",{\"1\":{\"143\":2}}],[\"javachannel\",{\"1\":{\"495\":2}}],[\"javaversion\",{\"1\":{\"495\":1}}],[\"javaee\",{\"1\":{\"406\":1}}],[\"javascript\",{\"1\":{\"90\":2,\"297\":1}}],[\"java文件中出现的hello字符串的位置\",{\"1\":{\"56\":1}}],[\"java结尾的文件中包含hello字符串的位置\",{\"1\":{\"56\":1}}],[\"java结尾的文\",{\"1\":{\"55\":1}}],[\"java结尾文件\",{\"1\":{\"55\":1}}],[\"javamailsender\",{\"1\":{\"34\":7}}],[\"javax\",{\"1\":{\"34\":1}}],[\"java\",{\"0\":{\"4\":1,\"311\":1},\"1\":{\"55\":2,\"56\":2,\"94\":2,\"155\":2,\"182\":1,\"190\":2,\"254\":1,\"257\":1,\"267\":2,\"293\":1,\"347\":1,\"364\":2,\"378\":2,\"383\":1,\"396\":4,\"397\":8,\"406\":1,\"428\":13,\"429\":2,\"430\":2,\"431\":22,\"441\":3,\"450\":1,\"478\":8,\"481\":1,\"495\":1}}],[\"jsp\",{\"1\":{\"273\":3}}],[\"jsp页面\",{\"1\":{\"273\":1}}],[\"json数据传递参数\",{\"1\":{\"272\":1}}],[\"jsonobject\",{\"1\":{\"205\":3,\"217\":3}}],[\"jsonautodetect\",{\"1\":{\"155\":1}}],[\"json和messagepack是常用的序列化格式\",{\"1\":{\"154\":1}}],[\"json\",{\"1\":{\"154\":1,\"272\":1,\"465\":1,\"466\":1,\"467\":1,\"478\":4}}],[\"js\",{\"1\":{\"120\":1,\"238\":3,\"239\":1,\"301\":6,\"304\":1,\"305\":2,\"307\":1}}],[\"j\",{\"1\":{\"70\":1,\"341\":16,\"382\":2,\"415\":1,\"458\":3,\"459\":2,\"460\":2}}],[\"jwttool\",{\"1\":{\"182\":4}}],[\"jwtutil\",{\"1\":{\"40\":1,\"279\":1}}],[\"jwt\",{\"0\":{\"93\":1},\"1\":{\"40\":2}}],[\"jpg|jpeg|png|gif|ico|css|js\",{\"1\":{\"90\":1}}],[\"jpg\",{\"1\":{\"34\":1,\"455\":1}}],[\"juejin\",{\"1\":{\"24\":1}}],[\"并创建\",{\"1\":{\"498\":1}}],[\"并\",{\"1\":{\"496\":1}}],[\"并设置唤醒状态为\",{\"1\":{\"496\":1}}],[\"并设置到对应的实体对象中\",{\"1\":{\"103\":1}}],[\"并可动态调整\",{\"1\":{\"486\":1}}],[\"并发送\",{\"1\":{\"481\":1}}],[\"并发控制\",{\"1\":{\"219\":1}}],[\"并使用\",{\"1\":{\"466\":1}}],[\"并没有发生内存复制\",{\"1\":{\"442\":1}}],[\"并不是真正无拷贝\",{\"1\":{\"397\":1}}],[\"并不保证能够解决所有的失效问题\",{\"1\":{\"24\":1}}],[\"并从\",{\"1\":{\"380\":1}}],[\"并保存截图至\",{\"1\":{\"301\":1}}],[\"并生成预渲染内容\",{\"1\":{\"297\":1}}],[\"并支持关键词匹配和排名\",{\"1\":{\"236\":1}}],[\"并打印异常信息\",{\"1\":{\"219\":1}}],[\"并判断支付状态\",{\"1\":{\"145\":1}}],[\"并重新投递到消费者\",{\"1\":{\"139\":1}}],[\"并允许我们通过配置文件设置ack处理方式\",{\"1\":{\"139\":1}}],[\"并遍历每个结果\",{\"1\":{\"103\":1}}],[\"并获取查询结果的searchhits对象\",{\"1\":{\"103\":1}}],[\"并启用\",{\"1\":{\"90\":1}}],[\"并将该请求放入\",{\"1\":{\"481\":1}}],[\"并将该字符串替换为word2\",{\"1\":{\"70\":1}}],[\"并将结果存储到新的有序集合中\",{\"1\":{\"153\":2}}],[\"并将镜像命名为image\",{\"1\":{\"65\":1}}],[\"并且没有\",{\"1\":{\"443\":1}}],[\"并且没有被rabbitmq删除\",{\"1\":{\"139\":1}}],[\"并且采用了与\",{\"1\":{\"436\":1}}],[\"并且处理病人的能力提高到了\",{\"1\":{\"424\":1}}],[\"并且一旦工人负责了某个\",{\"1\":{\"413\":1}}],[\"并且线程太多\",{\"1\":{\"368\":1}}],[\"并且\",{\"1\":{\"227\":1}}],[\"并且可以在不同的\",{\"1\":{\"197\":1}}],[\"并且投递消息到交易服务\",{\"1\":{\"142\":1}}],[\"并且会阻塞队列进程\",{\"1\":{\"134\":1}}],[\"并且入队完成持久化\",{\"1\":{\"131\":1}}],[\"并且入队成功\",{\"1\":{\"131\":1}}],[\"并且传递的依赖是没有数量和层级的限制的\",{\"1\":{\"77\":1}}],[\"并且切换过去\",{\"1\":{\"46\":1}}],[\"并且里面的属性已经根据配置文件绑定好了\",{\"1\":{\"18\":1}}],[\"并提供了api接口\",{\"1\":{\"39\":1}}],[\"最终都需要变成\",{\"1\":{\"478\":1}}],[\"最终消息恢复至ready状态\",{\"1\":{\"139\":1}}],[\"最开始读写指针都在\",{\"1\":{\"437\":1}}],[\"最开始输入是\",{\"1\":{\"413\":1}}],[\"最佳实践\",{\"0\":{\"173\":1}}],[\"最好是找到conf下的nginx\",{\"1\":{\"58\":1}}],[\"最好是放到html目录\",{\"1\":{\"58\":1}}],[\"最大长度\",{\"1\":{\"460\":1}}],[\"最大重试次数\",{\"1\":{\"130\":1,\"140\":1}}],[\"最大\",{\"1\":{\"27\":1}}],[\"最常用的其实就是\",{\"1\":{\"22\":1}}],[\"最后输出\",{\"1\":{\"417\":1}}],[\"最后输出又变成\",{\"1\":{\"413\":1}}],[\"最后使用\",{\"1\":{\"397\":1}}],[\"最后\",{\"1\":{\"103\":1,\"107\":1,\"108\":1,\"145\":1}}],[\"最后即可使用ssh\",{\"1\":{\"71\":1}}],[\"最后的点是指构建时dockerfile所在路径\",{\"1\":{\"61\":1}}],[\"最后在spring\",{\"1\":{\"17\":1}}],[\"最后我们将\",{\"1\":{\"16\":1}}],[\"在使用\",{\"1\":{\"481\":1}}],[\"在线\",{\"1\":{\"471\":1}}],[\"在线测试\",{\"1\":{\"289\":1}}],[\"在连接建立后触发\",{\"1\":{\"470\":1}}],[\"在连接建立后被调用\",{\"1\":{\"423\":1}}],[\"在网络上传输\",{\"1\":{\"462\":1}}],[\"在发送消息前\",{\"1\":{\"460\":1}}],[\"在传递大量数据时\",{\"1\":{\"455\":1}}],[\"在任意时刻\",{\"1\":{\"450\":1}}],[\"在异步处理时\",{\"1\":{\"425\":1}}],[\"在异常位置打断点\",{\"1\":{\"139\":2}}],[\"在进行读写操作时\",{\"1\":{\"398\":2}}],[\"在原来聊天项目的基础上新增\",{\"1\":{\"488\":1}}],[\"在原来的数据上修改\",{\"1\":{\"98\":1}}],[\"在原有关注事件的基础上\",{\"1\":{\"385\":1}}],[\"在事件未处理时\",{\"1\":{\"382\":1}}],[\"在事件发生后\",{\"1\":{\"379\":1}}],[\"在处理时因为没有真正的\",{\"1\":{\"379\":1}}],[\"在没有标点符号情况下\",{\"1\":{\"462\":1}}],[\"在没有数据可读时\",{\"1\":{\"369\":1}}],[\"在没有连接建立时\",{\"1\":{\"369\":1}}],[\"在后面的\",{\"1\":{\"315\":1}}],[\"在创建browser实例时传入\",{\"1\":{\"302\":1}}],[\"在页面中执行脚本\",{\"1\":{\"301\":1}}],[\"在命令行中执行\",{\"1\":{\"301\":3}}],[\"在项目中使用\",{\"1\":{\"299\":1}}],[\"在秒字段就是每分钟的第3秒开始\",{\"1\":{\"291\":1}}],[\"在秒字段里就是每分钟的第2\",{\"1\":{\"291\":1}}],[\"在秒字段里就是每分钟的第1到10秒\",{\"1\":{\"291\":1}}],[\"在分就是每小时的第1到10分钟\",{\"1\":{\"291\":1}}],[\"在不同的字段上\",{\"1\":{\"291\":1}}],[\"在里面加载spring配置\",{\"1\":{\"267\":1}}],[\"在哪里执行\",{\"1\":{\"262\":1}}],[\"在mysql中\",{\"1\":{\"234\":1}}],[\"在多个操作之间存在依赖关系的情况下\",{\"1\":{\"219\":1}}],[\"在加载的时候\",{\"1\":{\"197\":1}}],[\"在服务中添加配置\",{\"1\":{\"188\":1}}],[\"在nacos中添加配置文件\",{\"1\":{\"188\":1}}],[\"在nacos配置管理\",{\"1\":{\"187\":1}}],[\"在相应服务中新建bootstrap\",{\"1\":{\"187\":1}}],[\"在key对应的hash中设置field对应的value\",{\"1\":{\"153\":1}}],[\"在新投递的消息被消费之前\",{\"1\":{\"142\":1}}],[\"在程序开发中\",{\"1\":{\"142\":1}}],[\"在consumer服务中定义处理失败消息的交换机和队列\",{\"1\":{\"141\":1}}],[\"在之前的测试中\",{\"1\":{\"141\":1}}],[\"在消费者出现异常时利用本地重试\",{\"1\":{\"140\":1}}],[\"在利用springamqp声明队列的时候\",{\"1\":{\"136\":1}}],[\"在添加队列的时候\",{\"1\":{\"135\":1}}],[\"在默认情况下\",{\"1\":{\"134\":1}}],[\"在开启持久化机制以后\",{\"1\":{\"133\":1}}],[\"在开启确认机制的情况下\",{\"1\":{\"131\":1}}],[\"在少数情况下\",{\"1\":{\"131\":1}}],[\"在fanout的模式下\",{\"1\":{\"116\":1}}],[\"在上述例子中\",{\"1\":{\"103\":1}}],[\"在这个过程中\",{\"1\":{\"88\":1}}],[\"在这种抄送方式中\",{\"1\":{\"34\":1}}],[\"在父工程配置了依赖\",{\"1\":{\"83\":1}}],[\"在第n1行与n2行之间寻找word1这个字符串\",{\"1\":{\"70\":1}}],[\"在本地和容器间复制文件\",{\"1\":{\"65\":1}}],[\"在容器中执行命令\",{\"1\":{\"65\":1}}],[\"在\",{\"1\":{\"55\":1,\"211\":1,\"357\":1,\"369\":1,\"375\":1,\"398\":1,\"406\":1,\"441\":1,\"481\":3,\"495\":2,\"498\":1}}],[\"在当前目录及其子目录下查找\",{\"1\":{\"55\":1}}],[\"在指定目录下查找文件\",{\"1\":{\"55\":1}}],[\"在图片文件读取完毕后设置预览图片的\",{\"1\":{\"37\":1}}],[\"在spring\",{\"1\":{\"35\":1}}],[\"在某些实现中\",{\"1\":{\"328\":1}}],[\"在某些情况下\",{\"1\":{\"24\":1,\"328\":1}}],[\"在某时刻需要完成的单次任务等场景\",{\"1\":{\"289\":1}}],[\"在某个配置之后进行配置\",{\"1\":{\"24\":1}}],[\"在某个配置之前进行配置\",{\"1\":{\"24\":1}}],[\"在我们写starter的过程中\",{\"1\":{\"22\":1}}],[\"在方法参数中也可以直接注入aproperties对象\",{\"1\":{\"18\":1}}],[\"<h1>hello\",{\"1\":{\"464\":1}}],[\"<<\",{\"1\":{\"341\":5}}],[\"<value>world<\",{\"1\":{\"259\":1}}],[\"<value>hello\",{\"1\":{\"259\":1}}],[\"<version>\",{\"1\":{\"293\":1}}],[\"<version>4\",{\"1\":{\"267\":1,\"409\":1}}],[\"<version>5\",{\"1\":{\"254\":1,\"267\":1,\"318\":3}}],[\"<version>$\",{\"1\":{\"79\":1,\"85\":2}}],[\"<version>3\",{\"1\":{\"41\":1,\"43\":1,\"79\":1,\"85\":2,\"195\":1}}],[\"<version>2\",{\"1\":{\"27\":1,\"78\":1,\"100\":1}}],[\"<array>\",{\"1\":{\"259\":1}}],[\"<artifactid>netty\",{\"1\":{\"409\":1}}],[\"<artifactid>xmlworker<\",{\"1\":{\"318\":1}}],[\"<artifactid>itext\",{\"1\":{\"318\":1}}],[\"<artifactid>itextpdf<\",{\"1\":{\"318\":1}}],[\"<artifactid>jasypt\",{\"1\":{\"293\":1}}],[\"<artifactid>javax\",{\"1\":{\"267\":1}}],[\"<artifactid>joda\",{\"1\":{\"78\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"195\":1}}],[\"<artifactid>maven\",{\"1\":{\"85\":2}}],[\"<artifactid>feign\",{\"1\":{\"172\":1}}],[\"<artifactid>asm<\",{\"1\":{\"79\":2}}],[\"<artifactid>redisson<\",{\"1\":{\"41\":1}}],[\"<artifactid>struts2\",{\"1\":{\"79\":1}}],[\"<artifactid>servlet\",{\"1\":{\"27\":1}}],[\"<artifactid>springfox\",{\"1\":{\"43\":1}}],[\"<artifactid>spring\",{\"1\":{\"19\":1,\"28\":1,\"34\":1,\"37\":1,\"85\":2,\"100\":1,\"121\":1,\"168\":1,\"169\":1,\"171\":2,\"176\":3,\"187\":2,\"190\":1,\"247\":1,\"254\":1,\"267\":1}}],[\"<bean\",{\"1\":{\"254\":2,\"257\":1,\"258\":2,\"259\":1}}],[\"<build>\",{\"1\":{\"85\":2}}],[\"<=\",{\"1\":{\"227\":1,\"341\":4,\"376\":1,\"378\":1,\"459\":1,\"460\":1,\"497\":1,\"499\":1}}],[\"<otherwise>\",{\"1\":{\"209\":1}}],[\"<optional>true<\",{\"1\":{\"19\":1,\"28\":1,\"78\":1}}],[\"<when\",{\"1\":{\"209\":2}}],[\"<constructor\",{\"1\":{\"258\":3}}],[\"<configuration>\",{\"1\":{\"85\":3}}],[\"<choose>\",{\"1\":{\"209\":1}}],[\"<foreach\",{\"1\":{\"206\":1}}],[\"<form\",{\"1\":{\"27\":1}}],[\"<result\",{\"1\":{\"198\":4}}],[\"<resultmap\",{\"1\":{\"198\":1}}],[\"<property\",{\"1\":{\"197\":2,\"257\":2,\"259\":2}}],[\"<plugin>\",{\"1\":{\"85\":3}}],[\"<plugins>\",{\"1\":{\"85\":2}}],[\"<>或\",{\"1\":{\"227\":1}}],[\"<>\",{\"1\":{\"155\":1}}],[\"<goal>repackage<\",{\"1\":{\"85\":1}}],[\"<goals>\",{\"1\":{\"85\":1}}],[\"<groupid>com\",{\"1\":{\"168\":1,\"169\":1,\"176\":1,\"187\":1,\"190\":1,\"293\":1,\"318\":3}}],[\"<groupid>asm<\",{\"1\":{\"79\":2}}],[\"<groupid>joda\",{\"1\":{\"78\":1}}],[\"<groupid>javax\",{\"1\":{\"27\":1,\"267\":1}}],[\"<groupid>io\",{\"1\":{\"43\":1,\"172\":1,\"409\":1}}],[\"<groupid>org\",{\"1\":{\"19\":1,\"28\":1,\"34\":1,\"37\":1,\"41\":1,\"79\":1,\"85\":4,\"100\":1,\"121\":1,\"171\":2,\"176\":2,\"187\":1,\"195\":1,\"247\":1,\"254\":1,\"267\":1}}],[\"<map>\",{\"1\":{\"259\":1}}],[\"<mainclass>com\",{\"1\":{\"85\":1}}],[\"<mirrorof>central<\",{\"1\":{\"74\":1}}],[\"<mirror>\",{\"1\":{\"74\":1}}],[\"<entry\",{\"1\":{\"259\":1}}],[\"<encoding>utf\",{\"1\":{\"85\":2}}],[\"<e\",{\"1\":{\"212\":2}}],[\"<employee>\",{\"1\":{\"204\":1,\"205\":1,\"206\":1}}],[\"<execution>\",{\"1\":{\"85\":1}}],[\"<executions>\",{\"1\":{\"85\":1}}],[\"<exclusion>\",{\"1\":{\"79\":1}}],[\"<exclusions>\",{\"1\":{\"79\":1}}],[\"<t>\",{\"1\":{\"478\":6,\"488\":1,\"492\":1}}],[\"<target>17<\",{\"1\":{\"85\":2}}],[\"<template>\",{\"1\":{\"37\":1}}],[\"<select\",{\"1\":{\"197\":2,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"209\":3}}],[\"<sql\",{\"1\":{\"197\":3}}],[\"<source>17<\",{\"1\":{\"85\":2}}],[\"<script>\",{\"1\":{\"37\":1}}],[\"<scope>provided<\",{\"1\":{\"27\":1,\"267\":1}}],[\"<url>http\",{\"1\":{\"74\":1}}],[\"<name>aliyun\",{\"1\":{\"74\":1}}],[\"<dependencymanagement>\",{\"1\":{\"83\":1}}],[\"<dependency>\",{\"1\":{\"27\":1,\"28\":1,\"34\":1,\"37\":1,\"41\":1,\"43\":1,\"78\":1,\"79\":2,\"100\":1,\"121\":1,\"168\":1,\"169\":1,\"171\":2,\"172\":1,\"176\":3,\"187\":2,\"190\":1,\"195\":1,\"247\":1,\"254\":1,\"267\":2,\"293\":1,\"318\":3,\"409\":1}}],[\"<dependencies>\",{\"1\":{\"83\":1,\"267\":1}}],[\"<div>\",{\"1\":{\"37\":1}}],[\"<if\",{\"1\":{\"209\":5}}],[\"<id\",{\"1\":{\"198\":1}}],[\"<id>repackage<\",{\"1\":{\"85\":1}}],[\"<id>alimaven<\",{\"1\":{\"74\":1}}],[\"<insert\",{\"1\":{\"208\":1}}],[\"<include\",{\"1\":{\"197\":4}}],[\"<input\",{\"1\":{\"27\":2,\"37\":1}}],[\"<img\",{\"1\":{\"34\":1,\"37\":1}}],[\"<第一步获得的密钥>\",{\"1\":{\"34\":1}}],[\"<\",{\"1\":{\"19\":1,\"27\":2,\"28\":1,\"34\":1,\"37\":6,\"41\":2,\"43\":1,\"69\":2,\"70\":1,\"74\":2,\"78\":1,\"79\":6,\"85\":15,\"100\":1,\"121\":1,\"122\":1,\"168\":2,\"169\":2,\"171\":4,\"172\":2,\"176\":6,\"187\":4,\"190\":2,\"195\":2,\"197\":6,\"198\":1,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":2,\"208\":1,\"209\":12,\"227\":1,\"235\":2,\"247\":1,\"254\":3,\"257\":1,\"258\":3,\"259\":6,\"267\":3,\"293\":2,\"318\":6,\"323\":1,\"328\":1,\"341\":14,\"351\":1,\"382\":2,\"385\":1,\"388\":1,\"409\":1,\"450\":2,\"453\":1,\"454\":1,\"455\":1,\"457\":1,\"458\":2,\"459\":1,\"460\":1,\"464\":1,\"478\":1,\"497\":1,\"498\":2,\"499\":2}}],[\"x64aaa\",{\"1\":{\"365\":1}}],[\"x64\",{\"1\":{\"365\":1}}],[\"xmx512m\",{\"1\":{\"94\":2}}],[\"xms64m\",{\"1\":{\"94\":2}}],[\"xmind\",{\"0\":{\"92\":1}}],[\"xmlworkerfontprovider\",{\"1\":{\"319\":1}}],[\"xml配置详解\",{\"1\":{\"198\":1}}],[\"xml映射\",{\"0\":{\"196\":1}}],[\"xml\",{\"1\":{\"34\":1,\"90\":1,\"201\":1,\"202\":1,\"203\":1,\"254\":3,\"257\":1,\"260\":1,\"267\":1,\"328\":3}}],[\"xml复制代码<dependency>\",{\"1\":{\"19\":1}}],[\"xhtml+xml\",{\"1\":{\"90\":1}}],[\"x\",{\"1\":{\"90\":2,\"136\":1,\"142\":2,\"146\":2,\"190\":3,\"232\":2,\"235\":1,\"289\":5,\"301\":1,\"303\":1,\"406\":1,\"407\":5}}],[\"xx\",{\"1\":{\"62\":1}}],[\"xxxxxxx\",{\"1\":{\"303\":1}}],[\"xxxxx\",{\"1\":{\"293\":1}}],[\"xxx\",{\"1\":{\"12\":2,\"17\":4,\"46\":5,\"65\":6,\"120\":1,\"260\":1}}],[\"xxx或是spring\",{\"1\":{\"12\":1}}],[\"不必再执行\",{\"1\":{\"497\":1}}],[\"不断看有没有新任务\",{\"1\":{\"496\":1}}],[\"不用\",{\"1\":{\"481\":1}}],[\"不在线\",{\"1\":{\"471\":1}}],[\"不保存状态时\",{\"1\":{\"467\":1}}],[\"不得束修金\",{\"1\":{\"462\":1}}],[\"不需要像\",{\"1\":{\"447\":1}}],[\"不受影响\",{\"1\":{\"442\":1}}],[\"不仅有\",{\"1\":{\"425\":1}}],[\"不返回\",{\"1\":{\"409\":1}}],[\"不利用\",{\"1\":{\"397\":1}}],[\"不再赘述\",{\"1\":{\"397\":1}}],[\"不再是任意绑定了\",{\"1\":{\"116\":1}}],[\"不能继承\",{\"1\":{\"467\":1}}],[\"不能区分成功失败\",{\"1\":{\"425\":1}}],[\"不能在这里善后\",{\"1\":{\"423\":1}}],[\"不能太大\",{\"1\":{\"383\":1}}],[\"不能被多个\",{\"1\":{\"383\":1}}],[\"不能被索引\",{\"1\":{\"99\":1}}],[\"不能置之不理\",{\"1\":{\"382\":1}}],[\"不能什么都不做\",{\"1\":{\"377\":1}}],[\"不能一次创建多级目录\",{\"1\":{\"364\":1}}],[\"不能直接打开\",{\"1\":{\"355\":1}}],[\"不支持\",{\"1\":{\"290\":1}}],[\"不改变原始设计\",{\"1\":{\"261\":1}}],[\"不影响表格\",{\"1\":{\"240\":1}}],[\"不允许重复值\",{\"1\":{\"236\":1}}],[\"不去重\",{\"1\":{\"235\":1}}],[\"不参与计算\",{\"1\":{\"228\":1}}],[\"不等于\",{\"1\":{\"227\":1}}],[\"不重复\",{\"1\":{\"226\":1}}],[\"不写条件\",{\"1\":{\"223\":1}}],[\"不管如何都会回滚\",{\"1\":{\"219\":1}}],[\"不是读取数据\",{\"1\":{\"495\":1}}],[\"不是我们想象的\",{\"1\":{\"441\":1}}],[\"不是\",{\"1\":{\"418\":1}}],[\"不是立刻写入磁盘\",{\"1\":{\"361\":1}}],[\"不是数据库中字段\",{\"1\":{\"215\":1}}],[\"不是autodelete\",{\"1\":{\"123\":1}}],[\"不被修改\",{\"1\":{\"213\":1}}],[\"不屑password\",{\"1\":{\"213\":1}}],[\"不同的链路设备的\",{\"1\":{\"455\":1}}],[\"不同的地方还是读取原来服务的application\",{\"1\":{\"187\":1}}],[\"不同的业务场景判断的思路也不一样\",{\"1\":{\"144\":1}}],[\"不携带请求头\",{\"1\":{\"185\":1}}],[\"不执行fsync\",{\"1\":{\"160\":1}}],[\"不会产生内存复制\",{\"1\":{\"445\":1}}],[\"不会抛异常\",{\"1\":{\"425\":1,\"429\":1}}],[\"不会使用\",{\"1\":{\"396\":1,\"397\":4}}],[\"不会自动缓冲数据\",{\"1\":{\"392\":1}}],[\"不会阻塞\",{\"1\":{\"374\":1}}],[\"不会让线程吊死在一个\",{\"1\":{\"337\":1}}],[\"不会污染数据\",{\"1\":{\"219\":1}}],[\"不会改变数据\",{\"1\":{\"219\":1}}],[\"不会参与查询\",{\"1\":{\"215\":1}}],[\"不会requeue到队列\",{\"1\":{\"140\":1}}],[\"不会直接依赖\",{\"1\":{\"83\":1}}],[\"不做处理\",{\"1\":{\"139\":1,\"441\":1}}],[\"不建议使用\",{\"1\":{\"139\":1}}],[\"不处理边界的问题\",{\"0\":{\"381\":1}}],[\"不处理\",{\"1\":{\"139\":1}}],[\"不关闭\",{\"1\":{\"108\":1}}],[\"不可被分开的词查询\",{\"1\":{\"100\":1}}],[\"不可被索引\",{\"1\":{\"100\":1}}],[\"不加id\",{\"1\":{\"98\":1}}],[\"不知道请求被转发到了哪个后端服务器\",{\"1\":{\"88\":1}}],[\"不知道大家有没有发现\",{\"1\":{\"19\":1}}],[\"不想使用其中的某个依赖\",{\"1\":{\"79\":1}}],[\"不过调用了\",{\"1\":{\"358\":1}}],[\"不过需要注意的是\",{\"1\":{\"145\":1}}],[\"不过不怕一万就怕万一\",{\"1\":{\"140\":1}}],[\"不过出于性能考虑\",{\"1\":{\"133\":1}}],[\"不过\",{\"1\":{\"131\":1}}],[\"不过springamqp提供的重试机制是阻塞式的重试\",{\"1\":{\"130\":1}}],[\"不过这里需要注意这几个注解只能对自动配置生效\",{\"1\":{\"24\":1}}],[\"不过我个人习惯还是xxx\",{\"1\":{\"12\":1}}],[\"不启用方法代理的情况下\",{\"1\":{\"20\":1}}],[\"自带的序列化\",{\"1\":{\"478\":1}}],[\"自己调用\",{\"1\":{\"497\":1}}],[\"自己\",{\"1\":{\"432\":1}}],[\"自己根据返回值检查是否有事件\",{\"1\":{\"374\":1}}],[\"自己的\",{\"1\":{\"344\":1,\"345\":1,\"415\":2}}],[\"自己手动对敏感信息进行加解密也是可以的\",{\"1\":{\"293\":1}}],[\"自\",{\"1\":{\"300\":1}}],[\"自连接\",{\"1\":{\"235\":1}}],[\"自增\",{\"1\":{\"215\":1}}],[\"自动递增\",{\"1\":{\"445\":1}}],[\"自动提交表单\",{\"1\":{\"297\":1}}],[\"自动提示\",{\"0\":{\"19\":1}}],[\"自动装配\",{\"1\":{\"260\":1}}],[\"自动装配到spring的bean\",{\"1\":{\"260\":1}}],[\"自动生成的快照文件\",{\"1\":{\"158\":1}}],[\"自动ack\",{\"1\":{\"139\":1}}],[\"自动返回reject\",{\"1\":{\"139\":1}}],[\"自动模式\",{\"1\":{\"139\":1}}],[\"自动从队列中删除\",{\"1\":{\"106\":1}}],[\"自启动\",{\"1\":{\"36\":1}}],[\"自定义协议要素\",{\"0\":{\"465\":1}}],[\"自定义注解为属性赋值\",{\"0\":{\"277\":1}}],[\"自定义镜像\",{\"0\":{\"61\":1}}],[\"自定义\",{\"0\":{\"9\":1}}],[\"映射查询语句\",{\"1\":{\"196\":1}}],[\"映射删除语句\",{\"1\":{\"196\":1}}],[\"映射更新语句\",{\"1\":{\"196\":1}}],[\"映射插入语句\",{\"1\":{\"196\":1}}],[\"映射宿主机上\",{\"1\":{\"59\":1}}],[\"映射\",{\"1\":{\"18\":2,\"99\":2,\"215\":1}}],[\"虽然我们利用各种机制尽可能增加了消息的可靠性\",{\"1\":{\"145\":1}}],[\"虽然\",{\"1\":{\"18\":1}}],[\"vuepress\",{\"1\":{\"455\":2,\"497\":2}}],[\"v6\",{\"1\":{\"301\":1}}],[\"vs\",{\"0\":{\"367\":1,\"391\":1,\"392\":1,\"435\":1,\"436\":1},\"1\":{\"300\":1,\"393\":1,\"407\":2,\"432\":1}}],[\"v7\",{\"1\":{\"288\":1,\"301\":1}}],[\"v3\",{\"1\":{\"288\":1}}],[\"v2\",{\"1\":{\"167\":1,\"305\":2}}],[\"visitfile\",{\"1\":{\"364\":6}}],[\"visibility\",{\"1\":{\"155\":1}}],[\"viewport\",{\"1\":{\"301\":1}}],[\"view\",{\"1\":{\"238\":3,\"239\":1,\"240\":1}}],[\"views\",{\"1\":{\"208\":2,\"218\":2}}],[\"virtual\",{\"1\":{\"121\":1}}],[\"vim\",{\"0\":{\"70\":1}}],[\"verbose\",{\"1\":{\"163\":1}}],[\"verify\",{\"1\":{\"90\":1}}],[\"version\",{\"1\":{\"43\":1,\"62\":1,\"79\":2,\"85\":2,\"305\":1,\"328\":4,\"466\":2,\"467\":2,\"478\":2}}],[\"version>\",{\"1\":{\"27\":1,\"41\":1,\"43\":1,\"78\":1,\"79\":2,\"85\":4,\"100\":1,\"195\":1,\"254\":1,\"267\":2,\"293\":1,\"318\":3,\"409\":1}}],[\"variables\",{\"1\":{\"244\":1}}],[\"varchar\",{\"1\":{\"198\":3}}],[\"var\",{\"1\":{\"62\":1,\"90\":3,\"244\":1}}],[\"validated\",{\"1\":{\"37\":1}}],[\"validationmessages\",{\"1\":{\"37\":1}}],[\"validation<\",{\"1\":{\"37\":1}}],[\"value>\",{\"1\":{\"259\":2}}],[\"values\",{\"1\":{\"208\":1,\"222\":4,\"478\":2}}],[\"value序列化方式采用jackson\",{\"1\":{\"155\":1}}],[\"value的长度\",{\"1\":{\"153\":1}}],[\"value后面增加world\",{\"1\":{\"153\":1}}],[\"valueoperations\",{\"1\":{\"40\":1}}],[\"valueof\",{\"1\":{\"35\":1,\"41\":1,\"182\":1,\"185\":1,\"450\":2,\"478\":1}}],[\"value\",{\"1\":{\"37\":2,\"40\":3,\"123\":1,\"125\":4,\"126\":4,\"127\":4,\"136\":1,\"153\":1,\"183\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"260\":1,\"274\":2,\"275\":1,\"382\":1,\"438\":9,\"469\":2,\"478\":6}}],[\"value=\",{\"1\":{\"27\":2,\"197\":4,\"215\":1,\"257\":2,\"258\":2,\"259\":1}}],[\"value确实能拿到配置文件中的值\",{\"1\":{\"18\":1}}],[\"value不就好了\",{\"1\":{\"18\":1}}],[\"volatile\",{\"1\":{\"388\":2,\"481\":1}}],[\"volumes\",{\"1\":{\"62\":1}}],[\"volume\",{\"1\":{\"58\":1,\"59\":5}}],[\"voidpromise\",{\"1\":{\"480\":1,\"497\":1,\"498\":1}}],[\"void\",{\"1\":{\"15\":1,\"16\":3,\"26\":1,\"34\":6,\"36\":3,\"37\":4,\"101\":1,\"102\":1,\"107\":1,\"108\":2,\"109\":1,\"111\":2,\"113\":1,\"114\":2,\"117\":1,\"118\":4,\"120\":3,\"122\":5,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"136\":1,\"139\":2,\"144\":2,\"147\":1,\"148\":1,\"156\":1,\"171\":1,\"184\":2,\"185\":2,\"213\":4,\"248\":1,\"249\":1,\"254\":1,\"255\":2,\"258\":1,\"262\":3,\"264\":4,\"265\":2,\"274\":2,\"280\":2,\"284\":2,\"285\":1,\"293\":1,\"320\":1,\"328\":2,\"338\":1,\"341\":4,\"351\":2,\"362\":1,\"364\":1,\"376\":2,\"378\":1,\"381\":2,\"382\":2,\"385\":2,\"388\":5,\"390\":2,\"399\":3,\"401\":8,\"410\":2,\"411\":1,\"417\":6,\"418\":2,\"422\":4,\"423\":3,\"432\":8,\"434\":1,\"441\":2,\"449\":4,\"450\":2,\"453\":8,\"457\":4,\"458\":3,\"459\":3,\"460\":3,\"463\":5,\"464\":3,\"466\":2,\"467\":2,\"469\":3,\"470\":7,\"471\":2,\"472\":5,\"473\":2,\"475\":2,\"478\":2,\"480\":3,\"481\":2,\"488\":4,\"489\":1,\"490\":2,\"491\":1,\"492\":3,\"493\":1,\"495\":14,\"496\":5,\"497\":3,\"498\":8,\"499\":1}}],[\"v\",{\"1\":{\"40\":3,\"51\":2,\"59\":2,\"70\":1,\"86\":2,\"153\":1,\"313\":1,\"350\":1}}],[\"用在客户端建立连接时\",{\"1\":{\"480\":1}}],[\"用一字节\",{\"1\":{\"438\":1}}],[\"用的\",{\"1\":{\"410\":1}}],[\"用时\",{\"1\":{\"362\":2}}],[\"用过java\",{\"0\":{\"204\":1}}],[\"用来缓存消息\",{\"1\":{\"498\":1}}],[\"用来接收结果的\",{\"1\":{\"493\":1}}],[\"用来分配\",{\"1\":{\"485\":1,\"499\":1}}],[\"用来触发特殊事件\",{\"1\":{\"475\":2}}],[\"用来判断是不是\",{\"1\":{\"475\":2}}],[\"用来在第一时间判定是否是无效数据包\",{\"1\":{\"465\":1}}],[\"用来处理\",{\"1\":{\"421\":1,\"432\":1}}],[\"用来解决数据复制阶段的阻塞问题\",{\"1\":{\"398\":1}}],[\"用来解放\",{\"1\":{\"396\":1}}],[\"用来与客户端之间通信\",{\"1\":{\"368\":1,\"369\":1}}],[\"用来获取\",{\"1\":{\"363\":1}}],[\"用来表示文件路径\",{\"1\":{\"363\":1}}],[\"用来匹配\",{\"1\":{\"313\":1}}],[\"用来帮助分析性能问题\",{\"1\":{\"297\":1}}],[\"用来查看sql语句性能\",{\"1\":{\"245\":1}}],[\"用来写公用的openfeign\",{\"1\":{\"173\":1}}],[\"用来实现主从集群的自动故障恢复\",{\"1\":{\"163\":1}}],[\"用来启动不同的端口\",{\"1\":{\"162\":1}}],[\"用最少的命令达到相同的效果\",{\"1\":{\"160\":1}}],[\"用默认no即可\",{\"1\":{\"160\":1}}],[\"用于快速开发可维护\",{\"1\":{\"404\":1}}],[\"用于忽略大小写\",{\"1\":{\"315\":1}}],[\"用于启动现有浏览器安装或连接到远程安装\",{\"1\":{\"300\":1}}],[\"用于接收json数据\",{\"1\":{\"275\":1}}],[\"用于接收url地址参数\",{\"1\":{\"275\":1}}],[\"用于强制保证某列或某组列的唯一性\",{\"1\":{\"236\":1}}],[\"用于地理数据的空间索引\",{\"1\":{\"236\":1}}],[\"用于全文搜索\",{\"1\":{\"236\":1}}],[\"用于构建\",{\"1\":{\"163\":1}}],[\"用于识别不同消息\",{\"1\":{\"143\":1}}],[\"用于应用程序搜索\",{\"1\":{\"94\":1}}],[\"用函数表达式来描述是这样的\",{\"1\":{\"142\":1}}],[\"用正则表达式匹配队列的名字\",{\"1\":{\"137\":1}}],[\"用mysqldump命令导出数据库\",{\"1\":{\"68\":1}}],[\"用户管理接口\",{\"1\":{\"469\":1}}],[\"用户态与内核态的切换次数没有减少\",{\"1\":{\"397\":1}}],[\"用户态与内核态的切换发生了\",{\"1\":{\"396\":1}}],[\"用户配置文件\",{\"1\":{\"302\":1}}],[\"用户在使用上的区别\",{\"1\":{\"302\":1}}],[\"用户id\",{\"1\":{\"184\":2}}],[\"用户选择了退款\",{\"1\":{\"142\":1}}],[\"用户名或密码不正确\",{\"1\":{\"470\":1,\"471\":1}}],[\"用户名\",{\"1\":{\"469\":2}}],[\"用户名已存在\",{\"1\":{\"40\":1}}],[\"用户名不能为空\",{\"1\":{\"40\":2}}],[\"用户给收件人发出邮件的同时把该邮件抄送给另外的人\",{\"1\":{\"34\":1}}],[\"用\",{\"1\":{\"18\":1,\"385\":1}}],[\"you\",{\"1\":{\"351\":3}}],[\"youremail\",{\"1\":{\"51\":1}}],[\"your\",{\"1\":{\"7\":1,\"8\":1,\"36\":1,\"45\":2,\"288\":1,\"441\":1}}],[\"youraccesskeysecret\",{\"1\":{\"6\":1}}],[\"youraccesskeyid\",{\"1\":{\"6\":1}}],[\"ycombinator\",{\"1\":{\"301\":1}}],[\"yarn\",{\"1\":{\"299\":1,\"300\":1}}],[\"yaml\",{\"1\":{\"187\":6}}],[\"yaml文件\",{\"1\":{\"130\":1}}],[\"ysmzs6ucg==\",{\"1\":{\"293\":1}}],[\"yes\",{\"1\":{\"245\":1}}],[\"year\",{\"1\":{\"232\":2}}],[\"y的模\",{\"1\":{\"232\":1}}],[\"yy\",{\"1\":{\"70\":1}}],[\"yyy\",{\"1\":{\"46\":1}}],[\"yyyy\",{\"1\":{\"27\":1,\"303\":2}}],[\"y\",{\"1\":{\"70\":1,\"80\":7,\"232\":2,\"303\":1}}],[\"yml文件\",{\"1\":{\"140\":1}}],[\"yml\",{\"1\":{\"34\":1,\"62\":1,\"260\":1}}],[\"yml或application\",{\"1\":{\"18\":1}}],[\"配置中文字体\",{\"0\":{\"319\":1}}],[\"配置拦截器\",{\"0\":{\"280\":1}}],[\"配置tomcat启动即可\",{\"1\":{\"267\":1}}],[\"配置bean\",{\"1\":{\"254\":1}}],[\"配置实在是多\",{\"1\":{\"254\":1}}],[\"配置热跟新\",{\"0\":{\"188\":1}}],[\"配置列表中添加公共配置\",{\"1\":{\"187\":1}}],[\"配置其他\",{\"1\":{\"163\":1}}],[\"配置日志文件路径和级别\",{\"1\":{\"163\":1}}],[\"配置监控的主节点信息\",{\"1\":{\"163\":1}}],[\"配置redistemplate\",{\"1\":{\"155\":1}}],[\"配置自动创建消息id\",{\"1\":{\"143\":1}}],[\"配置\",{\"0\":{\"285\":1},\"1\":{\"35\":1,\"37\":1,\"88\":1,\"89\":1,\"90\":3,\"163\":2,\"168\":1,\"169\":1,\"172\":1,\"176\":1,\"190\":1,\"255\":1,\"293\":1,\"389\":1}}],[\"配置顺序\",{\"0\":{\"24\":1}}],[\"配置2中a1不会被注入\",{\"1\":{\"22\":1}}],[\"配置1中的a1还是会被注入\",{\"1\":{\"22\":1}}],[\"配置依赖\",{\"0\":{\"21\":1}}],[\"配置代理\",{\"0\":{\"20\":1}}],[\"配置文件中使用不推荐\",{\"1\":{\"293\":1}}],[\"配置文件中的敏感信息通常需要对它进行加密\",{\"1\":{\"293\":1}}],[\"配置文件\",{\"0\":{\"18\":1},\"1\":{\"478\":1}}],[\"配置类\",{\"0\":{\"13\":1}}],[\"那样不是也可以吗\",{\"1\":{\"424\":1}}],[\"那我们的配置可以这样写\",{\"1\":{\"20\":1}}],[\"那就是开发问题了\",{\"1\":{\"139\":1}}],[\"那就是用\",{\"1\":{\"18\":1}}],[\"那就是importbeandefinitionregistrar\",{\"1\":{\"16\":1}}],[\"那么任务就会等到下次\",{\"1\":{\"497\":1}}],[\"那么必须加以区分\",{\"1\":{\"462\":1}}],[\"那么就能防止前面提到的误判\",{\"1\":{\"475\":1}}],[\"那么就会解析错误\",{\"1\":{\"459\":1}}],[\"那么就直接调用\",{\"1\":{\"418\":1}}],[\"那么\",{\"1\":{\"441\":1}}],[\"那么也必须\",{\"1\":{\"441\":1}}],[\"那么便无须再传递\",{\"1\":{\"441\":1}}],[\"那么交易服务就必须自己主动去查询支付状态\",{\"1\":{\"145\":1}}],[\"那么订单状态会被再次改为已支付\",{\"1\":{\"142\":1}}],[\"那么消息requeue就会无限循环\",{\"1\":{\"140\":1}}],[\"那么mq会在消息持久化以后才发送ack回执\",{\"1\":{\"133\":1}}],[\"那么问题来了\",{\"1\":{\"128\":1,\"145\":1}}],[\"那么你就可以在a中\",{\"1\":{\"77\":1}}],[\"那么之前的配置方式就不行了\",{\"1\":{\"21\":1}}],[\"那么怎么在我们的aautoconfiguration中获得这两个属性呢\",{\"1\":{\"18\":1}}],[\"那么spring默认的扫描路径就能扫到\",{\"1\":{\"13\":1}}],[\"那么要怎么把a注入到spring的容器中呢\",{\"1\":{\"13\":1}}],[\"那么我们应该怎么实现呢\",{\"1\":{\"11\":1}}],[\"其大小通过\",{\"1\":{\"481\":1}}],[\"其各个方法均无法正常使用\",{\"1\":{\"441\":1}}],[\"其返回值都是\",{\"1\":{\"438\":1}}],[\"其间也不会使用\",{\"1\":{\"396\":1}}],[\"其内容由查询定义\",{\"1\":{\"237\":1}}],[\"其次\",{\"1\":{\"145\":1}}],[\"其实就是给网络传输的信息加上\",{\"1\":{\"462\":1}}],[\"其实这些认识都比较片面\",{\"1\":{\"424\":1}}],[\"其实\",{\"1\":{\"381\":1}}],[\"其实思想很简单\",{\"1\":{\"145\":1}}],[\"其实很简单\",{\"1\":{\"143\":1}}],[\"其实还有另一种方式也可以拿到注解的属性\",{\"1\":{\"16\":1}}],[\"其中队列使用了\",{\"1\":{\"496\":1}}],[\"其中确定具体消息类型\",{\"1\":{\"478\":1}}],[\"其中\",{\"1\":{\"410\":1,\"422\":1,\"434\":1,\"481\":1}}],[\"其中x是一个域的占位符\",{\"1\":{\"289\":1}}],[\"其中ack和nack属于publisher\",{\"1\":{\"131\":1}}],[\"其中包含了分页信息\",{\"1\":{\"103\":1}}],[\"其它两个都处于\",{\"1\":{\"481\":1}}],[\"其它代码不变\",{\"1\":{\"454\":1}}],[\"其它实现还有\",{\"1\":{\"410\":1,\"411\":1}}],[\"其它网络应用框架\",{\"1\":{\"407\":1}}],[\"其它\",{\"1\":{\"343\":1,\"441\":1}}],[\"其它情况都会返回nack\",{\"1\":{\"131\":1}}],[\"其它region请按实际情况填写\",{\"1\":{\"6\":1}}],[\"其他不管\",{\"1\":{\"159\":1}}],[\"其他的连接不可用\",{\"1\":{\"107\":1,\"108\":1}}],[\"其他配置\",{\"1\":{\"90\":1}}],[\"其他\",{\"0\":{\"207\":1,\"242\":1,\"276\":1},\"1\":{\"90\":1,\"321\":1}}],[\"其他常用的条件注解\",{\"0\":{\"23\":1}}],[\"就一条消息\",{\"1\":{\"498\":1}}],[\"就这么一直耗着\",{\"1\":{\"475\":1}}],[\"就好比截取了原始\",{\"1\":{\"443\":1}}],[\"就没用了\",{\"1\":{\"441\":1}}],[\"就没有用户信息\",{\"1\":{\"185\":1}}],[\"就失去了传递性\",{\"1\":{\"441\":1}}],[\"就属于废弃部分了\",{\"1\":{\"440\":1}}],[\"就算是堆内存\",{\"1\":{\"436\":1}}],[\"就要负责到底\",{\"1\":{\"413\":1}}],[\"就要用到联合查询了\",{\"1\":{\"235\":1}}],[\"就取消\",{\"1\":{\"385\":1}}],[\"就有两阶段策略\",{\"1\":{\"385\":1}}],[\"就会造成半包\",{\"1\":{\"455\":1}}],[\"就会导致空指针异常\",{\"1\":{\"379\":1}}],[\"就会将相关的\",{\"1\":{\"379\":1}}],[\"就会报错找不到对应的bean\",{\"1\":{\"21\":1}}],[\"就能回到\",{\"1\":{\"346\":1}}],[\"就代表每年每月每日每小时的1分0秒触发任务\",{\"1\":{\"291\":1}}],[\"就代表每秒\",{\"1\":{\"291\":1}}],[\"就可以安全地在多线程下被共享\",{\"1\":{\"467\":1}}],[\"就可以方便获取消息大小\",{\"1\":{\"382\":1}}],[\"就可以监控多个\",{\"1\":{\"371\":1}}],[\"就可以被\",{\"1\":{\"246\":1}}],[\"就可以进行双向通信\",{\"1\":{\"30\":1}}],[\"就可能耗尽服务器的线程资源\",{\"1\":{\"192\":1}}],[\"就可能出现消息重复投递的情况\",{\"1\":{\"142\":1}}],[\"就增加了lazy\",{\"1\":{\"134\":1}}],[\"就必须从3个方面入手\",{\"1\":{\"129\":1}}],[\"就消费掉\",{\"1\":{\"106\":1}}],[\"就是流水线上的各道工序\",{\"1\":{\"432\":1}}],[\"就是\",{\"1\":{\"432\":1}}],[\"就是上面的\",{\"1\":{\"427\":1}}],[\"就是将来事件发生后\",{\"1\":{\"382\":1}}],[\"就是spring\",{\"1\":{\"188\":1}}],[\"就是生产者发送消息时\",{\"1\":{\"130\":1}}],[\"就是构建一个docker镜像\",{\"1\":{\"61\":1}}],[\"就是普通的方法调用\",{\"1\":{\"20\":1}}],[\"就建一个\",{\"1\":{\"27\":1}}],[\"就不会被接收方弄错意思了\",{\"1\":{\"462\":1}}],[\"就不会再注入这个配置中的a实例了\",{\"1\":{\"22\":1}}],[\"就不会配置aconfiguration\",{\"1\":{\"16\":1}}],[\"就行了\",{\"1\":{\"16\":2}}],[\"返回结果\",{\"1\":{\"489\":1}}],[\"返回响应\",{\"1\":{\"464\":1}}],[\"返回null\",{\"1\":{\"425\":1}}],[\"返回nack\",{\"1\":{\"141\":1}}],[\"返回\",{\"1\":{\"369\":1,\"499\":1}}],[\"返回一个串\",{\"1\":{\"273\":1}}],[\"返回一个日期加上某个时间后的日期\",{\"1\":{\"232\":1}}],[\"返回值表示读到了多少字节\",{\"1\":{\"356\":1}}],[\"返回值\",{\"1\":{\"275\":1,\"488\":1}}],[\"返回值类型\",{\"1\":{\"267\":1}}],[\"返回值为null\",{\"1\":{\"215\":1}}],[\"返回对象必须是object\",{\"1\":{\"264\":1}}],[\"返回当前时间\",{\"1\":{\"232\":1}}],[\"返回当前日期和时间\",{\"1\":{\"232\":1}}],[\"返回当前日期\",{\"1\":{\"232\":1}}],[\"返回0\",{\"1\":{\"232\":1}}],[\"返回x\",{\"1\":{\"232\":1}}],[\"返回相应\",{\"1\":{\"163\":1}}],[\"返回有序集合中元素的数量\",{\"1\":{\"153\":1}}],[\"返回有序集合中指定元素的排名\",{\"1\":{\"153\":1}}],[\"返回有序集合中指定分数范围的元素数量\",{\"1\":{\"153\":1}}],[\"返回有序集合中指定分数范围的元素\",{\"1\":{\"153\":1}}],[\"返回有序集合中指定范围的元素\",{\"1\":{\"153\":1}}],[\"返回多个集合的交集\",{\"1\":{\"153\":1}}],[\"返回多个集合的差集\",{\"1\":{\"153\":1}}],[\"返回多个集合的并集\",{\"1\":{\"153\":1}}],[\"返回集合中元素的数量\",{\"1\":{\"153\":1}}],[\"返回集合中所有元素\",{\"1\":{\"153\":1}}],[\"返回ack\",{\"1\":{\"131\":2}}],[\"返回路径\",{\"1\":{\"27\":1}}],[\"返回空数组即可\",{\"1\":{\"16\":1}}],[\"返回所有的链接\",{\"1\":{\"7\":1}}],[\"接口\",{\"1\":{\"441\":1,\"478\":1}}],[\"接口提供遍历\",{\"1\":{\"415\":1}}],[\"接收结果\",{\"1\":{\"492\":1}}],[\"接收响应消息\",{\"1\":{\"470\":1}}],[\"接收方也会维护一个窗口\",{\"1\":{\"455\":1}}],[\"接收方\",{\"1\":{\"455\":2}}],[\"接收\",{\"1\":{\"455\":2}}],[\"接收缓冲区大小\",{\"1\":{\"486\":1}}],[\"接收缓冲区\",{\"1\":{\"392\":1}}],[\"接收客户端发送的数据\",{\"1\":{\"368\":1,\"369\":1}}],[\"接收到\",{\"1\":{\"136\":1}}],[\"接收到消息后直接存入磁盘而非内存\",{\"1\":{\"134\":1}}],[\"接受url地址参数\",{\"1\":{\"275\":1}}],[\"接着\",{\"1\":{\"103\":2}}],[\"接着之前的假设\",{\"1\":{\"21\":1}}],[\"接着我们再看下面的配置2\",{\"1\":{\"22\":1}}],[\"接着我们在aautoconfiguration上添加\",{\"1\":{\"18\":1}}],[\"接着我们需要在spring\",{\"1\":{\"17\":1}}],[\"接着我们实现一个importselector\",{\"1\":{\"16\":1}}],[\"接下来的处理也移交至\",{\"1\":{\"498\":1}}],[\"接下来要向网卡写数据\",{\"1\":{\"396\":1}}],[\"接下来服务器端输出\",{\"1\":{\"390\":1}}],[\"接下来我们使用spring\",{\"1\":{\"17\":1}}],[\"接下来我们来解决这个问题\",{\"1\":{\"16\":1}}],[\"接下来就可以决定我们的starter的导入方式了\",{\"1\":{\"14\":1}}],[\"当出现异常时触发\",{\"1\":{\"473\":1}}],[\"当连接断开时触发\",{\"1\":{\"473\":1}}],[\"当应答未到达前\",{\"1\":{\"455\":1}}],[\"当发送的数据超过\",{\"1\":{\"455\":1}}],[\"当滑动窗口中缓冲了多个报文就会粘包\",{\"1\":{\"455\":1}}],[\"当包装\",{\"1\":{\"446\":1}}],[\"当计数为\",{\"1\":{\"441\":1}}],[\"当调用一次\",{\"1\":{\"393\":1}}],[\"当你安装\",{\"1\":{\"299\":1}}],[\"当名字一样使\",{\"1\":{\"272\":1}}],[\"当\",{\"1\":{\"246\":1,\"467\":1,\"497\":2}}],[\"当对某一字段增加索引后\",{\"1\":{\"236\":1}}],[\"当对应的配置匹配时生效\",{\"1\":{\"23\":1}}],[\"当对应的class不存在时生效\",{\"1\":{\"23\":1}}],[\"当对应的class存在时生效\",{\"1\":{\"23\":1}}],[\"当对应的bean存在时生效\",{\"1\":{\"23\":1}}],[\"当多个用户同时对同一数据进行操作时\",{\"1\":{\"219\":1}}],[\"当下游服务因访问压力过大而响应变慢或失败\",{\"1\":{\"193\":1}}],[\"当一个业务接口响应时间长\",{\"1\":{\"192\":1}}],[\"当前时间`\",{\"1\":{\"497\":1}}],[\"当前表与自身的连接查询\",{\"1\":{\"235\":1}}],[\"当前数据库大小\",{\"1\":{\"152\":1}}],[\"当前线程是被阻塞的\",{\"1\":{\"130\":1}}],[\"当业务出现异常时\",{\"1\":{\"139\":1}}],[\"当业务正常执行时则自动返回ack\",{\"1\":{\"139\":1}}],[\"当消费者出现异常后\",{\"1\":{\"140\":1}}],[\"当消费者处理消息结束后\",{\"1\":{\"139\":1}}],[\"当消息处理器第一次写入消息时\",{\"1\":{\"385\":1}}],[\"当消息处理发生异常时\",{\"1\":{\"139\":1}}],[\"当消息投递到mq\",{\"1\":{\"131\":1}}],[\"当rabbitmq向消费者投递消息以后\",{\"1\":{\"138\":1}}],[\"当rabbittemplate与mq连接超时后\",{\"1\":{\"130\":1}}],[\"当然\",{\"1\":{\"136\":1,\"137\":1,\"140\":1,\"441\":1}}],[\"当然也可以考虑使用异步线程来执行发送消息的代码\",{\"1\":{\"130\":1}}],[\"当生产者发送消息给mq后\",{\"1\":{\"131\":1}}],[\"当网络不稳定的时候\",{\"1\":{\"130\":1}}],[\"当访问localhost\",{\"1\":{\"88\":1}}],[\"当别的项目引用这个jar包\",{\"1\":{\"78\":1}}],[\"当vim卡死时\",{\"1\":{\"70\":1}}],[\"当容器中存在a类型的对象就不会再注入这个配置中的a1实例\",{\"1\":{\"22\":1}}],[\"当容器中存在a1类型的对象就不会再注入这个配置中的a1实例\",{\"1\":{\"22\":1}}],[\"当spring发现当前已经存在a对应的实例时\",{\"1\":{\"22\":1}}],[\"当我们把配置改为auto时\",{\"1\":{\"139\":1}}],[\"当我们将enabled设置为false时\",{\"1\":{\"16\":1}}],[\"当我们需要集成这个功能的时候只要添加这个注解就行了\",{\"1\":{\"15\":1}}],[\"当我们需要集成某个功能的时候\",{\"1\":{\"10\":1}}],[\"当enabled为false时\",{\"1\":{\"16\":1}}],[\"当enabled为false时不导入aconfiguration\",{\"1\":{\"16\":1}}],[\"当enabled为true时\",{\"1\":{\"16\":1}}],[\"当enabled为true时导入aconfiguration\",{\"1\":{\"16\":1}}],[\"上面代码创建了一个默认的\",{\"1\":{\"434\":1}}],[\"上面的代码\",{\"1\":{\"171\":1}}],[\"上面的写法好像没办法拿到参数啊\",{\"1\":{\"16\":1}}],[\"上源源不断的\",{\"1\":{\"415\":1}}],[\"上关联的附件\",{\"1\":{\"382\":1}}],[\"上的各种事件\",{\"1\":{\"432\":1}}],[\"上的可写事件\",{\"1\":{\"385\":1}}],[\"上的\",{\"1\":{\"379\":2,\"380\":1,\"415\":1,\"495\":1,\"498\":1,\"499\":2}}],[\"上\",{\"1\":{\"337\":1,\"382\":1,\"385\":1,\"484\":1,\"495\":2,\"498\":1}}],[\"上发生的事件\",{\"1\":{\"337\":1}}],[\"上游服务为了保护系统整体的可用性\",{\"1\":{\"193\":1}}],[\"上述条件不满足\",{\"1\":{\"455\":1}}],[\"上述代码等同于这样的sql语句\",{\"1\":{\"144\":1}}],[\"上述代码逻辑上符合了幂等判断的需求\",{\"1\":{\"144\":1}}],[\"上述极端情况发生的概率还是非常低的\",{\"1\":{\"140\":1}}],[\"上传失败\",{\"1\":{\"27\":1}}],[\"上传成功\",{\"1\":{\"27\":1}}],[\"上传图片\",{\"0\":{\"6\":1}}],[\"上传\",{\"0\":{\"4\":1},\"1\":{\"5\":1,\"27\":1}}],[\"主循环\",{\"1\":{\"496\":1}}],[\"主人把鸡鸭鱼肉的钱都会换为束修金的\",{\"1\":{\"462\":1}}],[\"主要任务是执行死循环\",{\"1\":{\"496\":1}}],[\"主要用在阻塞\",{\"1\":{\"480\":1}}],[\"主要用来读取客户端数据\",{\"1\":{\"432\":1}}],[\"主要对写回结果进行加工\",{\"1\":{\"432\":1}}],[\"主要是看有没有必要额外配置一个注解\",{\"1\":{\"14\":1}}],[\"主线程并没有\",{\"1\":{\"399\":1}}],[\"主键约束\",{\"1\":{\"233\":1}}],[\"主键\",{\"1\":{\"215\":1}}],[\"主键返回\",{\"0\":{\"208\":1}}],[\"主节点设置了密码\",{\"1\":{\"163\":1}}],[\"主观下线\",{\"1\":{\"163\":1}}],[\"主从集群结构\",{\"1\":{\"161\":1}}],[\"主从\",{\"0\":{\"161\":1}}],[\"主代码\",{\"1\":{\"80\":1}}],[\"主题\",{\"1\":{\"34\":1}}],[\"主账号accesskey泄露会威胁您所有资源的安全\",{\"1\":{\"5\":1}}],[\"这行代码完成的事实是\",{\"1\":{\"495\":1,\"498\":1}}],[\"这白纸黑字明摆着的\",{\"1\":{\"462\":1}}],[\"这句话有数种拆解方式\",{\"1\":{\"462\":1}}],[\"这就是\",{\"1\":{\"455\":1}}],[\"这就造成了半包\",{\"1\":{\"455\":1}}],[\"这就会导致ack有一定的延迟\",{\"1\":{\"133\":1}}],[\"这\",{\"1\":{\"455\":1}}],[\"这块内存不受\",{\"1\":{\"397\":1}}],[\"这项能力\",{\"1\":{\"396\":1}}],[\"这期间\",{\"1\":{\"396\":1}}],[\"这期间用户线程阻塞\",{\"1\":{\"396\":1}}],[\"这边的\",{\"1\":{\"390\":1}}],[\"这称之为多路复用\",{\"1\":{\"370\":1}}],[\"这时候\",{\"1\":{\"498\":1}}],[\"这时是处理\",{\"1\":{\"498\":1,\"499\":1}}],[\"这时需要向\",{\"1\":{\"496\":1}}],[\"这时需要使用\",{\"1\":{\"411\":1}}],[\"这时需要使用下面的命令来手动安装\",{\"1\":{\"307\":1}}],[\"这时现象就是客户端数据发不出去\",{\"1\":{\"475\":1}}],[\"这时将剩余数据发送\",{\"1\":{\"455\":1}}],[\"这时将数据从用户缓冲区\",{\"1\":{\"396\":1}}],[\"这时放不下了\",{\"1\":{\"455\":1}}],[\"这时的\",{\"1\":{\"442\":1,\"498\":1}}],[\"这时调用\",{\"1\":{\"442\":1}}],[\"这时无须\",{\"1\":{\"441\":1}}],[\"这时即使\",{\"1\":{\"441\":1}}],[\"这时\",{\"1\":{\"440\":1,\"441\":1,\"442\":1}}],[\"这时要重复读取的话\",{\"1\":{\"440\":1}}],[\"这时会引发扩容\",{\"1\":{\"439\":1}}],[\"这时刚才的客户端代码\",{\"1\":{\"422\":1}}],[\"这时写入\",{\"1\":{\"359\":1}}],[\"这时读取会返回\",{\"1\":{\"359\":1}}],[\"这些代码可以认为是现成的\",{\"1\":{\"488\":1}}],[\"这些方法不会改变\",{\"1\":{\"440\":1}}],[\"这些方法的未指明返回值的\",{\"1\":{\"438\":1}}],[\"这些事件发生\",{\"1\":{\"337\":1}}],[\"这些\",{\"1\":{\"337\":1}}],[\"这些数据存放在原来的表中\",{\"1\":{\"237\":1}}],[\"这意味着当底层文档结构发生变化时\",{\"1\":{\"328\":1}}],[\"这意味着你可以对它们执行如获取节点名称\",{\"1\":{\"328\":1}}],[\"这篇文章\",{\"1\":{\"302\":1}}],[\"这两个值实际上是冲突的\",{\"1\":{\"291\":1}}],[\"这两种方式其实用哪种都一样\",{\"1\":{\"14\":1}}],[\"这是为了解决\",{\"1\":{\"497\":1}}],[\"这是因为\",{\"1\":{\"377\":1}}],[\"这是粗体文本\",{\"1\":{\"322\":1}}],[\"这是斜体文本\",{\"1\":{\"322\":1}}],[\"这是带删除线的文本\",{\"1\":{\"322\":1}}],[\"这是带下划线的文本\",{\"1\":{\"322\":1}}],[\"这是彩色的文本\",{\"1\":{\"322\":1}}],[\"这是普通的文本\",{\"1\":{\"322\":1}}],[\"这是个aop\",{\"1\":{\"262\":1}}],[\"这是direct发布于的\",{\"1\":{\"117\":1,\"120\":1}}],[\"这样连接建立到连接断开之间就是消息的边界\",{\"1\":{\"456\":1}}],[\"这样的多路复用\",{\"1\":{\"450\":1}}],[\"这样就能把\",{\"1\":{\"307\":1}}],[\"这样即便mq通知失败\",{\"1\":{\"145\":1}}],[\"这样即便支付服务的mq通知失败\",{\"1\":{\"145\":1}}],[\"这样当你的项目启动后\",{\"1\":{\"17\":1}}],[\"这在某些对于消息可靠性要求较高的业务场景下\",{\"1\":{\"141\":1}}],[\"这会导致消息积压\",{\"1\":{\"134\":1}}],[\"这一章我们先来看如何确保生产者一定能把消息发送到mq\",{\"1\":{\"129\":1}}],[\"这里要知道\",{\"1\":{\"497\":1}}],[\"这里有个费解的地方就是\",{\"1\":{\"497\":1}}],[\"这里\",{\"1\":{\"495\":1,\"498\":1}}],[\"这里仅介绍其跟\",{\"1\":{\"446\":1}}],[\"这里采用了引用计数法来控制回收内存\",{\"1\":{\"441\":1}}],[\"这里的束修金\",{\"1\":{\"462\":1}}],[\"这里的\",{\"1\":{\"427\":1}}],[\"这里的周就没有效果了\",{\"1\":{\"291\":1}}],[\"这里这么写\",{\"1\":{\"381\":2}}],[\"这里创建一个3列的表格\",{\"1\":{\"323\":1}}],[\"这里明确给我们提示\",{\"1\":{\"201\":1}}],[\"这里是将\",{\"1\":{\"411\":1}}],[\"这里是一些基本的redis\",{\"1\":{\"153\":1}}],[\"这里是通过queuebuilder的lazy\",{\"1\":{\"136\":1}}],[\"这里给出两种方案\",{\"1\":{\"142\":1}}],[\"这里改为false\",{\"1\":{\"140\":1}}],[\"这里我们必须尽可能确保mq消息的可靠性\",{\"1\":{\"128\":1}}],[\"这里使用配置文件是不合适的\",{\"1\":{\"14\":1}}],[\"这只不过是一个测试而已\",{\"1\":{\"34\":3}}],[\"这种方法好不好\",{\"1\":{\"445\":1}}],[\"这种方式在许多应用中已经足够用了\",{\"1\":{\"160\":1}}],[\"这种方式可以在损失一定数据的情况下更快地恢复数据库\",{\"1\":{\"158\":1}}],[\"这种方式光引入包还不够\",{\"1\":{\"14\":1}}],[\"这种传参方式的缺点是不够灵活\",{\"1\":{\"201\":1}}],[\"这种模型routingkey一般都是由一个或多个单词组成\",{\"1\":{\"119\":1}}],[\"这种情况下\",{\"1\":{\"21\":1}}],[\"这个设置便被忽略\",{\"1\":{\"481\":1}}],[\"这个限制称之为\",{\"1\":{\"455\":1}}],[\"这个段的数据\",{\"1\":{\"455\":1}}],[\"这个消息是\",{\"1\":{\"454\":1}}],[\"这个操作对直接内存代价昂贵\",{\"1\":{\"436\":1}}],[\"这个操作比较重量级\",{\"1\":{\"396\":1}}],[\"这个问题直到\",{\"1\":{\"389\":1}}],[\"这个事件会频繁触发\",{\"1\":{\"386\":1}}],[\"这个包默认不会下载\",{\"1\":{\"300\":1}}],[\"这个\",{\"1\":{\"197\":1}}],[\"这个元素可以用来定义可重用的\",{\"1\":{\"197\":1}}],[\"这个时间是无法确定的\",{\"1\":{\"145\":1}}],[\"这个时候我们可以尝试指定配置顺序\",{\"1\":{\"24\":1}}],[\"这个时候可能就有同学要问了\",{\"1\":{\"16\":1}}],[\"这个思路非常简单\",{\"1\":{\"143\":1}}],[\"这个策略是由messagerecovery接口来定义的\",{\"1\":{\"141\":1}}],[\"这个行为成为pageout\",{\"1\":{\"134\":1}}],[\"这个用法大家应该也是比较熟悉\",{\"1\":{\"13\":1}}],[\"答案是\",{\"1\":{\"13\":1}}],[\"guard\",{\"1\":{\"495\":1}}],[\"gson\",{\"1\":{\"478\":3}}],[\"gsend\",{\"1\":{\"470\":2}}],[\"gquit\",{\"1\":{\"470\":2}}],[\"gjoin\",{\"1\":{\"470\":2}}],[\"gmembers\",{\"1\":{\"470\":2}}],[\"goto\",{\"1\":{\"301\":3,\"303\":2}}],[\"goals>\",{\"1\":{\"85\":1}}],[\"goal>\",{\"1\":{\"85\":1}}],[\"gi\",{\"1\":{\"315\":2}}],[\"gis\",{\"1\":{\"236\":1}}],[\"gitskills\",{\"1\":{\"51\":1}}],[\"github\",{\"0\":{\"305\":1},\"1\":{\"51\":2,\"172\":1,\"190\":1,\"250\":1,\"288\":1,\"293\":1,\"305\":2}}],[\"gitignore\",{\"1\":{\"50\":1}}],[\"git文件\",{\"1\":{\"47\":1}}],[\"git安装后\",{\"0\":{\"45\":1}}],[\"git\",{\"0\":{\"44\":1},\"1\":{\"40\":2,\"45\":4,\"46\":8,\"47\":1,\"48\":3,\"49\":7,\"50\":6,\"51\":12,\"52\":5,\"305\":9}}],[\"generate\",{\"1\":{\"341\":5}}],[\"gender\",{\"1\":{\"201\":6,\"202\":6,\"203\":5,\"204\":2,\"205\":2}}],[\"getvalue\",{\"1\":{\"495\":1,\"498\":1}}],[\"getviews\",{\"1\":{\"41\":1}}],[\"getgroupsession\",{\"1\":{\"472\":5}}],[\"getgroupname\",{\"1\":{\"472\":9}}],[\"getfrom\",{\"1\":{\"471\":1,\"472\":1}}],[\"getfont\",{\"1\":{\"319\":1}}],[\"getnow\",{\"1\":{\"425\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":2,\"430\":1,\"492\":1}}],[\"getnodetype\",{\"1\":{\"328\":1}}],[\"getnativerequest\",{\"1\":{\"281\":1}}],[\"getname\",{\"1\":{\"16\":3,\"34\":1,\"37\":1,\"364\":1,\"401\":3,\"492\":2}}],[\"getdirectcontent\",{\"1\":{\"325\":1}}],[\"getdefaultscheduler\",{\"1\":{\"248\":1}}],[\"getdefaultmessage\",{\"1\":{\"37\":3}}],[\"getdeliverytag\",{\"1\":{\"111\":1}}],[\"getter\",{\"1\":{\"488\":1}}],[\"gettextcontent\",{\"1\":{\"328\":4}}],[\"getto\",{\"1\":{\"471\":1}}],[\"gettop\",{\"1\":{\"325\":1}}],[\"gettrigger\",{\"1\":{\"249\":1}}],[\"gettype\",{\"1\":{\"18\":1}}],[\"getjobdatamap\",{\"1\":{\"249\":3}}],[\"getjobdetail\",{\"1\":{\"249\":1}}],[\"getunsignedbyte\",{\"1\":{\"341\":5}}],[\"getuserservice\",{\"1\":{\"470\":1,\"471\":1}}],[\"getusername\",{\"1\":{\"470\":1,\"471\":1,\"472\":2}}],[\"getuser\",{\"1\":{\"184\":1,\"185\":1}}],[\"geturi\",{\"1\":{\"169\":1,\"181\":1}}],[\"getheader\",{\"1\":{\"279\":1}}],[\"getheaders\",{\"1\":{\"181\":2,\"182\":1}}],[\"gethoststring\",{\"1\":{\"181\":1}}],[\"gethost\",{\"1\":{\"181\":1}}],[\"gethostname\",{\"1\":{\"181\":1}}],[\"gethostid\",{\"1\":{\"7\":1,\"8\":1}}],[\"getruntime\",{\"1\":{\"388\":1,\"389\":1}}],[\"getright\",{\"1\":{\"325\":1}}],[\"getrange\",{\"1\":{\"153\":1}}],[\"getreturnvalue\",{\"1\":{\"493\":1}}],[\"getreturntype\",{\"1\":{\"492\":1}}],[\"getresourceasstream\",{\"1\":{\"478\":1,\"488\":1}}],[\"getresponse\",{\"1\":{\"182\":1}}],[\"getrecords\",{\"1\":{\"217\":1}}],[\"getremoteaddress\",{\"1\":{\"181\":1,\"388\":2,\"401\":3}}],[\"getrequest\",{\"1\":{\"181\":1,\"182\":1}}],[\"getrequestid\",{\"1\":{\"7\":1,\"8\":1}}],[\"getrealpath\",{\"1\":{\"27\":1}}],[\"getproxyservice\",{\"1\":{\"492\":2}}],[\"getproperty\",{\"1\":{\"27\":1,\"478\":2,\"488\":1}}],[\"getparametervalue\",{\"1\":{\"489\":1}}],[\"getparametertypes\",{\"1\":{\"489\":1,\"492\":1}}],[\"getparameterannotation\",{\"1\":{\"281\":1}}],[\"getpassword\",{\"1\":{\"470\":1,\"471\":1}}],[\"getpath\",{\"1\":{\"181\":1,\"182\":1}}],[\"getpaytime\",{\"1\":{\"144\":1}}],[\"getqueue\",{\"1\":{\"114\":1,\"118\":2,\"120\":1}}],[\"getconnecttimeoutmillis\",{\"1\":{\"480\":1}}],[\"getconnection\",{\"1\":{\"109\":1,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2}}],[\"getcontent\",{\"1\":{\"471\":1,\"472\":1}}],[\"getchannel\",{\"1\":{\"338\":1,\"349\":1,\"350\":1,\"355\":1,\"362\":4,\"469\":1,\"471\":1,\"492\":3}}],[\"getclassloader\",{\"1\":{\"492\":1}}],[\"getclass\",{\"1\":{\"102\":1,\"347\":1,\"446\":1,\"464\":1,\"489\":1}}],[\"getmsg\",{\"1\":{\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"getmemberschannel\",{\"1\":{\"469\":1,\"472\":2}}],[\"getmembers\",{\"1\":{\"469\":1,\"472\":2}}],[\"getmethodname\",{\"1\":{\"489\":1}}],[\"getmethod\",{\"1\":{\"181\":1,\"489\":1}}],[\"getmessageclass\",{\"1\":{\"478\":2}}],[\"getmessagetype\",{\"1\":{\"466\":1,\"467\":1,\"478\":2,\"488\":2}}],[\"getmessageproperties\",{\"1\":{\"147\":1}}],[\"getmessage\",{\"1\":{\"108\":1,\"473\":1}}],[\"getmapping\",{\"1\":{\"36\":1,\"171\":1,\"183\":1,\"201\":1,\"202\":1,\"203\":1,\"275\":1,\"320\":1}}],[\"getlogger\",{\"1\":{\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"getlocaladdress\",{\"1\":{\"382\":1}}],[\"getlock\",{\"1\":{\"41\":1}}],[\"getlength\",{\"1\":{\"328\":3}}],[\"getleft\",{\"1\":{\"325\":1}}],[\"getlist\",{\"1\":{\"6\":1,\"7\":1,\"8\":1}}],[\"getexceptionvalue\",{\"1\":{\"493\":1}}],[\"getexcludepaths\",{\"1\":{\"182\":1}}],[\"getelementsbytagname\",{\"1\":{\"328\":5}}],[\"getemail\",{\"1\":{\"37\":1}}],[\"geterrorcode\",{\"1\":{\"7\":1,\"8\":1}}],[\"geterrormessage\",{\"1\":{\"7\":1,\"8\":1}}],[\"getallocator\",{\"1\":{\"499\":1}}],[\"getallerrors\",{\"1\":{\"37\":1}}],[\"getandset\",{\"1\":{\"496\":1}}],[\"getandincrement\",{\"1\":{\"388\":1}}],[\"getannotationattributes\",{\"1\":{\"16\":2}}],[\"getattribute\",{\"1\":{\"281\":1,\"469\":1}}],[\"getargs\",{\"1\":{\"265\":1}}],[\"getage\",{\"1\":{\"37\":1}}],[\"getaddress\",{\"1\":{\"37\":1,\"495\":1}}],[\"getsubject\",{\"1\":{\"279\":1}}],[\"getstatus\",{\"1\":{\"144\":3}}],[\"getscheme\",{\"1\":{\"27\":1}}],[\"getserializeralgorithm\",{\"1\":{\"478\":3}}],[\"getservice\",{\"1\":{\"488\":1,\"489\":1}}],[\"getservletmappings\",{\"1\":{\"267\":1}}],[\"getservletcontext\",{\"1\":{\"27\":1}}],[\"getserverport\",{\"1\":{\"27\":1,\"478\":1}}],[\"getservername\",{\"1\":{\"27\":1}}],[\"getsequenceid\",{\"1\":{\"466\":1,\"467\":1,\"478\":1,\"489\":1,\"493\":1}}],[\"getset\",{\"1\":{\"153\":1}}],[\"getsession\",{\"1\":{\"27\":1,\"279\":1,\"281\":1,\"471\":2,\"473\":2}}],[\"getinterfacename\",{\"1\":{\"489\":1}}],[\"getinstance\",{\"1\":{\"320\":1,\"324\":1}}],[\"getinstances\",{\"1\":{\"169\":1}}],[\"getinputstream\",{\"1\":{\"6\":1,\"381\":1,\"450\":2}}],[\"getid\",{\"1\":{\"144\":1,\"208\":1,\"218\":1}}],[\"getifunique\",{\"1\":{\"21\":1}}],[\"getbacklog\",{\"1\":{\"495\":2}}],[\"getbottom\",{\"1\":{\"325\":1}}],[\"getbean\",{\"1\":{\"254\":1}}],[\"getbyint\",{\"1\":{\"478\":1}}],[\"getbyid\",{\"1\":{\"144\":1}}],[\"getbytes\",{\"1\":{\"107\":1,\"113\":1,\"117\":1,\"120\":1,\"147\":1,\"351\":2,\"376\":1,\"381\":3,\"417\":2,\"463\":12,\"464\":1,\"478\":1}}],[\"getb\",{\"1\":{\"18\":1}}],[\"get\",{\"0\":{\"269\":1},\"1\":{\"16\":2,\"40\":1,\"96\":1,\"97\":1,\"98\":2,\"99\":5,\"102\":1,\"153\":1,\"156\":1,\"169\":2,\"182\":2,\"184\":1,\"249\":2,\"274\":4,\"275\":5,\"282\":2,\"301\":3,\"305\":1,\"338\":1,\"339\":1,\"341\":1,\"345\":4,\"351\":1,\"363\":5,\"364\":12,\"365\":3,\"382\":2,\"399\":1,\"425\":1,\"426\":1,\"428\":4,\"429\":1,\"440\":1,\"463\":3,\"470\":1,\"478\":1,\"488\":1,\"496\":1,\"497\":1,\"498\":1,\"499\":1}}],[\"getkey\",{\"1\":{\"7\":2,\"495\":1,\"498\":1}}],[\"getoption\",{\"1\":{\"495\":1}}],[\"getoutputstream\",{\"1\":{\"320\":1,\"376\":1,\"381\":1,\"396\":1,\"450\":2,\"481\":1}}],[\"getorder\",{\"1\":{\"181\":1,\"182\":1}}],[\"getoriginalfilename\",{\"1\":{\"6\":1,\"27\":2}}],[\"getobjectsummaries\",{\"1\":{\"7\":1}}],[\"gathering\",{\"0\":{\"350\":1}}],[\"gatewayfilterchain\",{\"1\":{\"181\":1,\"182\":2}}],[\"gateway<\",{\"1\":{\"176\":1}}],[\"gateway\",{\"1\":{\"12\":1,\"176\":2,\"182\":5}}],[\"gash\",{\"1\":{\"122\":1}}],[\"gas\",{\"1\":{\"120\":2}}],[\"gasd\",{\"1\":{\"102\":1}}],[\"gag\",{\"1\":{\"120\":1}}],[\"gte\",{\"1\":{\"99\":1}}],[\"gt\",{\"1\":{\"99\":2}}],[\"gzip\",{\"1\":{\"90\":3}}],[\"gcreate\",{\"1\":{\"470\":2}}],[\"gcm\",{\"1\":{\"90\":1}}],[\"gc\",{\"1\":{\"70\":1,\"435\":1,\"436\":1,\"441\":2}}],[\"ggggg|\",{\"1\":{\"459\":1}}],[\"ggg\",{\"1\":{\"102\":1}}],[\"gg=g\",{\"1\":{\"70\":1}}],[\"gg\",{\"1\":{\"70\":1,\"460\":1}}],[\"g\",{\"1\":{\"70\":3,\"120\":1,\"315\":1,\"316\":2}}],[\"globaleventexecutor\",{\"1\":{\"495\":1}}],[\"globalinterceptor\",{\"1\":{\"279\":1,\"280\":1}}],[\"globalfilter\",{\"0\":{\"181\":1},\"1\":{\"181\":1,\"182\":2}}],[\"global\",{\"1\":{\"45\":2,\"187\":1,\"243\":1}}],[\"grpc\",{\"1\":{\"406\":1}}],[\"groupquitresponsemessage\",{\"1\":{\"478\":3}}],[\"groupquitrequestmessagehandler\",{\"1\":{\"472\":1}}],[\"groupquitrequestmessage\",{\"1\":{\"470\":1,\"472\":1,\"478\":3}}],[\"groupmembersresponsemessage\",{\"1\":{\"472\":1,\"478\":3}}],[\"groupmembersrequestmessagehandler\",{\"1\":{\"472\":1}}],[\"groupmembersrequestmessage\",{\"1\":{\"470\":1,\"472\":1,\"478\":3}}],[\"groupjoinresponsemessage\",{\"1\":{\"472\":4,\"478\":3}}],[\"groupjoinrequestmessagehandler\",{\"1\":{\"472\":1}}],[\"groupjoinrequestmessage\",{\"1\":{\"470\":1,\"472\":1,\"478\":3}}],[\"groupname\",{\"1\":{\"472\":6}}],[\"groupchatresponsemessage\",{\"1\":{\"472\":1,\"478\":3}}],[\"groupchatrequestmessagehandler\",{\"1\":{\"472\":1}}],[\"groupchatrequestmessage\",{\"1\":{\"470\":1,\"472\":1,\"478\":3}}],[\"groupcreateresponsemessage\",{\"1\":{\"472\":3,\"478\":3}}],[\"groupcreaterequestmessagehandler\",{\"1\":{\"472\":1}}],[\"groupcreaterequestmessage\",{\"1\":{\"470\":1,\"472\":1,\"478\":3}}],[\"groupsessionfactory\",{\"1\":{\"472\":5}}],[\"groupsession\",{\"1\":{\"469\":1,\"472\":4}}],[\"groupid\",{\"1\":{\"328\":4}}],[\"groupid>\",{\"1\":{\"19\":1,\"27\":1,\"28\":1,\"34\":1,\"37\":1,\"41\":1,\"43\":1,\"78\":1,\"79\":3,\"85\":4,\"100\":1,\"121\":1,\"168\":1,\"169\":1,\"171\":2,\"172\":1,\"176\":3,\"187\":2,\"190\":1,\"195\":1,\"247\":1,\"254\":1,\"267\":2,\"293\":1,\"318\":3,\"409\":1}}],[\"group\",{\"1\":{\"225\":2,\"229\":1,\"248\":1,\"249\":1,\"410\":1,\"411\":1,\"415\":6,\"417\":3,\"422\":4,\"423\":4,\"432\":2,\"449\":5,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"469\":4,\"470\":10,\"472\":9,\"480\":4,\"488\":5,\"490\":4,\"492\":4,\"495\":1}}],[\"grep\",{\"0\":{\"56\":1},\"1\":{\"56\":3}}],[\"gradle\",{\"1\":{\"19\":1}}],[\"dma将数据读入内核缓冲区\",{\"1\":{\"397\":2}}],[\"dma\",{\"1\":{\"396\":4,\"397\":2}}],[\"d2\",{\"1\":{\"364\":1}}],[\"d1\",{\"1\":{\"364\":3}}],[\"djasypt\",{\"1\":{\"293\":1}}],[\"driven\",{\"1\":{\"404\":1}}],[\"driver\",{\"1\":{\"187\":2,\"293\":2}}],[\"drop\",{\"1\":{\"240\":1}}],[\"dproject\",{\"1\":{\"190\":2}}],[\"dcsp\",{\"1\":{\"190\":2}}],[\"dserver\",{\"1\":{\"190\":2}}],[\"d+\",{\"1\":{\"178\":1}}],[\"dbtype\",{\"1\":{\"217\":1}}],[\"db\",{\"1\":{\"167\":2,\"187\":6}}],[\"duplicate\",{\"0\":{\"443\":1},\"1\":{\"447\":1}}],[\"dubbo\",{\"1\":{\"406\":1}}],[\"duration\",{\"1\":{\"245\":1}}],[\"durable\",{\"1\":{\"136\":2}}],[\"dump\",{\"1\":{\"159\":2,\"341\":31}}],[\"dao\",{\"1\":{\"254\":1,\"257\":1,\"258\":3,\"259\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":1}}],[\"day\",{\"1\":{\"232\":2}}],[\"dashboard\",{\"1\":{\"190\":7}}],[\"daisy\",{\"1\":{\"51\":2}}],[\"date2\",{\"1\":{\"232\":1}}],[\"date1\",{\"1\":{\"232\":1}}],[\"datediff\",{\"1\":{\"232\":1}}],[\"date\",{\"1\":{\"27\":1,\"40\":2,\"182\":1,\"232\":6,\"303\":2,\"411\":1,\"422\":2,\"481\":3}}],[\"datagramchannel\",{\"1\":{\"331\":1,\"390\":4}}],[\"dataid\",{\"1\":{\"187\":3}}],[\"datasource\",{\"1\":{\"187\":1,\"293\":1}}],[\"database\",{\"1\":{\"158\":1,\"187\":1}}],[\"databases\",{\"1\":{\"69\":1,\"94\":1,\"96\":1}}],[\"data\",{\"1\":{\"12\":1,\"18\":2,\"27\":1,\"62\":1,\"100\":2,\"188\":2,\"338\":2,\"362\":2,\"363\":6,\"364\":4,\"396\":1,\"478\":1,\"488\":2}}],[\"d\",{\"1\":{\"46\":2,\"62\":2,\"68\":2,\"70\":1,\"86\":1,\"90\":1,\"94\":1,\"167\":1,\"313\":3,\"328\":2,\"338\":1,\"341\":5,\"347\":2,\"349\":3,\"350\":7,\"363\":10,\"364\":1,\"365\":2,\"378\":2,\"390\":1,\"399\":1,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"453\":1,\"454\":2,\"458\":12,\"459\":11,\"460\":11}}],[\"doreadbytes\",{\"1\":{\"499\":1}}],[\"doreadmessages\",{\"1\":{\"498\":2}}],[\"doregister\",{\"1\":{\"495\":1,\"498\":1}}],[\"dobeginread\",{\"1\":{\"495\":2,\"498\":2}}],[\"dobind0\",{\"1\":{\"495\":9}}],[\"dobind\",{\"1\":{\"495\":5}}],[\"double\",{\"1\":{\"438\":2}}],[\"doublebuffer\",{\"1\":{\"331\":1}}],[\"do\",{\"1\":{\"338\":1,\"399\":2,\"498\":1,\"499\":1}}],[\"domsource\",{\"1\":{\"328\":2}}],[\"dostartthread\",{\"1\":{\"496\":3}}],[\"dos\",{\"1\":{\"313\":1}}],[\"downloadpdf\",{\"1\":{\"320\":2}}],[\"downloaded\",{\"1\":{\"305\":1}}],[\"down\",{\"1\":{\"163\":1}}],[\"doc\",{\"1\":{\"98\":5}}],[\"documentbuilder\",{\"1\":{\"328\":2}}],[\"documentbuilderfactory\",{\"1\":{\"328\":4}}],[\"documentexception\",{\"1\":{\"320\":1}}],[\"documentelement\",{\"1\":{\"301\":2}}],[\"documented\",{\"1\":{\"278\":1}}],[\"document\",{\"1\":{\"94\":1,\"100\":1,\"301\":2,\"320\":6,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"328\":7}}],[\"documentationtype\",{\"1\":{\"43\":1}}],[\"docker安装rabbitmq详细步骤\",{\"1\":{\"104\":1}}],[\"dockercompose\",{\"0\":{\"62\":1}}],[\"docker\",{\"0\":{\"57\":1},\"1\":{\"59\":5,\"61\":6,\"62\":5,\"64\":7,\"65\":19,\"66\":3,\"86\":1,\"94\":2,\"130\":1,\"167\":1,\"389\":1}}],[\"docket\",{\"1\":{\"43\":2}}],[\"dotask\",{\"1\":{\"36\":1}}],[\"dio\",{\"1\":{\"436\":1}}],[\"digits\",{\"1\":{\"341\":3}}],[\"dimensions\",{\"1\":{\"301\":5}}],[\"disconnect\",{\"1\":{\"453\":1}}],[\"discoveryclient\",{\"1\":{\"169\":3}}],[\"discovery<\",{\"1\":{\"168\":1,\"169\":1,\"176\":1}}],[\"discovery\",{\"1\":{\"94\":1,\"168\":1,\"169\":1,\"176\":2}}],[\"discarded\",{\"1\":{\"441\":1}}],[\"disposition\",{\"1\":{\"320\":1}}],[\"disable\",{\"1\":{\"303\":1}}],[\"distinct\",{\"1\":{\"226\":1}}],[\"div>\",{\"1\":{\"37\":1}}],[\"dircount\",{\"1\":{\"364\":3}}],[\"directly\",{\"1\":{\"495\":1}}],[\"directbuffer\",{\"1\":{\"435\":1}}],[\"directbytebuf\",{\"1\":{\"397\":4}}],[\"directbytebuffer\",{\"1\":{\"331\":1,\"397\":1}}],[\"directexchange\",{\"1\":{\"141\":7}}],[\"direct\",{\"1\":{\"117\":3,\"118\":8,\"120\":1,\"122\":3,\"126\":4,\"141\":4,\"146\":1,\"396\":1,\"486\":1}}],[\"direct类型的exchange\",{\"1\":{\"116\":1}}],[\"directorynotemptyexception\",{\"1\":{\"364\":1}}],[\"directory\",{\"1\":{\"27\":4}}],[\"directorypath\",{\"1\":{\"27\":2}}],[\"dirname\",{\"1\":{\"55\":1,\"303\":2}}],[\"dir\",{\"1\":{\"27\":1,\"363\":1,\"364\":6}}],[\"dddd|\",{\"1\":{\"460\":1}}],[\"dd\",{\"1\":{\"27\":1,\"70\":1,\"303\":2,\"459\":1}}],[\"def\",{\"1\":{\"455\":2}}],[\"defaultmaxmessagesrecvbytebufallocator\",{\"1\":{\"499\":1}}],[\"defaultserversocketchannelconfig\",{\"1\":{\"481\":1}}],[\"defaultfullhttpresponse\",{\"1\":{\"464\":2}}],[\"defaultpromisetest\",{\"1\":{\"431\":4}}],[\"defaultpromisetest2\",{\"1\":{\"426\":4,\"427\":3,\"428\":7,\"429\":4,\"430\":3}}],[\"defaultpromise\",{\"1\":{\"431\":10}}],[\"defaultpromise<object>\",{\"1\":{\"492\":1}}],[\"defaultpromise<>\",{\"1\":{\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"492\":1}}],[\"defaultpromise<integer>\",{\"1\":{\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1}}],[\"defaulteventloop\",{\"1\":{\"415\":5,\"426\":3,\"427\":4,\"428\":5,\"429\":3,\"430\":4,\"431\":6}}],[\"defaulteventloopgroup\",{\"1\":{\"415\":4,\"417\":8}}],[\"defaultchannelpromise\",{\"1\":{\"495\":1}}],[\"defaultchannelpipeline\",{\"1\":{\"441\":1,\"495\":1,\"498\":1}}],[\"defaultchannelconfig\",{\"1\":{\"481\":1}}],[\"defaultcharset\",{\"1\":{\"382\":3,\"385\":1,\"401\":2,\"449\":2,\"463\":1}}],[\"defaultconfiguration\",{\"1\":{\"185\":1}}],[\"defaultconsumer\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"defaultdatasource\",{\"1\":{\"293\":1}}],[\"defaulttyping\",{\"1\":{\"155\":1}}],[\"default\",{\"1\":{\"16\":4,\"34\":1,\"37\":1,\"90\":1,\"187\":1,\"233\":1,\"302\":1,\"417\":2,\"434\":1,\"435\":2,\"442\":1,\"445\":4,\"446\":2,\"466\":1,\"496\":1}}],[\"deallocate\",{\"1\":{\"441\":1}}],[\"dead\",{\"1\":{\"146\":6,\"147\":4,\"148\":1}}],[\"detail\",{\"1\":{\"249\":1}}],[\"details\",{\"1\":{\"52\":1}}],[\"development\",{\"1\":{\"404\":1}}],[\"devicepixelratio\",{\"1\":{\"301\":1}}],[\"devicescalefactor\",{\"1\":{\"301\":1}}],[\"devtools\",{\"1\":{\"296\":1}}],[\"devtools<\",{\"1\":{\"28\":1}}],[\"dev\",{\"1\":{\"187\":1}}],[\"denver\",{\"1\":{\"178\":1}}],[\"decode\",{\"1\":{\"347\":1,\"401\":1,\"466\":2,\"467\":1,\"478\":1}}],[\"dec\",{\"1\":{\"290\":1}}],[\"dectby\",{\"1\":{\"153\":1}}],[\"decrypt\",{\"1\":{\"293\":1}}],[\"decr\",{\"1\":{\"153\":1}}],[\"decimalmax\",{\"1\":{\"37\":1}}],[\"decimalmin\",{\"1\":{\"37\":1}}],[\"deploy\",{\"1\":{\"288\":1}}],[\"deplyconsumer\",{\"1\":{\"148\":1}}],[\"deplyproducer\",{\"1\":{\"147\":1}}],[\"deplybinding\",{\"1\":{\"146\":1}}],[\"dependencymanagement\",{\"1\":{\"328\":1}}],[\"dependency\",{\"1\":{\"328\":7}}],[\"dependency>\",{\"1\":{\"19\":1,\"27\":1,\"28\":1,\"34\":1,\"37\":1,\"41\":1,\"43\":1,\"78\":1,\"79\":2,\"100\":1,\"121\":1,\"168\":1,\"169\":1,\"171\":2,\"172\":1,\"176\":3,\"187\":2,\"190\":1,\"195\":1,\"247\":1,\"254\":1,\"267\":2,\"293\":1,\"318\":3,\"409\":1}}],[\"dependencies\",{\"1\":{\"305\":1}}],[\"dependencies>\",{\"1\":{\"267\":1}}],[\"delaynanos\",{\"1\":{\"497\":1}}],[\"delaytime\",{\"1\":{\"147\":3}}],[\"delayqueue\",{\"1\":{\"146\":2}}],[\"delayed\",{\"1\":{\"146\":2}}],[\"delayexchange\",{\"1\":{\"146\":2}}],[\"delay\",{\"1\":{\"146\":3}}],[\"deletebatchids\",{\"1\":{\"212\":1,\"213\":1}}],[\"deletebymap\",{\"1\":{\"212\":1,\"213\":1}}],[\"deletebyid\",{\"1\":{\"212\":1,\"213\":1}}],[\"delete\",{\"0\":{\"224\":1},\"1\":{\"40\":1,\"97\":1,\"98\":1,\"101\":1,\"102\":2,\"196\":1,\"212\":1,\"213\":2,\"224\":2,\"274\":1,\"364\":4}}],[\"deleteobject\",{\"1\":{\"5\":1,\"8\":2}}],[\"demo\",{\"1\":{\"61\":4,\"204\":1}}],[\"deserialize\",{\"1\":{\"478\":4}}],[\"destory\",{\"1\":{\"255\":2}}],[\"destfile\",{\"1\":{\"27\":2}}],[\"desc\",{\"1\":{\"99\":1,\"230\":2,\"241\":1}}],[\"description\",{\"1\":{\"43\":1,\"182\":1,\"214\":1,\"216\":1,\"319\":1}}],[\"debugread\",{\"1\":{\"341\":1,\"368\":1,\"369\":1}}],[\"debugall\",{\"1\":{\"341\":1,\"351\":1,\"382\":1,\"388\":1}}],[\"debug\",{\"1\":{\"34\":1,\"163\":1,\"338\":19,\"347\":2,\"349\":3,\"350\":2,\"368\":4,\"369\":2,\"376\":2,\"378\":9,\"382\":4,\"388\":3,\"390\":1,\"399\":8,\"417\":34,\"419\":4,\"420\":7,\"423\":6,\"426\":8,\"427\":6,\"428\":6,\"429\":8,\"430\":6,\"441\":1,\"453\":15,\"454\":9,\"457\":3,\"458\":26,\"459\":22,\"460\":26,\"464\":3,\"466\":2,\"467\":2,\"470\":3,\"473\":2,\"475\":2,\"478\":2,\"480\":1,\"481\":1,\"488\":2,\"490\":1,\"491\":1,\"492\":1,\"493\":1}}],[\"如\",{\"1\":{\"407\":1,\"411\":1}}],[\"如粘包\",{\"1\":{\"407\":1}}],[\"如何设计协议呢\",{\"1\":{\"462\":1}}],[\"如何实现\",{\"1\":{\"445\":1}}],[\"如何写入后数据大小未超过\",{\"1\":{\"439\":1}}],[\"如何拿到\",{\"0\":{\"389\":1}}],[\"如何改进呢\",{\"1\":{\"388\":1}}],[\"如使用jdom或dom4j等库时\",{\"1\":{\"328\":1}}],[\"如myisam和innodb\",{\"1\":{\"236\":1}}],[\"如点\",{\"1\":{\"236\":1}}],[\"如二进制协议\",{\"1\":{\"154\":1}}],[\"如hincrby\",{\"1\":{\"153\":1}}],[\"如默认的\",{\"1\":{\"90\":1}}],[\"如有\",{\"1\":{\"85\":1}}],[\"如下\",{\"1\":{\"11\":1,\"13\":1,\"21\":1,\"424\":1,\"445\":1}}],[\"如果没这个判断\",{\"1\":{\"497\":1}}],[\"如果没有失败\",{\"1\":{\"425\":1}}],[\"如果没有读到数据\",{\"1\":{\"369\":1}}],[\"如果没有连接建立\",{\"1\":{\"369\":1}}],[\"如果期间又有\",{\"1\":{\"497\":1}}],[\"如果超时\",{\"1\":{\"497\":2}}],[\"如果超出指定长度仍未出现分隔符\",{\"1\":{\"459\":1}}],[\"如果线程由于\",{\"1\":{\"496\":1}}],[\"如果已经\",{\"1\":{\"496\":1}}],[\"如果已经完成\",{\"1\":{\"495\":1}}],[\"如果为\",{\"1\":{\"496\":1}}],[\"如果能收到客户端数据\",{\"1\":{\"475\":1}}],[\"如果能确保编解码器不会保存状态\",{\"1\":{\"467\":1}}],[\"如果连续出现丢包\",{\"1\":{\"475\":1}}],[\"如果连接数过多\",{\"1\":{\"368\":1}}],[\"如果登录失败\",{\"1\":{\"470\":1}}],[\"如果登录成功\",{\"1\":{\"470\":1}}],[\"如果组不存在返回\",{\"1\":{\"469\":3}}],[\"如果原始\",{\"1\":{\"442\":1}}],[\"如果执行\",{\"1\":{\"442\":1}}],[\"如果计数为\",{\"1\":{\"441\":1}}],[\"如果需要重复读取\",{\"1\":{\"440\":1}}],[\"如果写入后数据大小超过\",{\"1\":{\"439\":1}}],[\"如果改为\",{\"1\":{\"432\":2}}],[\"如果注释掉\",{\"1\":{\"432\":4}}],[\"如果任务失败\",{\"1\":{\"425\":2}}],[\"如果两个\",{\"1\":{\"418\":1}}],[\"如果作为附件的\",{\"1\":{\"401\":1}}],[\"如果工作在\",{\"1\":{\"389\":1}}],[\"如果所有的数据写完了\",{\"1\":{\"385\":1}}],[\"如果发现数据不够\",{\"1\":{\"383\":1}}],[\"如果发现订单已经支付\",{\"1\":{\"145\":1}}],[\"如果内容过大\",{\"1\":{\"382\":1}}],[\"如果目录还有内容\",{\"1\":{\"364\":1}}],[\"如果目录已存在\",{\"1\":{\"364\":1}}],[\"如果文件不存在\",{\"1\":{\"364\":1}}],[\"如果文件已存在\",{\"1\":{\"364\":1}}],[\"如果希望用\",{\"1\":{\"364\":1}}],[\"如果设置为文件的末尾\",{\"1\":{\"359\":1}}],[\"如果设置keyprefix\",{\"1\":{\"7\":1}}],[\"如果想重复读取数据\",{\"1\":{\"345\":1}}],[\"如果想要使用完全版本的\",{\"1\":{\"302\":1}}],[\"如果想要跳过下载\",{\"1\":{\"299\":1}}],[\"如果要将\",{\"1\":{\"302\":1}}],[\"如果要删除目录\",{\"1\":{\"8\":1}}],[\"如果使用\",{\"1\":{\"290\":1}}],[\"如果使用逗号\",{\"1\":{\"290\":1}}],[\"如果有\",{\"1\":{\"497\":1}}],[\"如果有剩余未读字节\",{\"1\":{\"385\":1}}],[\"如果有很多连接建立\",{\"1\":{\"368\":1}}],[\"如果有返回值\",{\"1\":{\"264\":1}}],[\"如果有密码\",{\"1\":{\"163\":1}}],[\"如果在指定毫秒内无法连接\",{\"1\":{\"480\":1}}],[\"如果在这个位置\",{\"1\":{\"496\":1}}],[\"如果在这个\",{\"1\":{\"441\":1}}],[\"如果在这个时候\",{\"1\":{\"22\":1}}],[\"如果在\",{\"1\":{\"441\":1}}],[\"如果在多个操作中涉及到较多的i\",{\"1\":{\"219\":1}}],[\"如果在多个操作中发生了错误\",{\"1\":{\"219\":1}}],[\"如果变更必须重启微服务\",{\"1\":{\"186\":1}}],[\"如果\",{\"1\":{\"163\":1,\"441\":1,\"442\":1,\"455\":4,\"481\":1}}],[\"如果某实例未在规定时间内\",{\"1\":{\"163\":1}}],[\"如果key不存在\",{\"1\":{\"153\":1}}],[\"如果存在则不创建\",{\"1\":{\"153\":1}}],[\"如果查询的时机不正确\",{\"1\":{\"145\":1}}],[\"如果条件不符\",{\"1\":{\"144\":1}}],[\"如果不希望永远阻塞\",{\"1\":{\"480\":1}}],[\"如果不存在才能创建成功\",{\"1\":{\"469\":1}}],[\"如果不调用\",{\"1\":{\"441\":1}}],[\"如果不取消\",{\"1\":{\"385\":1}}],[\"如果不用\",{\"1\":{\"370\":1}}],[\"如果不是则证明订单已经被处理过\",{\"1\":{\"144\":1}}],[\"如果不设置keyprefix\",{\"1\":{\"7\":1}}],[\"如果下次又收到相同消息\",{\"1\":{\"143\":1}}],[\"如果消费者不做判断\",{\"1\":{\"142\":1}}],[\"如果消费者再次执行依然出错\",{\"1\":{\"140\":1}}],[\"如果多次恢复就会出现库存重复增加的情况\",{\"1\":{\"142\":1}}],[\"如果重复执行可能造成不一样的后果\",{\"1\":{\"142\":1}}],[\"如果业务中包含事务\",{\"1\":{\"140\":1}}],[\"如果是可读\",{\"1\":{\"497\":1}}],[\"如果是可接入\",{\"1\":{\"497\":1}}],[\"如果是正常断开\",{\"1\":{\"382\":1}}],[\"如果是\",{\"1\":{\"382\":2,\"498\":1}}],[\"如果是消息处理或校验异常\",{\"1\":{\"139\":1}}],[\"如果是业务异常\",{\"1\":{\"139\":1}}],[\"如果是配置在spring\",{\"1\":{\"17\":1}}],[\"如果同时还开启了生产者确认\",{\"1\":{\"133\":1}}],[\"如果mq不能及时保存\",{\"1\":{\"132\":1}}],[\"如果一定要使用\",{\"1\":{\"130\":1}}],[\"如果对于业务性能有要求\",{\"1\":{\"130\":1}}],[\"如果真的发送失败\",{\"1\":{\"128\":1}}],[\"如果队列中有消息\",{\"1\":{\"106\":1}}],[\"如果只需要导出表结构\",{\"1\":{\"68\":1}}],[\"如果服务器端不能正常关闭连接\",{\"1\":{\"31\":1}}],[\"如果直接在方法上注入b实例\",{\"1\":{\"21\":1}}],[\"如果直接调用方法\",{\"1\":{\"20\":1}}],[\"如果aproperties有改动需要重新编译才会生效哦\",{\"1\":{\"19\":1}}],[\"如果我们要修改nginx的配置\",{\"1\":{\"58\":1}}],[\"如果我们要让nginx代理我们的静态资源\",{\"1\":{\"58\":1}}],[\"如果我们不启用方法代理可以这样写\",{\"1\":{\"20\":1}}],[\"如果我们用importbeandefinitionregistrar来实现上面的功能大概就是这个样子\",{\"1\":{\"16\":1}}],[\"如果我的注解上有参数呢\",{\"1\":{\"16\":1}}],[\"如果配置在配置文件里面反而多余又容易写错\",{\"1\":{\"14\":1}}],[\"如果这个配置类是写在我们自己的包下\",{\"1\":{\"13\":1}}],[\"准备一个空\",{\"1\":{\"492\":1}}],[\"准备工作\",{\"0\":{\"488\":1}}],[\"准备\",{\"0\":{\"11\":1}}],[\"介绍了一些\",{\"1\":{\"302\":1}}],[\"介绍\",{\"0\":{\"10\":1},\"1\":{\"94\":1}}],[\"1b\",{\"1\":{\"459\":1}}],[\"1tb\",{\"1\":{\"383\":1}}],[\"1mb\",{\"1\":{\"383\":1}}],[\"1~4\",{\"1\":{\"339\":1}}],[\"1f\",{\"1\":{\"323\":2}}],[\"1代表星期天\",{\"1\":{\"290\":1}}],[\"1的随机小数\",{\"1\":{\"232\":1}}],[\"1s\",{\"1\":{\"130\":1,\"423\":1,\"497\":1}}],[\"1<\",{\"1\":{\"79\":1,\"85\":2,\"267\":1}}],[\"1920\",{\"1\":{\"303\":2}}],[\"192\",{\"1\":{\"187\":1,\"458\":37,\"459\":32,\"460\":37}}],[\"19\",{\"1\":{\"70\":1,\"417\":8,\"420\":1}}],[\"19138084894\",{\"1\":{\"34\":3}}],[\"18\",{\"1\":{\"70\":1,\"305\":1,\"420\":1,\"429\":4,\"459\":19}}],[\"17\",{\"1\":{\"70\":1,\"292\":1,\"319\":1,\"420\":1}}],[\"160b\",{\"1\":{\"453\":1}}],[\"160\",{\"1\":{\"453\":1,\"454\":1}}],[\"16年\",{\"1\":{\"407\":1}}],[\"168\",{\"1\":{\"178\":1,\"187\":1,\"458\":37,\"459\":32,\"460\":37}}],[\"16\",{\"1\":{\"70\":1,\"182\":1,\"292\":1,\"305\":1,\"341\":5,\"343\":1,\"365\":2,\"368\":1,\"369\":1,\"378\":6,\"382\":3,\"401\":2,\"417\":2,\"434\":1,\"439\":3,\"440\":3,\"453\":1,\"459\":1,\"460\":1,\"495\":1,\"499\":1}}],[\"163\",{\"1\":{\"34\":3,\"441\":1}}],[\"15b\",{\"1\":{\"460\":1}}],[\"15执行任务\",{\"1\":{\"292\":4}}],[\"1500\",{\"1\":{\"455\":2}}],[\"150\",{\"1\":{\"187\":1}}],[\"15\",{\"1\":{\"70\":1,\"235\":1,\"292\":5,\"420\":1,\"424\":1,\"434\":1,\"453\":1,\"454\":1,\"457\":1,\"478\":1}}],[\"14b\",{\"1\":{\"460\":1}}],[\"1460\",{\"1\":{\"455\":1}}],[\"140b\",{\"1\":{\"454\":1}}],[\"140\",{\"1\":{\"454\":1}}],[\"14016179\",{\"1\":{\"37\":1}}],[\"1479\",{\"1\":{\"364\":1}}],[\"14\",{\"1\":{\"70\":1,\"274\":1,\"292\":2,\"453\":1,\"454\":1,\"457\":1,\"459\":19,\"460\":23,\"478\":1}}],[\"13b\",{\"1\":{\"460\":1}}],[\"133\",{\"1\":{\"364\":1}}],[\"1327497219\",{\"1\":{\"362\":1}}],[\"13<\",{\"1\":{\"318\":2}}],[\"13秒\",{\"1\":{\"291\":1}}],[\"13\",{\"0\":{\"446\":1},\"1\":{\"70\":1,\"399\":3,\"453\":1,\"454\":1,\"457\":1,\"463\":1,\"478\":1}}],[\"11b\",{\"1\":{\"459\":1}}],[\"110\",{\"1\":{\"232\":2}}],[\"11\",{\"0\":{\"444\":1},\"1\":{\"70\":1,\"350\":1,\"351\":1,\"417\":1,\"426\":4,\"427\":3,\"428\":3,\"453\":1,\"454\":1,\"457\":1,\"478\":1}}],[\"119643754\",{\"1\":{\"52\":1}}],[\"10b\",{\"1\":{\"459\":1}}],[\"103\",{\"1\":{\"458\":37,\"459\":32,\"460\":37}}],[\"1080\",{\"1\":{\"303\":2}}],[\"101\",{\"1\":{\"102\":1,\"187\":1,\"488\":1}}],[\"102\",{\"1\":{\"102\":1,\"488\":1}}],[\"102l\",{\"1\":{\"102\":1}}],[\"1024k\",{\"1\":{\"368\":1}}],[\"1024\",{\"1\":{\"90\":1,\"385\":2,\"455\":1,\"459\":1,\"460\":1,\"466\":1}}],[\"10m\",{\"1\":{\"90\":1}}],[\"10mb\",{\"1\":{\"27\":2}}],[\"1001~2000\",{\"1\":{\"455\":1}}],[\"1000000l\",{\"1\":{\"497\":1}}],[\"10000\",{\"1\":{\"159\":1,\"163\":1}}],[\"1000ms\",{\"1\":{\"130\":1,\"140\":1}}],[\"1000\",{\"1\":{\"111\":1,\"362\":1,\"426\":1,\"427\":2,\"428\":1,\"429\":1,\"430\":1,\"481\":1}}],[\"100\",{\"1\":{\"37\":3,\"160\":1,\"323\":1,\"325\":2,\"407\":1,\"450\":2,\"466\":3,\"496\":3,\"497\":1}}],[\"10\",{\"0\":{\"443\":1},\"1\":{\"37\":1,\"70\":1,\"122\":1,\"159\":1,\"217\":1,\"231\":3,\"244\":1,\"249\":1,\"288\":1,\"291\":1,\"292\":5,\"303\":2,\"323\":1,\"338\":19,\"389\":1,\"397\":2,\"424\":1,\"426\":4,\"427\":4,\"434\":3,\"435\":2,\"438\":2,\"439\":1,\"442\":1,\"445\":1,\"446\":1,\"453\":4,\"454\":4,\"457\":3,\"458\":1,\"459\":2,\"460\":22,\"463\":1,\"478\":1}}],[\"128\",{\"1\":{\"378\":1,\"388\":1,\"455\":2}}],[\"120f\",{\"1\":{\"324\":1}}],[\"12版本或者所有队列都设置为lazyqueue模式\",{\"1\":{\"134\":1}}],[\"12版本之后\",{\"1\":{\"134\":1}}],[\"127\",{\"1\":{\"71\":3,\"88\":2,\"89\":4,\"90\":2,\"100\":1,\"107\":1,\"108\":1,\"109\":1,\"121\":1,\"163\":2,\"168\":1,\"169\":1,\"176\":1,\"187\":1,\"344\":1,\"378\":4,\"411\":1,\"417\":36,\"422\":8,\"432\":1,\"449\":1,\"453\":11,\"454\":14,\"480\":1}}],[\"1234567890abcd\",{\"1\":{\"338\":1}}],[\"123456\",{\"1\":{\"293\":1}}],[\"123root\",{\"1\":{\"213\":1}}],[\"123\",{\"1\":{\"62\":1,\"187\":2,\"257\":1,\"466\":1}}],[\"12\",{\"0\":{\"36\":1,\"445\":1},\"1\":{\"36\":1,\"70\":1,\"99\":1,\"102\":1,\"182\":1,\"290\":1,\"292\":2,\"304\":1,\"320\":1,\"322\":8,\"341\":1,\"424\":1,\"428\":3,\"429\":4,\"430\":3,\"439\":2,\"440\":3,\"453\":1,\"454\":1,\"457\":1,\"458\":23,\"466\":1,\"478\":1}}],[\"1\",{\"0\":{\"9\":1,\"129\":1,\"130\":2,\"131\":1,\"133\":1,\"135\":1,\"139\":1,\"143\":1,\"278\":1,\"284\":1,\"330\":1,\"331\":2,\"332\":1,\"339\":1,\"353\":1,\"367\":1,\"392\":1,\"403\":1,\"404\":2,\"405\":1,\"406\":1,\"407\":1,\"409\":1,\"415\":1,\"434\":1,\"449\":1,\"452\":1,\"453\":2,\"454\":1,\"455\":1,\"456\":1,\"462\":1,\"469\":1,\"477\":1,\"478\":2,\"479\":1,\"480\":1,\"487\":1,\"488\":1,\"495\":1},\"1\":{\"37\":1,\"40\":2,\"41\":1,\"43\":1,\"61\":3,\"66\":1,\"69\":1,\"70\":3,\"71\":3,\"88\":2,\"89\":4,\"90\":3,\"98\":3,\"100\":1,\"107\":1,\"108\":1,\"109\":1,\"111\":1,\"121\":1,\"130\":1,\"140\":1,\"141\":1,\"143\":1,\"144\":5,\"153\":16,\"156\":1,\"159\":1,\"163\":3,\"167\":2,\"168\":1,\"169\":1,\"176\":1,\"178\":2,\"187\":1,\"209\":1,\"213\":1,\"218\":3,\"231\":1,\"245\":4,\"254\":1,\"288\":1,\"290\":4,\"291\":2,\"300\":1,\"302\":1,\"322\":1,\"323\":1,\"338\":3,\"341\":4,\"347\":2,\"349\":3,\"350\":2,\"351\":2,\"356\":1,\"359\":1,\"363\":6,\"365\":2,\"368\":1,\"369\":1,\"378\":11,\"381\":1,\"382\":6,\"385\":2,\"388\":1,\"390\":1,\"397\":1,\"399\":2,\"401\":1,\"409\":1,\"410\":2,\"411\":3,\"417\":65,\"419\":1,\"420\":5,\"422\":14,\"423\":1,\"426\":2,\"427\":4,\"428\":2,\"429\":2,\"430\":4,\"431\":2,\"432\":11,\"434\":1,\"436\":2,\"438\":3,\"439\":1,\"440\":4,\"441\":3,\"442\":7,\"445\":5,\"446\":4,\"449\":1,\"453\":19,\"454\":25,\"457\":1,\"458\":32,\"459\":19,\"460\":36,\"466\":8,\"467\":7,\"470\":7,\"478\":11,\"480\":1,\"481\":2,\"490\":1,\"492\":1,\"495\":14,\"497\":7,\"498\":2,\"499\":1}}],[\"n456789abcdef\",{\"1\":{\"382\":1}}],[\"nworld\",{\"1\":{\"382\":1}}],[\"nhaha\",{\"1\":{\"351\":1}}],[\"nho\",{\"1\":{\"351\":2}}],[\"ni\",{\"1\":{\"351\":2}}],[\"niomessageunsafe\",{\"1\":{\"497\":1,\"498\":1}}],[\"niounsafe\",{\"1\":{\"497\":1}}],[\"niobyteunsafe\",{\"1\":{\"441\":1,\"497\":1,\"499\":1}}],[\"nioworkers\",{\"1\":{\"419\":2,\"420\":2}}],[\"nioeventloop\",{\"0\":{\"417\":1,\"419\":1,\"420\":1,\"496\":1},\"1\":{\"419\":1,\"481\":1,\"496\":4,\"497\":4}}],[\"nioeventloopgroup\",{\"1\":{\"410\":2,\"411\":2,\"417\":29,\"419\":3,\"420\":6,\"422\":4,\"423\":2,\"432\":2,\"449\":3,\"453\":11,\"454\":7,\"457\":2,\"458\":23,\"459\":21,\"460\":23,\"463\":2,\"464\":4,\"470\":6,\"480\":2,\"488\":6,\"490\":2,\"492\":2,\"495\":1}}],[\"niosocketchannel\",{\"1\":{\"410\":1,\"411\":2,\"417\":4,\"422\":4,\"423\":2,\"432\":2,\"449\":3,\"453\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"470\":1,\"480\":1,\"488\":1,\"490\":1,\"492\":1,\"498\":5,\"499\":1}}],[\"nioserversocketchannel\",{\"1\":{\"410\":2,\"417\":2,\"432\":1,\"449\":1,\"453\":1,\"464\":1,\"470\":1,\"488\":1,\"495\":14}}],[\"nio\",{\"0\":{\"329\":1,\"391\":1,\"397\":1},\"1\":{\"347\":1,\"368\":1,\"369\":1,\"375\":1,\"377\":1,\"378\":3,\"381\":1,\"407\":1,\"410\":1,\"411\":1,\"417\":6,\"438\":1,\"441\":2,\"450\":1,\"480\":1,\"481\":1,\"495\":9,\"496\":2,\"497\":7,\"498\":7,\"499\":2}}],[\"nignx\",{\"1\":{\"59\":1}}],[\"npm\",{\"1\":{\"299\":1,\"300\":1,\"305\":2}}],[\"nu\",{\"1\":{\"70\":1}}],[\"nullpointerexception\",{\"1\":{\"496\":1}}],[\"null\",{\"1\":{\"7\":2,\"8\":2,\"36\":1,\"40\":2,\"107\":2,\"108\":1,\"111\":1,\"113\":1,\"117\":1,\"120\":1,\"144\":1,\"169\":1,\"182\":3,\"187\":1,\"209\":10,\"213\":1,\"217\":1,\"218\":2,\"227\":1,\"228\":1,\"233\":1,\"234\":1,\"267\":1,\"319\":1,\"369\":2,\"382\":1,\"385\":1,\"388\":3,\"399\":1,\"401\":2,\"417\":4,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"466\":1,\"469\":5,\"471\":1,\"472\":3,\"478\":2,\"480\":1,\"492\":3,\"493\":2,\"495\":6,\"496\":2,\"497\":1,\"498\":2,\"499\":3}}],[\"nosql\",{\"1\":{\"406\":1}}],[\"nosuchfileexception\",{\"1\":{\"364\":2}}],[\"normalworkers\",{\"1\":{\"417\":2}}],[\"normalize\",{\"1\":{\"363\":1}}],[\"normal索引适用于一般的数据查询\",{\"1\":{\"236\":1}}],[\"normal索引\",{\"1\":{\"236\":1}}],[\"normal\",{\"1\":{\"236\":1,\"320\":1,\"322\":4,\"419\":2}}],[\"no\",{\"1\":{\"160\":3,\"234\":1,\"303\":1,\"323\":3}}],[\"noargs\",{\"1\":{\"146\":1}}],[\"noargsconstructor\",{\"1\":{\"100\":1}}],[\"now\",{\"1\":{\"144\":2,\"232\":3}}],[\"non\",{\"1\":{\"155\":1,\"329\":1}}],[\"none\",{\"1\":{\"139\":2,\"215\":1}}],[\"nonu\",{\"1\":{\"70\":1}}],[\"note\",{\"1\":{\"299\":1,\"301\":1}}],[\"notice\",{\"1\":{\"163\":2}}],[\"not\",{\"1\":{\"99\":1,\"187\":1,\"227\":1,\"233\":1,\"319\":1,\"320\":1}}],[\"notnull\",{\"1\":{\"37\":3}}],[\"nodelay\",{\"0\":{\"483\":1},\"1\":{\"455\":1}}],[\"nodelist可以作为xpath查询的结果返回\",{\"1\":{\"328\":1}}],[\"nodelist可以是动态的\",{\"1\":{\"328\":1}}],[\"nodelist也会相应地更新\",{\"1\":{\"328\":1}}],[\"nodelist中的每个节点都是node接口的一个实例\",{\"1\":{\"328\":1}}],[\"nodelist\",{\"1\":{\"328\":3}}],[\"nodes\",{\"1\":{\"96\":1}}],[\"node\",{\"1\":{\"94\":1,\"296\":1,\"301\":5,\"304\":1,\"305\":4,\"307\":3,\"328\":6}}],[\"nopush\",{\"1\":{\"90\":1}}],[\"nopaste\",{\"1\":{\"70\":1}}],[\"noh\",{\"1\":{\"70\":1}}],[\"n2s\",{\"1\":{\"70\":1}}],[\"n1与n2为数字\",{\"1\":{\"70\":1}}],[\"n1\",{\"1\":{\"70\":1}}],[\"n<enter>\",{\"1\":{\"70\":1}}],[\"n<space>\",{\"1\":{\"70\":1}}],[\"n为数字\",{\"1\":{\"70\":2}}],[\"nginx\",{\"0\":{\"86\":1,\"90\":1},\"1\":{\"86\":9,\"90\":13}}],[\"ng\",{\"1\":{\"70\":1}}],[\"n表示数字\",{\"1\":{\"70\":1}}],[\"n\",{\"0\":{\"482\":1},\"1\":{\"40\":2,\"70\":3,\"288\":1,\"313\":3,\"338\":17,\"341\":2,\"351\":8,\"378\":6,\"382\":4,\"401\":3,\"417\":18,\"453\":7,\"454\":9,\"456\":1,\"458\":23,\"459\":22,\"460\":23}}],[\"nagle\",{\"1\":{\"455\":3}}],[\"nativerequest\",{\"1\":{\"281\":2}}],[\"nativewebrequest\",{\"1\":{\"281\":3}}],[\"nacos地址\",{\"1\":{\"187\":1}}],[\"nacos配置管理\",{\"1\":{\"187\":1}}],[\"nacos\",{\"1\":{\"167\":5,\"168\":3,\"169\":3,\"176\":3,\"187\":2}}],[\"nacos安装\",{\"0\":{\"167\":1}}],[\"nacos注册中心\",{\"0\":{\"166\":1}}],[\"nack\",{\"1\":{\"139\":1}}],[\"nack是投递失败\",{\"1\":{\"131\":1}}],[\"nanotime\",{\"1\":{\"40\":1,\"362\":2,\"496\":2,\"497\":2}}],[\"name字段包含搜索词\",{\"1\":{\"103\":1}}],[\"name字段\",{\"1\":{\"99\":1}}],[\"name>\",{\"1\":{\"74\":1}}],[\"names\",{\"1\":{\"69\":1,\"488\":2}}],[\"name=name\",{\"1\":{\"269\":1}}],[\"name=nacos\",{\"1\":{\"167\":1}}],[\"name=hello\",{\"1\":{\"260\":1}}],[\"name=sentinel\",{\"1\":{\"190\":2}}],[\"name=\",{\"1\":{\"27\":1,\"52\":3,\"197\":4,\"257\":2,\"258\":3,\"259\":2}}],[\"name\",{\"1\":{\"18\":1,\"37\":8,\"40\":1,\"45\":4,\"52\":3,\"55\":2,\"64\":1,\"65\":2,\"66\":1,\"68\":1,\"86\":1,\"88\":1,\"89\":1,\"90\":2,\"94\":1,\"98\":2,\"99\":7,\"100\":1,\"117\":2,\"118\":6,\"120\":6,\"136\":2,\"141\":1,\"152\":1,\"153\":14,\"155\":1,\"167\":1,\"168\":1,\"169\":1,\"176\":1,\"181\":1,\"187\":2,\"208\":2,\"209\":9,\"215\":1,\"226\":3,\"232\":2,\"235\":6,\"238\":4,\"248\":1,\"249\":1,\"260\":1,\"269\":2,\"270\":2,\"272\":1,\"288\":5,\"293\":2,\"305\":7,\"469\":16,\"470\":5,\"488\":4}}],[\"needstoselectagain\",{\"1\":{\"496\":1}}],[\"neverregistered\",{\"1\":{\"495\":2,\"498\":2}}],[\"nextid\",{\"1\":{\"492\":1}}],[\"nextint\",{\"1\":{\"458\":1,\"459\":1,\"460\":1}}],[\"nextline\",{\"1\":{\"423\":1,\"449\":1,\"470\":3}}],[\"next\",{\"1\":{\"376\":1,\"378\":1,\"382\":1,\"385\":2,\"388\":2,\"415\":4,\"418\":6,\"498\":1}}],[\"nexus\",{\"1\":{\"74\":1}}],[\"netutil\",{\"1\":{\"481\":1}}],[\"network\",{\"1\":{\"404\":1}}],[\"networkidle2\",{\"1\":{\"301\":1}}],[\"netty<\",{\"1\":{\"409\":1}}],[\"netty\",{\"0\":{\"329\":1,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"451\":1,\"500\":1},\"1\":{\"404\":2,\"406\":3,\"407\":4,\"411\":1,\"415\":7,\"418\":1,\"424\":1,\"425\":7,\"428\":5,\"431\":18,\"436\":1,\"438\":1,\"441\":5,\"446\":1,\"450\":1,\"454\":2,\"455\":1,\"466\":1,\"480\":1,\"481\":2,\"486\":1,\"495\":15,\"496\":4,\"497\":6,\"498\":8,\"499\":4}}],[\"net\",{\"1\":{\"34\":1,\"52\":1,\"481\":3}}],[\"netflix\",{\"1\":{\"12\":1}}],[\"newattrarray\",{\"1\":{\"495\":1}}],[\"newoptionarray\",{\"1\":{\"495\":1}}],[\"newoutputstream\",{\"1\":{\"328\":1}}],[\"newchannel\",{\"1\":{\"495\":1}}],[\"newconnection\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"newbuffer\",{\"1\":{\"382\":3}}],[\"newpromise\",{\"1\":{\"495\":1}}],[\"newproxyinstance\",{\"1\":{\"492\":1}}],[\"newpos\",{\"1\":{\"359\":2}}],[\"newpage\",{\"1\":{\"301\":3,\"303\":2}}],[\"newline\",{\"1\":{\"341\":5,\"434\":1,\"450\":2}}],[\"newtransformer\",{\"1\":{\"328\":1}}],[\"newtrigger\",{\"1\":{\"248\":1,\"249\":1}}],[\"newdocumentbuilder\",{\"1\":{\"328\":2}}],[\"newinstance\",{\"1\":{\"328\":3,\"488\":1}}],[\"news\",{\"1\":{\"301\":1}}],[\"newjob\",{\"1\":{\"248\":1,\"249\":1}}],[\"newname\",{\"1\":{\"27\":3}}],[\"new\",{\"1\":{\"6\":1,\"7\":2,\"8\":1,\"13\":1,\"16\":3,\"18\":2,\"20\":4,\"21\":2,\"22\":4,\"27\":7,\"34\":8,\"36\":1,\"37\":2,\"40\":12,\"41\":2,\"43\":2,\"102\":1,\"107\":1,\"108\":4,\"109\":1,\"111\":3,\"114\":3,\"118\":4,\"120\":2,\"139\":2,\"141\":6,\"143\":1,\"144\":1,\"146\":3,\"147\":2,\"153\":2,\"155\":4,\"156\":1,\"169\":1,\"182\":1,\"184\":1,\"185\":1,\"203\":1,\"213\":5,\"217\":5,\"218\":2,\"219\":2,\"249\":1,\"254\":2,\"260\":1,\"267\":2,\"280\":2,\"303\":2,\"319\":1,\"320\":2,\"321\":1,\"322\":18,\"323\":10,\"325\":1,\"328\":3,\"338\":1,\"341\":12,\"349\":2,\"350\":4,\"362\":4,\"364\":6,\"368\":3,\"369\":2,\"376\":2,\"378\":1,\"381\":3,\"382\":2,\"385\":3,\"388\":9,\"390\":2,\"396\":3,\"399\":1,\"401\":4,\"410\":5,\"411\":5,\"415\":2,\"417\":20,\"418\":1,\"419\":1,\"420\":1,\"422\":18,\"423\":9,\"426\":2,\"427\":2,\"428\":3,\"429\":3,\"430\":3,\"431\":2,\"432\":13,\"434\":1,\"438\":1,\"442\":1,\"445\":2,\"446\":4,\"449\":11,\"450\":14,\"453\":13,\"454\":1,\"457\":6,\"458\":8,\"459\":7,\"460\":7,\"463\":5,\"464\":9,\"466\":12,\"467\":6,\"470\":29,\"471\":4,\"472\":9,\"475\":5,\"478\":20,\"480\":5,\"481\":6,\"488\":18,\"489\":1,\"490\":10,\"492\":12,\"493\":1,\"495\":12,\"496\":2,\"498\":2}}],[\"wrappedbuffer\",{\"1\":{\"446\":3}}],[\"wrapper<t>\",{\"1\":{\"212\":9}}],[\"writeinbound\",{\"1\":{\"466\":2}}],[\"writeintle\",{\"1\":{\"438\":1}}],[\"writeint\",{\"1\":{\"438\":2,\"439\":1,\"466\":2,\"467\":2,\"478\":2}}],[\"writeoutbound\",{\"1\":{\"466\":1}}],[\"writeobject\",{\"1\":{\"466\":1,\"467\":1,\"478\":2}}],[\"writedouble\",{\"1\":{\"438\":1}}],[\"writefloat\",{\"1\":{\"438\":1}}],[\"writecharsequence\",{\"1\":{\"438\":1}}],[\"writechar\",{\"1\":{\"438\":1}}],[\"writeclient\",{\"1\":{\"385\":1}}],[\"writelong\",{\"1\":{\"438\":1}}],[\"writebyte\",{\"1\":{\"438\":1,\"442\":1,\"459\":2,\"460\":2,\"466\":4,\"467\":4,\"478\":4}}],[\"writebytes\",{\"1\":{\"345\":1,\"417\":2,\"438\":4,\"442\":1,\"445\":4,\"446\":2,\"449\":1,\"453\":1,\"454\":1,\"457\":1,\"458\":1,\"463\":24,\"464\":1,\"466\":2,\"467\":2,\"478\":2}}],[\"writeboolean\",{\"1\":{\"438\":1}}],[\"writeandflush\",{\"1\":{\"411\":1,\"417\":2,\"421\":1,\"422\":2,\"423\":1,\"432\":1,\"449\":2,\"453\":1,\"454\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":2,\"464\":1,\"470\":8,\"471\":3,\"472\":9,\"475\":1,\"489\":1,\"490\":1,\"492\":1}}],[\"writehandler\",{\"1\":{\"401\":4}}],[\"writeshort\",{\"1\":{\"438\":1}}],[\"writeserver\",{\"1\":{\"385\":1}}],[\"writes\",{\"0\":{\"350\":1}}],[\"write\",{\"0\":{\"384\":1,\"386\":1},\"1\":{\"345\":2,\"350\":1,\"357\":3,\"373\":1,\"375\":1,\"376\":1,\"381\":3,\"382\":3,\"385\":12,\"396\":2,\"401\":3,\"421\":1,\"432\":18,\"434\":2,\"438\":2,\"439\":1,\"440\":3,\"442\":3,\"445\":2,\"450\":2,\"458\":1,\"459\":1,\"460\":1,\"481\":1,\"497\":1}}],[\"writerindex\",{\"1\":{\"434\":1}}],[\"writer\",{\"1\":{\"320\":2,\"325\":1,\"450\":8,\"475\":2}}],[\"wrote\",{\"1\":{\"48\":1}}],[\"wg\",{\"1\":{\"204\":1}}],[\"when>\",{\"1\":{\"209\":2}}],[\"where\",{\"1\":{\"144\":2,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"209\":3,\"213\":2,\"223\":1,\"224\":1,\"225\":2,\"232\":1,\"235\":5,\"238\":2}}],[\"while\",{\"1\":{\"106\":1,\"338\":2,\"357\":2,\"368\":1,\"369\":1,\"376\":2,\"378\":2,\"381\":2,\"382\":2,\"385\":4,\"388\":4,\"423\":1,\"449\":1,\"450\":2,\"470\":1,\"498\":2,\"499\":1}}],[\"which\",{\"1\":{\"7\":1,\"8\":1,\"341\":2}}],[\"wakenup\",{\"1\":{\"496\":5,\"497\":3}}],[\"wakesupfortask\",{\"1\":{\"496\":1}}],[\"wakeup\",{\"1\":{\"375\":1,\"388\":1,\"496\":9,\"497\":4}}],[\"wangwu\",{\"1\":{\"417\":8,\"492\":1}}],[\"wait\",{\"1\":{\"470\":3,\"496\":1}}],[\"waiting\",{\"1\":{\"368\":1,\"390\":2,\"423\":1}}],[\"waituntil\",{\"1\":{\"301\":1}}],[\"walk\",{\"1\":{\"365\":1}}],[\"walkfiletree\",{\"1\":{\"364\":3}}],[\"wapper条件构造器\",{\"0\":{\"214\":1}}],[\"warning\",{\"1\":{\"163\":1}}],[\"warn\",{\"1\":{\"90\":1,\"117\":1,\"118\":2,\"120\":2,\"122\":1,\"126\":2,\"496\":1}}],[\"wasactive\",{\"1\":{\"495\":2}}],[\"was\",{\"1\":{\"7\":1,\"8\":1,\"495\":1,\"498\":1}}],[\"wed\",{\"1\":{\"292\":2}}],[\"we\",{\"1\":{\"79\":1}}],[\"webdatabinderfactory\",{\"1\":{\"281\":2}}],[\"webapplicationcontext\",{\"1\":{\"267\":2}}],[\"webcontrollerapplication<\",{\"1\":{\"85\":1}}],[\"web1\",{\"1\":{\"40\":7}}],[\"webmvcconfigurationsupport\",{\"1\":{\"280\":1,\"285\":1}}],[\"webmvcconfigurer\",{\"1\":{\"26\":1,\"285\":1}}],[\"webmvc<\",{\"1\":{\"267\":1}}],[\"webmapper\",{\"1\":{\"40\":2}}],[\"webs\",{\"1\":{\"40\":2}}],[\"websocket在连接建立后会一直保持连接\",{\"1\":{\"31\":1}}],[\"websocket是html5标准的一部分\",{\"1\":{\"31\":1}}],[\"websocket是一个非常简单的协议\",{\"1\":{\"30\":1}}],[\"websocket提供了双向通信的功能\",{\"1\":{\"30\":1}}],[\"websocket的缺点\",{\"0\":{\"31\":1}}],[\"websocket的头部信息非常小\",{\"1\":{\"30\":1}}],[\"websocket的优势\",{\"0\":{\"30\":1}}],[\"websocket和sockjs都是在web应用程序中使用实时通信的协议\",{\"1\":{\"29\":1}}],[\"websocket\",{\"0\":{\"29\":1},\"1\":{\"12\":1,\"29\":5}}],[\"web\",{\"1\":{\"12\":1,\"26\":1,\"40\":2,\"62\":1,\"182\":1}}],[\"wqy\",{\"1\":{\"305\":1}}],[\"wq\",{\"1\":{\"70\":1}}],[\"w\",{\"1\":{\"70\":2,\"313\":3,\"351\":2}}],[\"work2\",{\"1\":{\"124\":1}}],[\"work1\",{\"1\":{\"124\":1}}],[\"workconsumer\",{\"1\":{\"124\":1}}],[\"work\",{\"1\":{\"122\":4,\"124\":2}}],[\"workers\",{\"1\":{\"388\":4}}],[\"workereventloops\",{\"1\":{\"388\":4}}],[\"workereventloop\",{\"1\":{\"388\":7}}],[\"worker\",{\"1\":{\"90\":2,\"388\":8,\"417\":1,\"453\":6,\"457\":3,\"458\":3,\"459\":3,\"460\":3,\"463\":3,\"464\":3,\"470\":3,\"488\":3,\"498\":3}}],[\"word2\",{\"1\":{\"70\":3}}],[\"word1\",{\"1\":{\"70\":3}}],[\"word\",{\"1\":{\"56\":1,\"70\":2,\"111\":2}}],[\"world\",{\"0\":{\"408\":1},\"1\":{\"34\":1,\"113\":1,\"122\":1,\"153\":1,\"232\":1,\"249\":2,\"259\":1,\"260\":1,\"267\":1,\"269\":1,\"270\":1,\"272\":1,\"288\":2,\"351\":3,\"376\":1,\"381\":1,\"409\":1,\"411\":1,\"422\":2,\"432\":1,\"464\":1}}],[\"windows\",{\"1\":{\"398\":1}}],[\"window\",{\"1\":{\"301\":1}}],[\"win\",{\"1\":{\"299\":1}}],[\"width\",{\"1\":{\"37\":1,\"301\":1,\"303\":2}}],[\"withintervalinseconds\",{\"1\":{\"248\":1,\"249\":1}}],[\"withidentity\",{\"1\":{\"248\":2,\"249\":2}}],[\"withschedule\",{\"1\":{\"248\":1,\"249\":1}}],[\"withmethodannotation\",{\"1\":{\"43\":1}}],[\"with\",{\"1\":{\"7\":1,\"8\":1,\"141\":2,\"146\":1,\"288\":1,\"305\":1}}],[\"www\",{\"1\":{\"37\":1,\"90\":1,\"304\":1}}],[\"ignored\",{\"1\":{\"497\":1}}],[\"illegalaccessexception\",{\"1\":{\"488\":1}}],[\"illegalargumentexception\",{\"1\":{\"478\":1}}],[\"iiiiiii|\",{\"1\":{\"460\":1}}],[\"iiiiiii\",{\"1\":{\"459\":1}}],[\"iotime\",{\"1\":{\"496\":2}}],[\"iostarttime\",{\"1\":{\"496\":2}}],[\"ioratio\",{\"1\":{\"496\":7}}],[\"io\",{\"0\":{\"393\":1,\"396\":1,\"417\":1},\"1\":{\"329\":2,\"370\":2,\"393\":4,\"396\":4,\"397\":1,\"398\":3,\"399\":1,\"413\":2,\"415\":8,\"418\":1,\"419\":1,\"428\":5,\"431\":18,\"441\":3,\"446\":1,\"450\":2,\"480\":3,\"481\":1,\"495\":13,\"496\":11,\"497\":7,\"498\":7,\"499\":4}}],[\"iocp\",{\"1\":{\"398\":1}}],[\"ioc容器来控制对象的创建\",{\"1\":{\"254\":1}}],[\"ioc\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"ioexception\",{\"1\":{\"6\":1,\"27\":2,\"107\":1,\"108\":2,\"109\":2,\"111\":2,\"113\":1,\"114\":2,\"117\":1,\"118\":4,\"120\":3,\"320\":1,\"328\":2,\"338\":1,\"349\":1,\"350\":1,\"362\":2,\"364\":7,\"365\":1,\"376\":2,\"378\":1,\"381\":2,\"382\":2,\"385\":2,\"388\":7,\"390\":1,\"399\":2,\"401\":4,\"450\":6,\"478\":3,\"481\":3,\"488\":1,\"496\":1,\"497\":1}}],[\"ipage<record>\",{\"1\":{\"217\":1}}],[\"ipage<map<string\",{\"1\":{\"212\":1}}],[\"ipage<t>>\",{\"1\":{\"212\":1}}],[\"ip====\",{\"1\":{\"181\":1}}],[\"ipv6地址\",{\"1\":{\"181\":1}}],[\"ipv4\",{\"1\":{\"181\":1,\"455\":1,\"481\":1}}],[\"ip地址和端口\",{\"1\":{\"163\":1}}],[\"ip\",{\"1\":{\"162\":2,\"178\":1,\"181\":2,\"455\":3,\"462\":1}}],[\"isopen\",{\"1\":{\"498\":1}}],[\"isoutofbounds\",{\"1\":{\"341\":1}}],[\"isshuttingdown\",{\"1\":{\"496\":1}}],[\"isshutdown\",{\"1\":{\"496\":1}}],[\"issuccess\",{\"1\":{\"425\":2,\"429\":1,\"430\":1,\"470\":1,\"490\":1,\"492\":1,\"495\":1,\"498\":1}}],[\"isvalid\",{\"1\":{\"495\":1,\"497\":1,\"498\":1}}],[\"iswindows\",{\"1\":{\"495\":1}}],[\"iswritable\",{\"1\":{\"385\":1}}],[\"isanylocaladdress\",{\"1\":{\"495\":1}}],[\"isautoread\",{\"1\":{\"495\":1,\"498\":2,\"499\":2}}],[\"isactive\",{\"1\":{\"495\":4,\"498\":1}}],[\"isacceptable\",{\"1\":{\"376\":1,\"378\":1,\"382\":1,\"385\":1,\"388\":1,\"498\":1}}],[\"isdone\",{\"1\":{\"425\":1,\"495\":1}}],[\"isdirectory\",{\"1\":{\"27\":1,\"365\":1}}],[\"iscanceled\",{\"1\":{\"425\":1}}],[\"isconnectable\",{\"1\":{\"385\":1}}],[\"isreadable\",{\"1\":{\"378\":1,\"382\":1,\"385\":1,\"388\":1}}],[\"isregularfile\",{\"1\":{\"365\":1}}],[\"is\",{\"1\":{\"227\":1,\"302\":1,\"404\":1}}],[\"isexclude\",{\"1\":{\"182\":2}}],[\"isempty\",{\"1\":{\"40\":1,\"182\":1,\"213\":1}}],[\"i\",{\"1\":{\"34\":2,\"35\":1,\"41\":1,\"64\":1,\"70\":1,\"122\":2,\"299\":1,\"300\":1,\"315\":2,\"323\":5,\"328\":3,\"338\":17,\"341\":30,\"345\":2,\"350\":1,\"351\":7,\"378\":6,\"382\":4,\"385\":2,\"388\":4,\"394\":1,\"399\":3,\"417\":30,\"419\":2,\"420\":5,\"426\":4,\"427\":3,\"428\":3,\"429\":4,\"430\":3,\"450\":6,\"453\":9,\"454\":11,\"457\":2,\"458\":25,\"459\":21,\"460\":25,\"498\":4}}],[\"i++\",{\"1\":{\"34\":1,\"35\":1,\"122\":1,\"323\":1,\"328\":1,\"341\":6,\"351\":1,\"382\":1,\"385\":1,\"388\":1,\"450\":2,\"453\":1,\"454\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"i<srcpath\",{\"1\":{\"34\":1}}],[\"i=0\",{\"1\":{\"34\":1}}],[\"immediaterequeuemessagerecoverer\",{\"1\":{\"141\":1}}],[\"img\",{\"1\":{\"37\":1,\"271\":1,\"455\":2,\"497\":2}}],[\"image\",{\"0\":{\"324\":1},\"1\":{\"37\":2,\"62\":1,\"64\":2,\"65\":1,\"89\":1,\"305\":6,\"324\":6}}],[\"images\",{\"0\":{\"64\":1},\"1\":{\"27\":1,\"64\":1,\"305\":1}}],[\"impl\",{\"1\":{\"254\":2,\"257\":2,\"258\":2,\"259\":1}}],[\"implements\",{\"1\":{\"16\":2,\"26\":1,\"36\":1,\"155\":1,\"181\":1,\"182\":1,\"219\":1,\"248\":1,\"249\":1,\"279\":1,\"281\":1,\"284\":1,\"285\":1,\"388\":2,\"401\":3,\"478\":2,\"481\":1,\"488\":1}}],[\"import会丢弃历史记录和元数据信息\",{\"1\":{\"65\":1}}],[\"import与docker\",{\"1\":{\"65\":1}}],[\"importingclassmetadata\",{\"1\":{\"16\":1}}],[\"importbeandefinitionregistrar可以直接注册beandefinition\",{\"1\":{\"16\":1}}],[\"importbeandefinitionregistrar\",{\"1\":{\"16\":2}}],[\"importselector\",{\"1\":{\"16\":1}}],[\"import注解导入aconfiguration\",{\"1\":{\"15\":1}}],[\"import\",{\"1\":{\"15\":1,\"16\":7,\"65\":1,\"141\":8,\"182\":15,\"188\":3}}],[\"invokelater\",{\"1\":{\"495\":1}}],[\"invokehandleraddedifneeded\",{\"1\":{\"495\":1,\"498\":1}}],[\"invoke\",{\"1\":{\"489\":3}}],[\"invokechannelread\",{\"1\":{\"418\":4}}],[\"inversion\",{\"1\":{\"254\":1}}],[\"ineventloop\",{\"1\":{\"415\":1,\"418\":1,\"495\":1,\"496\":7,\"498\":2}}],[\"inetsocketaddress\",{\"1\":{\"368\":2,\"369\":1,\"376\":1,\"378\":1,\"382\":2,\"385\":2,\"388\":1,\"390\":3,\"401\":1,\"423\":1,\"481\":1,\"495\":3}}],[\"inbound\",{\"1\":{\"413\":1,\"441\":1}}],[\"inactive\",{\"1\":{\"368\":1,\"473\":1}}],[\"inner\",{\"1\":{\"235\":1}}],[\"in\",{\"1\":{\"206\":1,\"213\":1,\"227\":1,\"245\":2,\"341\":1,\"376\":1,\"381\":2,\"382\":1,\"399\":1,\"400\":1,\"401\":1,\"423\":1,\"428\":1,\"449\":1,\"466\":9,\"467\":9,\"470\":3,\"478\":15,\"481\":2,\"488\":2}}],[\"incmessagesread\",{\"1\":{\"498\":1,\"499\":1}}],[\"incomplete\",{\"1\":{\"431\":2}}],[\"incrementandget\",{\"1\":{\"364\":3}}],[\"incrby\",{\"1\":{\"153\":1}}],[\"incr\",{\"1\":{\"153\":1}}],[\"include>\",{\"1\":{\"197\":3}}],[\"includesubdomains\",{\"1\":{\"90\":1}}],[\"include\",{\"1\":{\"90\":3,\"197\":4}}],[\"info\",{\"1\":{\"118\":2,\"120\":3,\"126\":1,\"136\":1,\"139\":4,\"183\":2,\"185\":1}}],[\"inf目录下创建spring\",{\"1\":{\"17\":1}}],[\"inf目录\",{\"1\":{\"17\":1}}],[\"indices\",{\"1\":{\"94\":1,\"96\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"341\":1,\"442\":1}}],[\"indexops\",{\"1\":{\"101\":3}}],[\"indexname\",{\"1\":{\"100\":1}}],[\"index\",{\"1\":{\"88\":3,\"89\":3,\"90\":3,\"99\":3,\"100\":1,\"273\":3,\"328\":1,\"341\":2,\"388\":7,\"434\":4,\"438\":4,\"439\":2,\"440\":7,\"442\":2,\"445\":2}}],[\"instantiationexception\",{\"1\":{\"488\":1}}],[\"instance\",{\"1\":{\"495\":1}}],[\"instanceclass\",{\"1\":{\"488\":2}}],[\"instanceof\",{\"1\":{\"417\":2,\"441\":1,\"464\":2,\"470\":1,\"495\":1}}],[\"instances\",{\"1\":{\"169\":3}}],[\"instancs\",{\"1\":{\"169\":2}}],[\"install\",{\"1\":{\"75\":1,\"151\":1,\"305\":4,\"307\":1}}],[\"inspect\",{\"1\":{\"59\":1}}],[\"insert>\",{\"1\":{\"208\":1}}],[\"insert\",{\"0\":{\"222\":1},\"1\":{\"40\":2,\"119\":1,\"196\":1,\"208\":3,\"212\":1,\"213\":1,\"219\":1,\"222\":4}}],[\"initmap\",{\"1\":{\"495\":1}}],[\"initandregister\",{\"1\":{\"495\":5}}],[\"initchannel\",{\"1\":{\"410\":2,\"411\":2,\"417\":3,\"422\":4,\"423\":1,\"432\":2,\"449\":2,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":2,\"488\":2,\"490\":1,\"492\":3,\"495\":5}}],[\"initeventloops\",{\"1\":{\"388\":2}}],[\"initial\",{\"1\":{\"130\":2,\"140\":1}}],[\"initialdelay\",{\"1\":{\"35\":1}}],[\"init\",{\"1\":{\"47\":1,\"255\":2,\"417\":1,\"495\":3}}],[\"inputshutdown\",{\"1\":{\"498\":1}}],[\"inputstreamreader\",{\"1\":{\"450\":2}}],[\"inputstream\",{\"1\":{\"381\":1,\"478\":1,\"488\":1}}],[\"input\",{\"1\":{\"37\":1,\"423\":1}}],[\"intbuffer\",{\"1\":{\"331\":1}}],[\"into\",{\"1\":{\"208\":1,\"222\":4}}],[\"interestops\",{\"1\":{\"382\":2,\"385\":4,\"388\":2,\"495\":6,\"497\":2,\"498\":6}}],[\"interrupted\",{\"1\":{\"496\":1,\"497\":1}}],[\"interruptedexception\",{\"1\":{\"139\":2,\"417\":1,\"423\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":2,\"488\":1}}],[\"interrupt\",{\"1\":{\"375\":1,\"496\":1}}],[\"interval\",{\"1\":{\"130\":2,\"140\":2,\"232\":2}}],[\"interceptorregistry\",{\"1\":{\"280\":1,\"285\":1}}],[\"interceptor\",{\"0\":{\"93\":1},\"1\":{\"217\":3,\"280\":1}}],[\"internal\",{\"1\":{\"90\":1,\"428\":1,\"431\":2}}],[\"interfaces\",{\"1\":{\"492\":2}}],[\"interfaceclass\",{\"1\":{\"488\":4}}],[\"interfacename\",{\"1\":{\"488\":4}}],[\"interface\",{\"1\":{\"15\":1,\"16\":4,\"171\":1,\"212\":1,\"278\":1,\"469\":3,\"478\":1}}],[\"integer\",{\"1\":{\"37\":3,\"41\":1,\"100\":1,\"147\":1,\"155\":1,\"188\":1,\"198\":1,\"212\":1,\"217\":1,\"399\":1,\"401\":2,\"478\":1}}],[\"int\",{\"1\":{\"34\":1,\"41\":1,\"122\":1,\"181\":1,\"182\":1,\"212\":7,\"213\":2,\"257\":1,\"258\":2,\"319\":1,\"323\":1,\"328\":1,\"338\":1,\"341\":24,\"344\":1,\"345\":2,\"351\":2,\"356\":1,\"369\":1,\"374\":3,\"376\":2,\"378\":3,\"381\":1,\"382\":4,\"385\":4,\"388\":4,\"396\":1,\"434\":2,\"438\":9,\"439\":1,\"440\":1,\"450\":2,\"453\":1,\"454\":1,\"457\":1,\"458\":2,\"459\":2,\"460\":2,\"466\":3,\"467\":3,\"478\":25,\"480\":1,\"481\":1,\"488\":5,\"492\":1,\"495\":1,\"496\":1,\"497\":4,\"498\":4}}],[\"if>\",{\"1\":{\"209\":5}}],[\"if\",{\"1\":{\"7\":1,\"8\":1,\"16\":2,\"27\":2,\"34\":1,\"36\":1,\"37\":2,\"40\":7,\"52\":2,\"109\":2,\"139\":2,\"144\":1,\"182\":3,\"209\":1,\"240\":1,\"328\":1,\"338\":1,\"341\":5,\"351\":1,\"364\":1,\"365\":2,\"369\":2,\"376\":2,\"378\":4,\"381\":1,\"382\":5,\"385\":6,\"388\":6,\"401\":2,\"417\":2,\"418\":1,\"423\":1,\"441\":1,\"449\":1,\"464\":2,\"470\":4,\"471\":2,\"472\":3,\"475\":2,\"478\":3,\"480\":2,\"488\":1,\"490\":1,\"492\":3,\"493\":2,\"495\":19,\"496\":10,\"497\":13,\"498\":15,\"499\":5}}],[\"idle\",{\"1\":{\"475\":4}}],[\"idlestateevent\",{\"1\":{\"475\":4}}],[\"idlestatehandler\",{\"1\":{\"475\":2}}],[\"idlestate\",{\"1\":{\"475\":4}}],[\"idlist\",{\"1\":{\"212\":2}}],[\"iddd\",{\"1\":{\"238\":1}}],[\"idtype\",{\"1\":{\"215\":2}}],[\"id=5\",{\"1\":{\"275\":1}}],[\"id=\",{\"1\":{\"197\":5,\"198\":1,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"208\":1,\"209\":3,\"254\":2,\"257\":1,\"258\":2,\"259\":1}}],[\"ids\",{\"1\":{\"169\":2,\"171\":2}}],[\"ids=\",{\"1\":{\"169\":1}}],[\"id>\",{\"1\":{\"74\":1,\"85\":1}}],[\"id\",{\"1\":{\"7\":2,\"8\":2,\"41\":3,\"49\":1,\"71\":1,\"100\":2,\"144\":2,\"155\":1,\"176\":2,\"178\":1,\"187\":1,\"197\":1,\"198\":2,\"208\":3,\"212\":2,\"213\":1,\"217\":1,\"218\":1,\"230\":1,\"232\":1,\"234\":5,\"235\":8,\"238\":2,\"245\":2,\"270\":2,\"272\":2,\"274\":6,\"275\":2,\"417\":18,\"422\":4,\"453\":7,\"454\":9,\"458\":21,\"459\":17,\"460\":21}}],[\"italic\",{\"1\":{\"322\":1}}],[\"italicchunk\",{\"1\":{\"322\":2}}],[\"iterable\",{\"1\":{\"415\":1}}],[\"iterator\",{\"1\":{\"376\":1,\"378\":1,\"382\":1,\"385\":2,\"388\":2,\"498\":1}}],[\"iterator<selectionkey>\",{\"1\":{\"376\":1,\"378\":1,\"382\":1,\"385\":2,\"388\":2,\"498\":1}}],[\"iter\",{\"0\":{\"379\":1},\"1\":{\"376\":4,\"378\":4,\"382\":4,\"385\":8,\"388\":8,\"498\":3}}],[\"itextpdf\",{\"1\":{\"318\":1,\"322\":1}}],[\"itextpdf<\",{\"1\":{\"318\":2}}],[\"itext5\",{\"1\":{\"317\":1}}],[\"itext7使用\",{\"1\":{\"317\":1}}],[\"item=\",{\"1\":{\"206\":1}}],[\"itemclient\",{\"1\":{\"171\":4}}],[\"itemapplication\",{\"1\":{\"171\":2}}],[\"itemids\",{\"1\":{\"169\":1,\"171\":1}}],[\"items\",{\"1\":{\"169\":1,\"171\":2,\"176\":1}}],[\"item\",{\"1\":{\"119\":1,\"168\":1,\"169\":2,\"171\":1,\"176\":2,\"328\":6}}],[\"ityouknow\",{\"1\":{\"178\":1}}],[\"itheima\",{\"1\":{\"141\":1}}],[\"itd\",{\"1\":{\"65\":1,\"66\":1}}],[\"itcast目录及其子目录下查找\",{\"1\":{\"55\":1}}],[\"itcast\",{\"1\":{\"55\":1,\"428\":2,\"431\":2,\"488\":2,\"490\":1}}],[\"it\",{\"1\":{\"7\":1,\"8\":1,\"65\":1,\"79\":1}}],[\"m3\",{\"1\":{\"470\":1}}],[\"m2\",{\"1\":{\"470\":1}}],[\"m1\",{\"1\":{\"470\":1}}],[\"mtu\",{\"1\":{\"455\":6}}],[\"mpsc\",{\"1\":{\"496\":1}}],[\"mp\",{\"1\":{\"211\":1}}],[\"mss\",{\"1\":{\"455\":10}}],[\"ms\",{\"1\":{\"374\":1}}],[\"mset\",{\"1\":{\"153\":1}}],[\"msg\",{\"1\":{\"34\":12,\"136\":2,\"139\":4,\"147\":3,\"148\":3,\"410\":2,\"413\":1,\"417\":6,\"418\":3,\"432\":23,\"441\":8,\"449\":4,\"463\":2,\"464\":7,\"466\":4,\"467\":4,\"470\":8,\"471\":7,\"472\":19,\"478\":4,\"491\":2,\"492\":2,\"493\":5,\"498\":3}}],[\"mget\",{\"1\":{\"153\":1}}],[\"month\",{\"1\":{\"232\":1}}],[\"mono\",{\"1\":{\"182\":1}}],[\"mono<void>\",{\"1\":{\"181\":1,\"182\":1}}],[\"monitor\",{\"1\":{\"163\":2}}],[\"move\",{\"1\":{\"153\":1,\"364\":3}}],[\"modules\",{\"1\":{\"307\":2}}],[\"mod\",{\"1\":{\"232\":1}}],[\"modelandview\",{\"1\":{\"284\":2}}],[\"modelandviewcontainer\",{\"1\":{\"281\":2}}],[\"mode=standalone\",{\"1\":{\"167\":1}}],[\"mode=hostname\",{\"1\":{\"167\":1}}],[\"mode\",{\"1\":{\"136\":1,\"137\":2,\"139\":2,\"302\":1}}],[\"mod=lazy参数也可设置队列为lazy模式\",{\"1\":{\"136\":1}}],[\"mod=lazy参数即可设置队列为lazy模式\",{\"1\":{\"135\":1}}],[\"mq消息的重复投递\",{\"1\":{\"142\":1}}],[\"mq的可靠性\",{\"0\":{\"132\":1}}],[\"mq的引言和不同mq的特点\",{\"1\":{\"104\":1}}],[\"mq会根据消息处理的情况返回不同的回执\",{\"1\":{\"131\":1}}],[\"mq内部处理消息的进程发生了异常\",{\"1\":{\"131\":1}}],[\"mq\",{\"1\":{\"130\":1}}],[\"mq导致消息丢失\",{\"1\":{\"129\":1}}],[\"multi\",{\"1\":{\"288\":1}}],[\"multiplier\",{\"1\":{\"130\":2,\"140\":2}}],[\"multipart\",{\"1\":{\"27\":2}}],[\"multipartfile\",{\"1\":{\"6\":1,\"27\":2}}],[\"mutate\",{\"1\":{\"183\":1}}],[\"must\",{\"1\":{\"99\":1}}],[\"mv\",{\"1\":{\"305\":1}}],[\"mvnrepository\",{\"1\":{\"195\":1}}],[\"mvn\",{\"1\":{\"75\":5}}],[\"mvc\",{\"1\":{\"26\":1}}],[\"m\",{\"1\":{\"48\":2,\"50\":2,\"305\":1,\"351\":3,\"418\":3}}],[\"mkdir\",{\"1\":{\"47\":1,\"305\":1}}],[\"mkdirs\",{\"1\":{\"27\":2}}],[\"millis\",{\"0\":{\"480\":1},\"1\":{\"480\":1}}],[\"milliseconds\",{\"1\":{\"163\":1,\"480\":1,\"497\":1}}],[\"mime\",{\"1\":{\"90\":3}}],[\"mimemessagehelper\",{\"1\":{\"34\":4}}],[\"mimemessage\",{\"1\":{\"34\":2}}],[\"mirror>\",{\"1\":{\"74\":1}}],[\"mirrorof>\",{\"1\":{\"74\":1}}],[\"mishu\",{\"1\":{\"52\":1,\"319\":1}}],[\"mina\",{\"1\":{\"405\":1,\"407\":1}}],[\"minimal\",{\"1\":{\"107\":1}}],[\"min\",{\"1\":{\"37\":1,\"160\":1,\"225\":1,\"228\":2,\"497\":1}}],[\"myhandler\",{\"1\":{\"417\":1}}],[\"myaop\",{\"1\":{\"262\":1,\"264\":1,\"265\":1}}],[\"myglobalfilter\",{\"1\":{\"181\":1}}],[\"mymaster\",{\"1\":{\"163\":4}}],[\"myinterceptor\",{\"1\":{\"284\":1,\"285\":3}}],[\"myindex\",{\"1\":{\"98\":4}}],[\"myid\",{\"1\":{\"163\":1}}],[\"mysortedset\",{\"1\":{\"153\":8}}],[\"myset\",{\"1\":{\"153\":7}}],[\"mysqld\",{\"1\":{\"244\":1}}],[\"mysqldump\",{\"1\":{\"68\":4}}],[\"mysql的慢查询日志是mysql提供的一种日志记录\",{\"1\":{\"244\":1}}],[\"mysql的索引类型包括fulltext\",{\"1\":{\"236\":1}}],[\"mysql>\",{\"1\":{\"69\":4,\"245\":5}}],[\"mysql\",{\"0\":{\"67\":1,\"220\":1},\"1\":{\"59\":4,\"62\":7,\"68\":1,\"69\":2,\"167\":7,\"187\":2,\"217\":1,\"244\":1,\"293\":2}}],[\"mytest\",{\"1\":{\"100\":2,\"101\":2,\"102\":6}}],[\"mytask\",{\"1\":{\"36\":2}}],[\"my\",{\"1\":{\"66\":1,\"498\":1}}],[\"mybatis+字段+1\",{\"0\":{\"218\":1}}],[\"mybatisconfig\",{\"1\":{\"217\":1}}],[\"mybatisx\",{\"0\":{\"216\":1},\"1\":{\"216\":1}}],[\"mybatis错误提示很细致\",{\"1\":{\"201\":1}}],[\"mybatis<\",{\"1\":{\"195\":1}}],[\"mybatisenumtypehandler\",{\"1\":{\"187\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"217\":4}}],[\"mybatisplus\",{\"1\":{\"187\":1}}],[\"mybatis\",{\"0\":{\"195\":1,\"210\":1,\"211\":1},\"1\":{\"12\":1,\"187\":1,\"195\":2,\"198\":1,\"211\":3}}],[\"md\",{\"1\":{\"34\":1,\"288\":1}}],[\"mm\",{\"1\":{\"27\":1,\"303\":2}}],[\"maybemoredatasupplier\",{\"1\":{\"499\":3}}],[\"maybesuperuser\",{\"1\":{\"495\":1}}],[\"magicnum\",{\"1\":{\"466\":2,\"467\":2,\"478\":2}}],[\"markreaderindex\",{\"1\":{\"440\":1}}],[\"mark\",{\"0\":{\"346\":1},\"1\":{\"346\":3,\"440\":1}}],[\"markorderpaysuccess\",{\"1\":{\"144\":2}}],[\"mat\",{\"1\":{\"315\":1,\"316\":1}}],[\"match拆分后模糊查询\",{\"1\":{\"99\":1}}],[\"match\",{\"1\":{\"99\":7,\"182\":1}}],[\"matchifmissing\",{\"1\":{\"18\":1}}],[\"mac\",{\"1\":{\"299\":1}}],[\"manual\",{\"1\":{\"139\":1}}],[\"map<attributekey<\",{\"1\":{\"495\":1}}],[\"map<channeloption<\",{\"1\":{\"495\":1}}],[\"map<class<\",{\"1\":{\"488\":1}}],[\"map<integer\",{\"1\":{\"478\":1,\"493\":1}}],[\"map<string\",{\"1\":{\"16\":2,\"146\":1,\"212\":2,\"282\":1}}],[\"map>\",{\"1\":{\"259\":1}}],[\"mappedbytebuffer\",{\"1\":{\"331\":1}}],[\"mapper<t>\",{\"1\":{\"212\":1}}],[\"mapper\",{\"1\":{\"185\":1,\"201\":1,\"202\":1,\"203\":1,\"208\":1}}],[\"mapperscan\",{\"1\":{\"185\":1}}],[\"mapping\",{\"1\":{\"99\":2}}],[\"map\",{\"1\":{\"107\":1,\"108\":1,\"169\":1,\"197\":2,\"203\":3,\"213\":7,\"259\":1,\"272\":1,\"282\":2,\"488\":3}}],[\"maven<\",{\"1\":{\"74\":1}}],[\"maven\",{\"0\":{\"72\":1},\"1\":{\"74\":1,\"85\":4}}],[\"master\",{\"1\":{\"51\":2,\"96\":1}}],[\"mailservice\",{\"1\":{\"34\":6}}],[\"mail<\",{\"1\":{\"34\":1}}],[\"mail\",{\"1\":{\"34\":2}}],[\"maintainable\",{\"1\":{\"404\":1}}],[\"main分支变动时\",{\"1\":{\"288\":1}}],[\"mainclass>\",{\"1\":{\"85\":1}}],[\"main\",{\"1\":{\"15\":1,\"16\":1,\"88\":1,\"90\":2,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2,\"171\":1,\"185\":1,\"254\":3,\"288\":2,\"305\":2,\"328\":2,\"338\":18,\"351\":1,\"362\":1,\"364\":1,\"376\":2,\"378\":7,\"381\":2,\"382\":1,\"385\":2,\"388\":1,\"390\":2,\"399\":3,\"401\":1,\"417\":1,\"419\":1,\"420\":1,\"423\":1,\"426\":3,\"427\":1,\"428\":4,\"429\":3,\"430\":1,\"450\":2,\"453\":4,\"454\":2,\"457\":1,\"458\":3,\"459\":1,\"460\":3,\"470\":2,\"480\":1,\"481\":2,\"488\":2,\"490\":1,\"492\":1,\"495\":1}}],[\"maxmessageperread\",{\"1\":{\"499\":2}}],[\"maxmessagehandle\",{\"1\":{\"499\":1}}],[\"maximum\",{\"1\":{\"455\":2}}],[\"maxitems\",{\"1\":{\"188\":1}}],[\"maxamount\",{\"1\":{\"188\":1}}],[\"max\",{\"1\":{\"27\":2,\"37\":3,\"90\":1,\"130\":1,\"140\":1,\"225\":1,\"228\":2,\"381\":3,\"439\":1,\"442\":1,\"443\":1,\"481\":1}}],[\"made\",{\"1\":{\"7\":1,\"8\":1}}],[\"member\",{\"1\":{\"469\":4}}],[\"members\",{\"1\":{\"469\":2,\"472\":4}}],[\"memory\",{\"1\":{\"65\":1,\"396\":1}}],[\"messagingexception\",{\"1\":{\"34\":4}}],[\"messageclasses\",{\"1\":{\"478\":16,\"488\":2}}],[\"messageclass\",{\"1\":{\"478\":2}}],[\"messagecodecsharable\",{\"1\":{\"467\":1,\"470\":4,\"478\":1,\"488\":4,\"490\":2,\"492\":2}}],[\"messagecodec\",{\"1\":{\"466\":3}}],[\"messageconverter\",{\"1\":{\"143\":2}}],[\"messageconversionexception\",{\"1\":{\"139\":1}}],[\"message>>\",{\"1\":{\"478\":1}}],[\"message>\",{\"1\":{\"467\":1,\"478\":3}}],[\"messagetomessagecodec<bytebuf\",{\"1\":{\"467\":1,\"478\":1}}],[\"messagetomessagecodec\",{\"1\":{\"467\":1}}],[\"messagetype\",{\"1\":{\"466\":2,\"467\":2,\"478\":7}}],[\"messagepack等\",{\"1\":{\"154\":1}}],[\"messageproperties\",{\"1\":{\"107\":1,\"147\":5}}],[\"messagerecoverer\",{\"1\":{\"141\":3}}],[\"message2\",{\"1\":{\"124\":1,\"125\":1,\"126\":1,\"127\":1}}],[\"message1\",{\"1\":{\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"147\":3}}],[\"message\",{\"1\":{\"7\":1,\"8\":1,\"37\":5,\"123\":3,\"124\":4,\"125\":4,\"126\":5,\"127\":5,\"146\":1,\"147\":4,\"288\":1,\"388\":1,\"441\":1,\"466\":9,\"467\":6,\"470\":10,\"471\":4,\"478\":12,\"488\":13,\"489\":6,\"490\":2,\"492\":2}}],[\"metoo\",{\"1\":{\"288\":1}}],[\"methodparameter\",{\"1\":{\"281\":5}}],[\"methodname====\",{\"1\":{\"181\":1}}],[\"methodname\",{\"1\":{\"181\":2,\"488\":4}}],[\"method\",{\"1\":{\"96\":1,\"190\":1,\"274\":2,\"275\":1,\"489\":3,\"492\":4}}],[\"methods\",{\"1\":{\"37\":1}}],[\"method=get\",{\"1\":{\"178\":1}}],[\"method=\",{\"1\":{\"27\":1}}],[\"metadata\",{\"1\":{\"16\":4}}],[\"means\",{\"1\":{\"7\":1,\"8\":1}}],[\"++\",{\"1\":{\"497\":1,\"498\":1}}],[\"+buf2\",{\"1\":{\"445\":1}}],[\"+=\",{\"1\":{\"385\":1}}],[\"+1\",{\"1\":{\"41\":1,\"459\":1}}],[\"+999999\",{\"1\":{\"40\":1}}],[\"+\",{\"1\":{\"7\":6,\"8\":5,\"27\":11,\"34\":1,\"37\":1,\"40\":4,\"70\":2,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"139\":4,\"148\":1,\"169\":2,\"181\":5,\"182\":2,\"183\":1,\"218\":3,\"245\":30,\"270\":1,\"272\":1,\"275\":1,\"323\":9,\"328\":3,\"341\":38,\"347\":20,\"349\":30,\"350\":20,\"351\":2,\"362\":4,\"378\":20,\"382\":1,\"385\":3,\"388\":1,\"390\":10,\"399\":10,\"410\":1,\"411\":1,\"417\":60,\"422\":2,\"434\":2,\"438\":20,\"439\":10,\"440\":30,\"441\":1,\"442\":60,\"445\":40,\"446\":20,\"453\":10,\"454\":20,\"458\":110,\"459\":110,\"460\":111,\"462\":1,\"472\":7,\"480\":1,\"481\":4,\"497\":2}}],[\"pendingregistrationpromise\",{\"1\":{\"495\":2}}],[\"performance\",{\"1\":{\"383\":1,\"404\":1}}],[\"per\",{\"1\":{\"341\":1}}],[\"percentage\",{\"1\":{\"160\":1}}],[\"persistent\",{\"1\":{\"107\":1}}],[\"phrase\",{\"1\":{\"323\":3}}],[\"phrase不拆分\",{\"1\":{\"99\":1}}],[\"pdfcontentbyte\",{\"1\":{\"325\":1}}],[\"pdfpcell\",{\"1\":{\"323\":7}}],[\"pdfptable\",{\"1\":{\"323\":2}}],[\"pdfwriter\",{\"1\":{\"320\":2}}],[\"pdf\",{\"1\":{\"297\":1,\"301\":4,\"320\":3}}],[\"pw\",{\"1\":{\"187\":1}}],[\"pwd\",{\"1\":{\"47\":1}}],[\"p端\",{\"1\":{\"106\":1}}],[\"platformdependent\",{\"1\":{\"495\":3}}],[\"plain\",{\"1\":{\"90\":1}}],[\"please\",{\"1\":{\"441\":1}}],[\"plugins>\",{\"1\":{\"85\":2}}],[\"plugins<\",{\"1\":{\"85\":2}}],[\"plugin>\",{\"1\":{\"85\":3}}],[\"plugin<\",{\"1\":{\"85\":4}}],[\"plus\",{\"0\":{\"210\":1,\"211\":1},\"1\":{\"12\":1,\"187\":1,\"211\":2}}],[\"pingmessage\",{\"1\":{\"475\":1,\"478\":1}}],[\"pipeline\",{\"0\":{\"432\":1},\"1\":{\"410\":2,\"411\":1,\"413\":4,\"417\":4,\"418\":1,\"421\":1,\"422\":4,\"423\":2,\"432\":10,\"441\":5,\"449\":3,\"453\":3,\"457\":2,\"458\":3,\"459\":3,\"460\":3,\"463\":2,\"464\":4,\"470\":8,\"475\":4,\"488\":8,\"490\":4,\"492\":4,\"495\":13,\"498\":12,\"499\":9}}],[\"pid\",{\"1\":{\"90\":3}}],[\"pictures\",{\"1\":{\"34\":2}}],[\"ps\",{\"1\":{\"65\":1}}],[\"p\",{\"1\":{\"37\":1,\"65\":1,\"66\":1,\"68\":4,\"69\":2,\"70\":1,\"86\":1,\"94\":2,\"167\":3,\"305\":1,\"313\":2,\"495\":2}}],[\"p2hp\",{\"1\":{\"86\":1}}],[\"p2\",{\"1\":{\"34\":1}}],[\"p1\",{\"1\":{\"34\":1}}],[\"png`\",{\"1\":{\"303\":2}}],[\"png\",{\"1\":{\"34\":1,\"301\":2,\"305\":1,\"497\":1}}],[\"padding\",{\"1\":{\"341\":6}}],[\"paddings\",{\"1\":{\"341\":2}}],[\"paginationinnerinterceptor\",{\"1\":{\"217\":1}}],[\"page<>\",{\"1\":{\"217\":1}}],[\"pageout会耗费一段时间\",{\"1\":{\"134\":1}}],[\"page\",{\"1\":{\"90\":1,\"212\":2,\"217\":2,\"301\":14,\"303\":7}}],[\"parent\",{\"1\":{\"415\":1}}],[\"paragraph\",{\"0\":{\"321\":1},\"1\":{\"321\":6,\"322\":13,\"323\":3}}],[\"parametervalue\",{\"1\":{\"488\":4}}],[\"parametertypes\",{\"1\":{\"488\":4}}],[\"parametertype=\",{\"1\":{\"203\":1,\"204\":1,\"205\":1}}],[\"parameter\",{\"1\":{\"278\":1}}],[\"parameterizedtypereference<list<itemdto>>\",{\"1\":{\"169\":1}}],[\"params\",{\"1\":{\"203\":5,\"205\":3}}],[\"param注解\",{\"0\":{\"202\":1}}],[\"param2\",{\"1\":{\"201\":2}}],[\"param1\",{\"1\":{\"201\":2}}],[\"param\",{\"1\":{\"184\":1,\"202\":2,\"212\":15,\"285\":1,\"341\":2,\"469\":20,\"478\":1}}],[\"param=characterencoding=utf8\",{\"1\":{\"167\":1}}],[\"parseint\",{\"1\":{\"478\":1}}],[\"parse\",{\"1\":{\"328\":2}}],[\"parserconfigurationexception\",{\"1\":{\"328\":2}}],[\"parsejwt\",{\"1\":{\"279\":1}}],[\"parsetoken\",{\"1\":{\"182\":1}}],[\"pay\",{\"1\":{\"144\":2}}],[\"package\",{\"1\":{\"75\":1,\"141\":1,\"182\":1,\"188\":1}}],[\"paste\",{\"1\":{\"70\":1}}],[\"pass\",{\"1\":{\"40\":2,\"88\":1,\"89\":1,\"90\":1,\"163\":2}}],[\"password=hh\",{\"1\":{\"293\":1}}],[\"password=123456\",{\"1\":{\"167\":1}}],[\"passwordencoder\",{\"1\":{\"40\":1}}],[\"password\",{\"1\":{\"34\":1,\"40\":4,\"62\":1,\"121\":1,\"163\":1,\"187\":1,\"197\":1,\"213\":3,\"293\":2,\"469\":2,\"470\":4,\"471\":2}}],[\"pattern\",{\"1\":{\"26\":1,\"37\":2}}],[\"pathvariable\",{\"1\":{\"274\":2,\"275\":1}}],[\"pathpattern\",{\"1\":{\"182\":2}}],[\"path====\",{\"1\":{\"181\":1}}],[\"path=\",{\"1\":{\"176\":2,\"178\":1}}],[\"pathselectors\",{\"1\":{\"43\":1}}],[\"paths\",{\"1\":{\"43\":1,\"288\":1,\"363\":7,\"364\":12,\"365\":3,\"399\":1}}],[\"path\",{\"0\":{\"363\":1},\"1\":{\"26\":1,\"178\":1,\"181\":2,\"182\":2,\"301\":2,\"302\":1,\"303\":8,\"363\":11,\"364\":29,\"365\":5}}],[\"pongmessage\",{\"1\":{\"478\":1}}],[\"pooledbytebuf\",{\"1\":{\"441\":1}}],[\"pos\",{\"1\":{\"359\":1}}],[\"position\",{\"1\":{\"340\":3,\"341\":6,\"345\":2,\"346\":1,\"350\":1,\"351\":1,\"359\":3,\"362\":5,\"382\":3}}],[\"postvisitdirectory\",{\"1\":{\"364\":2}}],[\"posthandle\",{\"1\":{\"284\":2}}],[\"post乱码处理\",{\"0\":{\"271\":1}}],[\"postconstruct\",{\"1\":{\"36\":1,\"260\":1}}],[\"postmapping\",{\"1\":{\"27\":2,\"37\":1,\"204\":1,\"205\":1,\"206\":1,\"282\":1}}],[\"post\",{\"0\":{\"270\":1},\"1\":{\"24\":1,\"27\":1,\"98\":3,\"274\":1}}],[\"pointcut\",{\"1\":{\"262\":1,\"263\":1,\"264\":1,\"265\":1}}],[\"po\",{\"1\":{\"204\":1}}],[\"poll\",{\"1\":{\"388\":1}}],[\"policy\",{\"1\":{\"137\":2}}],[\"polyfill\",{\"1\":{\"29\":1}}],[\"pojo\",{\"1\":{\"37\":1,\"198\":1}}],[\"pom\",{\"0\":{\"82\":1},\"1\":{\"34\":1,\"254\":1,\"267\":1,\"328\":3}}],[\"port=8090\",{\"1\":{\"190\":2}}],[\"port=3306\",{\"1\":{\"167\":1}}],[\"ports\",{\"1\":{\"62\":1}}],[\"port\",{\"1\":{\"34\":1,\"121\":1,\"162\":2,\"163\":1,\"176\":1,\"187\":1,\"478\":1}}],[\"prune\",{\"1\":{\"59\":1,\"65\":1}}],[\"premature\",{\"1\":{\"497\":1}}],[\"prettyhexdump\",{\"1\":{\"442\":6,\"445\":3,\"446\":2}}],[\"pretty=oneline\",{\"1\":{\"49\":1}}],[\"previsitdirectory\",{\"1\":{\"364\":2}}],[\"previewimg\",{\"1\":{\"37\":2}}],[\"previewimage\",{\"1\":{\"37\":2}}],[\"prehandle\",{\"1\":{\"279\":1,\"284\":2}}],[\"predestroy\",{\"1\":{\"260\":1}}],[\"predicates\",{\"1\":{\"176\":2}}],[\"prefer\",{\"1\":{\"79\":1,\"90\":1,\"167\":1}}],[\"prefix\",{\"1\":{\"18\":1,\"188\":1,\"197\":2,\"341\":1}}],[\"proc\",{\"1\":{\"481\":2}}],[\"procotolframedecoder\",{\"1\":{\"470\":2,\"488\":2,\"490\":1,\"492\":1}}],[\"proceed\",{\"1\":{\"264\":1,\"265\":2}}],[\"proceedingjoinpoint\",{\"1\":{\"264\":1,\"265\":1}}],[\"processselectedkeysplain\",{\"1\":{\"497\":1}}],[\"processselectedkeysoptimized\",{\"1\":{\"497\":1}}],[\"processselectedkeys\",{\"1\":{\"496\":2,\"497\":2}}],[\"processselectedkey\",{\"1\":{\"481\":1,\"497\":2}}],[\"processes\",{\"1\":{\"90\":1}}],[\"processor<\",{\"1\":{\"19\":1}}],[\"processor\",{\"1\":{\"19\":1}}],[\"promise<object>\",{\"1\":{\"493\":1}}],[\"promise<object>>\",{\"1\":{\"493\":1}}],[\"promises\",{\"1\":{\"492\":1,\"493\":2}}],[\"promisetask$runnableadapter\",{\"1\":{\"431\":2}}],[\"promisetask\",{\"1\":{\"431\":7}}],[\"promise\",{\"0\":{\"425\":1},\"1\":{\"425\":3,\"426\":4,\"427\":4,\"428\":4,\"429\":7,\"430\":6,\"431\":4,\"432\":8,\"480\":1,\"490\":3,\"492\":10,\"493\":6,\"495\":25,\"498\":9}}],[\"program\",{\"1\":{\"364\":2}}],[\"projects\",{\"1\":{\"363\":7}}],[\"project\",{\"1\":{\"288\":1}}],[\"protobuf\",{\"1\":{\"465\":1}}],[\"protocolversion\",{\"1\":{\"464\":1}}],[\"protocol\",{\"1\":{\"404\":1}}],[\"protocols\",{\"1\":{\"90\":1}}],[\"protected\",{\"1\":{\"267\":3,\"280\":2,\"285\":1,\"410\":2,\"411\":1,\"417\":3,\"422\":4,\"423\":1,\"432\":2,\"441\":2,\"449\":2,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":2,\"466\":2,\"467\":2,\"470\":3,\"471\":2,\"472\":5,\"478\":1,\"488\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"493\":1,\"495\":2,\"496\":2,\"498\":1}}],[\"profiling=1\",{\"1\":{\"245\":1}}],[\"profiling\",{\"1\":{\"245\":8}}],[\"profile\",{\"1\":{\"188\":3,\"245\":1}}],[\"profiles\",{\"0\":{\"245\":1},\"1\":{\"187\":1,\"245\":1}}],[\"propertysource\",{\"1\":{\"260\":1}}],[\"property>\",{\"1\":{\"259\":2}}],[\"property=\",{\"1\":{\"198\":5}}],[\"propertyaccessor\",{\"1\":{\"155\":1}}],[\"properties\",{\"1\":{\"18\":2,\"34\":1,\"37\":1,\"99\":1,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"188\":1,\"478\":8,\"488\":9}}],[\"properties中配置一些参数\",{\"1\":{\"18\":1}}],[\"properties复制代码org\",{\"1\":{\"17\":2}}],[\"producterone\",{\"1\":{\"178\":1}}],[\"productapi\",{\"1\":{\"43\":1}}],[\"producer\",{\"1\":{\"113\":1,\"117\":1,\"120\":1}}],[\"proxy\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"492\":2}}],[\"proxybeanmethods\",{\"1\":{\"20\":1}}],[\"provided\",{\"1\":{\"80\":1}}],[\"primary\",{\"1\":{\"233\":1}}],[\"price字段必须在1000到5000之间的过滤条件\",{\"1\":{\"103\":1}}],[\"printf\",{\"1\":{\"341\":2,\"401\":3}}],[\"printstacktrace\",{\"1\":{\"27\":1,\"109\":1,\"219\":1,\"338\":1,\"349\":1,\"350\":1,\"362\":2,\"365\":1,\"376\":2,\"378\":1,\"382\":1,\"388\":4,\"390\":2,\"399\":1,\"401\":6,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":2,\"450\":4,\"470\":1,\"480\":1,\"481\":1,\"489\":1}}],[\"println\",{\"1\":{\"7\":6,\"8\":5,\"27\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"40\":2,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"148\":1,\"156\":1,\"181\":5,\"182\":2,\"183\":1,\"208\":1,\"213\":6,\"218\":2,\"248\":1,\"249\":2,\"255\":2,\"262\":1,\"264\":3,\"265\":1,\"267\":1,\"269\":1,\"270\":1,\"272\":1,\"274\":2,\"284\":3,\"293\":3,\"328\":6,\"341\":4,\"347\":2,\"351\":1,\"362\":2,\"363\":2,\"364\":6,\"365\":1,\"368\":1,\"376\":2,\"378\":1,\"381\":1,\"385\":4,\"390\":1,\"401\":1,\"410\":1,\"415\":4,\"417\":1,\"422\":4,\"431\":4,\"432\":6,\"434\":1,\"440\":5,\"442\":6,\"445\":3,\"446\":3,\"449\":2,\"450\":2,\"463\":1,\"470\":12,\"481\":4,\"492\":3}}],[\"private\",{\"1\":{\"18\":3,\"34\":1,\"36\":3,\"37\":4,\"43\":1,\"90\":1,\"100\":4,\"109\":1,\"122\":1,\"155\":2,\"156\":1,\"169\":1,\"171\":1,\"182\":4,\"184\":1,\"188\":1,\"219\":1,\"257\":2,\"258\":3,\"260\":2,\"262\":1,\"264\":1,\"265\":1,\"285\":1,\"341\":8,\"351\":1,\"382\":1,\"388\":7,\"401\":8,\"434\":1,\"457\":1,\"463\":2,\"478\":3,\"481\":1,\"488\":7,\"492\":3,\"495\":4,\"496\":1,\"497\":3,\"498\":1}}],[\"puppeteer没有自动安装chromium的解决办法\",{\"0\":{\"307\":1},\"1\":{\"307\":1}}],[\"puppeteer\",{\"0\":{\"295\":1,\"300\":1},\"1\":{\"296\":2,\"297\":2,\"299\":4,\"300\":7,\"301\":13,\"302\":7,\"303\":6,\"305\":1,\"307\":3}}],[\"publisher\",{\"1\":{\"182\":1}}],[\"publicmapper\",{\"1\":{\"40\":1}}],[\"public\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"11\":2,\"13\":2,\"15\":3,\"16\":10,\"18\":4,\"20\":6,\"21\":4,\"22\":8,\"26\":2,\"27\":3,\"34\":4,\"35\":2,\"36\":5,\"37\":11,\"40\":2,\"41\":2,\"43\":2,\"100\":1,\"108\":1,\"109\":3,\"111\":3,\"113\":2,\"114\":3,\"117\":2,\"118\":6,\"120\":5,\"122\":1,\"123\":2,\"124\":3,\"125\":3,\"126\":3,\"127\":3,\"136\":2,\"139\":2,\"141\":9,\"143\":1,\"144\":2,\"146\":7,\"147\":2,\"148\":2,\"155\":3,\"171\":3,\"181\":3,\"182\":3,\"183\":1,\"184\":4,\"185\":5,\"188\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"212\":1,\"217\":3,\"219\":2,\"248\":2,\"249\":2,\"254\":2,\"255\":2,\"258\":2,\"262\":2,\"264\":3,\"265\":2,\"267\":4,\"269\":1,\"270\":1,\"272\":1,\"273\":2,\"274\":2,\"278\":1,\"279\":2,\"280\":1,\"281\":3,\"282\":1,\"284\":4,\"285\":1,\"319\":2,\"320\":1,\"328\":2,\"338\":2,\"341\":4,\"351\":1,\"362\":2,\"364\":6,\"376\":4,\"378\":2,\"381\":4,\"382\":1,\"385\":4,\"388\":8,\"390\":4,\"399\":4,\"401\":10,\"417\":3,\"418\":1,\"423\":3,\"432\":6,\"441\":1,\"449\":2,\"450\":4,\"453\":7,\"455\":2,\"457\":3,\"458\":3,\"459\":3,\"460\":3,\"463\":2,\"464\":1,\"466\":1,\"467\":1,\"469\":3,\"470\":6,\"471\":2,\"472\":5,\"473\":3,\"475\":2,\"478\":30,\"480\":4,\"481\":5,\"488\":14,\"489\":1,\"490\":2,\"491\":1,\"492\":4,\"493\":2,\"495\":9,\"496\":2,\"497\":2,\"498\":6,\"499\":2}}],[\"put\",{\"1\":{\"97\":1,\"98\":1,\"99\":1,\"146\":1,\"203\":2,\"213\":3,\"217\":2,\"249\":2,\"274\":4,\"344\":2,\"350\":2,\"351\":3,\"357\":1,\"382\":2,\"478\":14,\"488\":3,\"492\":1}}],[\"putobject\",{\"1\":{\"5\":1,\"6\":1}}],[\"pull\",{\"1\":{\"64\":1,\"94\":1,\"305\":1}}],[\"push\",{\"1\":{\"46\":1,\"51\":2,\"288\":2,\"305\":2}}],[\"fd\",{\"1\":{\"495\":1}}],[\"fddi\",{\"1\":{\"455\":1}}],[\"ff\",{\"1\":{\"459\":1}}],[\"fffffffffff|\",{\"1\":{\"460\":1}}],[\"ffff\",{\"1\":{\"458\":1}}],[\"future\",{\"0\":{\"425\":1},\"1\":{\"422\":2,\"423\":1,\"425\":10,\"427\":3,\"430\":1,\"432\":2,\"449\":1,\"480\":2,\"490\":1,\"492\":2,\"495\":2,\"498\":3}}],[\"fullrows\",{\"1\":{\"341\":4}}],[\"fullpage\",{\"1\":{\"303\":1}}],[\"fulltext索引使用特定的搜索算法来提高搜索性能\",{\"1\":{\"236\":1}}],[\"fulltext索引\",{\"1\":{\"236\":1}}],[\"function\",{\"1\":{\"303\":2}}],[\"framework\",{\"1\":{\"404\":1}}],[\"fristgroup\",{\"1\":{\"248\":1,\"249\":1}}],[\"fromjson\",{\"1\":{\"478\":1}}],[\"from\",{\"1\":{\"34\":6,\"99\":1,\"197\":2,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"209\":3,\"213\":2,\"224\":2,\"225\":1,\"226\":3,\"228\":4,\"229\":1,\"230\":1,\"231\":3,\"235\":9,\"238\":3,\"239\":1,\"245\":2,\"362\":8,\"496\":1}}],[\"fk\",{\"1\":{\"234\":1}}],[\"flux\",{\"1\":{\"406\":1}}],[\"flush\",{\"1\":{\"441\":1,\"450\":2,\"458\":2,\"459\":1,\"460\":1}}],[\"flushall\",{\"1\":{\"152\":1,\"159\":1}}],[\"flushdb\",{\"1\":{\"152\":1}}],[\"flip\",{\"1\":{\"338\":1,\"339\":1,\"340\":1,\"346\":1,\"349\":3,\"350\":2,\"351\":1,\"357\":1,\"368\":1,\"369\":1,\"378\":1,\"382\":2,\"388\":1,\"390\":1,\"399\":1,\"401\":1}}],[\"floatbuffer\",{\"1\":{\"331\":1}}],[\"float\",{\"1\":{\"319\":1,\"323\":1,\"438\":2}}],[\"floor\",{\"1\":{\"232\":1}}],[\"featured\",{\"1\":{\"209\":1}}],[\"feign\",{\"1\":{\"172\":1}}],[\"feignclient\",{\"1\":{\"171\":1}}],[\"fetch\",{\"1\":{\"46\":1,\"305\":1}}],[\"f\",{\"1\":{\"52\":1,\"142\":3,\"313\":2,\"341\":1,\"347\":2,\"349\":3,\"350\":4,\"378\":2,\"390\":1,\"396\":2,\"399\":1,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"453\":1,\"454\":2,\"458\":11,\"459\":11,\"460\":11}}],[\"fontname\",{\"1\":{\"319\":1}}],[\"font\",{\"1\":{\"319\":6,\"320\":4,\"321\":1,\"322\":17,\"323\":6}}],[\"fonts\",{\"1\":{\"305\":1}}],[\"folder\",{\"1\":{\"27\":4}}],[\"forceclose\",{\"1\":{\"498\":2}}],[\"forceflush\",{\"1\":{\"497\":1}}],[\"force\",{\"1\":{\"361\":1}}],[\"forname\",{\"1\":{\"347\":1,\"488\":2,\"489\":1}}],[\"foreign\",{\"1\":{\"233\":1,\"234\":1}}],[\"foreach\",{\"1\":{\"213\":3,\"365\":1}}],[\"foreach>\",{\"1\":{\"206\":1}}],[\"forwarded\",{\"1\":{\"90\":1}}],[\"formatteddate\",{\"1\":{\"303\":4}}],[\"format\",{\"1\":{\"27\":4,\"90\":1,\"301\":1}}],[\"form>\",{\"1\":{\"27\":1}}],[\"form\",{\"1\":{\"27\":1}}],[\"for\",{\"1\":{\"7\":2,\"8\":1,\"34\":1,\"37\":1,\"90\":1,\"122\":1,\"182\":1,\"245\":1,\"323\":1,\"328\":1,\"341\":18,\"351\":1,\"362\":1,\"368\":1,\"369\":1,\"382\":2,\"385\":1,\"388\":1,\"404\":1,\"415\":2,\"450\":2,\"453\":1,\"454\":1,\"457\":1,\"458\":2,\"459\":2,\"460\":2,\"470\":3,\"472\":2,\"488\":1,\"495\":1,\"496\":1,\"497\":1,\"498\":2}}],[\"fastthreadlocalrunnable\",{\"1\":{\"428\":2,\"431\":4}}],[\"fastthreadlocal\",{\"1\":{\"407\":1}}],[\"fastjson\",{\"1\":{\"205\":1}}],[\"failure\",{\"1\":{\"428\":2,\"429\":2,\"430\":2,\"495\":1}}],[\"failedchannel\",{\"1\":{\"495\":1}}],[\"failed\",{\"1\":{\"399\":2,\"401\":3}}],[\"failover\",{\"1\":{\"163\":1}}],[\"fatcatsat\",{\"1\":{\"316\":1}}],[\"fat\",{\"1\":{\"315\":1}}],[\"faq\",{\"0\":{\"296\":1}}],[\"factory\",{\"1\":{\"155\":2,\"328\":8}}],[\"factories将aautoconfiguration\",{\"1\":{\"17\":1}}],[\"factories中的配置的类\",{\"1\":{\"24\":1}}],[\"factories中的配置\",{\"1\":{\"17\":1,\"24\":1}}],[\"factories中的配置类都会取名xxxautoconfiguration\",{\"1\":{\"17\":1}}],[\"factories中将aconfiguration\",{\"1\":{\"17\":1}}],[\"factories文件\",{\"1\":{\"17\":1}}],[\"factories选择一种就可以啦\",{\"1\":{\"17\":1}}],[\"factories来导入配置\",{\"1\":{\"17\":1}}],[\"factories导入\",{\"0\":{\"17\":1}}],[\"factories就只要引入包就可以直接生效了\",{\"1\":{\"14\":1}}],[\"factories\",{\"1\":{\"14\":1}}],[\"fanout2\",{\"1\":{\"125\":1}}],[\"fanout1\",{\"1\":{\"125\":1}}],[\"fanoutconsumer\",{\"1\":{\"125\":1}}],[\"fanout\",{\"1\":{\"113\":1,\"114\":1,\"122\":4,\"125\":4}}],[\"false有状态\",{\"1\":{\"140\":1}}],[\"false\",{\"1\":{\"16\":1,\"20\":1,\"27\":1,\"99\":1,\"100\":1,\"107\":3,\"108\":3,\"111\":7,\"146\":1,\"182\":1,\"183\":1,\"215\":1,\"284\":1,\"302\":1,\"303\":1,\"369\":2,\"373\":1,\"376\":1,\"378\":2,\"382\":2,\"385\":3,\"388\":4,\"441\":1,\"469\":1,\"470\":2,\"471\":2,\"472\":1,\"495\":4,\"496\":6,\"497\":2,\"498\":4,\"499\":3}}],[\"fixedlengthframedecoder\",{\"1\":{\"458\":1}}],[\"fixedrate\",{\"1\":{\"35\":1}}],[\"fireexceptioncaught\",{\"1\":{\"498\":1}}],[\"firechannelactive\",{\"1\":{\"495\":3,\"498\":2}}],[\"firechannelregistered\",{\"1\":{\"495\":1,\"498\":1}}],[\"firechannelreadcomplete\",{\"1\":{\"498\":1,\"499\":1}}],[\"firechannelread\",{\"1\":{\"432\":3,\"441\":3,\"498\":1,\"499\":1}}],[\"firstregistration\",{\"1\":{\"495\":2,\"498\":2}}],[\"firstjob\",{\"1\":{\"248\":2,\"249\":2}}],[\"first\",{\"1\":{\"46\":2,\"248\":3,\"249\":3}}],[\"field3\",{\"1\":{\"197\":1}}],[\"field2\",{\"1\":{\"197\":1}}],[\"field1\",{\"1\":{\"197\":1}}],[\"fieldtype\",{\"1\":{\"100\":1}}],[\"fields\",{\"1\":{\"99\":1}}],[\"field\",{\"1\":{\"94\":1,\"100\":3,\"153\":5}}],[\"fin\",{\"1\":{\"455\":1}}],[\"finishconnect\",{\"1\":{\"385\":1,\"497\":1}}],[\"findactivebloglike\",{\"1\":{\"209\":3}}],[\"findbylist\",{\"1\":{\"206\":5}}],[\"findbyjsonobject\",{\"1\":{\"205\":5}}],[\"findbybeans\",{\"1\":{\"204\":2}}],[\"findbymapparams\",{\"1\":{\"203\":2}}],[\"findbyparams2\",{\"1\":{\"202\":2}}],[\"findbyparams\",{\"1\":{\"201\":2}}],[\"find\",{\"0\":{\"55\":1},\"1\":{\"55\":3,\"68\":1}}],[\"final<\",{\"1\":{\"409\":1}}],[\"final\",{\"1\":{\"40\":2,\"146\":3,\"155\":1,\"169\":1,\"171\":1,\"182\":3,\"184\":1,\"319\":6,\"341\":10,\"388\":1,\"401\":3,\"418\":2,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"478\":17,\"480\":4,\"488\":2,\"492\":1,\"493\":1,\"495\":24,\"496\":3,\"497\":1,\"498\":8,\"499\":5}}],[\"finally\",{\"1\":{\"7\":1,\"8\":1,\"41\":1,\"441\":3,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":2,\"480\":1,\"488\":2,\"490\":1,\"495\":1,\"496\":3,\"498\":1,\"499\":1}}],[\"fi\",{\"1\":{\"52\":2}}],[\"filters\",{\"1\":{\"182\":1}}],[\"filter\",{\"0\":{\"93\":1},\"1\":{\"52\":3,\"179\":1,\"181\":2,\"182\":5,\"183\":1}}],[\"filevisitresult\",{\"1\":{\"364\":5}}],[\"filecount\",{\"1\":{\"364\":6}}],[\"filechannel\",{\"0\":{\"353\":1,\"354\":1},\"1\":{\"331\":1,\"338\":2,\"349\":1,\"350\":1,\"354\":1,\"355\":2,\"362\":4,\"373\":1}}],[\"filealreadyexistsexception\",{\"1\":{\"364\":2}}],[\"fileoutputstream\",{\"1\":{\"355\":2,\"358\":1,\"362\":2}}],[\"fileinputstream\",{\"1\":{\"355\":2,\"358\":1,\"362\":2}}],[\"file=\",{\"1\":{\"244\":1}}],[\"filereader\",{\"1\":{\"37\":2}}],[\"files\",{\"0\":{\"364\":1},\"1\":{\"37\":1,\"48\":1,\"328\":1,\"364\":15,\"365\":5}}],[\"filesystemresource\",{\"1\":{\"34\":2}}],[\"filename=hello\",{\"1\":{\"320\":1}}],[\"filename\",{\"1\":{\"27\":2,\"55\":1,\"56\":1}}],[\"filepath\",{\"1\":{\"27\":4}}],[\"fileuploadcontroller\",{\"1\":{\"27\":1}}],[\"file\",{\"1\":{\"6\":3,\"27\":13,\"34\":6,\"37\":4,\"48\":1,\"160\":1,\"163\":2,\"167\":1,\"187\":1,\"328\":1,\"338\":2,\"349\":2,\"350\":2,\"364\":9,\"396\":5}}],[\"tue\",{\"1\":{\"481\":4}}],[\"tutorials\",{\"1\":{\"383\":1}}],[\"ttt\",{\"1\":{\"273\":1}}],[\"ttrigger\",{\"1\":{\"249\":1}}],[\"ttl\",{\"1\":{\"153\":1}}],[\"t2\",{\"1\":{\"197\":2,\"492\":1}}],[\"t1\",{\"1\":{\"197\":2,\"492\":1}}],[\"tlv\",{\"1\":{\"382\":2}}],[\"tl\",{\"1\":{\"184\":4}}],[\"tlsv1\",{\"1\":{\"90\":3}}],[\"tcp\",{\"0\":{\"483\":1},\"1\":{\"90\":2,\"407\":1,\"455\":8,\"462\":1,\"475\":1,\"481\":1}}],[\"tmp\",{\"1\":{\"62\":2}}],[\"t参数是指定镜像的名称\",{\"1\":{\"61\":1}}],[\"txt\",{\"1\":{\"48\":1,\"49\":3,\"50\":4,\"338\":2,\"349\":2,\"350\":1,\"362\":4,\"363\":6,\"364\":6,\"396\":1,\"399\":1}}],[\"timed\",{\"1\":{\"480\":1,\"481\":1}}],[\"timeline\",{\"1\":{\"297\":1}}],[\"time=3\",{\"1\":{\"244\":1}}],[\"time的默认值为\",{\"1\":{\"244\":1}}],[\"time值的sql\",{\"1\":{\"244\":1}}],[\"timestamp\",{\"1\":{\"198\":1}}],[\"time\",{\"1\":{\"144\":2,\"198\":2,\"244\":1,\"497\":3}}],[\"timeoutmillis\",{\"1\":{\"497\":4}}],[\"timeoutexception\",{\"1\":{\"107\":1,\"108\":1,\"109\":2,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2}}],[\"timeout\",{\"0\":{\"480\":1},\"1\":{\"90\":2,\"130\":1,\"163\":1,\"374\":1,\"480\":5,\"481\":2}}],[\"time<\",{\"1\":{\"78\":2}}],[\"timeunit\",{\"1\":{\"40\":1,\"420\":1,\"480\":1,\"497\":1}}],[\"title\",{\"1\":{\"40\":3,\"43\":1,\"198\":2,\"209\":9}}],[\"tail\",{\"1\":{\"441\":1,\"495\":1,\"498\":2}}],[\"tailcontext\",{\"1\":{\"441\":2}}],[\"tablefield\",{\"1\":{\"215\":4}}],[\"tableid\",{\"1\":{\"215\":3}}],[\"tablename\",{\"1\":{\"215\":1}}],[\"table\",{\"0\":{\"323\":1},\"1\":{\"94\":1,\"197\":3,\"234\":1,\"323\":12,\"341\":8}}],[\"tar导入成镜像\",{\"1\":{\"65\":1}}],[\"tar中加载出来\",{\"1\":{\"64\":1}}],[\"tar中\",{\"1\":{\"64\":1,\"65\":1}}],[\"tar\",{\"1\":{\"64\":2,\"65\":2}}],[\"targetname\",{\"1\":{\"365\":3}}],[\"target>\",{\"1\":{\"85\":2}}],[\"target\",{\"1\":{\"15\":1,\"16\":3,\"37\":1,\"197\":2,\"278\":1,\"351\":4,\"364\":12,\"365\":2,\"382\":4}}],[\"tags\",{\"1\":{\"52\":1}}],[\"tag\",{\"1\":{\"52\":1,\"64\":1,\"65\":2}}],[\"tasks\",{\"1\":{\"388\":3}}],[\"taskscheduler\",{\"1\":{\"36\":3}}],[\"task\",{\"1\":{\"36\":2,\"388\":3,\"419\":2,\"496\":6,\"497\":1}}],[\"tell\",{\"1\":{\"99\":1}}],[\"text\",{\"1\":{\"90\":2,\"99\":2,\"245\":1}}],[\"testconnectiontimeout\",{\"1\":{\"480\":1}}],[\"testclient\",{\"1\":{\"450\":1}}],[\"testserver\",{\"1\":{\"450\":1}}],[\"testselect\",{\"1\":{\"213\":1}}],[\"testfilechanneltransferto\",{\"1\":{\"362\":1}}],[\"testupdata\",{\"1\":{\"213\":1}}],[\"testdelete\",{\"1\":{\"213\":1}}],[\"testdelayqueueconfig\",{\"1\":{\"146\":1}}],[\"testinsert\",{\"1\":{\"213\":1}}],[\"test=\",{\"1\":{\"209\":7}}],[\"test1\",{\"1\":{\"208\":3}}],[\"test\",{\"0\":{\"122\":1},\"1\":{\"34\":7,\"48\":2,\"49\":3,\"50\":4,\"59\":1,\"75\":1,\"80\":1,\"89\":1,\"101\":1,\"102\":1,\"107\":1,\"108\":1,\"122\":6,\"156\":1,\"213\":4,\"288\":1,\"293\":1,\"328\":4}}],[\"template\",{\"1\":{\"130\":1,\"155\":9}}],[\"template>\",{\"1\":{\"37\":1}}],[\"temp\",{\"1\":{\"27\":1}}],[\"troubleshooting\",{\"0\":{\"296\":1}}],[\"triggerbuilder\",{\"1\":{\"248\":1,\"249\":1}}],[\"trigger\",{\"1\":{\"246\":3,\"248\":2,\"249\":2}}],[\"trim\",{\"1\":{\"40\":1,\"209\":1,\"232\":1}}],[\"traffic\",{\"1\":{\"337\":1}}],[\"trace\",{\"1\":{\"297\":1}}],[\"tradeapplication\",{\"1\":{\"185\":2}}],[\"trade\",{\"1\":{\"185\":1}}],[\"transmission\",{\"1\":{\"455\":1}}],[\"transferfrom\",{\"1\":{\"397\":1}}],[\"transferto\",{\"1\":{\"27\":2,\"362\":4,\"397\":3}}],[\"transform\",{\"1\":{\"328\":1}}],[\"transformer\",{\"1\":{\"328\":3}}],[\"transformerfactory\",{\"1\":{\"328\":4}}],[\"transactional\",{\"1\":{\"219\":3}}],[\"transport\",{\"1\":{\"90\":2,\"190\":1}}],[\"true|false\",{\"1\":{\"438\":1}}],[\"true无状态\",{\"1\":{\"140\":1}}],[\"true\",{\"1\":{\"16\":3,\"18\":3,\"27\":1,\"34\":4,\"36\":1,\"40\":1,\"99\":2,\"108\":1,\"114\":1,\"118\":2,\"120\":1,\"130\":1,\"136\":1,\"139\":2,\"140\":2,\"141\":3,\"143\":1,\"146\":2,\"172\":1,\"182\":1,\"190\":1,\"208\":1,\"257\":1,\"258\":1,\"279\":1,\"284\":2,\"302\":1,\"328\":4,\"338\":1,\"361\":1,\"368\":1,\"369\":1,\"376\":1,\"378\":1,\"381\":2,\"382\":1,\"385\":2,\"388\":4,\"423\":1,\"441\":1,\"445\":2,\"449\":1,\"450\":2,\"455\":1,\"469\":1,\"470\":3,\"471\":1,\"472\":6,\"488\":2,\"495\":4,\"496\":5,\"497\":2,\"498\":4,\"499\":3}}],[\"tryfailure\",{\"1\":{\"480\":1}}],[\"try\",{\"1\":{\"7\":1,\"8\":1,\"27\":2,\"41\":1,\"109\":1,\"182\":1,\"219\":1,\"297\":1,\"319\":1,\"338\":1,\"349\":1,\"350\":1,\"362\":2,\"365\":1,\"376\":2,\"378\":1,\"382\":1,\"388\":4,\"390\":2,\"399\":1,\"401\":3,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":2,\"441\":2,\"450\":4,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":3,\"478\":3,\"480\":1,\"481\":1,\"488\":3,\"489\":1,\"490\":1,\"492\":1,\"495\":5,\"496\":6,\"497\":2,\"498\":5,\"499\":1}}],[\"types\",{\"1\":{\"90\":2}}],[\"type=single\",{\"1\":{\"94\":1}}],[\"type=\",{\"1\":{\"27\":2,\"37\":1,\"198\":1,\"215\":2,\"436\":1}}],[\"type来配置a的某个字段\",{\"1\":{\"18\":1}}],[\"type\",{\"1\":{\"15\":1,\"16\":3,\"18\":3,\"37\":1,\"90\":1,\"94\":1,\"99\":3,\"100\":1,\"125\":2,\"126\":2,\"127\":2,\"146\":1,\"152\":1,\"187\":2,\"382\":1,\"478\":4,\"488\":6,\"499\":1}}],[\"that\",{\"1\":{\"441\":1}}],[\"than\",{\"1\":{\"341\":1}}],[\"things\",{\"1\":{\"399\":2}}],[\"this\",{\"1\":{\"8\":1,\"37\":5,\"258\":3,\"388\":3,\"401\":5,\"480\":1,\"488\":5,\"495\":4,\"496\":2,\"497\":1,\"498\":2}}],[\"the\",{\"1\":{\"79\":1,\"288\":1,\"301\":3,\"315\":7,\"316\":2,\"341\":8,\"441\":2,\"495\":1}}],[\"then\",{\"1\":{\"52\":2}}],[\"though\",{\"1\":{\"79\":1}}],[\"threadexecutormap\",{\"1\":{\"428\":1,\"431\":2}}],[\"threadexecutormap$2\",{\"1\":{\"428\":1,\"431\":2}}],[\"threadlocal\",{\"1\":{\"407\":1}}],[\"threadlocal<>\",{\"1\":{\"184\":1}}],[\"threadlocal<long>\",{\"1\":{\"184\":1}}],[\"thread\",{\"1\":{\"111\":1,\"337\":1,\"388\":2,\"399\":2,\"401\":3,\"415\":2,\"417\":1,\"419\":1,\"420\":1,\"423\":1,\"426\":1,\"427\":1,\"428\":4,\"429\":1,\"430\":1,\"431\":4,\"449\":1,\"450\":5,\"470\":1,\"496\":4,\"497\":1}}],[\"threshold\",{\"1\":{\"27\":1,\"497\":2}}],[\"throwable\",{\"1\":{\"264\":1,\"265\":1,\"399\":1,\"401\":3,\"473\":1,\"490\":1,\"495\":6,\"496\":3,\"498\":5,\"499\":1}}],[\"throw\",{\"1\":{\"27\":1,\"139\":2,\"219\":2,\"341\":1,\"478\":4,\"488\":1,\"492\":1,\"496\":1}}],[\"throws\",{\"1\":{\"6\":1,\"34\":4,\"107\":1,\"108\":2,\"109\":1,\"111\":2,\"113\":1,\"114\":2,\"117\":1,\"118\":4,\"120\":3,\"139\":2,\"248\":1,\"249\":1,\"264\":1,\"265\":1,\"279\":1,\"281\":1,\"284\":3,\"320\":1,\"328\":2,\"364\":6,\"381\":2,\"382\":1,\"385\":2,\"388\":3,\"399\":1,\"401\":1,\"417\":2,\"423\":3,\"449\":1,\"450\":2,\"453\":5,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"463\":1,\"464\":3,\"466\":2,\"467\":2,\"470\":5,\"471\":2,\"472\":5,\"473\":2,\"475\":2,\"478\":2,\"481\":2,\"488\":2,\"490\":1,\"491\":1,\"492\":1,\"493\":1,\"495\":6,\"497\":1,\"498\":2}}],[\"totalbytesread\",{\"1\":{\"499\":1}}],[\"totalmessages\",{\"1\":{\"499\":1}}],[\"totryeverything\",{\"1\":{\"34\":5,\"182\":1}}],[\"tonanos\",{\"1\":{\"497\":1}}],[\"tojson\",{\"1\":{\"478\":1}}],[\"tobytearray\",{\"1\":{\"466\":1,\"467\":1,\"478\":2}}],[\"touch\",{\"1\":{\"418\":1}}],[\"tofile\",{\"1\":{\"364\":1}}],[\"tohexstring\",{\"1\":{\"341\":2}}],[\"tochararray\",{\"1\":{\"341\":1}}],[\"tool<\",{\"1\":{\"318\":1}}],[\"toisostring\",{\"1\":{\"303\":2}}],[\"toarray\",{\"1\":{\"495\":2}}],[\"toattpage\",{\"1\":{\"273\":1}}],[\"toapage\",{\"1\":{\"273\":1}}],[\"token\",{\"1\":{\"182\":3,\"279\":2}}],[\"tomcat\",{\"1\":{\"406\":1}}],[\"tom\",{\"1\":{\"98\":2,\"99\":3,\"153\":1}}],[\"topath\",{\"1\":{\"328\":1}}],[\"topage\",{\"1\":{\"273\":1}}],[\"topic2\",{\"1\":{\"127\":1}}],[\"topic1\",{\"1\":{\"127\":1}}],[\"topicconsumer\",{\"1\":{\"127\":1}}],[\"topic\",{\"1\":{\"120\":7,\"122\":3,\"127\":4}}],[\"topic类型的exchange与direct\",{\"1\":{\"119\":1}}],[\"top\",{\"1\":{\"65\":1}}],[\"tostring\",{\"1\":{\"27\":1,\"40\":1,\"182\":1,\"183\":1,\"213\":1,\"265\":1,\"341\":3,\"347\":1,\"365\":1,\"385\":1,\"428\":1,\"429\":2,\"430\":2,\"434\":1,\"449\":2,\"463\":1,\"488\":2}}],[\"to\",{\"1\":{\"7\":1,\"8\":1,\"34\":6,\"137\":2,\"141\":2,\"146\":1,\"288\":2,\"302\":1,\"341\":3,\"362\":8,\"471\":2,\"495\":1}}],[\"t\",{\"1\":{\"7\":1,\"51\":1,\"61\":3,\"212\":5,\"313\":2,\"478\":7,\"488\":2,\"492\":2,\"495\":8,\"496\":6,\"498\":8,\"499\":2}}],[\"rcvbuf\",{\"0\":{\"484\":1,\"486\":1},\"1\":{\"454\":2,\"484\":1}}],[\"rpcclientmanager\",{\"1\":{\"492\":1}}],[\"rpcclient\",{\"1\":{\"488\":1,\"490\":1}}],[\"rpcserver\",{\"1\":{\"488\":1}}],[\"rpcresponsemessagehandler\",{\"1\":{\"488\":2,\"490\":2,\"491\":1,\"492\":3,\"493\":1}}],[\"rpcresponsemessage\",{\"1\":{\"488\":2,\"489\":2,\"491\":1,\"493\":1}}],[\"rpcrequestmessagehandler\",{\"1\":{\"488\":2,\"489\":1}}],[\"rpcrequestmessage\",{\"1\":{\"488\":3,\"489\":1,\"490\":1,\"492\":2}}],[\"rpc\",{\"0\":{\"487\":1},\"1\":{\"406\":2,\"488\":13,\"490\":2,\"492\":2}}],[\"rpop\",{\"1\":{\"153\":1}}],[\"rw\",{\"1\":{\"338\":1,\"349\":1,\"350\":1}}],[\"rdb\",{\"0\":{\"158\":1},\"1\":{\"158\":2,\"159\":2}}],[\"rocketmq\",{\"1\":{\"406\":1}}],[\"round\",{\"1\":{\"232\":2,\"264\":1,\"265\":1}}],[\"routing\",{\"1\":{\"146\":2,\"147\":2}}],[\"routingkey\",{\"1\":{\"117\":2,\"118\":2,\"120\":3}}],[\"routes\",{\"1\":{\"176\":1}}],[\"route2\",{\"1\":{\"126\":1}}],[\"route1\",{\"1\":{\"126\":1}}],[\"routeconsumer\",{\"1\":{\"126\":1}}],[\"route\",{\"1\":{\"122\":1}}],[\"rollbackfor\",{\"1\":{\"219\":2}}],[\"rollbackfor属性用于控制出现何种异常类型\",{\"1\":{\"219\":1}}],[\"rowendindex\",{\"1\":{\"341\":6}}],[\"row++\",{\"1\":{\"341\":1}}],[\"rowprefixes\",{\"1\":{\"341\":5}}],[\"rowstartindex\",{\"1\":{\"341\":12}}],[\"rows\",{\"1\":{\"245\":1,\"341\":1,\"434\":2}}],[\"row\",{\"1\":{\"94\":1,\"245\":2,\"341\":10}}],[\"root\",{\"1\":{\"61\":1,\"62\":1,\"88\":1,\"90\":1,\"187\":2,\"293\":1}}],[\"rootpath\",{\"1\":{\"27\":2}}],[\"rootbeandefinition\",{\"1\":{\"16\":1}}],[\"riceuncle\",{\"1\":{\"52\":1}}],[\"rsa\",{\"1\":{\"51\":1,\"90\":1}}],[\"r\",{\"1\":{\"50\":1,\"70\":1,\"71\":1,\"88\":1,\"313\":3,\"350\":1,\"396\":1,\"417\":18,\"422\":2,\"453\":6,\"454\":7,\"458\":19,\"459\":18,\"460\":19}}],[\"rmi\",{\"1\":{\"64\":1}}],[\"rm\",{\"1\":{\"50\":3,\"51\":1,\"59\":1,\"64\":1,\"65\":1}}],[\"rlock\",{\"1\":{\"41\":1}}],[\"rapid\",{\"1\":{\"404\":1}}],[\"rabbithandler\",{\"1\":{\"123\":1}}],[\"rabbitlistener\",{\"1\":{\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"136\":1,\"139\":2,\"148\":1}}],[\"rabbittemplate\",{\"1\":{\"122\":7,\"141\":7,\"147\":4}}],[\"rabbit\",{\"1\":{\"107\":1,\"141\":3}}],[\"rabbitmq需要再次投递消息\",{\"1\":{\"139\":1}}],[\"rabbitmq从队列中删除该消息\",{\"1\":{\"139\":2}}],[\"rabbitmq提供了消费者确认机制\",{\"1\":{\"139\":1}}],[\"rabbitmq提供了生产者消息确认机制\",{\"1\":{\"131\":1}}],[\"rabbitmq如何得知消费者的处理状态呢\",{\"1\":{\"138\":1}}],[\"rabbitmq必须知道消费者的处理状态\",{\"1\":{\"138\":1}}],[\"rabbitmq的命令行工具\",{\"1\":{\"137\":1}}],[\"rabbitmq的内存占用就会越来越高\",{\"1\":{\"134\":1}}],[\"rabbitmqctl\",{\"1\":{\"137\":2}}],[\"rabbitmqconnection\",{\"1\":{\"109\":1,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2}}],[\"rabbitmq会将接收到的信息保存在内存中以降低消息收发的延迟\",{\"1\":{\"134\":1}}],[\"rabbitmqtest\",{\"1\":{\"122\":1}}],[\"rabbitmq\",{\"0\":{\"104\":1},\"1\":{\"121\":1,\"123\":1,\"130\":1,\"139\":2,\"140\":1,\"141\":1}}],[\"rand\",{\"1\":{\"232\":1}}],[\"random\",{\"1\":{\"453\":2,\"458\":2,\"459\":2,\"460\":2}}],[\"randomaccessfile\",{\"1\":{\"338\":2,\"349\":2,\"350\":2,\"355\":3,\"358\":1,\"396\":2}}],[\"randomint\",{\"1\":{\"169\":1}}],[\"randomutil\",{\"1\":{\"169\":1}}],[\"randomuuid\",{\"1\":{\"27\":1,\"40\":1}}],[\"range\",{\"1\":{\"99\":1}}],[\"ram用户\",{\"1\":{\"5\":1}}],[\"runalltasks\",{\"1\":{\"496\":4}}],[\"running\",{\"1\":{\"420\":5}}],[\"runners\",{\"1\":{\"288\":1}}],[\"runnable\",{\"1\":{\"36\":1,\"388\":3,\"418\":1,\"480\":1,\"495\":4,\"496\":2,\"498\":1}}],[\"runs\",{\"1\":{\"288\":2,\"305\":1}}],[\"run\",{\"1\":{\"15\":1,\"16\":1,\"36\":1,\"65\":1,\"66\":1,\"86\":1,\"90\":1,\"94\":1,\"167\":1,\"171\":1,\"185\":1,\"288\":5,\"305\":5,\"388\":3,\"415\":1,\"418\":1,\"428\":5,\"431\":13,\"480\":1,\"495\":4,\"496\":6,\"498\":1}}],[\"runtimeexception\",{\"1\":{\"27\":1,\"139\":1,\"219\":2,\"428\":5,\"429\":4,\"430\":4,\"478\":2,\"492\":1}}],[\"runtime\",{\"1\":{\"15\":1,\"16\":3,\"80\":1,\"278\":1,\"388\":1,\"389\":1}}],[\"rebuild\",{\"1\":{\"497\":2}}],[\"rebuildselector0\",{\"1\":{\"496\":1}}],[\"re\",{\"1\":{\"495\":1}}],[\"revd\",{\"1\":{\"481\":1}}],[\"release\",{\"0\":{\"441\":1},\"1\":{\"441\":16,\"466\":1,\"499\":1}}],[\"rewind\",{\"1\":{\"345\":1,\"346\":1}}],[\"rewrite\",{\"1\":{\"160\":3}}],[\"remainder\",{\"1\":{\"341\":5}}],[\"remoteaddress\",{\"1\":{\"480\":2}}],[\"remoteaddr=192\",{\"1\":{\"178\":1}}],[\"remote=\",{\"1\":{\"378\":2}}],[\"remote\",{\"1\":{\"51\":5}}],[\"removereadop\",{\"1\":{\"498\":1,\"499\":1}}],[\"removegroup\",{\"1\":{\"469\":1}}],[\"removemember\",{\"1\":{\"469\":1,\"472\":1}}],[\"removeuser\",{\"1\":{\"184\":1}}],[\"remove\",{\"0\":{\"379\":1},\"1\":{\"50\":1,\"184\":1,\"376\":1,\"378\":1,\"382\":1,\"385\":2,\"388\":2,\"493\":1,\"495\":1}}],[\"recvbufallochandle\",{\"1\":{\"498\":1,\"499\":1}}],[\"recvbytebufallocator\",{\"1\":{\"498\":1,\"499\":1}}],[\"receive\",{\"1\":{\"390\":2}}],[\"rect\",{\"1\":{\"325\":5}}],[\"rectangle\",{\"0\":{\"325\":1},\"1\":{\"325\":3}}],[\"records\",{\"1\":{\"217\":1}}],[\"recordmapper\",{\"1\":{\"217\":2}}],[\"recordipage\",{\"1\":{\"217\":2}}],[\"recrive\",{\"1\":{\"123\":1}}],[\"red\",{\"1\":{\"322\":2}}],[\"red对应id\",{\"1\":{\"258\":1}}],[\"redsi\",{\"1\":{\"153\":1}}],[\"redis主从\",{\"1\":{\"161\":1}}],[\"redisconnectionfactory\",{\"1\":{\"155\":1}}],[\"redisconfig\",{\"1\":{\"155\":2}}],[\"redistemplate\",{\"1\":{\"155\":3,\"156\":4}}],[\"redistemplate<string\",{\"1\":{\"155\":3}}],[\"redis默认使用的序列化格式\",{\"1\":{\"154\":1}}],[\"redis支持多种序列化格式\",{\"1\":{\"154\":1}}],[\"redis是一种内存数据库\",{\"1\":{\"154\":1}}],[\"redis详细解释\",{\"1\":{\"150\":1}}],[\"redis分布式锁\",{\"0\":{\"40\":1}}],[\"redis分布式锁在高并发场景下可能存在死锁的问题\",{\"1\":{\"39\":1}}],[\"redis分布式锁在锁定后需要手动维护锁的超时时间\",{\"1\":{\"39\":1}}],[\"redis分布式锁在进行锁定和解锁操作时\",{\"1\":{\"39\":1}}],[\"redis分布式锁需要手动编写锁逻辑代码\",{\"1\":{\"39\":1}}],[\"redis分布式锁是基于redis的setnx命令实现的\",{\"1\":{\"39\":1}}],[\"redis分布式锁和redisson分布式锁都是用于实现分布式系统中的分布式锁\",{\"0\":{\"39\":1}}],[\"redissonclient\",{\"1\":{\"41\":4}}],[\"redissonconfig\",{\"1\":{\"41\":2}}],[\"redisson<\",{\"1\":{\"41\":1}}],[\"redisson学习地址\",{\"1\":{\"41\":1}}],[\"redisson分布式锁使用redlock算法避免了死锁的问题\",{\"1\":{\"39\":1}}],[\"redisson分布式锁内部封装了锁的自动续期机制\",{\"1\":{\"39\":1}}],[\"redisson分布式锁内部封装了redis的单线程模型\",{\"1\":{\"39\":1}}],[\"redisson分布式锁封装了锁逻辑\",{\"1\":{\"39\":1}}],[\"redisson\",{\"0\":{\"41\":1},\"1\":{\"12\":1,\"41\":3}}],[\"redis\",{\"0\":{\"150\":1,\"463\":1},\"1\":{\"12\":1,\"41\":1,\"151\":2,\"158\":2,\"159\":1,\"160\":2,\"163\":3}}],[\"replace\",{\"1\":{\"364\":1,\"365\":1}}],[\"reported\",{\"1\":{\"301\":1}}],[\"repository\",{\"1\":{\"260\":1}}],[\"repository和tag\",{\"1\":{\"61\":1}}],[\"repositories\",{\"1\":{\"74\":1}}],[\"repeatforever\",{\"1\":{\"248\":1,\"249\":1}}],[\"republishmessagerecoverer\",{\"1\":{\"141\":6}}],[\"rejectanddontrequeuerecoverer\",{\"1\":{\"141\":1}}],[\"reject\",{\"1\":{\"139\":1}}],[\"rejected\",{\"1\":{\"7\":1,\"8\":1}}],[\"rename\",{\"1\":{\"65\":1}}],[\"referencecountutil\",{\"1\":{\"441\":2}}],[\"referencecounted\",{\"1\":{\"441\":3}}],[\"references\",{\"1\":{\"234\":1}}],[\"referer\",{\"1\":{\"90\":1}}],[\"refid\",{\"1\":{\"197\":1}}],[\"refid=\",{\"1\":{\"197\":4}}],[\"reflog\",{\"1\":{\"49\":1}}],[\"ref=\",{\"1\":{\"37\":1,\"258\":1}}],[\"regfuture\",{\"1\":{\"495\":15}}],[\"regex\",{\"0\":{\"309\":1}}],[\"regasdgsdgister\",{\"1\":{\"40\":1}}],[\"register0\",{\"1\":{\"495\":4,\"498\":4}}],[\"registered\",{\"1\":{\"417\":3,\"453\":1,\"454\":1,\"458\":2,\"459\":1,\"460\":2,\"495\":2,\"498\":1}}],[\"register\",{\"1\":{\"267\":1,\"373\":1,\"376\":1,\"378\":2,\"382\":2,\"385\":3,\"388\":6,\"415\":1,\"495\":4,\"498\":4}}],[\"registerbeandefinition\",{\"1\":{\"16\":1}}],[\"registerbeandefinitions\",{\"1\":{\"16\":2}}],[\"registry\",{\"1\":{\"16\":3,\"26\":2,\"280\":3,\"285\":3}}],[\"reached\",{\"1\":{\"441\":1}}],[\"reactor\",{\"1\":{\"182\":1}}],[\"reactive\",{\"1\":{\"182\":2}}],[\"readcomplete\",{\"1\":{\"498\":1,\"499\":1}}],[\"readbuf\",{\"1\":{\"498\":6}}],[\"readbyte\",{\"1\":{\"440\":4,\"442\":2,\"466\":4,\"467\":4,\"478\":4}}],[\"readbytes\",{\"1\":{\"344\":1,\"356\":1,\"417\":2,\"466\":1,\"467\":1,\"478\":2}}],[\"readyops\",{\"1\":{\"497\":6}}],[\"readpending\",{\"1\":{\"495\":1,\"498\":3,\"499\":3}}],[\"readifisautoread\",{\"1\":{\"495\":1,\"498\":1}}],[\"readinterestop\",{\"1\":{\"495\":3,\"498\":2}}],[\"readint\",{\"1\":{\"440\":1,\"466\":3,\"467\":3,\"478\":3}}],[\"readobject\",{\"1\":{\"466\":1,\"467\":1,\"478\":2}}],[\"readline\",{\"1\":{\"450\":2}}],[\"readablebytes\",{\"1\":{\"417\":2,\"434\":1,\"445\":2,\"466\":1}}],[\"readasdataurl\",{\"1\":{\"37\":1}}],[\"readhandler\",{\"1\":{\"401\":4}}],[\"reads\",{\"0\":{\"349\":1}}],[\"read\",{\"0\":{\"378\":1,\"499\":1},\"1\":{\"338\":1,\"339\":1,\"341\":1,\"344\":2,\"349\":1,\"356\":1,\"368\":4,\"369\":7,\"373\":1,\"375\":1,\"376\":1,\"378\":4,\"379\":1,\"381\":4,\"382\":8,\"385\":4,\"388\":5,\"393\":2,\"396\":2,\"399\":6,\"400\":1,\"401\":7,\"417\":12,\"434\":2,\"438\":2,\"439\":1,\"440\":5,\"441\":1,\"442\":2,\"453\":2,\"454\":4,\"458\":11,\"459\":11,\"460\":11,\"480\":1,\"481\":2,\"495\":4,\"497\":4,\"498\":10,\"499\":7}}],[\"readerindex\",{\"1\":{\"434\":1}}],[\"reader\",{\"1\":{\"37\":4,\"450\":4,\"475\":2}}],[\"readme\",{\"1\":{\"34\":1,\"288\":1}}],[\"realpath\",{\"1\":{\"27\":3}}],[\"reason\",{\"1\":{\"7\":1,\"8\":1}}],[\"require\",{\"1\":{\"301\":3,\"303\":4}}],[\"required\",{\"1\":{\"183\":1}}],[\"requiredargsconstructor\",{\"1\":{\"182\":2}}],[\"requestmethod\",{\"1\":{\"274\":2,\"275\":1}}],[\"requestmapping\",{\"1\":{\"267\":1,\"269\":1,\"270\":1,\"273\":2,\"274\":2,\"275\":2}}],[\"requestbody\",{\"1\":{\"204\":1,\"205\":1,\"206\":1}}],[\"requesttemplate\",{\"1\":{\"185\":3}}],[\"requestinterceptor\",{\"1\":{\"185\":2}}],[\"requestheader\",{\"1\":{\"183\":1}}],[\"requesthandlerselectors\",{\"1\":{\"43\":1}}],[\"requestparam\",{\"1\":{\"171\":1,\"272\":2,\"275\":1,\"282\":1}}],[\"request\",{\"1\":{\"7\":2,\"8\":2,\"27\":1,\"178\":1,\"181\":6,\"182\":3,\"183\":1,\"279\":3,\"283\":1,\"284\":3,\"488\":3}}],[\"req\",{\"1\":{\"27\":5}}],[\"resizable\",{\"1\":{\"383\":1}}],[\"resids\",{\"1\":{\"34\":2}}],[\"respectmaybemoredata\",{\"1\":{\"499\":2}}],[\"resp\",{\"1\":{\"217\":4}}],[\"responsebody\",{\"1\":{\"267\":1,\"269\":1,\"270\":1,\"272\":1,\"273\":1,\"274\":2,\"275\":3}}],[\"responseentity<list<itemdto>>\",{\"1\":{\"169\":1}}],[\"response\",{\"1\":{\"7\":1,\"8\":1,\"169\":1,\"182\":3,\"279\":1,\"283\":1,\"284\":3,\"320\":4,\"449\":4,\"464\":4,\"470\":2,\"488\":3,\"489\":5}}],[\"restorestate\",{\"1\":{\"325\":1}}],[\"restful快速开发\",{\"1\":{\"274\":1}}],[\"rest风格\",{\"0\":{\"274\":1}}],[\"restrict\",{\"1\":{\"234\":1}}],[\"resttemplate\",{\"1\":{\"169\":1}}],[\"restart=always\",{\"1\":{\"167\":1}}],[\"restart\",{\"1\":{\"65\":1}}],[\"restcontroller\",{\"1\":{\"27\":1,\"36\":1,\"37\":1,\"275\":1}}],[\"resetreaderindex\",{\"1\":{\"440\":1}}],[\"reset\",{\"0\":{\"346\":1},\"1\":{\"49\":2,\"346\":1,\"440\":1,\"498\":1,\"499\":1}}],[\"result=\",{\"1\":{\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"resultmsg\",{\"1\":{\"201\":2,\"202\":2,\"203\":2,\"204\":2,\"205\":2,\"206\":2}}],[\"resultmap=\",{\"1\":{\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"resultmap>\",{\"1\":{\"198\":1}}],[\"resultmap\",{\"0\":{\"198\":1},\"1\":{\"196\":1}}],[\"resulttype=\",{\"1\":{\"197\":2,\"209\":3}}],[\"result\",{\"1\":{\"37\":1,\"40\":7,\"41\":2,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"282\":1,\"328\":2,\"399\":2,\"401\":3,\"429\":2,\"430\":2}}],[\"res\",{\"1\":{\"34\":2,\"40\":2,\"213\":4}}],[\"resolveargument\",{\"1\":{\"281\":1}}],[\"resolve\",{\"1\":{\"27\":1}}],[\"resource\",{\"1\":{\"147\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"26\":1}}],[\"resources\",{\"1\":{\"26\":1}}],[\"retain\",{\"0\":{\"441\":1},\"1\":{\"441\":1,\"466\":1}}],[\"ret\",{\"1\":{\"265\":2}}],[\"retry\",{\"1\":{\"130\":1,\"140\":1,\"141\":3}}],[\"retentionpolicy\",{\"1\":{\"15\":1,\"16\":3,\"278\":1}}],[\"retention\",{\"1\":{\"15\":1,\"16\":3,\"278\":1}}],[\"returns\",{\"1\":{\"497\":1}}],[\"returnvalue\",{\"1\":{\"488\":1,\"493\":2}}],[\"returntype\",{\"1\":{\"488\":4}}],[\"return机制\",{\"1\":{\"131\":1}}],[\"return返回异常信息\",{\"1\":{\"131\":1}}],[\"return两种\",{\"1\":{\"131\":1}}],[\"return\",{\"1\":{\"6\":1,\"7\":2,\"8\":2,\"13\":1,\"16\":2,\"18\":1,\"20\":4,\"21\":2,\"22\":4,\"27\":3,\"34\":1,\"35\":1,\"36\":1,\"37\":5,\"40\":7,\"41\":2,\"43\":2,\"109\":1,\"136\":1,\"141\":8,\"143\":1,\"144\":1,\"146\":4,\"147\":1,\"155\":1,\"181\":3,\"182\":6,\"183\":2,\"184\":2,\"185\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"217\":2,\"265\":1,\"267\":4,\"269\":1,\"270\":1,\"272\":1,\"273\":2,\"279\":1,\"281\":2,\"282\":1,\"284\":1,\"301\":1,\"319\":1,\"341\":2,\"364\":5,\"388\":1,\"401\":1,\"441\":2,\"469\":9,\"470\":2,\"478\":11,\"488\":3,\"492\":5,\"495\":11,\"496\":1,\"497\":1,\"498\":2,\"499\":2}}],[\"switch\",{\"1\":{\"470\":1,\"496\":2}}],[\"swaggerconfig\",{\"1\":{\"43\":1}}],[\"swagger2<\",{\"1\":{\"43\":1}}],[\"swagger\",{\"0\":{\"42\":1},\"1\":{\"43\":1,\"187\":1}}],[\"swap\",{\"0\":{\"28\":1}}],[\"s2\",{\"1\":{\"466\":2}}],[\"sys\",{\"1\":{\"481\":2}}],[\"system\",{\"1\":{\"7\":6,\"8\":5,\"27\":2,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"40\":3,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"148\":1,\"156\":1,\"181\":5,\"182\":2,\"183\":1,\"208\":1,\"213\":6,\"218\":2,\"248\":1,\"249\":2,\"255\":2,\"262\":1,\"264\":3,\"265\":1,\"267\":1,\"269\":1,\"270\":1,\"272\":1,\"274\":2,\"284\":3,\"293\":3,\"328\":6,\"341\":6,\"347\":2,\"351\":1,\"362\":4,\"363\":2,\"364\":6,\"365\":3,\"368\":1,\"376\":3,\"378\":1,\"381\":1,\"382\":1,\"385\":4,\"390\":1,\"399\":1,\"400\":1,\"401\":5,\"410\":1,\"415\":4,\"417\":1,\"422\":4,\"423\":1,\"431\":4,\"432\":6,\"434\":1,\"440\":5,\"442\":6,\"445\":3,\"446\":3,\"449\":3,\"450\":2,\"463\":1,\"470\":15,\"481\":6,\"492\":3,\"496\":2,\"497\":2}}],[\"syn\",{\"1\":{\"481\":5}}],[\"synchronized\",{\"1\":{\"492\":1,\"495\":4}}],[\"syncookies\",{\"1\":{\"481\":1}}],[\"sync\",{\"1\":{\"411\":2,\"417\":3,\"421\":1,\"422\":5,\"423\":2,\"425\":1,\"428\":2,\"429\":1,\"449\":1,\"453\":4,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"463\":2,\"464\":2,\"470\":4,\"480\":2,\"481\":3,\"488\":4,\"490\":2,\"492\":1}}],[\"sb\",{\"1\":{\"385\":3}}],[\"sndbuf\",{\"0\":{\"484\":1},\"1\":{\"455\":2,\"484\":1}}],[\"snipaste\",{\"1\":{\"365\":2}}],[\"sneakythrows\",{\"1\":{\"111\":1}}],[\"s表的全部\",{\"1\":{\"235\":1}}],[\"s表的字段\",{\"1\":{\"234\":1}}],[\"s为子表\",{\"1\":{\"234\":1}}],[\"s为图片的名字\",{\"1\":{\"8\":1}}],[\"slf4j\",{\"1\":{\"319\":1,\"338\":1,\"376\":1,\"378\":1,\"388\":2,\"399\":1,\"423\":1,\"466\":1,\"467\":1,\"470\":2,\"473\":1,\"480\":1,\"488\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"493\":1}}],[\"slice\",{\"0\":{\"442\":1},\"1\":{\"303\":2,\"442\":11,\"447\":1,\"466\":2}}],[\"slim\",{\"1\":{\"167\":1}}],[\"slow\",{\"1\":{\"244\":3}}],[\"slaveof\",{\"1\":{\"162\":2}}],[\"sleep\",{\"1\":{\"111\":1,\"417\":1,\"419\":1,\"420\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1}}],[\"sdiff\",{\"1\":{\"153\":2}}],[\"sdf\",{\"1\":{\"27\":2}}],[\"split\",{\"1\":{\"351\":3,\"382\":2,\"470\":2}}],[\"spark\",{\"1\":{\"406\":1}}],[\"spa\",{\"1\":{\"297\":1}}],[\"spatial索引适用于处理地理信息系统\",{\"1\":{\"236\":1}}],[\"spatial索引\",{\"1\":{\"236\":1}}],[\"spatial和unique\",{\"1\":{\"236\":1}}],[\"specify\",{\"1\":{\"190\":1}}],[\"spop\",{\"1\":{\"153\":2}}],[\"springmvcconfig\",{\"1\":{\"267\":3}}],[\"springmvc入门案例\",{\"1\":{\"266\":1}}],[\"springmvc\",{\"0\":{\"252\":1,\"266\":1},\"1\":{\"266\":1,\"272\":1,\"274\":1}}],[\"spring会返回reject\",{\"1\":{\"140\":1}}],[\"springamqp的messageconverter自带了messageid的功能\",{\"1\":{\"143\":1}}],[\"springamqp利用aop对我们的消息处理逻辑做了环绕增强\",{\"1\":{\"139\":1}}],[\"springamqp提供的消息发送时的重试机制\",{\"1\":{\"130\":1}}],[\"springapplication\",{\"1\":{\"15\":1,\"16\":1,\"171\":1,\"185\":1}}],[\"springboottest\",{\"1\":{\"122\":1}}],[\"springboot\",{\"0\":{\"100\":1}}],[\"springbootapplication\",{\"1\":{\"15\":1,\"16\":1,\"171\":1,\"185\":1}}],[\"springfox<\",{\"1\":{\"43\":1}}],[\"springframework<\",{\"1\":{\"254\":1,\"267\":1}}],[\"springframework\",{\"1\":{\"17\":2,\"19\":2,\"28\":1,\"34\":1,\"37\":1,\"85\":2,\"100\":1,\"121\":1,\"141\":8,\"171\":2,\"176\":2,\"182\":10,\"187\":1,\"188\":2,\"247\":1}}],[\"spring自带的配置是会有提示的\",{\"1\":{\"19\":1}}],[\"spring就会自动读取spring\",{\"1\":{\"17\":1}}],[\"spring\",{\"0\":{\"17\":1,\"121\":1,\"164\":1,\"252\":1,\"253\":1},\"1\":{\"12\":10,\"19\":1,\"26\":1,\"27\":1,\"34\":1,\"85\":2,\"100\":1,\"121\":1,\"130\":1,\"139\":4,\"140\":1,\"141\":1,\"168\":1,\"169\":1,\"176\":1,\"187\":2,\"188\":2,\"190\":1,\"253\":1,\"293\":5,\"406\":2}}],[\"spring本身就有很多自带的starter\",{\"1\":{\"12\":1}}],[\"spring或是第三方都会提供一个starter来帮助我们更简单的集成对应的功能到我们的spring\",{\"1\":{\"10\":1}}],[\"srandmember\",{\"1\":{\"153\":2}}],[\"srem\",{\"1\":{\"153\":2}}],[\"src=\",{\"1\":{\"455\":1,\"497\":1}}],[\"src\",{\"1\":{\"37\":1,\"288\":1,\"438\":3}}],[\"srcpath\",{\"1\":{\"34\":3}}],[\"smembers\",{\"1\":{\"153\":2}}],[\"smtp\",{\"1\":{\"34\":2}}],[\"s1\",{\"1\":{\"107\":1,\"108\":1,\"163\":1,\"466\":3}}],[\"sql>\",{\"1\":{\"197\":3}}],[\"sql\",{\"0\":{\"197\":1},\"1\":{\"68\":5,\"69\":3,\"196\":1,\"197\":2,\"237\":1}}],[\"safesetsuccess\",{\"1\":{\"495\":2,\"498\":1}}],[\"safesetfailure\",{\"1\":{\"495\":3,\"498\":2}}],[\"sayhello\",{\"1\":{\"490\":1,\"492\":4}}],[\"saxexception\",{\"1\":{\"328\":2}}],[\"sandbox\",{\"1\":{\"303\":2}}],[\"sat\",{\"1\":{\"290\":1,\"315\":1}}],[\"sadd\",{\"1\":{\"153\":2}}],[\"same\",{\"1\":{\"79\":1}}],[\"sampleapplication\",{\"1\":{\"15\":2,\"16\":2}}],[\"savestate\",{\"1\":{\"325\":1}}],[\"save\",{\"1\":{\"64\":1,\"65\":2,\"102\":2,\"159\":5,\"254\":2,\"262\":1,\"264\":1,\"265\":1,\"267\":2,\"269\":3,\"270\":2,\"272\":2,\"275\":1}}],[\"ss=new\",{\"1\":{\"381\":1}}],[\"ssckey\",{\"1\":{\"379\":3,\"382\":4,\"388\":2}}],[\"ssc\",{\"1\":{\"368\":3,\"369\":4,\"382\":4,\"385\":5,\"388\":4,\"401\":9,\"495\":1}}],[\"ssr\",{\"1\":{\"297\":1}}],[\"ss\",{\"1\":{\"262\":2,\"264\":3,\"265\":2,\"381\":1,\"450\":2,\"481\":2}}],[\"ssm\",{\"0\":{\"251\":1}}],[\"ssh\",{\"0\":{\"71\":1},\"1\":{\"51\":1,\"71\":4}}],[\"ssl终端\",{\"1\":{\"88\":1}}],[\"sslsocketfactory\",{\"1\":{\"34\":1}}],[\"ssl\",{\"1\":{\"34\":1,\"90\":20}}],[\"shell\",{\"1\":{\"288\":1}}],[\"sharable\",{\"0\":{\"467\":1},\"1\":{\"467\":2,\"471\":2,\"472\":5,\"473\":1,\"489\":1,\"491\":1,\"493\":1}}],[\"shared\",{\"1\":{\"90\":1,\"187\":4}}],[\"share\",{\"1\":{\"59\":1,\"90\":1}}],[\"shanghai\",{\"1\":{\"167\":1,\"178\":1,\"293\":1}}],[\"sha256\",{\"1\":{\"90\":1}}],[\"shot\",{\"1\":{\"304\":2,\"305\":1}}],[\"shortbuffer\",{\"1\":{\"331\":1}}],[\"short\",{\"1\":{\"201\":2,\"202\":2,\"203\":1,\"341\":2,\"438\":1}}],[\"shopping\",{\"1\":{\"97\":3,\"98\":2,\"99\":6}}],[\"shouldbreakreadready\",{\"1\":{\"499\":1}}],[\"should\",{\"1\":{\"79\":1,\"99\":2}}],[\"showbyid\",{\"1\":{\"41\":1}}],[\"show\",{\"0\":{\"245\":1},\"1\":{\"40\":1,\"96\":1,\"243\":1,\"244\":1,\"245\":3}}],[\"shutdowngracefully\",{\"1\":{\"416\":1,\"423\":1,\"449\":1,\"453\":3,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":2,\"470\":3,\"480\":1,\"488\":3,\"490\":1,\"492\":1}}],[\"shutdown\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"248\":1,\"496\":1}}],[\"scoket\",{\"1\":{\"410\":1}}],[\"scope\",{\"1\":{\"80\":1,\"260\":1}}],[\"scope>\",{\"1\":{\"27\":1,\"267\":1}}],[\"sckey\",{\"1\":{\"379\":1,\"382\":4,\"385\":5,\"388\":2}}],[\"scanner\",{\"1\":{\"423\":4,\"449\":4,\"470\":6}}],[\"scattering\",{\"0\":{\"349\":1}}],[\"scaleabsolute\",{\"1\":{\"324\":1}}],[\"scard\",{\"1\":{\"153\":2}}],[\"screenshotoptions\",{\"1\":{\"303\":2}}],[\"screenshotpath\",{\"1\":{\"303\":4}}],[\"screenshot\",{\"1\":{\"301\":1,\"303\":2}}],[\"script\",{\"1\":{\"288\":2,\"305\":1}}],[\"script>\",{\"1\":{\"37\":1}}],[\"sc\",{\"1\":{\"182\":1,\"368\":5,\"369\":5,\"376\":2,\"378\":7,\"382\":10,\"385\":12,\"388\":11,\"401\":23}}],[\"school字段\",{\"1\":{\"99\":1}}],[\"school\",{\"1\":{\"98\":1,\"99\":1}}],[\"scheduleatfixedrate\",{\"1\":{\"420\":1}}],[\"schedule\",{\"1\":{\"288\":1,\"305\":1,\"480\":2}}],[\"schedule和push只能用一个\",{\"1\":{\"288\":1}}],[\"schedulejob\",{\"1\":{\"248\":1}}],[\"scheduler\",{\"1\":{\"246\":2,\"248\":5}}],[\"schedulewithfixeddelay\",{\"1\":{\"36\":1}}],[\"schedulecontroller\",{\"1\":{\"36\":1}}],[\"scheduledtask\",{\"1\":{\"497\":2}}],[\"scheduledtasksconfig\",{\"1\":{\"35\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"415\":1}}],[\"scheduledfuture\",{\"1\":{\"36\":4}}],[\"scheduledfuture<\",{\"1\":{\"36\":1}}],[\"scheduled\",{\"0\":{\"36\":1},\"1\":{\"35\":1,\"36\":1}}],[\"scheduled注解标记的定时任务是在应用程序启动时自动启动的\",{\"1\":{\"35\":1}}],[\"schedul\",{\"1\":{\"35\":1}}],[\"somaxconn\",{\"1\":{\"481\":2}}],[\"someinclude\",{\"1\":{\"197\":2}}],[\"sometable\",{\"1\":{\"197\":2}}],[\"some\",{\"1\":{\"7\":1,\"8\":1,\"197\":3}}],[\"so\",{\"0\":{\"481\":1,\"484\":2},\"1\":{\"454\":2,\"455\":2,\"480\":1,\"481\":1,\"484\":2,\"495\":1}}],[\"sortedset2\",{\"1\":{\"153\":2}}],[\"sortedset1\",{\"1\":{\"153\":2}}],[\"sortedset\",{\"1\":{\"153\":2}}],[\"sorted\",{\"1\":{\"153\":1}}],[\"sort\",{\"1\":{\"99\":1}}],[\"source>\",{\"1\":{\"85\":2}}],[\"source\",{\"1\":{\"69\":1,\"99\":1,\"328\":2,\"351\":14,\"363\":3,\"364\":6,\"365\":3,\"382\":8}}],[\"sockettimeoutexception\",{\"1\":{\"481\":1}}],[\"sockettimeout=3000\",{\"1\":{\"167\":1}}],[\"socketchannal\",{\"1\":{\"480\":1,\"483\":1,\"484\":2,\"485\":1,\"486\":1}}],[\"socketchannel\",{\"1\":{\"331\":1,\"357\":1,\"368\":6,\"369\":5,\"376\":1,\"378\":5,\"382\":5,\"385\":5,\"388\":4,\"410\":4,\"411\":2,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":2,\"488\":2,\"490\":1,\"492\":1,\"498\":1}}],[\"socketaddress\",{\"1\":{\"382\":1,\"480\":2,\"495\":4}}],[\"socket\",{\"1\":{\"336\":1,\"376\":5,\"381\":3,\"386\":2,\"390\":1,\"396\":6,\"397\":3,\"411\":1,\"450\":4,\"481\":3,\"495\":3}}],[\"socketfactory\",{\"1\":{\"34\":1}}],[\"sockjs的缺点\",{\"0\":{\"33\":1}}],[\"sockjs的优势\",{\"0\":{\"32\":1}}],[\"sockjs在不支持websocket的浏览器中使用的是长轮询技术\",{\"1\":{\"32\":1}}],[\"sockjs可以通过polyfill模拟websocket的功能\",{\"1\":{\"32\":1}}],[\"sockjs可以在所有支持javascript的浏览器中运行\",{\"1\":{\"32\":1}}],[\"sockjs\",{\"0\":{\"29\":1},\"1\":{\"29\":3}}],[\"singlethreadeventexecutor\",{\"1\":{\"428\":1,\"431\":2,\"496\":4}}],[\"singlethreadeventexecutor$5\",{\"1\":{\"428\":1,\"431\":2}}],[\"singleton\",{\"1\":{\"260\":1}}],[\"since\",{\"1\":{\"319\":1}}],[\"sinter\",{\"1\":{\"153\":2}}],[\"sismember\",{\"1\":{\"153\":2}}],[\"sites\",{\"1\":{\"90\":1}}],[\"simplechannelinboundhandler<rpcresponsemessage>\",{\"1\":{\"491\":1,\"493\":1}}],[\"simplechannelinboundhandler<rpcrequestmessage>\",{\"1\":{\"489\":1}}],[\"simplechannelinboundhandler<groupmembersrequestmessage>\",{\"1\":{\"472\":1}}],[\"simplechannelinboundhandler<groupquitrequestmessage>\",{\"1\":{\"472\":1}}],[\"simplechannelinboundhandler<groupjoinrequestmessage>\",{\"1\":{\"472\":1}}],[\"simplechannelinboundhandler<groupchatrequestmessage>\",{\"1\":{\"472\":1}}],[\"simplechannelinboundhandler<groupcreaterequestmessage>\",{\"1\":{\"472\":1}}],[\"simplechannelinboundhandler<chatrequestmessage>\",{\"1\":{\"471\":1}}],[\"simplechannelinboundhandler<loginrequestmessage>\",{\"1\":{\"470\":1,\"471\":1}}],[\"simplechannelinboundhandler<httprequest>\",{\"1\":{\"464\":1}}],[\"simplechannelinboundhandler<string>\",{\"1\":{\"410\":1}}],[\"simplechunk\",{\"1\":{\"322\":2}}],[\"simplefilevisitor<path>\",{\"1\":{\"364\":3}}],[\"simpletest\",{\"1\":{\"293\":1}}],[\"simpletrigger\",{\"1\":{\"248\":1,\"249\":1}}],[\"simpleschedule\",{\"1\":{\"248\":1,\"249\":1}}],[\"simpleschedulebuilder\",{\"1\":{\"248\":1,\"249\":1}}],[\"simple\",{\"1\":{\"139\":4,\"140\":1,\"141\":1}}],[\"simple简单模式\",{\"0\":{\"106\":1}}],[\"simplemailmessage\",{\"1\":{\"34\":2}}],[\"simpledateformat\",{\"1\":{\"27\":2}}],[\"size\",{\"1\":{\"27\":3,\"37\":6,\"99\":1,\"160\":1,\"169\":1,\"319\":2,\"360\":1,\"362\":6,\"455\":1,\"498\":3}}],[\"suspend\",{\"1\":{\"495\":1}}],[\"sun\",{\"1\":{\"290\":1,\"378\":1}}],[\"sunion\",{\"1\":{\"153\":2}}],[\"suppresswarnings\",{\"1\":{\"495\":1}}],[\"support\",{\"1\":{\"285\":1}}],[\"supportsparameter\",{\"1\":{\"281\":1}}],[\"superscriptchunk\",{\"1\":{\"322\":3}}],[\"super\",{\"1\":{\"280\":1,\"364\":5,\"453\":2,\"488\":1}}],[\"sum\",{\"1\":{\"225\":1,\"228\":2}}],[\"sums\",{\"1\":{\"7\":2}}],[\"sudo\",{\"1\":{\"62\":1,\"151\":2,\"305\":1}}],[\"success\",{\"1\":{\"40\":1,\"41\":1,\"426\":2,\"427\":2,\"496\":2}}],[\"subscriptchunk\",{\"1\":{\"322\":3}}],[\"substring\",{\"1\":{\"27\":1,\"232\":1,\"279\":1}}],[\"subject\",{\"1\":{\"34\":6}}],[\"submit\",{\"1\":{\"27\":1,\"431\":2}}],[\"segment\",{\"1\":{\"455\":2}}],[\"sequenceidgenerator\",{\"1\":{\"492\":1}}],[\"sequenceid\",{\"1\":{\"466\":2,\"467\":2,\"478\":4,\"488\":2,\"492\":3}}],[\"sequence\",{\"1\":{\"438\":1}}],[\"separator=\",{\"1\":{\"206\":1}}],[\"serialize\",{\"1\":{\"478\":4}}],[\"serializeralgorithm\",{\"1\":{\"478\":9}}],[\"serializer\",{\"1\":{\"478\":11,\"488\":1}}],[\"serializertype\",{\"1\":{\"466\":2,\"467\":2,\"478\":1}}],[\"serializable>\",{\"1\":{\"212\":2}}],[\"serializable\",{\"1\":{\"155\":1,\"212\":2,\"478\":1,\"488\":1}}],[\"serverbootstrapacceptor\",{\"1\":{\"495\":3,\"498\":2}}],[\"serverbootstrap\",{\"1\":{\"410\":1,\"417\":2,\"432\":1,\"449\":1,\"453\":7,\"454\":2,\"464\":7,\"470\":7,\"488\":7,\"495\":2,\"498\":2}}],[\"servers\",{\"1\":{\"404\":1}}],[\"serversocketchannal\",{\"1\":{\"481\":1,\"484\":2}}],[\"serversocketchannelconfig\",{\"1\":{\"481\":1}}],[\"serversocketchannelimpl\",{\"1\":{\"378\":1}}],[\"serversocketchannel\",{\"1\":{\"331\":1,\"368\":3,\"369\":4,\"376\":4,\"378\":4,\"382\":4,\"385\":2,\"388\":4,\"410\":2,\"495\":7,\"498\":1}}],[\"serversocket\",{\"1\":{\"379\":1,\"381\":2,\"450\":2,\"481\":2}}],[\"server=localhost\",{\"1\":{\"190\":2}}],[\"serverhttpresponse\",{\"1\":{\"182\":2}}],[\"serverhttprequest\",{\"1\":{\"181\":2,\"182\":2}}],[\"serverwebexchange\",{\"1\":{\"181\":1,\"182\":2,\"183\":1}}],[\"servertimezone=asia\",{\"1\":{\"167\":1,\"293\":1}}],[\"serverlist\",{\"1\":{\"89\":2,\"90\":2}}],[\"server\",{\"1\":{\"66\":1,\"88\":2,\"89\":4,\"90\":9,\"151\":1,\"167\":1,\"168\":1,\"169\":1,\"176\":2,\"182\":3,\"187\":1,\"381\":1,\"382\":1,\"390\":2,\"401\":1,\"411\":1,\"419\":2,\"420\":2,\"449\":2,\"453\":1,\"464\":1,\"470\":1,\"478\":1,\"481\":7,\"488\":3,\"490\":1,\"495\":1}}],[\"serviceclass\",{\"1\":{\"492\":4}}],[\"serviceinstance\",{\"1\":{\"169\":1}}],[\"servicesfactory\",{\"1\":{\"488\":1,\"489\":1}}],[\"services\",{\"1\":{\"62\":1}}],[\"service\",{\"1\":{\"34\":2,\"167\":6,\"168\":1,\"169\":2,\"171\":1,\"176\":4,\"187\":1,\"188\":1,\"219\":1,\"254\":1,\"258\":1,\"260\":1,\"488\":4,\"489\":3,\"490\":1,\"492\":4}}],[\"servletinitconfig\",{\"1\":{\"267\":2}}],[\"servlet\",{\"1\":{\"27\":1,\"267\":1}}],[\"servlet<\",{\"1\":{\"27\":1,\"267\":1}}],[\"sex\",{\"1\":{\"99\":1,\"229\":3,\"235\":2}}],[\"search\",{\"1\":{\"98\":1,\"99\":5,\"103\":1,\"176\":1}}],[\"sec\",{\"1\":{\"245\":3}}],[\"security\",{\"1\":{\"90\":2}}],[\"seconds\",{\"1\":{\"40\":1,\"420\":1}}],[\"sessionfactory\",{\"1\":{\"471\":2,\"473\":2}}],[\"session\",{\"1\":{\"90\":2,\"469\":1}}],[\"sentinel<\",{\"1\":{\"190\":1}}],[\"sentinel\",{\"0\":{\"190\":1},\"1\":{\"163\":21,\"190\":6}}],[\"sent\",{\"1\":{\"90\":1}}],[\"sending\",{\"1\":{\"453\":1,\"457\":1,\"458\":2,\"459\":2,\"460\":2}}],[\"sendimgmail\",{\"1\":{\"34\":1}}],[\"sendfile\",{\"1\":{\"90\":1,\"397\":1}}],[\"sendfailmail\",{\"1\":{\"34\":3}}],[\"sendmailimg\",{\"1\":{\"34\":2}}],[\"send\",{\"1\":{\"34\":3,\"107\":1,\"147\":1,\"390\":1,\"457\":2,\"470\":2,\"481\":1}}],[\"sendsimplemail\",{\"1\":{\"34\":3}}],[\"selectedselectionkeyset\",{\"1\":{\"497\":2}}],[\"selectedkeys\",{\"1\":{\"376\":1,\"378\":1,\"379\":3,\"382\":3,\"385\":2,\"388\":2,\"497\":4,\"498\":1}}],[\"selectrebuildselector\",{\"1\":{\"497\":1}}],[\"selectdeadlinenanos\",{\"1\":{\"497\":2}}],[\"selectcnt\",{\"1\":{\"497\":11}}],[\"selectcount\",{\"1\":{\"212\":1,\"217\":1}}],[\"selectstrategy\",{\"1\":{\"496\":5}}],[\"selectnowsupplier\",{\"1\":{\"496\":1}}],[\"selectnow\",{\"1\":{\"374\":1,\"376\":1,\"378\":1,\"388\":1,\"496\":1,\"497\":2}}],[\"selectionkey\",{\"1\":{\"373\":1,\"376\":2,\"378\":3,\"382\":8,\"385\":9,\"388\":6,\"495\":10,\"497\":5,\"498\":8}}],[\"selectimports\",{\"1\":{\"16\":1}}],[\"selectpage\",{\"1\":{\"212\":1,\"217\":1}}],[\"selectorautorebuildthreshold\",{\"1\":{\"497\":1}}],[\"selector\",{\"0\":{\"332\":1,\"337\":1,\"371\":1},\"1\":{\"332\":1,\"337\":2,\"370\":4,\"371\":1,\"372\":3,\"373\":3,\"374\":3,\"375\":3,\"376\":7,\"378\":8,\"380\":1,\"382\":10,\"385\":16,\"388\":4,\"392\":1,\"410\":1,\"415\":1,\"495\":9,\"496\":2,\"497\":13,\"498\":3}}],[\"selectobjs\",{\"1\":{\"212\":1}}],[\"selectone\",{\"1\":{\"212\":1}}],[\"selectmapspage\",{\"1\":{\"212\":1}}],[\"selectmaps\",{\"1\":{\"212\":1}}],[\"selectbatchids\",{\"1\":{\"212\":1,\"213\":1}}],[\"selectbymap\",{\"1\":{\"212\":1,\"213\":1}}],[\"selectbymapparams\",{\"1\":{\"203\":3}}],[\"selectbybeans\",{\"1\":{\"204\":3}}],[\"selectbygenderandage2\",{\"1\":{\"202\":1}}],[\"selectbygenderandage\",{\"1\":{\"201\":4,\"202\":2}}],[\"selectbyid\",{\"1\":{\"41\":1,\"212\":1,\"213\":1}}],[\"select>\",{\"1\":{\"197\":2,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"209\":3}}],[\"selectusers\",{\"1\":{\"197\":1}}],[\"select\",{\"0\":{\"225\":1,\"375\":1},\"1\":{\"43\":1,\"152\":1,\"196\":1,\"197\":3,\"201\":3,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"209\":3,\"215\":1,\"225\":1,\"226\":3,\"228\":4,\"229\":1,\"230\":1,\"231\":3,\"232\":6,\"235\":9,\"238\":3,\"239\":1,\"245\":6,\"337\":2,\"374\":2,\"376\":2,\"378\":6,\"379\":1,\"382\":3,\"385\":2,\"388\":2,\"496\":9,\"497\":8,\"498\":1}}],[\"selectlist\",{\"1\":{\"40\":1,\"212\":1,\"213\":1}}],[\"setexceptionvalue\",{\"1\":{\"489\":1}}],[\"setemail\",{\"1\":{\"37\":1}}],[\"setreturnvalue\",{\"1\":{\"489\":1}}],[\"set<string>\",{\"1\":{\"469\":2,\"470\":1,\"472\":2,\"488\":1}}],[\"set<selectionkey>\",{\"1\":{\"376\":1,\"378\":1,\"388\":1}}],[\"setfailure\",{\"1\":{\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"493\":1,\"495\":3}}],[\"setfixedheight\",{\"1\":{\"323\":1}}],[\"setfrom\",{\"1\":{\"34\":3}}],[\"setwidths\",{\"1\":{\"323\":1}}],[\"setwidthpercentage\",{\"1\":{\"323\":1}}],[\"setuncancellable\",{\"1\":{\"495\":2,\"498\":1}}],[\"setup\",{\"1\":{\"305\":2}}],[\"setuid\",{\"1\":{\"303\":1}}],[\"setuser\",{\"1\":{\"184\":1}}],[\"setusername\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"setbyte\",{\"1\":{\"442\":1}}],[\"setborder\",{\"1\":{\"323\":3}}],[\"setbookdao\",{\"1\":{\"258\":1}}],[\"setbackimg\",{\"1\":{\"40\":1}}],[\"setjobdata\",{\"1\":{\"249\":1}}],[\"sethorizontalalignment\",{\"1\":{\"323\":3}}],[\"sethost\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"setheader\",{\"1\":{\"320\":1}}],[\"sethashvalueserializer\",{\"1\":{\"155\":1}}],[\"sethashkeyserializer\",{\"1\":{\"155\":1}}],[\"setvalueserializer\",{\"1\":{\"155\":2}}],[\"setviewport\",{\"1\":{\"301\":1,\"303\":1}}],[\"setviews\",{\"1\":{\"41\":1}}],[\"setvisibility\",{\"1\":{\"155\":1}}],[\"setvirtualhost\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"setkeyserializer\",{\"1\":{\"155\":1}}],[\"setobjectmapper\",{\"1\":{\"155\":1}}],[\"setclosed\",{\"1\":{\"495\":2,\"498\":2}}],[\"setchanneloptions\",{\"1\":{\"495\":1,\"498\":1}}],[\"setcharat\",{\"1\":{\"341\":2}}],[\"setcontenttype\",{\"1\":{\"320\":1}}],[\"setconnectionfactory\",{\"1\":{\"155\":1}}],[\"setcolorstroke\",{\"1\":{\"325\":1}}],[\"setcolor\",{\"1\":{\"282\":2,\"319\":1}}],[\"setcomplete\",{\"1\":{\"182\":1}}],[\"setcreatemessageids\",{\"1\":{\"143\":1}}],[\"set3\",{\"1\":{\"153\":3}}],[\"set2\",{\"1\":{\"153\":3}}],[\"set1\",{\"1\":{\"153\":3}}],[\"setnx\",{\"1\":{\"153\":1}}],[\"setname\",{\"1\":{\"37\":1}}],[\"setdelay\",{\"1\":{\"147\":2}}],[\"setdatabase\",{\"1\":{\"41\":1}}],[\"setdate\",{\"1\":{\"40\":1}}],[\"setsequenceid\",{\"1\":{\"478\":1,\"488\":1,\"489\":1}}],[\"setsuccess\",{\"1\":{\"425\":1,\"426\":1,\"427\":1,\"493\":1}}],[\"setsubject\",{\"1\":{\"34\":3}}],[\"setspacingafter\",{\"1\":{\"323\":1}}],[\"setspacingbefore\",{\"1\":{\"323\":1}}],[\"setsql\",{\"1\":{\"218\":3}}],[\"sets\",{\"1\":{\"153\":1}}],[\"setstatuscode\",{\"1\":{\"182\":1}}],[\"setstatus\",{\"1\":{\"144\":1}}],[\"setint\",{\"1\":{\"464\":1}}],[\"setignoringelementcontentwhitespace\",{\"1\":{\"328\":2}}],[\"setignoringcomments\",{\"1\":{\"328\":2}}],[\"setid\",{\"1\":{\"144\":1,\"213\":1}}],[\"setifabsent\",{\"1\":{\"40\":1}}],[\"setpaytime\",{\"1\":{\"144\":1}}],[\"setpassword\",{\"1\":{\"40\":1,\"107\":1,\"108\":1,\"109\":1,\"213\":1,\"293\":1}}],[\"setport\",{\"1\":{\"107\":1,\"108\":1,\"109\":1}}],[\"set\",{\"0\":{\"206\":1},\"1\":{\"69\":1,\"70\":4,\"137\":2,\"144\":4,\"153\":2,\"156\":1,\"184\":1,\"206\":1,\"223\":1,\"232\":1,\"234\":1,\"245\":3,\"262\":1,\"264\":1,\"288\":1,\"426\":2,\"427\":2,\"428\":2,\"429\":2,\"430\":2,\"438\":1,\"463\":3,\"469\":1,\"470\":4,\"495\":1,\"498\":1}}],[\"setlist\",{\"1\":{\"40\":1}}],[\"setabsoluteposition\",{\"1\":{\"324\":1}}],[\"setanchor\",{\"1\":{\"322\":1}}],[\"setalignment\",{\"1\":{\"321\":1}}],[\"setattribute\",{\"1\":{\"279\":1,\"469\":1}}],[\"setaccount\",{\"1\":{\"40\":1,\"213\":2}}],[\"setage\",{\"1\":{\"37\":1}}],[\"setaddress\",{\"1\":{\"37\":1,\"41\":1}}],[\"setter\",{\"0\":{\"257\":1}}],[\"settextrise\",{\"1\":{\"322\":2}}],[\"settext\",{\"1\":{\"34\":3}}],[\"setto\",{\"1\":{\"34\":3}}],[\"stsong\",{\"1\":{\"319\":1,\"320\":1}}],[\"style\",{\"1\":{\"319\":2}}],[\"style=\",{\"1\":{\"37\":1,\"455\":1}}],[\"steps\",{\"1\":{\"288\":1,\"305\":1}}],[\"stereotype\",{\"1\":{\"182\":1,\"188\":1}}],[\"stdschedulerfactory\",{\"1\":{\"248\":1}}],[\"stu\",{\"1\":{\"155\":2,\"156\":4}}],[\"study\",{\"1\":{\"34\":1,\"106\":1,\"110\":1,\"229\":1}}],[\"stroke\",{\"1\":{\"325\":1}}],[\"strategy\",{\"1\":{\"187\":1}}],[\"strlen\",{\"1\":{\"153\":1}}],[\"strikethru\",{\"1\":{\"322\":1}}],[\"strikechunk\",{\"1\":{\"322\":2}}],[\"strict\",{\"1\":{\"90\":2}}],[\"stringpropertynames\",{\"1\":{\"488\":1}}],[\"stringencoder\",{\"1\":{\"411\":1,\"422\":4,\"423\":1,\"432\":1,\"449\":1}}],[\"stringdecoder\",{\"1\":{\"410\":1}}],[\"stringutil\",{\"1\":{\"341\":1}}],[\"stringbuilder\",{\"1\":{\"341\":12,\"385\":2,\"434\":2}}],[\"stringredisserializer\",{\"1\":{\"155\":6}}],[\"stringredistemplate\",{\"1\":{\"40\":3}}],[\"string>map\",{\"1\":{\"282\":1}}],[\"string>\",{\"1\":{\"155\":1}}],[\"string\",{\"1\":{\"6\":5,\"8\":1,\"15\":1,\"16\":4,\"18\":2,\"27\":11,\"34\":16,\"35\":2,\"36\":1,\"37\":9,\"40\":8,\"41\":1,\"100\":2,\"102\":1,\"108\":3,\"111\":4,\"113\":1,\"114\":5,\"117\":2,\"118\":8,\"120\":6,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"136\":1,\"139\":2,\"146\":3,\"147\":1,\"148\":1,\"153\":1,\"155\":1,\"171\":1,\"181\":4,\"182\":3,\"183\":2,\"185\":2,\"201\":2,\"202\":2,\"203\":1,\"254\":1,\"257\":1,\"258\":2,\"260\":1,\"267\":3,\"269\":2,\"270\":3,\"272\":3,\"273\":2,\"274\":2,\"279\":1,\"282\":3,\"319\":2,\"324\":1,\"328\":7,\"338\":1,\"341\":8,\"351\":1,\"362\":3,\"364\":1,\"365\":3,\"376\":2,\"378\":1,\"381\":3,\"382\":1,\"385\":2,\"388\":1,\"390\":2,\"399\":1,\"401\":1,\"410\":2,\"411\":1,\"417\":3,\"423\":2,\"449\":1,\"450\":4,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"469\":14,\"470\":8,\"471\":3,\"472\":1,\"478\":3,\"480\":1,\"481\":2,\"488\":7,\"490\":3,\"492\":1}}],[\"streamresult\",{\"1\":{\"328\":2}}],[\"stream\",{\"0\":{\"392\":1},\"1\":{\"90\":1,\"331\":3,\"392\":2,\"393\":1}}],[\"struts\",{\"1\":{\"79\":1}}],[\"struts<\",{\"1\":{\"79\":1}}],[\"stoped\",{\"1\":{\"453\":1}}],[\"stop\",{\"1\":{\"36\":3,\"65\":1,\"130\":1}}],[\"standardopenoption\",{\"1\":{\"399\":1}}],[\"standardcopyoption\",{\"1\":{\"364\":4}}],[\"standardcharsets\",{\"1\":{\"347\":2,\"390\":1,\"478\":2}}],[\"stash\",{\"1\":{\"305\":1}}],[\"stapling\",{\"1\":{\"90\":5}}],[\"state\",{\"1\":{\"209\":5,\"475\":2}}],[\"stateless\",{\"1\":{\"140\":1}}],[\"stats\",{\"1\":{\"65\":1}}],[\"status\",{\"1\":{\"49\":1,\"144\":4,\"243\":1}}],[\"statichandles\",{\"1\":{\"26\":1}}],[\"static\",{\"1\":{\"15\":1,\"16\":1,\"18\":1,\"26\":6,\"27\":1,\"109\":3,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2,\"146\":3,\"171\":1,\"184\":4,\"185\":1,\"254\":1,\"328\":2,\"338\":1,\"341\":12,\"351\":2,\"362\":1,\"364\":1,\"376\":2,\"378\":1,\"381\":2,\"382\":2,\"385\":2,\"388\":3,\"390\":2,\"399\":1,\"401\":5,\"417\":1,\"418\":1,\"423\":1,\"434\":1,\"441\":1,\"450\":2,\"453\":4,\"457\":3,\"458\":2,\"459\":2,\"460\":2,\"470\":2,\"478\":24,\"480\":1,\"481\":2,\"488\":9,\"490\":1,\"492\":6,\"493\":1,\"495\":1}}],[\"startthread\",{\"1\":{\"496\":1}}],[\"startindex\",{\"1\":{\"341\":3}}],[\"startnow\",{\"1\":{\"248\":1,\"249\":1}}],[\"startswith\",{\"1\":{\"37\":1}}],[\"start\",{\"1\":{\"36\":1,\"65\":1,\"248\":1,\"341\":1,\"362\":2,\"365\":2,\"388\":9,\"419\":2,\"420\":2,\"423\":1,\"426\":2,\"427\":2,\"428\":2,\"429\":2,\"430\":2,\"449\":1,\"450\":4,\"453\":2,\"470\":1}}],[\"starter<\",{\"1\":{\"293\":1}}],[\"starter感觉更标准一点\",{\"1\":{\"12\":1}}],[\"starter或是xxx\",{\"1\":{\"12\":2}}],[\"starter\",{\"0\":{\"9\":1},\"1\":{\"12\":12,\"34\":1,\"37\":1,\"100\":1,\"121\":1,\"168\":1,\"169\":1,\"171\":2,\"176\":3,\"187\":2,\"190\":1,\"247\":1}}],[\"s\",{\"1\":{\"7\":3,\"8\":2,\"107\":2,\"108\":2,\"229\":1,\"230\":1,\"231\":2,\"234\":2,\"235\":18,\"245\":2,\"257\":2,\"258\":5,\"260\":1,\"313\":3,\"381\":2,\"399\":2,\"401\":6,\"450\":6,\"470\":11,\"481\":3}}],[\"ois\",{\"1\":{\"466\":2,\"467\":2}}],[\"oio\",{\"1\":{\"428\":2,\"431\":2,\"481\":1}}],[\"oos\",{\"1\":{\"466\":2,\"467\":2}}],[\"oom\",{\"1\":{\"368\":1}}],[\"owor\",{\"1\":{\"381\":1}}],[\"o操作和网络传输\",{\"1\":{\"219\":1}}],[\"o操作或网络传输\",{\"1\":{\"219\":1}}],[\"other\",{\"1\":{\"288\":1,\"399\":2}}],[\"otherwise>\",{\"1\":{\"209\":1}}],[\"othermaster\",{\"1\":{\"163\":1}}],[\"okhttp\",{\"1\":{\"172\":1}}],[\"okhttp<\",{\"1\":{\"172\":1}}],[\"ok\",{\"1\":{\"172\":1,\"245\":1,\"464\":1}}],[\"offset\",{\"1\":{\"341\":7,\"397\":1}}],[\"of\",{\"1\":{\"169\":1,\"254\":1,\"288\":1,\"301\":1,\"404\":1,\"441\":1}}],[\"om\",{\"1\":{\"155\":4}}],[\"oldwakenup\",{\"1\":{\"496\":3,\"497\":2}}],[\"oldlimit\",{\"1\":{\"341\":3,\"351\":3}}],[\"old\",{\"1\":{\"94\":1,\"144\":3}}],[\"oldname\",{\"1\":{\"27\":3}}],[\"ocsp\",{\"1\":{\"90\":3}}],[\"octet\",{\"1\":{\"90\":1}}],[\"onunhandledinboundmessage\",{\"1\":{\"441\":2}}],[\"only模式作为持久化方式\",{\"1\":{\"160\":1}}],[\"only\",{\"1\":{\"160\":1}}],[\"onload\",{\"1\":{\"37\":1}}],[\"onmessage\",{\"1\":{\"148\":1}}],[\"onetwothreefourfive\",{\"1\":{\"350\":1}}],[\"onetwothree\",{\"1\":{\"349\":1}}],[\"one\",{\"1\":{\"113\":2,\"114\":2,\"288\":1}}],[\"on\",{\"1\":{\"90\":6,\"160\":1,\"235\":4,\"288\":2,\"305\":2,\"315\":1,\"316\":1,\"495\":1}}],[\"our\",{\"1\":{\"79\":1}}],[\"outlist\",{\"1\":{\"467\":2,\"478\":2}}],[\"outlook\",{\"1\":{\"52\":1}}],[\"outbound\",{\"1\":{\"413\":1}}],[\"outputstreamwriter\",{\"1\":{\"450\":2}}],[\"outputstream\",{\"1\":{\"381\":1}}],[\"output=file\",{\"1\":{\"244\":1}}],[\"outer\",{\"1\":{\"235\":1}}],[\"out\",{\"1\":{\"7\":6,\"8\":5,\"27\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"40\":2,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"123\":1,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"148\":1,\"156\":1,\"181\":5,\"182\":2,\"183\":1,\"208\":1,\"213\":6,\"218\":2,\"248\":1,\"249\":2,\"255\":2,\"262\":1,\"264\":3,\"265\":1,\"267\":1,\"269\":1,\"270\":1,\"272\":1,\"274\":2,\"284\":3,\"293\":3,\"328\":6,\"341\":6,\"347\":2,\"351\":1,\"362\":2,\"363\":2,\"364\":6,\"365\":1,\"368\":1,\"376\":2,\"378\":1,\"381\":5,\"385\":4,\"390\":1,\"401\":4,\"410\":1,\"415\":4,\"417\":1,\"422\":4,\"431\":4,\"432\":6,\"434\":1,\"440\":5,\"442\":6,\"445\":3,\"446\":3,\"449\":2,\"450\":2,\"463\":1,\"466\":11,\"467\":12,\"470\":12,\"478\":18,\"480\":1,\"481\":5,\"492\":3}}],[\"o\",{\"1\":{\"64\":1,\"65\":1,\"350\":1,\"417\":12,\"419\":2,\"420\":5,\"426\":4,\"427\":3,\"428\":3,\"429\":4,\"430\":3,\"492\":2}}],[\"ops\",{\"1\":{\"497\":3}}],[\"opsforvalue\",{\"1\":{\"40\":1,\"156\":2}}],[\"operationcomplete\",{\"1\":{\"422\":1,\"423\":1,\"495\":1,\"498\":1}}],[\"open\",{\"1\":{\"320\":1,\"368\":2,\"369\":1,\"372\":1,\"376\":2,\"378\":2,\"382\":3,\"385\":4,\"388\":3,\"390\":2,\"399\":1,\"401\":1,\"495\":2}}],[\"open=\",{\"1\":{\"206\":1}}],[\"openfiegn\",{\"1\":{\"185\":1}}],[\"openfeign传递\",{\"0\":{\"185\":1}}],[\"openfeign<\",{\"1\":{\"171\":1,\"172\":1}}],[\"openfeign\",{\"0\":{\"170\":1},\"1\":{\"12\":1,\"171\":1}}],[\"op\",{\"1\":{\"376\":1,\"378\":2,\"382\":2,\"385\":6,\"388\":2,\"495\":2,\"497\":5,\"498\":1}}],[\"opts=\",{\"1\":{\"94\":2}}],[\"optional为true时不让别人知道自己所用依赖\",{\"1\":{\"78\":1}}],[\"optional>\",{\"1\":{\"19\":1,\"28\":1,\"78\":1}}],[\"options0\",{\"1\":{\"495\":1}}],[\"options\",{\"1\":{\"62\":1,\"495\":3}}],[\"option\",{\"1\":{\"55\":1,\"302\":1,\"454\":2,\"480\":1,\"481\":1}}],[\"ordinal\",{\"1\":{\"478\":1}}],[\"orderbyasc\",{\"1\":{\"217\":1}}],[\"orderedeventexecutor\",{\"1\":{\"415\":1}}],[\"ordered\",{\"1\":{\"181\":1,\"182\":2}}],[\"orderid\",{\"1\":{\"144\":5}}],[\"order\",{\"1\":{\"99\":1,\"144\":12,\"225\":2,\"230\":1}}],[\"or\",{\"1\":{\"299\":1,\"300\":1,\"495\":1,\"498\":1}}],[\"or或\",{\"1\":{\"227\":1}}],[\"origin\",{\"1\":{\"46\":3,\"51\":4,\"305\":3,\"341\":3,\"442\":8}}],[\"originalfilename\",{\"1\":{\"6\":2}}],[\"org\",{\"1\":{\"19\":1,\"141\":8,\"182\":11,\"188\":2,\"195\":1}}],[\"objectinputstream\",{\"1\":{\"466\":2,\"467\":2,\"478\":4}}],[\"objectoutputstream\",{\"1\":{\"466\":2,\"467\":2,\"478\":2}}],[\"objectutil\",{\"1\":{\"418\":1}}],[\"objectmapper\",{\"1\":{\"155\":3}}],[\"object\",{\"1\":{\"155\":1,\"265\":3,\"279\":1,\"281\":1,\"284\":3,\"401\":2,\"417\":2,\"418\":2,\"432\":6,\"441\":4,\"449\":2,\"463\":1,\"464\":1,\"469\":2,\"470\":1,\"475\":2,\"478\":8,\"488\":3,\"489\":1,\"490\":1,\"492\":3,\"493\":1,\"498\":1}}],[\"objecterror\",{\"1\":{\"37\":1}}],[\"objectprovider<b>\",{\"1\":{\"21\":1}}],[\"object>>>\",{\"1\":{\"212\":1}}],[\"object>>\",{\"1\":{\"212\":1}}],[\"object>\",{\"1\":{\"16\":2,\"146\":2,\"155\":2,\"212\":2,\"213\":2,\"401\":1,\"488\":1,\"495\":5,\"498\":1}}],[\"objectlisting\",{\"1\":{\"7\":3}}],[\"override\",{\"1\":{\"16\":2,\"26\":1,\"36\":1,\"41\":1,\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"144\":2,\"181\":2,\"182\":2,\"185\":1,\"217\":1,\"219\":1,\"248\":1,\"249\":1,\"267\":3,\"279\":1,\"280\":2,\"281\":2,\"284\":3,\"285\":1,\"364\":5,\"388\":2,\"399\":2,\"401\":6,\"410\":1,\"411\":1,\"417\":5,\"418\":1,\"422\":4,\"423\":2,\"432\":7,\"449\":4,\"453\":5,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"463\":3,\"464\":3,\"466\":2,\"467\":2,\"470\":5,\"471\":2,\"472\":5,\"473\":2,\"475\":2,\"478\":6,\"480\":2,\"488\":4,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"493\":1,\"495\":6,\"496\":2,\"498\":2}}],[\"oepnfeign\",{\"1\":{\"185\":1}}],[\"oe\",{\"1\":{\"7\":5,\"8\":5}}],[\"os\",{\"1\":{\"6\":3}}],[\"ossexception\",{\"1\":{\"7\":2,\"8\":2}}],[\"ossobjectsummary\",{\"1\":{\"7\":1}}],[\"ossclient\",{\"1\":{\"7\":4,\"8\":4}}],[\"ossclientbuilder\",{\"1\":{\"6\":1,\"7\":1,\"8\":1}}],[\"oss\",{\"0\":{\"3\":1,\"4\":1},\"1\":{\"5\":3,\"6\":2,\"7\":2,\"8\":2}}],[\"eeeeeeeeeee|\",{\"1\":{\"460\":1}}],[\"eee|\",{\"1\":{\"459\":1}}],[\"epoll\",{\"1\":{\"407\":1}}],[\"e5\",{\"1\":{\"347\":2}}],[\"e4\",{\"1\":{\"347\":2}}],[\"each\",{\"1\":{\"341\":1}}],[\"evt\",{\"1\":{\"475\":4}}],[\"evaluateonnewdocument\",{\"1\":{\"301\":1}}],[\"evaluate\",{\"1\":{\"301\":2}}],[\"everysec\",{\"1\":{\"160\":2}}],[\"eventexecutors\",{\"1\":{\"426\":3,\"427\":3,\"428\":3,\"429\":3,\"430\":3,\"431\":4}}],[\"eventexecutor\",{\"1\":{\"415\":1,\"418\":1}}],[\"eventexecutorgroup\",{\"1\":{\"415\":1}}],[\"eventlooptest2\",{\"1\":{\"419\":2,\"420\":5}}],[\"eventlooptest\",{\"1\":{\"417\":12}}],[\"eventloopgroup\",{\"1\":{\"415\":3,\"416\":1,\"495\":1}}],[\"eventloops\",{\"1\":{\"388\":1}}],[\"eventloop\",{\"0\":{\"415\":1},\"1\":{\"388\":2,\"413\":1,\"415\":11,\"480\":1,\"492\":1,\"495\":8,\"496\":3,\"497\":5,\"498\":7}}],[\"events\",{\"1\":{\"90\":2}}],[\"event\",{\"1\":{\"37\":2,\"404\":1,\"475\":4,\"496\":1}}],[\"echo\",{\"1\":{\"288\":4,\"449\":1}}],[\"ecdhe\",{\"1\":{\"90\":1}}],[\"ew\",{\"1\":{\"212\":9}}],[\"empty\",{\"1\":{\"469\":1}}],[\"employee\",{\"1\":{\"201\":2,\"202\":1,\"203\":1,\"204\":7,\"205\":1,\"206\":1}}],[\"employeemapper\",{\"1\":{\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"embeddedchannel\",{\"1\":{\"466\":2}}],[\"embedded\",{\"1\":{\"319\":2,\"320\":1}}],[\"ems\",{\"1\":{\"107\":3,\"108\":3,\"109\":3,\"121\":3}}],[\"email=\",{\"1\":{\"52\":3}}],[\"email\",{\"1\":{\"37\":9,\"45\":4,\"52\":6,\"305\":1}}],[\"established\",{\"1\":{\"481\":2}}],[\"es\",{\"1\":{\"94\":2,\"101\":2,\"102\":4}}],[\"esc\",{\"1\":{\"70\":1}}],[\"et\",{\"1\":{\"212\":2}}],[\"etc\",{\"1\":{\"62\":1,\"86\":2,\"90\":5}}],[\"eternalyii\",{\"1\":{\"52\":1}}],[\"equals\",{\"1\":{\"40\":1,\"423\":1,\"449\":1,\"495\":1}}],[\"eq\",{\"1\":{\"40\":1,\"144\":2,\"213\":1,\"218\":2}}],[\"ex\",{\"1\":{\"284\":1}}],[\"existing\",{\"1\":{\"364\":1}}],[\"exist=false\",{\"1\":{\"215\":1}}],[\"exists\",{\"1\":{\"27\":1,\"153\":1,\"240\":1,\"364\":1}}],[\"extends\",{\"1\":{\"212\":5,\"267\":1,\"280\":1,\"285\":1,\"319\":1,\"466\":1,\"467\":1,\"471\":2,\"472\":5,\"473\":1,\"478\":4,\"481\":1,\"488\":2,\"489\":1,\"491\":1,\"493\":1}}],[\"extension\",{\"1\":{\"187\":1}}],[\"exc\",{\"1\":{\"364\":2,\"399\":1,\"401\":6}}],[\"exceptionvalue\",{\"1\":{\"488\":1,\"493\":3}}],[\"exceptionininitializererror\",{\"1\":{\"478\":1,\"488\":1}}],[\"exceptioncaught\",{\"1\":{\"473\":1,\"495\":1}}],[\"exception\",{\"1\":{\"182\":1,\"219\":3,\"279\":1,\"281\":1,\"284\":4,\"319\":1,\"390\":1,\"417\":1,\"423\":2,\"428\":1,\"431\":2,\"449\":1,\"453\":5,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"463\":1,\"464\":3,\"466\":2,\"467\":2,\"470\":6,\"471\":2,\"472\":5,\"473\":2,\"475\":2,\"478\":2,\"480\":1,\"488\":4,\"489\":1,\"490\":2,\"491\":1,\"492\":2,\"493\":2,\"495\":6,\"496\":1,\"498\":7}}],[\"exchange\",{\"1\":{\"125\":4,\"126\":4,\"127\":4,\"146\":3,\"147\":2,\"169\":1,\"181\":3,\"182\":5,\"183\":1}}],[\"exchange在发送消息时\",{\"1\":{\"116\":1}}],[\"exchangedeclare\",{\"1\":{\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2}}],[\"exclusions>\",{\"1\":{\"79\":1}}],[\"exclusion>\",{\"1\":{\"79\":1}}],[\"executor\",{\"1\":{\"418\":4,\"496\":2}}],[\"executablepath\",{\"1\":{\"302\":1}}],[\"execute\",{\"1\":{\"248\":1,\"249\":1,\"418\":1,\"419\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"495\":4,\"496\":4,\"498\":1}}],[\"executionexception\",{\"1\":{\"428\":2}}],[\"execution\",{\"1\":{\"262\":1,\"263\":1,\"264\":1,\"265\":1}}],[\"executions>\",{\"1\":{\"85\":1}}],[\"execution>\",{\"1\":{\"85\":1}}],[\"executing\",{\"1\":{\"36\":1}}],[\"exec\",{\"1\":{\"65\":1}}],[\"example\",{\"1\":{\"45\":2,\"51\":1,\"85\":1,\"90\":2,\"198\":1,\"301\":10}}],[\"examplebucket\",{\"1\":{\"6\":1}}],[\"expected\",{\"1\":{\"341\":1}}],[\"exposefunction\",{\"1\":{\"301\":1}}],[\"export\",{\"1\":{\"37\":1,\"52\":4,\"65\":3}}],[\"explicit\",{\"1\":{\"79\":1}}],[\"expires\",{\"1\":{\"90\":1}}],[\"expire\",{\"1\":{\"40\":1,\"153\":1}}],[\"e\",{\"1\":{\"27\":5,\"34\":1,\"37\":4,\"94\":2,\"109\":2,\"178\":1,\"182\":1,\"212\":4,\"219\":2,\"264\":2,\"265\":4,\"304\":1,\"319\":2,\"338\":2,\"341\":1,\"347\":2,\"349\":5,\"350\":10,\"362\":4,\"365\":2,\"376\":4,\"378\":4,\"382\":2,\"388\":8,\"390\":5,\"399\":3,\"401\":6,\"417\":6,\"426\":2,\"427\":2,\"428\":5,\"429\":5,\"430\":5,\"431\":4,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"450\":8,\"453\":5,\"454\":2,\"457\":2,\"458\":13,\"459\":13,\"460\":13,\"463\":2,\"464\":2,\"470\":6,\"478\":6,\"480\":2,\"481\":2,\"488\":6,\"489\":3,\"490\":2,\"492\":2,\"495\":3,\"496\":2,\"497\":1,\"498\":3}}],[\"element\",{\"1\":{\"323\":3,\"328\":7}}],[\"element2\",{\"1\":{\"153\":2}}],[\"element1\",{\"1\":{\"153\":7}}],[\"elementtype\",{\"1\":{\"15\":1,\"16\":3,\"278\":1}}],[\"elasticsearch<\",{\"1\":{\"100\":1}}],[\"elasticsearchbilibili\",{\"1\":{\"94\":1}}],[\"elasticsearchbilibilinew\",{\"1\":{\"94\":1}}],[\"elasticsearch\",{\"0\":{\"94\":1},\"1\":{\"94\":5,\"100\":1,\"406\":1}}],[\"else\",{\"1\":{\"16\":1,\"341\":2,\"365\":1,\"378\":2,\"382\":2,\"385\":2,\"388\":1,\"418\":1,\"464\":1,\"470\":1,\"471\":2,\"472\":3,\"478\":2,\"492\":1,\"493\":1,\"495\":6,\"496\":1,\"497\":2,\"498\":2}}],[\"ensureopen\",{\"1\":{\"495\":2,\"498\":1}}],[\"entrance\",{\"1\":{\"495\":1}}],[\"entry<channeloption<\",{\"1\":{\"495\":1}}],[\"entry<attributekey<\",{\"1\":{\"495\":2,\"498\":1}}],[\"entryset\",{\"1\":{\"495\":3}}],[\"entry>\",{\"1\":{\"259\":1}}],[\"entity\",{\"1\":{\"212\":3}}],[\"enum\",{\"1\":{\"187\":1,\"478\":1}}],[\"endian\",{\"1\":{\"438\":3}}],[\"endswith\",{\"1\":{\"364\":1,\"488\":1}}],[\"endbug\",{\"1\":{\"288\":1}}],[\"end\",{\"1\":{\"70\":1,\"362\":2,\"365\":2}}],[\"endpoint\",{\"1\":{\"6\":2,\"7\":1,\"8\":1}}],[\"endpoint以华东1\",{\"1\":{\"6\":1}}],[\"envelope\",{\"1\":{\"108\":2,\"111\":3,\"114\":2,\"118\":4,\"120\":2}}],[\"environment\",{\"1\":{\"62\":1}}],[\"env\",{\"1\":{\"52\":1,\"167\":3}}],[\"enc\",{\"1\":{\"293\":2}}],[\"encryptor\",{\"1\":{\"293\":2}}],[\"encrypt\",{\"1\":{\"293\":2}}],[\"encode\",{\"1\":{\"40\":1,\"347\":2,\"382\":3,\"385\":1,\"390\":1,\"401\":1,\"466\":3,\"467\":1,\"478\":1}}],[\"encoding>\",{\"1\":{\"85\":2}}],[\"encoding\",{\"1\":{\"34\":1,\"319\":1}}],[\"enctype=\",{\"1\":{\"27\":1}}],[\"enableswagger2\",{\"1\":{\"43\":1}}],[\"enablescheduling\",{\"1\":{\"35\":1}}],[\"enableconfigurationproperties就行了\",{\"1\":{\"18\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"18\":2}}],[\"enabledefaulttyping\",{\"1\":{\"155\":1}}],[\"enabled控制是否注入a\",{\"1\":{\"18\":1}}],[\"enabled来控制是否注入a\",{\"1\":{\"18\":1}}],[\"enabled\",{\"1\":{\"16\":10,\"18\":3,\"27\":1,\"90\":1,\"130\":1,\"140\":1,\"141\":1,\"172\":1}}],[\"enablediscoveryclient\",{\"1\":{\"14\":1}}],[\"enableautoconfiguration=\",{\"1\":{\"17\":2}}],[\"enablea注解添加一个参数enabled\",{\"1\":{\"16\":1}}],[\"enablea\",{\"1\":{\"15\":3,\"16\":6}}],[\"enablefeignclients这个注解是可以配置扫描路径的\",{\"1\":{\"14\":1}}],[\"enablefeignclients\",{\"1\":{\"14\":1,\"171\":1,\"185\":1}}],[\"enablexxx的注解来启用某个功能\",{\"1\":{\"14\":1}}],[\"enablexxx或是spring\",{\"1\":{\"14\":1}}],[\"eureka\",{\"1\":{\"12\":1}}],[\"errormessageconfig\",{\"1\":{\"141\":1}}],[\"errormessageexchange\",{\"1\":{\"141\":6}}],[\"errorbinding\",{\"1\":{\"141\":2}}],[\"errorqueue\",{\"1\":{\"141\":6}}],[\"error\",{\"1\":{\"7\":3,\"8\":3,\"37\":3,\"90\":3,\"118\":2,\"120\":4,\"141\":10,\"319\":1,\"428\":4,\"429\":3,\"430\":3,\"453\":4,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"463\":2,\"464\":2,\"470\":4,\"488\":4,\"490\":4,\"492\":2}}],[\"bbbbb|\",{\"1\":{\"460\":1}}],[\"bbb\",{\"1\":{\"459\":1,\"463\":1}}],[\"bd\",{\"1\":{\"347\":4}}],[\"bdsize\",{\"1\":{\"152\":1}}],[\"blockingoperationexception\",{\"1\":{\"431\":3}}],[\"blocking\",{\"1\":{\"329\":1}}],[\"blog\",{\"0\":{\"1\":1},\"1\":{\"52\":1,\"209\":6}}],[\"black\",{\"1\":{\"322\":6,\"325\":1}}],[\"bf\",{\"1\":{\"319\":3,\"320\":2,\"322\":8}}],[\"broadcast\",{\"1\":{\"495\":1}}],[\"browser\",{\"1\":{\"301\":10,\"302\":2,\"303\":6}}],[\"break\",{\"1\":{\"338\":1,\"381\":1,\"423\":1,\"449\":1,\"470\":6,\"497\":6,\"498\":2,\"499\":1}}],[\"branches\",{\"1\":{\"52\":1,\"288\":1,\"305\":1}}],[\"branch\",{\"1\":{\"46\":3,\"52\":1,\"288\":1,\"305\":1}}],[\"btree索引\",{\"1\":{\"236\":1}}],[\"b交集部分数据\",{\"1\":{\"235\":1}}],[\"b为父表\",{\"1\":{\"234\":1}}],[\"by\",{\"1\":{\"225\":4,\"229\":1,\"230\":1,\"301\":1,\"428\":1}}],[\"bytebyf\",{\"1\":{\"478\":1}}],[\"bytebufutil\",{\"1\":{\"442\":6,\"445\":3,\"446\":2}}],[\"bytebufallocator\",{\"1\":{\"417\":2,\"434\":1,\"435\":2,\"442\":1,\"445\":4,\"446\":2,\"466\":1,\"499\":1}}],[\"bytebuf\",{\"0\":{\"433\":1,\"447\":1},\"1\":{\"407\":1,\"410\":1,\"411\":1,\"413\":2,\"417\":16,\"432\":1,\"434\":4,\"435\":4,\"436\":3,\"437\":1,\"438\":3,\"441\":19,\"442\":11,\"443\":2,\"444\":1,\"445\":12,\"446\":7,\"447\":1,\"449\":6,\"453\":1,\"454\":1,\"455\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":4,\"466\":5,\"467\":3,\"478\":3,\"485\":1,\"499\":10}}],[\"bytebuffer>\",{\"1\":{\"399\":1,\"401\":2}}],[\"bytebufferutil\",{\"1\":{\"341\":1}}],[\"bytebuffer\",{\"0\":{\"338\":1,\"339\":1,\"340\":1,\"342\":1,\"347\":1,\"383\":1},\"1\":{\"331\":1,\"338\":2,\"340\":1,\"341\":4,\"343\":3,\"347\":2,\"349\":7,\"350\":5,\"351\":6,\"356\":1,\"357\":1,\"368\":3,\"369\":3,\"378\":2,\"382\":11,\"383\":5,\"385\":5,\"388\":2,\"390\":3,\"397\":2,\"399\":4,\"401\":7,\"407\":1,\"438\":2,\"447\":1}}],[\"bytearrayinputstream\",{\"1\":{\"466\":1,\"467\":1,\"478\":2}}],[\"bytearrayoutputstream\",{\"1\":{\"466\":2,\"467\":2,\"478\":4}}],[\"bytetomessagecodec\",{\"1\":{\"467\":1}}],[\"bytetomessagecodec<message>\",{\"1\":{\"466\":1}}],[\"bytetohexstringpadded\",{\"1\":{\"341\":1}}],[\"bytepadding\",{\"1\":{\"341\":5}}],[\"byte2hex\",{\"1\":{\"341\":5}}],[\"byte2char\",{\"1\":{\"341\":6}}],[\"byte\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"341\":3,\"344\":1,\"345\":1,\"350\":2,\"381\":2,\"390\":1,\"396\":4,\"417\":4,\"438\":4,\"442\":1,\"445\":2,\"446\":4,\"453\":1,\"454\":1,\"457\":1,\"458\":3,\"459\":1,\"460\":3,\"463\":1,\"464\":1,\"466\":7,\"467\":7,\"478\":18}}],[\"bytes\",{\"1\":{\"90\":1,\"341\":2,\"455\":8,\"458\":3,\"464\":3,\"466\":6,\"467\":6,\"478\":12}}],[\"backlog\",{\"0\":{\"481\":1},\"1\":{\"481\":5}}],[\"backimg\",{\"1\":{\"282\":1}}],[\"ba\",{\"1\":{\"293\":5}}],[\"baomidou\",{\"1\":{\"187\":1}}],[\"basefont\",{\"1\":{\"319\":3,\"320\":3}}],[\"basecolor\",{\"1\":{\"319\":1,\"322\":8,\"325\":1}}],[\"basemapper<t>\",{\"1\":{\"212\":1}}],[\"basemapper\",{\"0\":{\"212\":1}}],[\"baseresultmap\",{\"1\":{\"198\":1,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"basepackages\",{\"1\":{\"185\":1}}],[\"basicfileattributes\",{\"1\":{\"364\":4}}],[\"basictextencryptor\",{\"1\":{\"293\":1}}],[\"basicack\",{\"1\":{\"111\":1}}],[\"basicqos\",{\"1\":{\"111\":1}}],[\"basicproperties\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"basicpublish\",{\"1\":{\"107\":1,\"113\":1,\"117\":1,\"120\":1}}],[\"basicconsume\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"basic\",{\"1\":{\"107\":1}}],[\"bgrewriteaof\",{\"1\":{\"160\":1}}],[\"bgsave\",{\"1\":{\"159\":1}}],[\"bos\",{\"1\":{\"466\":3,\"467\":3}}],[\"boss\",{\"1\":{\"388\":7,\"453\":3,\"464\":3,\"470\":3,\"488\":3,\"495\":4,\"498\":1}}],[\"bosseventloop\",{\"1\":{\"388\":2}}],[\"bound\",{\"1\":{\"453\":2,\"454\":1,\"458\":1,\"460\":1}}],[\"border\",{\"1\":{\"323\":3}}],[\"bold\",{\"1\":{\"322\":1}}],[\"boldchunk\",{\"1\":{\"322\":2}}],[\"bodylength\",{\"1\":{\"478\":1}}],[\"body\",{\"1\":{\"108\":3,\"111\":3,\"114\":3,\"118\":4,\"120\":2,\"456\":2,\"478\":3}}],[\"book\",{\"1\":{\"258\":2}}],[\"bookserviceimpl\",{\"1\":{\"254\":1,\"258\":1}}],[\"bookservice\",{\"1\":{\"254\":1,\"258\":1}}],[\"bookdao1\",{\"1\":{\"254\":2}}],[\"bookdaoimpl\",{\"1\":{\"254\":2,\"257\":1,\"258\":2,\"259\":1,\"260\":1}}],[\"bookdao\",{\"1\":{\"254\":7,\"257\":1,\"258\":7,\"259\":1,\"260\":2,\"262\":1,\"264\":1,\"265\":1}}],[\"boolfilter来创建一个布尔过滤器\",{\"1\":{\"103\":1}}],[\"boolquery来创建一个布尔查询\",{\"1\":{\"103\":1}}],[\"bool\",{\"1\":{\"99\":1}}],[\"bool把各种其它查询通过must\",{\"1\":{\"99\":1}}],[\"boolean\",{\"1\":{\"16\":7,\"18\":1,\"40\":1,\"182\":1,\"219\":1,\"279\":1,\"281\":1,\"284\":1,\"319\":1,\"388\":2,\"415\":1,\"438\":2,\"441\":1,\"469\":1,\"470\":1,\"471\":1,\"495\":4,\"496\":4,\"497\":1,\"498\":2,\"499\":2}}],[\"bootstrap\",{\"1\":{\"411\":1,\"417\":1,\"422\":4,\"423\":1,\"432\":1,\"449\":1,\"453\":7,\"457\":7,\"458\":7,\"459\":7,\"460\":7,\"463\":7,\"470\":7,\"480\":4,\"488\":7,\"490\":7,\"492\":7,\"495\":6,\"498\":2}}],[\"bootstrap<\",{\"1\":{\"187\":1}}],[\"boot中的spring\",{\"1\":{\"188\":1}}],[\"boot应用程序中使用\",{\"1\":{\"35\":1}}],[\"boot<\",{\"1\":{\"19\":1,\"28\":1,\"34\":1,\"37\":1,\"85\":2,\"100\":1,\"121\":1,\"247\":1}}],[\"boot\",{\"0\":{\"121\":1,\"250\":1},\"1\":{\"12\":10,\"17\":2,\"19\":3,\"28\":1,\"34\":1,\"37\":1,\"85\":4,\"100\":1,\"121\":1,\"188\":1,\"247\":1,\"293\":4}}],[\"boot项目中\",{\"1\":{\"10\":1}}],[\"b2\",{\"1\":{\"107\":1,\"108\":1}}],[\"b1\",{\"1\":{\"107\":1,\"108\":1}}],[\"big\",{\"1\":{\"438\":2}}],[\"bio\",{\"0\":{\"391\":1},\"1\":{\"381\":1}}],[\"bilibili\",{\"1\":{\"104\":1,\"161\":1,\"211\":1,\"220\":1,\"235\":1,\"253\":1,\"266\":1,\"272\":1,\"274\":1,\"288\":1,\"451\":1}}],[\"bind\",{\"1\":{\"141\":2,\"146\":1,\"368\":1,\"369\":1,\"376\":1,\"378\":1,\"382\":1,\"385\":1,\"388\":1,\"390\":1,\"401\":1,\"410\":1,\"417\":2,\"432\":1,\"449\":1,\"453\":1,\"464\":1,\"469\":1,\"470\":1,\"471\":1,\"488\":1,\"495\":7}}],[\"bindingbuilder\",{\"1\":{\"141\":3,\"146\":1}}],[\"binding\",{\"1\":{\"141\":3,\"146\":1,\"453\":2,\"454\":1,\"458\":1,\"460\":1}}],[\"bindings\",{\"1\":{\"125\":2,\"126\":2,\"127\":2}}],[\"bindingresult\",{\"1\":{\"37\":4}}],[\"bin\",{\"1\":{\"68\":1}}],[\"beginread\",{\"1\":{\"495\":1,\"498\":1}}],[\"begin\",{\"1\":{\"399\":2}}],[\"before\",{\"1\":{\"368\":1}}],[\"before=2017\",{\"1\":{\"178\":1}}],[\"beink\",{\"1\":{\"254\":2,\"257\":1,\"258\":2,\"259\":1,\"260\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":1,\"267\":1,\"303\":1}}],[\"between\",{\"1\":{\"227\":1}}],[\"be\",{\"1\":{\"79\":1}}],[\"bean>\",{\"1\":{\"257\":1,\"258\":2,\"259\":1}}],[\"bean传递多个参数\",{\"0\":{\"204\":1},\"1\":{\"204\":1}}],[\"beandefinitionregistry\",{\"1\":{\"16\":2}}],[\"bean\",{\"0\":{\"255\":1},\"1\":{\"13\":2,\"18\":1,\"20\":4,\"21\":2,\"22\":4,\"41\":1,\"43\":1,\"136\":1,\"141\":9,\"143\":1,\"146\":3,\"155\":1,\"185\":1,\"217\":1}}],[\"b依赖了c和d\",{\"1\":{\"77\":1}}],[\"bprovider\",{\"1\":{\"21\":2}}],[\"b\",{\"1\":{\"18\":6,\"20\":10,\"21\":3,\"46\":2,\"107\":2,\"108\":1,\"234\":4,\"235\":18,\"338\":1,\"341\":1,\"345\":1,\"347\":2,\"349\":7,\"350\":2,\"363\":4,\"378\":2,\"390\":1,\"399\":1,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"450\":2,\"453\":1,\"454\":2,\"458\":12,\"459\":11,\"460\":11}}],[\"busy\",{\"1\":{\"496\":1}}],[\"bug\",{\"1\":{\"375\":1,\"407\":1,\"497\":3}}],[\"buf4\",{\"1\":{\"446\":3}}],[\"buf3\",{\"1\":{\"445\":6,\"446\":2}}],[\"buf2\",{\"1\":{\"445\":6,\"446\":3}}],[\"buf1\",{\"1\":{\"445\":7,\"446\":3}}],[\"buf\",{\"1\":{\"341\":21,\"343\":1,\"344\":2,\"345\":2,\"396\":5,\"417\":6,\"434\":3,\"441\":2,\"463\":30,\"466\":5}}],[\"bufferedwriter\",{\"1\":{\"450\":4}}],[\"bufferedreader\",{\"1\":{\"450\":4}}],[\"buffer3\",{\"1\":{\"347\":3}}],[\"buffer2\",{\"1\":{\"347\":2}}],[\"buffer1\",{\"1\":{\"347\":3}}],[\"buffer\",{\"0\":{\"331\":1,\"344\":1,\"345\":1,\"348\":1},\"1\":{\"331\":4,\"338\":9,\"339\":4,\"341\":19,\"343\":1,\"344\":1,\"345\":1,\"348\":1,\"349\":1,\"350\":1,\"356\":1,\"357\":6,\"368\":5,\"369\":5,\"375\":1,\"378\":4,\"382\":12,\"383\":5,\"385\":13,\"388\":4,\"390\":8,\"399\":4,\"401\":4,\"417\":2,\"434\":9,\"435\":2,\"438\":4,\"439\":2,\"440\":10,\"442\":1,\"445\":3,\"446\":3,\"449\":8,\"453\":4,\"454\":4,\"457\":4,\"458\":4,\"459\":5,\"460\":5,\"463\":2,\"466\":1,\"467\":1,\"478\":1}}],[\"but\",{\"1\":{\"7\":1,\"8\":1}}],[\"bucket\",{\"1\":{\"7\":1,\"8\":1}}],[\"bucketname\",{\"1\":{\"6\":2}}],[\"builder\",{\"1\":{\"183\":2,\"328\":4,\"341\":3}}],[\"build>\",{\"1\":{\"85\":2}}],[\"build\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"43\":2,\"61\":3,\"62\":1,\"136\":1,\"183\":3,\"248\":2,\"249\":2,\"288\":2}}],[\"填写bucket名称\",{\"1\":{\"6\":1}}],[\"风险很高\",{\"1\":{\"6\":1}}],[\"阿里镜像\",{\"0\":{\"74\":1}}],[\"阿里云账号accesskey拥有所有api的访问权限\",{\"1\":{\"6\":1}}],[\"阿里官方文档java上传文件概述和文件下载\",{\"1\":{\"4\":1}}],[\"c++\",{\"1\":{\"458\":1,\"459\":1,\"460\":1}}],[\"ci\",{\"1\":{\"288\":1}}],[\"ciphers\",{\"1\":{\"90\":2}}],[\"ctx\",{\"1\":{\"267\":3,\"410\":1,\"417\":2,\"432\":24,\"441\":2,\"449\":5,\"453\":9,\"454\":2,\"457\":4,\"458\":3,\"459\":3,\"460\":3,\"463\":10,\"464\":3,\"466\":2,\"467\":3,\"470\":13,\"471\":5,\"472\":12,\"473\":6,\"475\":4,\"478\":3,\"485\":1,\"489\":2,\"491\":1,\"493\":1,\"495\":7,\"498\":3}}],[\"ctrl\",{\"1\":{\"70\":2}}],[\"currentchildattrs\",{\"1\":{\"495\":3}}],[\"currentchildoptions\",{\"1\":{\"495\":3}}],[\"currentchildhandler\",{\"1\":{\"495\":2}}],[\"currentchildgroup\",{\"1\":{\"495\":2}}],[\"currenttimenanos\",{\"1\":{\"497\":6}}],[\"currenttimemillis\",{\"1\":{\"365\":2}}],[\"currentthread\",{\"1\":{\"401\":3,\"496\":1}}],[\"currentdate\",{\"1\":{\"303\":4}}],[\"curtime\",{\"1\":{\"232\":1}}],[\"curdate\",{\"1\":{\"232\":1}}],[\"curd\",{\"0\":{\"213\":1}}],[\"custom\",{\"1\":{\"167\":2}}],[\"customexchange\",{\"1\":{\"146\":2}}],[\"cm\",{\"1\":{\"212\":2}}],[\"cj\",{\"1\":{\"187\":1,\"293\":1}}],[\"c端\",{\"1\":{\"106\":1}}],[\"cell\",{\"1\":{\"323\":14}}],[\"center\",{\"1\":{\"321\":1,\"323\":3}}],[\"central\",{\"1\":{\"74\":1}}],[\"ceil\",{\"1\":{\"232\":1}}],[\"certs\",{\"1\":{\"90\":1}}],[\"certificate\",{\"1\":{\"90\":2}}],[\"cst\",{\"1\":{\"481\":4}}],[\"css\",{\"1\":{\"90\":1}}],[\"csdn博客\",{\"1\":{\"317\":2}}],[\"csdn博客安装后再看这\",{\"1\":{\"307\":1}}],[\"csdn\",{\"1\":{\"52\":1}}],[\"cpu\",{\"0\":{\"389\":1},\"1\":{\"368\":1,\"369\":1,\"388\":4,\"389\":1,\"396\":5,\"397\":7,\"407\":1,\"424\":1,\"497\":1}}],[\"cp\",{\"1\":{\"65\":2}}],[\"cd\",{\"1\":{\"47\":1,\"51\":1,\"304\":1}}],[\"child\",{\"1\":{\"498\":7}}],[\"childattrs\",{\"1\":{\"495\":2,\"498\":1}}],[\"childoptions\",{\"1\":{\"495\":2,\"498\":1}}],[\"childgroup\",{\"1\":{\"495\":1,\"498\":1}}],[\"childhandler\",{\"1\":{\"410\":2,\"417\":2,\"432\":1,\"449\":1,\"453\":1,\"464\":1,\"470\":1,\"488\":1,\"495\":1,\"498\":2}}],[\"ch\",{\"1\":{\"378\":1,\"410\":3,\"411\":2,\"417\":7,\"422\":8,\"423\":3,\"432\":9,\"449\":5,\"453\":5,\"457\":3,\"458\":4,\"459\":4,\"460\":4,\"463\":3,\"464\":5,\"470\":10,\"475\":4,\"488\":10,\"490\":5,\"492\":5,\"495\":4,\"497\":3}}],[\"chunk\",{\"0\":{\"322\":1},\"1\":{\"322\":18}}],[\"chrome\",{\"1\":{\"296\":1,\"302\":3}}],[\"chromium\",{\"1\":{\"296\":1,\"300\":1,\"302\":8,\"307\":5}}],[\"choose>\",{\"1\":{\"209\":1}}],[\"choose\",{\"1\":{\"209\":1}}],[\"chatresponsemessage\",{\"1\":{\"471\":2,\"478\":3}}],[\"chatrequestmessagehandler\",{\"1\":{\"471\":1}}],[\"chatrequestmessage\",{\"1\":{\"470\":1,\"471\":1,\"478\":3}}],[\"chatclient\",{\"1\":{\"470\":1}}],[\"chatserver\",{\"1\":{\"470\":1}}],[\"charsequence\",{\"1\":{\"438\":1}}],[\"charset\",{\"1\":{\"88\":1,\"347\":1,\"382\":3,\"385\":1,\"401\":2,\"438\":2,\"449\":2,\"463\":1}}],[\"char\",{\"1\":{\"338\":1,\"341\":7,\"438\":1,\"453\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"charbuffer\",{\"1\":{\"331\":1,\"347\":1}}],[\"chain\",{\"1\":{\"181\":2,\"182\":3,\"183\":1}}],[\"channelconfig\",{\"1\":{\"498\":1,\"499\":1}}],[\"channelfactory\",{\"1\":{\"495\":1}}],[\"channelfuturelistener\",{\"1\":{\"422\":2,\"423\":1,\"432\":1,\"495\":2,\"498\":1}}],[\"channelfuture\",{\"0\":{\"422\":1},\"1\":{\"422\":14,\"423\":5,\"453\":9,\"457\":3,\"458\":3,\"459\":3,\"460\":3,\"463\":3,\"464\":3,\"480\":1,\"490\":1,\"495\":6,\"498\":1}}],[\"channelduplexhandler\",{\"1\":{\"475\":4}}],[\"channeldemo7\",{\"1\":{\"388\":1}}],[\"channeldemo6\",{\"1\":{\"376\":1,\"378\":7}}],[\"channeldemo1\",{\"1\":{\"338\":18}}],[\"channeloption\",{\"1\":{\"454\":2,\"480\":1,\"481\":1,\"495\":1}}],[\"channeloutboundhandleradapter\",{\"1\":{\"432\":5}}],[\"channelactive\",{\"1\":{\"453\":3,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"470\":1,\"495\":2,\"498\":2}}],[\"channelpipeline\",{\"1\":{\"432\":1,\"495\":3,\"498\":1,\"499\":1}}],[\"channelpromise\",{\"1\":{\"432\":3,\"480\":2,\"495\":5,\"498\":2}}],[\"channelhandler\",{\"1\":{\"432\":4,\"441\":3,\"467\":1,\"471\":2,\"472\":5,\"473\":1,\"489\":1,\"491\":1,\"493\":1,\"495\":2}}],[\"channelhandlercontext\",{\"1\":{\"410\":1,\"417\":2,\"432\":7,\"449\":2,\"453\":3,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":4,\"464\":2,\"466\":2,\"467\":2,\"470\":3,\"471\":2,\"472\":5,\"473\":2,\"475\":2,\"478\":2,\"489\":1,\"491\":1,\"493\":1,\"495\":3,\"498\":3}}],[\"channelread\",{\"1\":{\"417\":2,\"432\":3,\"449\":2,\"463\":1,\"464\":1,\"470\":1,\"498\":3}}],[\"channelread0\",{\"1\":{\"410\":1,\"464\":1,\"470\":1,\"471\":2,\"472\":5,\"489\":1,\"491\":1,\"493\":1}}],[\"channelinactive\",{\"1\":{\"453\":2,\"473\":1}}],[\"channelinboundhandleradapter\",{\"1\":{\"417\":2,\"432\":5,\"449\":2,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":1,\"473\":1}}],[\"channelinitializer<socketchannel>\",{\"1\":{\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":2,\"488\":2,\"490\":1,\"492\":1}}],[\"channelinitializer<channel>\",{\"1\":{\"411\":1,\"422\":4,\"432\":1,\"495\":1}}],[\"channelinitializer<niosocketchannel>\",{\"1\":{\"410\":1,\"417\":3,\"423\":1,\"432\":1,\"449\":2}}],[\"channelinitializer\",{\"1\":{\"410\":1,\"411\":1,\"495\":2}}],[\"channels\",{\"1\":{\"368\":3,\"369\":3,\"378\":2,\"472\":4}}],[\"channel\",{\"0\":{\"331\":1,\"362\":1,\"373\":1,\"374\":1,\"392\":1,\"421\":1},\"1\":{\"107\":5,\"108\":6,\"109\":4,\"111\":7,\"113\":5,\"114\":7,\"117\":5,\"118\":16,\"120\":14,\"331\":5,\"337\":5,\"338\":2,\"339\":1,\"344\":2,\"345\":2,\"349\":2,\"350\":4,\"355\":2,\"356\":2,\"357\":3,\"358\":2,\"359\":2,\"368\":4,\"369\":5,\"370\":3,\"371\":1,\"373\":3,\"374\":1,\"375\":1,\"376\":6,\"378\":7,\"380\":1,\"382\":8,\"383\":3,\"385\":7,\"386\":1,\"388\":2,\"390\":5,\"392\":3,\"393\":1,\"397\":1,\"410\":1,\"411\":4,\"413\":4,\"415\":8,\"417\":11,\"418\":1,\"421\":5,\"422\":17,\"423\":8,\"424\":1,\"428\":1,\"431\":2,\"432\":13,\"441\":2,\"449\":8,\"453\":8,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"463\":3,\"464\":2,\"466\":4,\"469\":22,\"470\":12,\"471\":5,\"472\":6,\"473\":4,\"475\":2,\"480\":3,\"481\":1,\"488\":10,\"490\":6,\"492\":15,\"495\":38,\"496\":2,\"497\":5,\"498\":12,\"499\":2}}],[\"change=\",{\"1\":{\"37\":1}}],[\"check\",{\"1\":{\"441\":1}}],[\"checkdeadlock\",{\"1\":{\"431\":2}}],[\"checknotnull\",{\"1\":{\"418\":1}}],[\"checkout\",{\"1\":{\"46\":2,\"49\":1,\"50\":1,\"288\":1,\"305\":3}}],[\"chenkout\",{\"1\":{\"46\":1}}],[\"cr\",{\"1\":{\"313\":1}}],[\"cross\",{\"1\":{\"197\":1}}],[\"crontab\",{\"1\":{\"304\":1}}],[\"cron表达式是一个具有时间含义的字符串\",{\"1\":{\"289\":1}}],[\"cron适用于周期性执行\",{\"1\":{\"289\":1}}],[\"cron\",{\"0\":{\"36\":1,\"289\":1},\"1\":{\"36\":1,\"288\":1,\"305\":1}}],[\"crt\",{\"1\":{\"90\":1}}],[\"creategroup\",{\"1\":{\"469\":1,\"472\":1}}],[\"createdirectories\",{\"1\":{\"364\":1}}],[\"createdirectory\",{\"1\":{\"364\":1,\"365\":1}}],[\"createfont\",{\"1\":{\"319\":1,\"320\":1}}],[\"createrootapplicationcontext\",{\"1\":{\"267\":1}}],[\"createservletapplicationcontext\",{\"1\":{\"267\":1}}],[\"createchannel\",{\"1\":{\"107\":1,\"108\":1,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2}}],[\"create\",{\"1\":{\"41\":1,\"59\":1,\"65\":1,\"69\":1,\"101\":1,\"238\":3,\"305\":1}}],[\"createjwt\",{\"1\":{\"40\":1}}],[\"createmimemessage\",{\"1\":{\"34\":2}}],[\"c\",{\"1\":{\"34\":3,\"51\":1,\"338\":18,\"341\":1,\"347\":2,\"349\":7,\"350\":2,\"364\":2,\"376\":2,\"378\":10,\"388\":2,\"390\":1,\"399\":4,\"415\":1,\"417\":18,\"419\":2,\"420\":5,\"426\":4,\"427\":3,\"428\":3,\"429\":4,\"430\":3,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"453\":5,\"454\":5,\"458\":18,\"459\":16,\"460\":18,\"495\":1}}],[\"cccccc\",{\"1\":{\"460\":1}}],[\"ccc\",{\"1\":{\"459\":1}}],[\"ccname\",{\"1\":{\"238\":1}}],[\"cc\",{\"1\":{\"34\":1,\"238\":4}}],[\"clazz\",{\"1\":{\"478\":4}}],[\"classloader\",{\"1\":{\"492\":1}}],[\"class<\",{\"1\":{\"478\":3,\"488\":4,\"492\":1}}],[\"class<t>\",{\"1\":{\"478\":3,\"488\":1,\"492\":1}}],[\"classnotfoundexception\",{\"1\":{\"478\":1,\"488\":1}}],[\"class=\",{\"1\":{\"254\":2,\"257\":1,\"258\":2,\"259\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"254\":1}}],[\"classpath\",{\"1\":{\"26\":2}}],[\"class配置上去\",{\"1\":{\"17\":1}}],[\"class了\",{\"1\":{\"16\":1}}],[\"class的全限定名\",{\"1\":{\"16\":1}}],[\"class就可以了\",{\"1\":{\"15\":1}}],[\"class\",{\"1\":{\"11\":2,\"13\":1,\"15\":3,\"16\":17,\"18\":4,\"20\":2,\"21\":2,\"22\":5,\"26\":1,\"27\":1,\"34\":2,\"35\":1,\"36\":2,\"37\":2,\"41\":1,\"43\":2,\"100\":1,\"101\":2,\"102\":1,\"109\":1,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"141\":1,\"146\":1,\"147\":1,\"148\":1,\"155\":3,\"171\":2,\"181\":1,\"182\":1,\"184\":1,\"185\":4,\"187\":1,\"188\":1,\"217\":1,\"219\":3,\"248\":3,\"249\":3,\"254\":1,\"262\":1,\"264\":1,\"265\":1,\"267\":4,\"279\":1,\"280\":1,\"281\":2,\"284\":1,\"285\":1,\"293\":1,\"319\":1,\"338\":1,\"341\":1,\"347\":1,\"362\":1,\"376\":2,\"378\":1,\"381\":2,\"385\":2,\"388\":3,\"390\":2,\"399\":1,\"401\":4,\"410\":1,\"411\":1,\"417\":3,\"422\":4,\"423\":2,\"432\":2,\"446\":1,\"449\":2,\"450\":2,\"453\":6,\"457\":3,\"458\":3,\"459\":3,\"460\":3,\"463\":1,\"464\":1,\"466\":1,\"467\":1,\"470\":4,\"471\":2,\"472\":5,\"473\":1,\"478\":21,\"480\":2,\"481\":3,\"488\":15,\"489\":2,\"490\":5,\"491\":1,\"492\":4,\"493\":1}}],[\"clearreadpending\",{\"1\":{\"499\":1}}],[\"clear\",{\"1\":{\"338\":1,\"339\":1,\"340\":1,\"368\":1,\"369\":1,\"385\":1,\"401\":1,\"498\":1}}],[\"clean\",{\"1\":{\"75\":1}}],[\"clip\",{\"1\":{\"303\":1}}],[\"cli\",{\"1\":{\"151\":1,\"162\":1}}],[\"clients\",{\"1\":{\"404\":1}}],[\"clientheight\",{\"1\":{\"301\":1}}],[\"clientwidth\",{\"1\":{\"301\":1}}],[\"client\",{\"1\":{\"12\":1,\"185\":1,\"376\":1,\"381\":1,\"390\":1,\"449\":1,\"453\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"470\":2,\"481\":5,\"488\":1,\"490\":1,\"492\":1}}],[\"closeonread\",{\"1\":{\"499\":1}}],[\"closeonreaderror\",{\"1\":{\"498\":1}}],[\"closed\",{\"1\":{\"498\":4}}],[\"closeall\",{\"1\":{\"496\":1}}],[\"closeifclosed\",{\"1\":{\"495\":1}}],[\"closeforcibly\",{\"1\":{\"495\":2,\"498\":2}}],[\"closefutureclient\",{\"1\":{\"423\":1}}],[\"closefuture\",{\"0\":{\"423\":1},\"1\":{\"421\":1,\"423\":5,\"449\":1,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":2,\"480\":1,\"488\":2,\"490\":1,\"492\":1,\"495\":2,\"498\":2}}],[\"closechannel\",{\"1\":{\"401\":4}}],[\"closechannelandconnection\",{\"1\":{\"109\":1}}],[\"close=\",{\"1\":{\"206\":1}}],[\"close\",{\"1\":{\"107\":2,\"108\":2,\"109\":2,\"113\":2,\"117\":2,\"120\":2,\"301\":3,\"303\":2,\"320\":2,\"358\":2,\"375\":1,\"378\":1,\"381\":1,\"388\":2,\"401\":2,\"421\":1,\"423\":3,\"449\":1,\"457\":1,\"470\":2,\"475\":1,\"480\":1,\"495\":2,\"497\":1,\"498\":1,\"499\":5}}],[\"clone\",{\"1\":{\"51\":1}}],[\"cloud<\",{\"1\":{\"168\":1,\"169\":1,\"171\":2,\"176\":3,\"187\":2,\"190\":1}}],[\"cloud\",{\"0\":{\"164\":1},\"1\":{\"12\":4,\"168\":2,\"169\":2,\"171\":2,\"176\":4,\"182\":2,\"187\":3,\"190\":2}}],[\"coupons\",{\"1\":{\"305\":1}}],[\"countdown\",{\"1\":{\"470\":1}}],[\"countdownlatch\",{\"1\":{\"470\":2}}],[\"count\",{\"1\":{\"217\":1,\"225\":1,\"229\":1,\"374\":3,\"376\":5,\"378\":9,\"385\":3}}],[\"cookie=ityouknow\",{\"1\":{\"178\":1}}],[\"cookie\",{\"1\":{\"178\":1}}],[\"coloredchunk\",{\"1\":{\"322\":2}}],[\"colorservice\",{\"1\":{\"282\":1}}],[\"color\",{\"1\":{\"280\":1,\"282\":3,\"319\":3}}],[\"columnwidths\",{\"1\":{\"323\":2}}],[\"columnmap\",{\"1\":{\"212\":2}}],[\"column=\",{\"1\":{\"198\":5}}],[\"columns\",{\"1\":{\"94\":1}}],[\"coll\",{\"1\":{\"212\":2}}],[\"collection<\",{\"1\":{\"212\":2}}],[\"collection<long>\",{\"1\":{\"171\":1}}],[\"collection=\",{\"1\":{\"206\":1}}],[\"collutils\",{\"1\":{\"169\":1}}],[\"core\",{\"0\":{\"300\":1},\"1\":{\"141\":5,\"182\":2,\"187\":1,\"300\":5,\"481\":1}}],[\"core<\",{\"1\":{\"79\":1}}],[\"correct\",{\"1\":{\"52\":2}}],[\"copy\",{\"0\":{\"444\":1},\"1\":{\"71\":1,\"364\":2,\"365\":1}}],[\"conneted\",{\"1\":{\"457\":1}}],[\"connetted\",{\"1\":{\"453\":1,\"458\":2,\"459\":2,\"460\":2}}],[\"connectpromise\",{\"1\":{\"480\":4}}],[\"connecttimeoutexception\",{\"1\":{\"480\":2}}],[\"connecttimeoutfuture\",{\"1\":{\"480\":1}}],[\"connecttimeoutmillis\",{\"1\":{\"480\":3}}],[\"connecttimeout=1000\",{\"1\":{\"167\":1}}],[\"connect\",{\"0\":{\"480\":1},\"1\":{\"368\":1,\"373\":1,\"382\":1,\"385\":2,\"411\":3,\"417\":1,\"422\":5,\"423\":1,\"432\":1,\"449\":1,\"453\":1,\"457\":1,\"458\":2,\"459\":2,\"460\":2,\"463\":1,\"470\":1,\"480\":5,\"481\":2,\"488\":1,\"490\":1,\"492\":1,\"497\":2}}],[\"connected\",{\"1\":{\"368\":1,\"369\":1,\"378\":2,\"388\":1,\"401\":1,\"453\":2,\"454\":1,\"458\":1,\"459\":1,\"460\":1,\"481\":2}}],[\"connecting\",{\"1\":{\"368\":1,\"481\":5}}],[\"connection\",{\"1\":{\"107\":4,\"108\":4,\"109\":2,\"111\":3,\"113\":4,\"114\":3,\"117\":4,\"118\":6,\"120\":7,\"130\":1,\"480\":1}}],[\"connectionfactory\",{\"1\":{\"107\":9,\"108\":9,\"109\":10}}],[\"connections\",{\"1\":{\"90\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"488\":1,\"493\":1}}],[\"concurrent\",{\"1\":{\"428\":4,\"431\":14,\"496\":2}}],[\"concurrentlinkedqueue<>\",{\"1\":{\"388\":1}}],[\"concurrentlinkedqueue<runnable>\",{\"1\":{\"388\":1}}],[\"concat\",{\"1\":{\"232\":2}}],[\"conversion\",{\"1\":{\"341\":2}}],[\"convertandsend\",{\"1\":{\"122\":5,\"147\":2}}],[\"con\",{\"1\":{\"109\":3}}],[\"console\",{\"1\":{\"301\":1}}],[\"consumertwo\",{\"1\":{\"118\":1}}],[\"consumertag\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"consumerone\",{\"1\":{\"114\":1,\"118\":1,\"120\":1}}],[\"consumer2\",{\"1\":{\"111\":1}}],[\"consumer\",{\"0\":{\"111\":1},\"1\":{\"106\":1,\"139\":1,\"141\":1}}],[\"constraint\",{\"1\":{\"234\":1}}],[\"const\",{\"1\":{\"37\":2,\"301\":10,\"302\":2,\"303\":15}}],[\"confirmshutdown\",{\"1\":{\"496\":1}}],[\"confirm机制\",{\"1\":{\"131\":1}}],[\"confirm和publisher\",{\"1\":{\"131\":1}}],[\"configureblocking\",{\"1\":{\"369\":2,\"373\":1,\"376\":1,\"378\":2,\"382\":2,\"385\":3,\"388\":2,\"495\":1,\"498\":1}}],[\"configuration>\",{\"1\":{\"85\":3}}],[\"configuration的proxybeanmethods默认是true\",{\"1\":{\"20\":1}}],[\"configuration的proxybeanmethods可以指定该配置中的方法是否进行代理\",{\"1\":{\"20\":1}}],[\"configuration的配置类\",{\"1\":{\"13\":1}}],[\"configurationproperties\",{\"1\":{\"18\":1,\"188\":2}}],[\"configurationproperties+\",{\"1\":{\"18\":1}}],[\"configuration\",{\"1\":{\"13\":1,\"18\":1,\"19\":2,\"20\":2,\"21\":2,\"22\":4,\"26\":1,\"35\":1,\"41\":1,\"43\":1,\"141\":1,\"146\":1,\"155\":1,\"163\":1,\"187\":1,\"217\":1,\"260\":1,\"267\":1,\"280\":1,\"285\":1,\"441\":1}}],[\"configuration+\",{\"1\":{\"13\":1}}],[\"config类\",{\"1\":{\"267\":1}}],[\"configs\",{\"1\":{\"187\":1}}],[\"config<\",{\"1\":{\"187\":1}}],[\"config\",{\"1\":{\"41\":5,\"45\":4,\"141\":1,\"146\":1,\"182\":1,\"185\":2,\"187\":3,\"188\":1,\"217\":1,\"305\":2,\"478\":4,\"480\":1,\"488\":1,\"495\":7,\"498\":5,\"499\":7}}],[\"conf文件\",{\"1\":{\"58\":1}}],[\"conf\",{\"0\":{\"90\":1},\"1\":{\"58\":1,\"62\":2,\"86\":2,\"90\":2,\"162\":2,\"163\":1}}],[\"continuereading\",{\"1\":{\"498\":1,\"499\":3}}],[\"continue\",{\"1\":{\"376\":1,\"378\":1,\"496\":3}}],[\"contributing\",{\"0\":{\"296\":1}}],[\"control\",{\"1\":{\"254\":1}}],[\"controller\",{\"1\":{\"37\":1,\"202\":1,\"203\":1,\"204\":1,\"260\":1,\"267\":2,\"275\":2}}],[\"context<\",{\"1\":{\"254\":1}}],[\"context\",{\"1\":{\"141\":1,\"188\":1,\"249\":3,\"495\":1}}],[\"contextloads\",{\"1\":{\"102\":1,\"156\":1}}],[\"content\",{\"1\":{\"34\":6,\"40\":2,\"74\":1,\"198\":2,\"288\":1,\"320\":1,\"464\":2,\"470\":2}}],[\"contaienr\",{\"1\":{\"65\":1}}],[\"container2\",{\"1\":{\"65\":1}}],[\"container1\",{\"1\":{\"65\":1}}],[\"container\",{\"0\":{\"65\":1},\"1\":{\"64\":2,\"65\":19}}],[\"conditionalonwebapplication\",{\"1\":{\"23\":1}}],[\"conditionalonmissingclass\",{\"1\":{\"23\":1}}],[\"conditionalonmissingbean中的值\",{\"1\":{\"22\":1}}],[\"conditionalonmissingbean的缺省值是方法的返回类型\",{\"1\":{\"22\":1}}],[\"conditionalonmissingbean的判断逻辑是\",{\"1\":{\"22\":2}}],[\"conditionalonmissingbean\",{\"1\":{\"22\":4}}],[\"conditionalonmissingbean了\",{\"1\":{\"22\":1}}],[\"conditionalonclass\",{\"1\":{\"23\":1}}],[\"conditionalonbean\",{\"1\":{\"23\":1}}],[\"conditionalonproperty来根据a\",{\"1\":{\"18\":1}}],[\"conditionalonproperty\",{\"1\":{\"18\":1,\"23\":1,\"141\":1}}],[\"codec\",{\"1\":{\"470\":4,\"488\":4,\"490\":2,\"492\":2}}],[\"code\",{\"1\":{\"7\":1,\"8\":1,\"36\":1,\"305\":1}}],[\"combinedchannelduplexhandler\",{\"1\":{\"467\":1}}],[\"compareandset\",{\"1\":{\"496\":1,\"497\":2}}],[\"compact\",{\"1\":{\"339\":1,\"340\":1,\"351\":1,\"382\":1}}],[\"complete\",{\"1\":{\"417\":6,\"453\":1,\"454\":2,\"458\":1,\"459\":1,\"460\":1,\"499\":2}}],[\"completed\",{\"1\":{\"399\":3,\"401\":3}}],[\"completionhandler<asynchronoussocketchannel\",{\"1\":{\"401\":1}}],[\"completionhandler<integer\",{\"1\":{\"399\":1,\"401\":2}}],[\"compet\",{\"1\":{\"238\":3,\"239\":1}}],[\"compiler\",{\"1\":{\"85\":2}}],[\"compile\",{\"1\":{\"75\":1,\"80\":1}}],[\"compositebuffer\",{\"1\":{\"445\":1}}],[\"compositebytebuf\",{\"0\":{\"445\":1},\"1\":{\"445\":2,\"446\":2,\"447\":1}}],[\"compose\",{\"1\":{\"62\":3}}],[\"componentscan\",{\"1\":{\"260\":1,\"267\":1}}],[\"component已经不太合适了\",{\"1\":{\"13\":1}}],[\"component就不太合适了\",{\"1\":{\"11\":1}}],[\"component\",{\"1\":{\"11\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"147\":1,\"148\":1,\"181\":1,\"182\":2,\"188\":2,\"260\":1,\"262\":1,\"284\":1,\"445\":2}}],[\"component往spring容器中注入实例\",{\"1\":{\"11\":1}}],[\"commands\",{\"1\":{\"288\":1}}],[\"command\",{\"1\":{\"62\":1,\"65\":1,\"470\":2}}],[\"committer\",{\"1\":{\"52\":3}}],[\"commit\",{\"1\":{\"48\":2,\"49\":1,\"50\":2,\"64\":1,\"288\":1,\"305\":1}}],[\"com\",{\"1\":{\"6\":1,\"17\":2,\"34\":8,\"37\":1,\"45\":2,\"51\":3,\"52\":1,\"74\":1,\"86\":1,\"90\":2,\"94\":1,\"104\":1,\"141\":1,\"178\":1,\"182\":3,\"185\":2,\"187\":2,\"188\":1,\"195\":1,\"198\":1,\"204\":1,\"205\":1,\"237\":1,\"238\":3,\"239\":1,\"240\":1,\"241\":1,\"243\":1,\"254\":2,\"257\":1,\"258\":2,\"259\":1,\"260\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":1,\"267\":1,\"293\":1,\"297\":1,\"301\":4,\"303\":1,\"305\":1,\"317\":1,\"322\":1,\"383\":1,\"428\":2,\"431\":2}}],[\"calculatestrategy\",{\"1\":{\"496\":2}}],[\"called\",{\"1\":{\"495\":1,\"498\":1}}],[\"callsuper\",{\"1\":{\"488\":2}}],[\"call\",{\"1\":{\"431\":2}}],[\"caused\",{\"1\":{\"428\":1}}],[\"cause\",{\"1\":{\"425\":1,\"429\":1,\"430\":1,\"473\":2,\"480\":2,\"490\":3,\"492\":1,\"495\":9,\"498\":1}}],[\"caught\",{\"1\":{\"7\":1,\"8\":1}}],[\"case\",{\"1\":{\"470\":7,\"496\":3}}],[\"cassandra\",{\"1\":{\"406\":1}}],[\"cascade\",{\"1\":{\"234\":1}}],[\"capacity\",{\"1\":{\"340\":1,\"341\":5,\"382\":1,\"434\":3,\"438\":2,\"439\":4,\"440\":3,\"442\":1,\"443\":1}}],[\"capturescreenshot\",{\"1\":{\"303\":4}}],[\"canvas\",{\"1\":{\"325\":6}}],[\"cancelledkeyexception\",{\"1\":{\"497\":2}}],[\"cancelledkeys\",{\"1\":{\"496\":1}}],[\"cancel\",{\"0\":{\"380\":1},\"1\":{\"36\":1,\"377\":1,\"378\":1,\"380\":1,\"382\":2,\"388\":2,\"425\":1}}],[\"cartproperties\",{\"1\":{\"188\":1}}],[\"cart\",{\"1\":{\"187\":1,\"188\":3}}],[\"cartservice\",{\"1\":{\"183\":1}}],[\"cache\",{\"1\":{\"90\":1}}],[\"cached\",{\"1\":{\"50\":1}}],[\"cat\",{\"0\":{\"96\":1},\"1\":{\"49\":1,\"52\":1,\"96\":4,\"315\":1}}],[\"catch机制捕获\",{\"1\":{\"139\":1}}],[\"catch\",{\"1\":{\"7\":1,\"8\":1,\"27\":2,\"109\":1,\"182\":1,\"219\":1,\"319\":1,\"338\":1,\"349\":1,\"350\":1,\"362\":2,\"365\":1,\"376\":2,\"378\":1,\"382\":1,\"388\":4,\"390\":2,\"399\":1,\"401\":3,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":3,\"450\":4,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"464\":1,\"470\":3,\"478\":3,\"480\":1,\"481\":1,\"488\":3,\"489\":1,\"490\":1,\"492\":1,\"495\":5,\"496\":4,\"497\":2,\"498\":4,\"499\":1}}],[\"cnf\",{\"1\":{\"62\":2,\"244\":1}}],[\"cnblogs\",{\"1\":{\"37\":1,\"104\":1,\"317\":1}}],[\"cn\",{\"1\":{\"6\":1,\"24\":1,\"303\":1,\"488\":1,\"490\":1}}],[\"h1>\",{\"1\":{\"464\":1}}],[\"high\",{\"1\":{\"404\":1}}],[\"highlight\",{\"1\":{\"99\":1}}],[\"hn\",{\"1\":{\"301\":3}}],[\"hm\",{\"1\":{\"187\":5,\"188\":2}}],[\"hmall\",{\"1\":{\"185\":2,\"188\":1}}],[\"hmll\",{\"1\":{\"182\":3}}],[\"hmget等\",{\"1\":{\"153\":1}}],[\"hmset\",{\"1\":{\"153\":1}}],[\"hmy\",{\"1\":{\"62\":2}}],[\"hvals\",{\"1\":{\"153\":2}}],[\"hkeys\",{\"1\":{\"153\":2}}],[\"hlen\",{\"1\":{\"153\":2}}],[\"hdel\",{\"1\":{\"153\":2}}],[\"hgetall\",{\"1\":{\"153\":2}}],[\"hget\",{\"1\":{\"153\":2}}],[\"hset\",{\"1\":{\"153\":2}}],[\"hsts\",{\"1\":{\"90\":1}}],[\"hhhh\",{\"1\":{\"459\":1}}],[\"hhhhh\",{\"1\":{\"248\":1}}],[\"hhh\",{\"1\":{\"153\":1,\"213\":1,\"267\":1}}],[\"hh\",{\"1\":{\"119\":3,\"122\":1,\"153\":1,\"156\":2,\"293\":2,\"460\":1}}],[\"h\",{\"1\":{\"70\":1,\"319\":1,\"320\":1,\"417\":18,\"453\":4,\"454\":6,\"458\":19,\"459\":16,\"460\":18}}],[\"hessian\",{\"1\":{\"465\":1}}],[\"hex\",{\"1\":{\"341\":4}}],[\"hexpadding\",{\"1\":{\"341\":5}}],[\"hexdump\",{\"1\":{\"341\":8}}],[\"hexists\",{\"1\":{\"153\":2}}],[\"heapbuffer\",{\"1\":{\"435\":1}}],[\"heapbytebuffer\",{\"1\":{\"331\":1,\"397\":1}}],[\"heapcharbuffer\",{\"1\":{\"347\":1}}],[\"health\",{\"1\":{\"96\":1}}],[\"headcontext\",{\"1\":{\"441\":1,\"495\":1,\"498\":1}}],[\"headless\",{\"1\":{\"296\":1,\"302\":2}}],[\"headers====\",{\"1\":{\"181\":1,\"182\":1}}],[\"headers\",{\"1\":{\"181\":2,\"182\":3,\"464\":1}}],[\"header=x\",{\"1\":{\"178\":1}}],[\"header\",{\"1\":{\"90\":1,\"178\":1,\"183\":1,\"185\":1,\"341\":1}}],[\"head\",{\"1\":{\"49\":1,\"456\":2,\"495\":2,\"498\":2}}],[\"head~100\",{\"1\":{\"49\":1}}],[\"head^\",{\"1\":{\"49\":1}}],[\"height\",{\"1\":{\"37\":1,\"301\":1,\"303\":2}}],[\"here\",{\"1\":{\"36\":1}}],[\"hell\",{\"1\":{\"381\":1}}],[\"helloservice\",{\"1\":{\"489\":2,\"490\":1,\"492\":2}}],[\"helloserviceimpl\",{\"1\":{\"488\":1}}],[\"helloservice=cn\",{\"1\":{\"488\":1}}],[\"helloword\",{\"1\":{\"338\":1,\"349\":1,\"350\":1,\"362\":2,\"364\":9,\"396\":1}}],[\"helloworldclient\",{\"1\":{\"453\":2,\"457\":2,\"458\":4,\"459\":4,\"460\":4}}],[\"helloworldserver\",{\"1\":{\"453\":6,\"454\":3,\"458\":3,\"459\":1,\"460\":3}}],[\"helloworld\",{\"1\":{\"56\":1}}],[\"hello\",{\"0\":{\"408\":1},\"1\":{\"34\":1,\"56\":2,\"107\":3,\"108\":2,\"113\":1,\"122\":7,\"123\":1,\"153\":3,\"232\":3,\"249\":2,\"259\":1,\"267\":1,\"269\":1,\"270\":1,\"272\":1,\"288\":2,\"351\":3,\"381\":1,\"382\":1,\"390\":1,\"401\":1,\"409\":1,\"411\":1,\"422\":2,\"432\":1}}],[\"helper\",{\"1\":{\"34\":12}}],[\"htm\",{\"1\":{\"88\":1,\"89\":1,\"90\":1}}],[\"html转pdf\",{\"1\":{\"317\":1}}],[\"htmlworker\",{\"1\":{\"317\":1}}],[\"html\",{\"1\":{\"37\":1,\"58\":1,\"59\":2,\"86\":2,\"88\":2,\"89\":1,\"90\":4,\"383\":1}}],[\"html5\",{\"1\":{\"29\":1}}],[\"httpcontent\",{\"1\":{\"464\":1}}],[\"httpresponsestatus\",{\"1\":{\"464\":1}}],[\"httprequest\",{\"1\":{\"464\":2}}],[\"httpheaders\",{\"1\":{\"181\":1,\"182\":2}}],[\"httpmethod\",{\"1\":{\"169\":1}}],[\"http\",{\"0\":{\"464\":1},\"1\":{\"88\":1,\"89\":1,\"90\":5,\"172\":1,\"182\":5,\"190\":1,\"303\":1,\"322\":1,\"382\":2,\"383\":1}}],[\"httpservercodec\",{\"1\":{\"464\":1}}],[\"httpservletresponse\",{\"1\":{\"279\":1,\"283\":1,\"284\":3,\"320\":1}}],[\"httpservletrequest\",{\"1\":{\"27\":1,\"181\":1,\"279\":1,\"281\":2,\"283\":1,\"284\":3}}],[\"httpstatus\",{\"1\":{\"182\":3}}],[\"https\",{\"1\":{\"6\":1,\"24\":1,\"37\":1,\"52\":1,\"195\":1,\"297\":1,\"301\":4,\"303\":1}}],[\"how\",{\"1\":{\"351\":1}}],[\"hou\",{\"1\":{\"264\":1}}],[\"home\",{\"1\":{\"59\":1,\"70\":1,\"86\":2}}],[\"hot\",{\"0\":{\"28\":1}}],[\"host=\",{\"1\":{\"178\":1}}],[\"host=127\",{\"1\":{\"167\":1}}],[\"hostname====\",{\"1\":{\"181\":1}}],[\"hostname\",{\"1\":{\"71\":1,\"181\":2}}],[\"host\",{\"1\":{\"7\":1,\"8\":1,\"34\":1,\"71\":1,\"88\":1,\"121\":2,\"167\":1,\"178\":1,\"187\":1}}],[\"hadoop\",{\"1\":{\"406\":1}}],[\"have\",{\"1\":{\"245\":2,\"341\":1}}],[\"having\",{\"1\":{\"225\":1,\"229\":1}}],[\"havingvalue\",{\"1\":{\"18\":1,\"141\":1}}],[\"hasscheduledtasks\",{\"1\":{\"497\":1}}],[\"hastasks\",{\"1\":{\"496\":1,\"497\":2}}],[\"hasnext\",{\"1\":{\"376\":1,\"378\":1,\"382\":1,\"385\":2,\"388\":2,\"498\":1}}],[\"has\",{\"1\":{\"341\":1}}],[\"hasremaining\",{\"1\":{\"338\":1,\"357\":1,\"385\":2,\"401\":1}}],[\"hashset\",{\"1\":{\"497\":1}}],[\"hashset<>\",{\"1\":{\"470\":1}}],[\"hashmap<>\",{\"1\":{\"203\":1,\"213\":2,\"478\":1}}],[\"hashmap<string\",{\"1\":{\"146\":1,\"213\":2}}],[\"hash的value序列化方式采用jackson\",{\"1\":{\"155\":1}}],[\"hash的key也采用string的序列化方式\",{\"1\":{\"155\":1}}],[\"hash命令\",{\"1\":{\"153\":1}}],[\"hash\",{\"1\":{\"153\":1}}],[\"haserrors\",{\"1\":{\"37\":1}}],[\"handle\",{\"1\":{\"498\":1,\"499\":1}}],[\"handleloopexception\",{\"1\":{\"496\":3}}],[\"handlereadexception\",{\"1\":{\"499\":1}}],[\"handlermethodargumentresolver\",{\"1\":{\"281\":1}}],[\"handlerinterceptor\",{\"1\":{\"279\":1,\"284\":1}}],[\"handlers\",{\"1\":{\"187\":1}}],[\"handler\",{\"0\":{\"418\":1,\"432\":1,\"489\":1,\"491\":1,\"493\":1},\"1\":{\"187\":1,\"279\":1,\"284\":3,\"411\":3,\"413\":5,\"417\":2,\"418\":3,\"422\":4,\"423\":1,\"432\":1,\"441\":1,\"449\":1,\"453\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":1,\"467\":1,\"470\":6,\"471\":3,\"480\":1,\"488\":9,\"490\":5,\"492\":5,\"495\":5,\"498\":3,\"499\":2}}],[\"handledelivery\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1}}],[\"hangzhou\",{\"1\":{\"6\":1}}],[\"hard\",{\"1\":{\"49\":1}}],[\"=null\",{\"1\":{\"109\":2,\"281\":1}}],[\"==================================\",{\"1\":{\"470\":2}}],[\"===\",{\"1\":{\"260\":1}}],[\"==0\",{\"1\":{\"40\":1}}],[\"==\",{\"1\":{\"40\":2,\"144\":1,\"275\":1,\"328\":1,\"338\":1,\"341\":1,\"351\":1,\"378\":1,\"381\":1,\"382\":3,\"388\":1,\"401\":1,\"434\":1,\"472\":1,\"475\":2,\"478\":2,\"495\":1,\"496\":3,\"497\":2,\"498\":2}}],[\"=>\",{\"1\":{\"37\":1,\"301\":4,\"315\":1,\"316\":1,\"407\":2,\"410\":1,\"411\":1}}],[\"=resids\",{\"1\":{\"34\":1}}],[\"=\",{\"0\":{\"36\":1},\"1\":{\"6\":6,\"7\":5,\"8\":2,\"16\":5,\"18\":7,\"20\":1,\"27\":13,\"34\":6,\"35\":2,\"36\":3,\"37\":24,\"40\":12,\"41\":4,\"52\":2,\"90\":1,\"100\":3,\"102\":2,\"107\":3,\"108\":4,\"109\":1,\"111\":3,\"113\":2,\"114\":4,\"117\":3,\"118\":6,\"120\":6,\"122\":1,\"123\":3,\"124\":4,\"125\":12,\"126\":14,\"127\":14,\"130\":1,\"136\":6,\"139\":2,\"140\":1,\"141\":2,\"142\":1,\"143\":1,\"144\":11,\"146\":4,\"147\":2,\"148\":2,\"155\":4,\"156\":1,\"169\":4,\"171\":1,\"181\":6,\"182\":11,\"183\":5,\"184\":1,\"185\":2,\"188\":1,\"201\":5,\"202\":3,\"203\":4,\"204\":3,\"205\":3,\"206\":1,\"209\":14,\"213\":15,\"215\":1,\"217\":5,\"218\":5,\"219\":2,\"227\":2,\"231\":1,\"232\":2,\"235\":7,\"248\":3,\"249\":5,\"254\":3,\"258\":3,\"260\":1,\"265\":3,\"267\":1,\"274\":4,\"275\":3,\"279\":1,\"281\":1,\"282\":2,\"301\":10,\"302\":2,\"303\":15,\"319\":3,\"320\":4,\"321\":1,\"322\":10,\"323\":6,\"324\":2,\"325\":2,\"328\":23,\"338\":4,\"341\":44,\"343\":1,\"344\":1,\"345\":2,\"347\":3,\"349\":5,\"350\":4,\"351\":4,\"356\":1,\"357\":1,\"359\":2,\"362\":11,\"363\":5,\"364\":15,\"365\":5,\"368\":5,\"369\":6,\"372\":1,\"373\":1,\"374\":3,\"376\":10,\"378\":12,\"381\":6,\"382\":19,\"385\":19,\"388\":29,\"390\":5,\"396\":4,\"399\":2,\"401\":5,\"415\":2,\"417\":10,\"418\":2,\"419\":1,\"420\":1,\"422\":3,\"423\":5,\"424\":1,\"426\":2,\"427\":2,\"428\":3,\"429\":3,\"430\":3,\"431\":2,\"434\":4,\"435\":2,\"441\":1,\"442\":2,\"445\":4,\"446\":4,\"449\":7,\"450\":9,\"453\":13,\"454\":2,\"455\":2,\"457\":6,\"458\":11,\"459\":9,\"460\":10,\"463\":7,\"464\":6,\"466\":17,\"467\":13,\"470\":26,\"471\":8,\"472\":11,\"475\":2,\"478\":42,\"480\":8,\"481\":4,\"488\":28,\"489\":4,\"490\":8,\"492\":17,\"493\":6,\"495\":36,\"496\":10,\"497\":23,\"498\":25,\"499\":12}}],[\"杭州\",{\"1\":{\"6\":1}}],[\"③\",{\"1\":{\"5\":1}}],[\"权限\",{\"1\":{\"5\":1}}],[\"②\",{\"1\":{\"5\":1}}],[\"①\",{\"1\":{\"5\":1}}],[\"avoid\",{\"1\":{\"495\":1}}],[\"availableprocessors\",{\"1\":{\"388\":1,\"389\":1}}],[\"avg\",{\"1\":{\"225\":1,\"228\":1,\"229\":1}}],[\"aioserver\",{\"1\":{\"401\":1}}],[\"aiodemo1\",{\"1\":{\"399\":4}}],[\"aio\",{\"0\":{\"398\":1,\"399\":1,\"401\":1},\"1\":{\"369\":1,\"398\":1,\"399\":3,\"400\":1}}],[\"aimportbeandefinitionregistrar\",{\"1\":{\"16\":3}}],[\"aimportselector\",{\"1\":{\"16\":3}}],[\"a5\",{\"1\":{\"347\":2}}],[\"a0\",{\"1\":{\"347\":2}}],[\"a4\",{\"1\":{\"301\":1}}],[\"await\",{\"1\":{\"301\":16,\"302\":2,\"303\":11,\"425\":1,\"429\":2,\"431\":5,\"470\":1,\"492\":1}}],[\"abstractunsafe\",{\"1\":{\"495\":3,\"498\":2}}],[\"abstractchannel\",{\"1\":{\"495\":4,\"498\":3}}],[\"abstractchannelhandlercontext\",{\"1\":{\"418\":2}}],[\"abstractbootstrap\",{\"1\":{\"495\":4}}],[\"abstractniomessagechannel\",{\"1\":{\"497\":1,\"498\":1}}],[\"abstractniounsafe\",{\"1\":{\"480\":1}}],[\"abstractniochannel\",{\"1\":{\"480\":2,\"495\":1,\"497\":2,\"498\":1}}],[\"abstractniobytechannel\",{\"1\":{\"441\":1,\"497\":1,\"499\":1}}],[\"abstract\",{\"1\":{\"441\":1,\"478\":3,\"488\":1}}],[\"abstractfuture\",{\"1\":{\"428\":2}}],[\"abstractdispatcherservletinitializer\",{\"1\":{\"267\":1}}],[\"abcdef\",{\"1\":{\"455\":2}}],[\"abc\",{\"1\":{\"119\":1,\"455\":2}}],[\"aop\",{\"0\":{\"261\":1},\"1\":{\"262\":1,\"264\":1}}],[\"aof持久化策略的配置\",{\"1\":{\"160\":1}}],[\"aof\",{\"0\":{\"160\":1},\"1\":{\"160\":6}}],[\"affected\",{\"1\":{\"245\":1}}],[\"aftercompletion\",{\"1\":{\"284\":2}}],[\"afterthrowing\",{\"1\":{\"264\":1}}],[\"afterreturning\",{\"1\":{\"262\":1,\"264\":2}}],[\"after=2018\",{\"1\":{\"178\":1}}],[\"after\",{\"1\":{\"163\":1,\"368\":1,\"369\":1}}],[\"afterpropertiesset\",{\"1\":{\"155\":1}}],[\"atomicboolean\",{\"1\":{\"470\":2}}],[\"atomicinteger\",{\"1\":{\"364\":6,\"388\":2}}],[\"atomic\",{\"1\":{\"364\":2}}],[\"at\",{\"1\":{\"316\":1,\"428\":8,\"431\":20,\"441\":1}}],[\"atx\",{\"1\":{\"254\":2}}],[\"atguigu\",{\"1\":{\"244\":1}}],[\"attr\",{\"1\":{\"495\":1,\"498\":1}}],[\"attributekey<object>\",{\"1\":{\"495\":2,\"498\":1}}],[\"attributes\",{\"1\":{\"16\":4}}],[\"attrs0\",{\"1\":{\"495\":1}}],[\"attrs\",{\"1\":{\"364\":8,\"495\":3}}],[\"attempts\",{\"1\":{\"130\":1,\"140\":1}}],[\"attachment\",{\"1\":{\"320\":1,\"382\":2,\"385\":1,\"399\":2,\"401\":13,\"495\":2}}],[\"attach\",{\"1\":{\"65\":1,\"382\":1,\"385\":2}}],[\"assert\",{\"1\":{\"496\":1,\"498\":1}}],[\"asserteventloop\",{\"1\":{\"495\":1}}],[\"assets\",{\"1\":{\"455\":2,\"497\":2}}],[\"asynchronous\",{\"1\":{\"404\":1}}],[\"asynchronoussocketchannel\",{\"1\":{\"401\":6}}],[\"asynchronousserversocketchannel\",{\"1\":{\"401\":4}}],[\"asynchronousfilechannel\",{\"1\":{\"399\":3}}],[\"async\",{\"1\":{\"301\":4,\"303\":2}}],[\"aspect\",{\"1\":{\"262\":1}}],[\"ascii\",{\"1\":{\"341\":2}}],[\"asc\",{\"1\":{\"230\":2}}],[\"as\",{\"1\":{\"226\":1,\"238\":3,\"239\":1,\"301\":1}}],[\"aslist\",{\"1\":{\"213\":2,\"470\":1}}],[\"asian库中的中文字体\",{\"1\":{\"320\":1}}],[\"asianfontprovider\",{\"1\":{\"319\":1}}],[\"asian<\",{\"1\":{\"318\":1}}],[\"asia\",{\"1\":{\"178\":1}}],[\"asg\",{\"1\":{\"120\":1}}],[\"america\",{\"1\":{\"178\":1}}],[\"amqp<\",{\"1\":{\"121\":1}}],[\"amqp\",{\"1\":{\"108\":1,\"111\":1,\"114\":1,\"118\":2,\"120\":1,\"141\":7}}],[\"amount\",{\"1\":{\"99\":1}}],[\"aes256+eecdh\",{\"1\":{\"90\":1}}],[\"aes128+eecdh\",{\"1\":{\"90\":1}}],[\"aes128\",{\"1\":{\"90\":1}}],[\"aaaaaaaaa\",{\"1\":{\"460\":1}}],[\"aaa\",{\"1\":{\"68\":3,\"69\":5,\"120\":1,\"463\":2}}],[\"aautoconfiguration\",{\"1\":{\"17\":1}}],[\"against\",{\"1\":{\"495\":1}}],[\"agv\",{\"1\":{\"228\":1}}],[\"agsdga\",{\"1\":{\"120\":1}}],[\"ag\",{\"1\":{\"62\":1}}],[\"age=31536000\",{\"1\":{\"90\":1}}],[\"agent\",{\"1\":{\"90\":1}}],[\"age\",{\"1\":{\"37\":9,\"100\":1,\"153\":4,\"201\":6,\"202\":6,\"203\":5,\"204\":2,\"205\":2,\"206\":3,\"228\":3,\"229\":1,\"230\":1,\"235\":2}}],[\"auther\",{\"1\":{\"198\":2}}],[\"authglobalfilter\",{\"1\":{\"182\":1}}],[\"authproperties\",{\"1\":{\"182\":4}}],[\"auth\",{\"1\":{\"163\":2}}],[\"authorization\",{\"1\":{\"182\":5,\"279\":1}}],[\"author\",{\"1\":{\"52\":3,\"182\":1,\"209\":12,\"319\":1}}],[\"autoreconnect=true\",{\"1\":{\"167\":1}}],[\"auto\",{\"1\":{\"90\":2,\"139\":2,\"160\":2,\"187\":1,\"215\":1,\"497\":2}}],[\"autowired\",{\"1\":{\"34\":2,\"36\":1,\"41\":1,\"122\":1,\"156\":1,\"219\":1,\"260\":1,\"285\":1,\"293\":1}}],[\"autoconfigureorder\",{\"1\":{\"24\":1}}],[\"autoconfigureafter\",{\"1\":{\"24\":1}}],[\"autoconfigurebefore\",{\"1\":{\"24\":1}}],[\"autoconfigure\",{\"1\":{\"17\":2}}],[\"akgit\",{\"1\":{\"51\":2}}],[\"ah\",{\"1\":{\"47\":1}}],[\"algorithm=json\",{\"1\":{\"478\":1,\"488\":1}}],[\"algorithm\",{\"1\":{\"478\":9}}],[\"alert\",{\"1\":{\"239\":1}}],[\"alter\",{\"1\":{\"234\":1}}],[\"align\",{\"1\":{\"321\":1,\"323\":3}}],[\"ali\",{\"1\":{\"238\":1,\"406\":1}}],[\"alias\",{\"1\":{\"197\":5}}],[\"alibaba\",{\"1\":{\"168\":2,\"169\":2,\"176\":2,\"187\":2,\"190\":2,\"205\":1}}],[\"aliyuncs\",{\"1\":{\"6\":1}}],[\"aliyun\",{\"0\":{\"3\":1,\"4\":1},\"1\":{\"74\":1}}],[\"all<\",{\"1\":{\"409\":1}}],[\"allochandle\",{\"1\":{\"498\":5,\"499\":10}}],[\"alloc\",{\"1\":{\"449\":2,\"453\":1,\"454\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"463\":2,\"467\":1,\"478\":1,\"485\":1}}],[\"allocator\",{\"0\":{\"485\":1,\"486\":1},\"1\":{\"436\":1,\"486\":1,\"499\":4}}],[\"allocatedirect\",{\"1\":{\"397\":1}}],[\"allocate\",{\"1\":{\"338\":1,\"343\":2,\"349\":3,\"350\":2,\"351\":2,\"368\":1,\"369\":1,\"378\":1,\"382\":3,\"385\":1,\"388\":1,\"390\":1,\"397\":1,\"399\":1,\"401\":2,\"499\":1}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"293\":1}}],[\"allargsconstructor\",{\"1\":{\"100\":1}}],[\"all\",{\"1\":{\"99\":1,\"155\":1,\"235\":1,\"341\":1}}],[\"all查询所有\",{\"1\":{\"99\":1}}],[\"allerrors\",{\"1\":{\"37\":2}}],[\"always\",{\"1\":{\"90\":1,\"160\":1}}],[\"admin\",{\"1\":{\"119\":5}}],[\"administrator\",{\"1\":{\"34\":2}}],[\"adress\",{\"1\":{\"37\":1}}],[\"addtaskwakesup\",{\"1\":{\"496\":1}}],[\"addtask\",{\"1\":{\"496\":1}}],[\"addcomponents\",{\"1\":{\"445\":1}}],[\"addcell\",{\"1\":{\"323\":6}}],[\"addlinstener\",{\"1\":{\"425\":1}}],[\"addlistener\",{\"1\":{\"421\":1,\"422\":1,\"423\":1,\"427\":1,\"430\":1,\"432\":1,\"449\":1,\"490\":1,\"492\":2,\"495\":2,\"498\":1}}],[\"addlast\",{\"1\":{\"410\":2,\"411\":1,\"417\":4,\"422\":4,\"423\":2,\"432\":9,\"449\":3,\"453\":3,\"457\":2,\"458\":3,\"459\":3,\"460\":3,\"463\":2,\"464\":4,\"470\":8,\"475\":4,\"488\":8,\"490\":4,\"492\":4,\"495\":3,\"498\":1}}],[\"addpathpatterns\",{\"1\":{\"280\":1,\"285\":1}}],[\"addargumentresolvers\",{\"1\":{\"280\":1}}],[\"addattachment\",{\"1\":{\"34\":1}}],[\"addinterceptor\",{\"1\":{\"280\":1,\"285\":1}}],[\"addinterceptors\",{\"1\":{\"280\":2,\"285\":1}}],[\"addinnerinterceptor\",{\"1\":{\"217\":1}}],[\"addinline\",{\"1\":{\"34\":1}}],[\"addr\",{\"1\":{\"90\":1,\"168\":1,\"169\":1,\"176\":1,\"187\":1}}],[\"address\",{\"1\":{\"37\":7,\"100\":1,\"176\":1,\"382\":1,\"390\":2}}],[\"addresourcelocations\",{\"1\":{\"26\":1}}],[\"addresourcehandler\",{\"1\":{\"26\":1}}],[\"addresourcehandlers\",{\"1\":{\"26\":1}}],[\"adduser\",{\"1\":{\"37\":2,\"219\":1}}],[\"add\",{\"1\":{\"7\":1,\"37\":1,\"48\":2,\"50\":1,\"51\":1,\"90\":1,\"232\":3,\"234\":1,\"280\":1,\"288\":3,\"299\":1,\"300\":1,\"305\":2,\"321\":1,\"322\":10,\"323\":1,\"324\":1,\"368\":1,\"369\":1,\"388\":1,\"466\":1,\"467\":2,\"470\":1,\"478\":2,\"495\":1}}],[\"apr\",{\"1\":{\"481\":4}}],[\"aproperties\",{\"1\":{\"18\":3}}],[\"appspot\",{\"1\":{\"297\":1}}],[\"appendhexdumprowprefix\",{\"1\":{\"341\":3}}],[\"appendprettyhexdump\",{\"1\":{\"341\":3,\"434\":1}}],[\"appendfsync\",{\"1\":{\"160\":3}}],[\"appendfilename\",{\"1\":{\"160\":2}}],[\"appendonly\",{\"1\":{\"160\":2}}],[\"append\",{\"1\":{\"153\":1,\"160\":1,\"341\":21,\"385\":1,\"434\":7}}],[\"apply\",{\"1\":{\"137\":2,\"185\":1}}],[\"applicationcontext\",{\"1\":{\"254\":3}}],[\"application\",{\"1\":{\"34\":1,\"90\":5,\"168\":1,\"169\":1,\"176\":1,\"187\":1,\"320\":1,\"404\":1,\"478\":1,\"488\":2}}],[\"apt\",{\"1\":{\"151\":2,\"305\":1}}],[\"apache\",{\"1\":{\"79\":1,\"85\":2,\"182\":1,\"407\":1}}],[\"api\",{\"0\":{\"296\":1},\"1\":{\"185\":1,\"296\":1,\"299\":1,\"301\":1,\"302\":1,\"392\":2,\"406\":1,\"407\":3}}],[\"apifox\",{\"1\":{\"94\":1}}],[\"apioperation\",{\"1\":{\"43\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"apis\",{\"1\":{\"43\":1}}],[\"apiinfobuilder\",{\"1\":{\"43\":1}}],[\"apiinfo\",{\"1\":{\"43\":4}}],[\"api<\",{\"1\":{\"27\":1,\"267\":1}}],[\"a的另一个扩展类\",{\"1\":{\"22\":1}}],[\"a1\",{\"1\":{\"22\":5}}],[\"a需要依赖b实例\",{\"1\":{\"21\":1}}],[\"arr\",{\"1\":{\"381\":3}}],[\"arraylist\",{\"1\":{\"498\":1}}],[\"arraylist<>\",{\"1\":{\"7\":1,\"37\":1,\"368\":1,\"369\":1}}],[\"arraylist<string>\",{\"1\":{\"7\":1,\"37\":1}}],[\"array>\",{\"1\":{\"259\":1}}],[\"arrays\",{\"1\":{\"213\":2,\"265\":1,\"470\":1}}],[\"array传递多个参数\",{\"1\":{\"206\":1}}],[\"array\",{\"0\":{\"206\":1},\"1\":{\"383\":1,\"478\":3}}],[\"are\",{\"1\":{\"351\":3}}],[\"arki+pg956fgx9vyp09p9a==\",{\"1\":{\"293\":1}}],[\"around\",{\"1\":{\"264\":1,\"265\":1}}],[\"arg\",{\"1\":{\"258\":3}}],[\"arg0\",{\"1\":{\"201\":1}}],[\"arg1\",{\"1\":{\"201\":1}}],[\"argumentresolvers\",{\"1\":{\"280\":2}}],[\"argument\",{\"1\":{\"136\":1}}],[\"arguments\",{\"1\":{\"136\":1}}],[\"args\",{\"1\":{\"15\":2,\"16\":2,\"111\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":2,\"120\":2,\"146\":3,\"171\":2,\"185\":2,\"254\":1,\"265\":4,\"303\":1,\"328\":2,\"338\":1,\"351\":1,\"362\":1,\"364\":1,\"376\":2,\"378\":1,\"381\":2,\"382\":1,\"385\":2,\"388\":1,\"390\":2,\"399\":1,\"401\":1,\"417\":1,\"423\":1,\"450\":2,\"453\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"470\":2,\"480\":1,\"481\":2,\"488\":2,\"490\":1,\"492\":3}}],[\"artifactid\",{\"1\":{\"328\":4}}],[\"artifactid>\",{\"1\":{\"19\":1,\"27\":1,\"28\":1,\"34\":1,\"37\":1,\"41\":1,\"43\":1,\"78\":1,\"79\":3,\"85\":4,\"100\":1,\"121\":1,\"168\":1,\"169\":1,\"171\":2,\"172\":1,\"176\":3,\"187\":2,\"190\":1,\"195\":1,\"247\":1,\"254\":1,\"267\":2,\"293\":1,\"318\":3,\"409\":1}}],[\"artifact\",{\"1\":{\"195\":1}}],[\"articlemapper\",{\"1\":{\"41\":2,\"218\":2}}],[\"article\",{\"1\":{\"41\":6,\"52\":1,\"198\":1,\"218\":1}}],[\"a实例就能被注入\",{\"1\":{\"13\":1}}],[\"a\",{\"1\":{\"11\":2,\"13\":3,\"16\":2,\"18\":7,\"20\":6,\"21\":6,\"22\":8,\"48\":1,\"65\":1,\"257\":2,\"258\":5,\"288\":3,\"313\":1,\"338\":1,\"341\":1,\"347\":2,\"349\":7,\"350\":2,\"363\":3,\"364\":1,\"378\":2,\"385\":1,\"390\":1,\"399\":1,\"417\":6,\"438\":2,\"439\":1,\"440\":3,\"442\":6,\"445\":4,\"446\":2,\"450\":1,\"453\":2,\"454\":2,\"458\":12,\"459\":12,\"460\":12}}],[\"antpathmatcher\",{\"1\":{\"182\":5}}],[\"android\",{\"1\":{\"436\":2}}],[\"and\",{\"1\":{\"144\":2,\"201\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"209\":10,\"213\":1,\"227\":2,\"288\":2,\"301\":1}}],[\"annotationconfigwebapplicationcontext\",{\"1\":{\"267\":2}}],[\"annotation\",{\"1\":{\"141\":1}}],[\"annotationmetadata\",{\"1\":{\"16\":3}}],[\"any\",{\"1\":{\"43\":1,\"155\":1}}],[\"an\",{\"1\":{\"7\":2,\"8\":2,\"404\":1,\"496\":1}}],[\"active\",{\"1\":{\"187\":1,\"188\":3,\"209\":2,\"417\":3,\"453\":1,\"454\":1,\"458\":2,\"459\":1,\"460\":2,\"463\":1,\"470\":1,\"495\":2,\"498\":1}}],[\"actions\",{\"1\":{\"288\":2,\"305\":2}}],[\"action=\",{\"1\":{\"27\":1}}],[\"action\",{\"0\":{\"288\":1,\"305\":1},\"1\":{\"5\":1,\"234\":1,\"305\":2}}],[\"acknowledge\",{\"1\":{\"139\":2}}],[\"acknowledgement\",{\"1\":{\"139\":1}}],[\"ack\",{\"1\":{\"139\":1,\"455\":4,\"481\":3}}],[\"ack是投递成功\",{\"1\":{\"131\":1}}],[\"accpet\",{\"1\":{\"401\":1,\"481\":2}}],[\"account\",{\"1\":{\"40\":11,\"213\":3,\"279\":1,\"280\":1,\"281\":1,\"282\":3}}],[\"acceptor\",{\"1\":{\"495\":1}}],[\"accepthandler\",{\"1\":{\"401\":3}}],[\"accept\",{\"0\":{\"376\":1,\"498\":1},\"1\":{\"368\":3,\"369\":4,\"373\":1,\"375\":1,\"376\":2,\"378\":2,\"379\":1,\"381\":1,\"382\":5,\"385\":2,\"388\":3,\"401\":4,\"450\":1,\"480\":1,\"481\":6,\"495\":3,\"497\":1,\"498\":5}}],[\"accept=\",{\"1\":{\"37\":1}}],[\"access\",{\"1\":{\"88\":2,\"90\":2,\"396\":1}}],[\"accesskeysecert\",{\"1\":{\"7\":1,\"8\":1}}],[\"accesskeysecret\",{\"1\":{\"6\":2}}],[\"accesskeyid\",{\"1\":{\"6\":2,\"7\":1,\"8\":1}}],[\"accesskey进行操作\",{\"1\":{\"5\":1}}],[\"aconfiguration\",{\"1\":{\"13\":1,\"15\":1,\"16\":4,\"17\":2,\"18\":1,\"20\":2,\"21\":2,\"22\":4}}],[\"警告\",{\"1\":{\"5\":1,\"201\":1}}],[\"黑马\",{\"0\":{\"2\":1}}]],\"serializationVersion\":2}";